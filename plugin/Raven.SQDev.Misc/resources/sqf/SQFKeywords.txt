<KeywordList>


	<Keyword>
		isTutHintsEnabled
	</Keyword>
	<Description>
		Returns the status of TUTORIAL HINTS setting in UI (OPTIONS GAME GENERAL TUTORIAL HINTS).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isTutHintsEnabled
	</WikiPage>
	<Syntax>
		isTutHintsEnabled
	</Syntax>
	<RawSyntax>
		isTutHintsEnabled
	</RawSyntax>
	<Example>
		$Code$hint str isTutHintsEnabled ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		createGroup
	</Keyword>
	<Description>
		Creates a new Group for the given Side. An HQ (center) for that side must already be in the Mission.sqm or have been initialized with createCenter. For the available sides see Side.
	NOTES
	The default limit of groups created per side was 144. Since Arma 3 v1.67 it is increased to 288.
	Since Arma 3 v 1.67 it is possible to mark created group for automatic deletion when the group becomes empty (see Alt Syntax). When group is set to be automatically deleted when empty, when group becomes empty it may take up to a minute for it to get deleted.
	In Arma 3 when last unit leaves its group, the group usually gets immediately auto deleted, regardless of whether or not if it was set for auto deletion manually
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/createGroup
	</WikiPage>
	<Syntax>
		createGroup Side
	</NextSyntax>
		createGroup Array
	</Syntax>
	<RawSyntax>
		createGroup side
	</NextRawSyntax>
		createGroup [side, deleteWhenEmpty]
	</RawSyntax>
	<Example>
		$Code$_group = createGroup east$/Code$
	</NextExample>
		$Code$_group = createGroup [ east, true ];$/Code$
	</Example>
	<Locality>
		undefined / global
	</Locality>
	<Note>
		(December 15, 2006)
	The group limit is 144 groups groups per side. If you attempt to create a group, and there is no room for another, it simply doesn't create, and it doesn't error.
	</NextNote>
		(July 10,2007)
	In Armed Assault, empty groups are not automatically deleted - if you created 144 groups, you will not be able to create new group even if all units in all those groups died, because all the 144 groups still exists - you will have to delete some groups manually.
	</NextNote>
		(January 04, 2011)
	A group created with createGroup will get a waypoint at [0,0,0]. When you use createUnit to fill it with units, it will get an additional waypoint at the position the first unit is created. This new waypoint will also be set as currentWaypoint. However keep these two waypoints in mind when you do some scripting involving this groups' waypoints.
	</Note>
	<ReturnValue>
		Group - Group
	</ReturnValue>

</NextListItem>

	<Keyword>
		lightDetachObject
	</Keyword>
	<Description>
		Detach light from object.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lightDetachObject
	</WikiPage>
	<Syntax>
		lightDetachObject Object
	</Syntax>
	<RawSyntax>
		lightDetachObject light
	</RawSyntax>
	<Example>
		$Code$LightDetachObject _light$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		assignedGunner
	</Keyword>
	<Description>
		Returns the soldier assigned to the given vehicle as a gunner.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/assignedGunner
	</WikiPage>
	<Syntax>
		assignedGunner Object
	</Syntax>
	<RawSyntax>
		assignedGunner vehicle
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Object
	</ReturnValue>

</NextListItem>

	<Keyword>
		menuCollapse
	</Keyword>
	<Description>
		Collapses item on given path and all its childs.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/menuCollapse
	</WikiPage>
	<Syntax>
		menuCollapse Array
	</Syntax>
	<RawSyntax>
		menuCollapse [idc, path]
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		removeSwitchableUnit
	</Keyword>
	<Description>
		Remove a unit from the list of units available for Team Switch.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/removeSwitchableUnit
	</WikiPage>
	<Syntax>
		removeSwitchableUnit Object
	</Syntax>
	<RawSyntax>
		removeSwitchableUnit unitName
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		scriptName
	</Keyword>
	<Description>
		Assign a user friendly name to the VM script this command is executed from.
	Once name is assigned, it cannot be changed.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/scriptName
	</WikiPage>
	<Syntax>
		scriptName String
	</Syntax>
	<RawSyntax>
		scriptName name
	</RawSyntax>
	<Example>
		$Code$scriptName "leetScript.sqf";$/Code$
	</NextExample>
		$Code$scriptName format ["%1ARTY\data\scripts\ARTY_sadarmDeploy.sqf (_this: %1)",_this];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(17:39, 13 June 2009 (CEST))
	scriptName is good when you want to load the handle of some spawn or call with some name:
	on top of leetscript.sqf
	$Code$
	scriptName "LEETSCRIPT";
	GLOBAL_SCR_NAME = [] spawn "leetscript.sqf";
	hint format ["%1",GLOBAL_SCR_NAME];
	//display "LEETSCRIPT"$/Code$
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		addGroupIcon
	</Keyword>
	<Description>
		Add icon to a group. Returns icon ID
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/addGroupIcon
	</WikiPage>
	<Syntax>
		Group addGroupIcon Array
	</Syntax>
	<RawSyntax>
		group addGroupIcon properties
	</RawSyntax>
	<Example>
		$Code$groupName addGroupIcon ["b_inf",[offsetX,offsetY]]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		setImportance
	</Keyword>
	<Description>
		Sets the importance value of location.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setImportance
	</WikiPage>
	<Syntax>
		Location setImportance Number
	</Syntax>
	<RawSyntax>
		location setImportance value
	</RawSyntax>
	<Example>
		$Code$myLocation setImportance 2$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		removeItem
	</Keyword>
	<Description>
		Removes item from the inventory.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/removeItem
	</WikiPage>
	<Syntax>
		Object removeItem String
	</Syntax>
	<RawSyntax>
		unit removeItem item
	</RawSyntax>
	<Example>
		$Code$bluforUnit unassignItem "NVGoggles";
	bluforUnit removeItem "NVGoggles";
	opforUnit unassignItem "NVGoggles_OPFOR";
	opforUnit removeItem "NVGoggles_OPFOR";
	independentUnit unassignItem "NVGoggles_INDEP";
	independentUnit removeItem "NVGoggles_INDEP";$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setSimpleTaskDescription
	</Keyword>
	<Description>
		Attach descriptions to the simple task.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setSimpleTaskDescription
	</WikiPage>
	<Syntax>
		Task setSimpleTaskDescription Array
	</Syntax>
	<RawSyntax>
		task setSimpleTaskDescription [description, descriptionShort, descriptionHUD]
	</RawSyntax>
	<Example>
		$Code$mytask setSimpleTaskDescription ["Today you have to kill Spongebob","Kill Spongebob","Here he is!"];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		simulInClouds
	</Keyword>
	<Description>
		Returns if given position is in clouds.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/simulInClouds
	</WikiPage>
	<Syntax>
		simulInClouds Position
	</Syntax>
	<RawSyntax>
		simulInClouds pos
	</RawSyntax>
	<Example>
		$Code$simulInClouds (getPos player)$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		itemCargo
	</Keyword>
	<Description>
		Get array with items from ammo box (or any general weapon holder container).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/itemCargo
	</WikiPage>
	<Syntax>
		itemCargo Object
	</Syntax>
	<RawSyntax>
		itemCargo box
	</RawSyntax>
	<Example>
		$Code$hint str itemCargo vestContainer player ;$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		preloadObject
	</Keyword>
	<Description>
		Preloads all textures, materials and proxies needed to render given object. Works with both class names and objects. Returns true once all data is loaded and ready.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/preloadObject
	</WikiPage>
	<Syntax>
		Number preloadObject Object
	</NextSyntax>
		Number preloadObject String
	</Syntax>
	<RawSyntax>
		distance preloadObject object
	</NextRawSyntax>
		distance preloadObject classname
	</RawSyntax>
	<Example>
		$Code$[] spawn
	{
	waitUntil {10 preloadObject "SoldierW"};
	hint "Preload finished";
	};$/Code$
	</NextExample>
		$Code$[] spawn
	{
	waitUntil {10 preloadObject leader player };
	hint "Preload finished";
	};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean - Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		vehicleChat
	</Keyword>
	<Description>
		Types text to the vehicle radio channel. The text will be visible only on the PC where command was executed. If you need the message to show on all computers, you have to execute it globally (see remoteExec )
	Note: Object parameter must be a vehicle, not a player.
	Note: If you are in a crew seat (i.e. driver, gunner or commander), then it will include that role in the chat name output (Eg: Driver (you_name): "Message").
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/vehicleChat
	</WikiPage>
	<Syntax>
		Object vehicleChat String
	</Syntax>
	<RawSyntax>
		vehicleName vehicleChat chatText
	</RawSyntax>
	<Example>
		$Code$vehicle player vehicleChat "Show this text";$/Code$
	</NextExample>
		$Code$driver vehicle player sideChat "sideChat";
	driver vehicle player globalChat "globalChat";
	driver vehicle player groupChat "groupChat";
	vehicle player vehicleChat "vehicleChat";
	driver vehicle player commandChat "commandChat";
	driver vehicle player customChat [1, "customChat"];
	systemChat "systemChat";$/Code$
	</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		deleteStatus
	</Keyword>
	<Description>
		Delete a status (created with saveStatus ) from the campaign's progress file.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/deleteStatus
	</WikiPage>
	<Syntax>
		deleteStatus String
	</Syntax>
	<RawSyntax>
		deleteStatus statusName
	</RawSyntax>
	<Example>
		$Code$? deleteStatus "playerStatus" : "saved status gone from campaign"$/Code$
	</Example>
	<Locality>
		undefined / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		setTargetAge
	</Keyword>
	<Description>
		Sets how the target is known to the other centers. They behave like the target was seen age seconds ago.
	Possible age values are: "ACTUAL", "5 MIN", "10 MIN", "15 MIN", "30 MIN", "60 MIN", "120 MIN" or "UNKNOWN".
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setTargetAge
	</WikiPage>
	<Syntax>
		Object setTargetAge String
	</Syntax>
	<RawSyntax>
		object setTargetAge age
	</RawSyntax>
	<Example>
		$Code$player setTargetAge "10 MIN"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		removeSimpleTask
	</Keyword>
	<Description>
		Remove a simple task from the list of simple tasks.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/removeSimpleTask
	</WikiPage>
	<Syntax>
		Object removeSimpleTask Task
	</Syntax>
	<RawSyntax>
		person removeSimpleTask task
	</RawSyntax>
	<Example>
		$Code$player removeSimpleTask _tskKillSpongebob$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		!
	</Keyword>
	<Description>
		Negates the given Boolean value. Synonym for 'not'.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/!_a
	</WikiPage>
	<Syntax>
		! Boolean
	</Syntax>
	<RawSyntax>
		</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		addScoreSide
	</Keyword>
	<Description>
		Adds side score. This is shown in the MP score tab as the total score. MP Only. Server execution only.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/addScoreSide
	</WikiPage>
	<Syntax>
		Side addScoreSide Number
	</Syntax>
	<RawSyntax>
		side addScoreSide value
	</RawSyntax>
	<Example>
		$Code$west addScoreSide 10;$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
		This scripting command must be executed on the server to work properly in multiplayer
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		%
	</Keyword>
	<Description>
		Returns the remainder of a corresponding division
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/a_%25_b
	</WikiPage>
	<Syntax>
		Number % Number
	</Syntax>
	<RawSyntax>
		</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		showWatch
	</Keyword>
	<Description>
		Shows or hides the watch on the map screen, if enabled for the mission and you possess the item. (default true )
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/showWatch
	</WikiPage>
	<Syntax>
		showWatch Boolean
	</Syntax>
	<RawSyntax>
		showWatch show
	</RawSyntax>
	<Example>
		$Code$showWatch false ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(16 Aug, 2009)
	In Arma 2, the Watch is now an inventory item. Class path is CfgWeapons- ItemWatch. Use the commands addWeapon and removeWeapon to add or remove it from a unit's inventory. (example: player addweapon "ItemWatch")
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		curatorCameraArea
	</Keyword>
	<Description>
		Returns all curator camera areas.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/curatorCameraArea
	</WikiPage>
	<Syntax>
		curatorCameraArea Object
	</Syntax>
	<RawSyntax>
		curatorCameraArea curatorObj
	</RawSyntax>
	<Example>
		$Code$_camArea = curatorCameraArea myCurator;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		setCuratorWaypointCost
	</Keyword>
	<Description>
		Sets cost of waypoints (used for placing, editing and deleting).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setCuratorWaypointCost
	</WikiPage>
	<Syntax>
		Object setCuratorWaypointCost Number
	</Syntax>
	<RawSyntax>
		curatorObj setCuratorWaypointCost cost
	</RawSyntax>
	<Example>
		$Code$myCUrator setCuratorWaypointCost 0.1;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		This scripting command must be executed on the server to work properly in multiplayer
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		unitAimPosition
	</Keyword>
	<Description>
		Returns the position on the unit other units can aim at. Same as aimPos only returns position in PositionAGL format and has render scope alternative unitAimPositionVisual.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/unitAimPosition
	</WikiPage>
	<Syntax>
		unitAimPosition Object
	</Syntax>
	<RawSyntax>
		unitAimPosition unit
	</RawSyntax>
	<Example>
		$Code$unitAimPosition player ;$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		addItemCargoGlobal
	</Keyword>
	<Description>
		Creates new items and stores them in the given container. Works with items, weapons and magazines.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/addItemCargoGlobal
	</WikiPage>
	<Syntax>
		Object addItemCargoGlobal Array
	</Syntax>
	<RawSyntax>
		box addItemCargoGlobal [item, count]
	</RawSyntax>
	<Example>
		$Code$supplyBox addItemCargoGlobal ["optic_ARCO2", 10];$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlModelScale
	</Keyword>
	<Description>
		Returns 3D control model scale
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlModelScale
	</WikiPage>
	<Syntax>
		ctrlModelScale Control
	</Syntax>
	<RawSyntax>
		ctrlModelScale control
	</RawSyntax>
	<Example>
		$Code$_currentScale = ctrlModelScale _ctrl3D;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		*
	</Keyword>
	<Description>
		Multiplies the given numbers.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/a_*_b
	</WikiPage>
	<Syntax>
		Number * Number
	</Syntax>
	<RawSyntax>
		</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		+
	</Keyword>
	<Description>
		Adds the given two values together or if used only with one argument it returns a copy of that argument
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/valuea_plus_valueb
	</WikiPage>
	<Syntax>
		Number + Number
	</NextSyntax>
		String + String
	</NextSyntax>
		Array + Array
	</NextSyntax>
		+ Number
	</NextSyntax>
		+ Array
	</NextSyntax>
		+ String
	</Syntax>
	<RawSyntax>
		</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number - String - Array - Number - Array - String
	</ReturnValue>

</NextListItem>

	<Keyword>
		-
	</Keyword>
	<Description>
		Subtracts the right value from the left one. Both need to be of the same type, both Numbers or both Arrays. In Arma 3 it is possible to subtract nested arrays.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/a_-_b
	</WikiPage>
	<Syntax>
		Number - Number
	</NextSyntax>
		Array - Array
	</NextSyntax>
		- Number
	</Syntax>
	<RawSyntax>
		</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number - Array - Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		isSprintAllowed
	</Keyword>
	<Description>
		Returns true if player is allowed to sprint
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isSprintAllowed
	</WikiPage>
	<Syntax>
		isSprintAllowed Object
	</Syntax>
	<RawSyntax>
		isSprintAllowed unit
	</RawSyntax>
	<Example>
		$Code$isSprintAllowed player;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		/
	</Keyword>
	<Description>
		Divides the left number by the right one. Division by 0 throws "Division by zero" error, however script doesn't stop and the result of such division is assumed to be 0. If used with config and String as arguments it returns the subentry of the given config entry with the given name.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/a_/_b
	</WikiPage>
	<Syntax>
		Number / Number
	</NextSyntax>
		Config / String
	</Syntax>
	<RawSyntax>
		</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number - Config
	</ReturnValue>

</NextListItem>

	<Keyword>
		removeItemFromVest
	</Keyword>
	<Description>
		Removes item from soldier's vest.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/removeItemFromVest
	</WikiPage>
	<Syntax>
		Object removeItemFromVest String
	</Syntax>
	<RawSyntax>
		unit removeItemFromVest item
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		keyImage
	</Keyword>
	<Description>
		Returns a structured text, containing an image or name (if no image is found) of the button, on the keyboard, mouse or joystick, with the given code.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/keyImage
	</WikiPage>
	<Syntax>
		keyImage Number
	</Syntax>
	<RawSyntax>
		keyImage dikCode
	</RawSyntax>
	<Example>
		$Code$_name = keyImage 28; //result is "Enter"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Structured_Text
	</ReturnValue>

</NextListItem>

	<Keyword>
		size
	</Keyword>
	<Description>
		Returns a location's size.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/size
	</WikiPage>
	<Syntax>
		size Location
	</Syntax>
	<RawSyntax>
		size location
	</RawSyntax>
	<Example>
		$Code$_locSize = size myLocation$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		allowFleeing
	</Keyword>
	<Description>
		Sets the cowardice level (the lack of courage or bravery) of a group or unit.
	The more cowardice a Group or Object has, the sooner it will start fleeing.
	0 means maximum courage, while 1 means always fleeing.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/allowFleeing
	</WikiPage>
	<Syntax>
		Object/Group allowFleeing Number
	</Syntax>
	<RawSyntax>
		name allowFleeing cowardice
	</RawSyntax>
	<Example>
		$Code$_group1 allowFleeing 0;$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		camPreloaded
	</Keyword>
	<Description>
		Checks whether the camera has finished preloading.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/camPreloaded
	</WikiPage>
	<Syntax>
		camPreloaded Object
	</Syntax>
	<RawSyntax>
		camPreloaded camera
	</RawSyntax>
	<Example>
		$Code$?(camPreloaded _camera) : exit$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		:
	</Keyword>
	<Description>
		Helper construct used in a switch-construct
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/a:b
	</WikiPage>
	<Syntax>
		Switch_Type : Code
	</Syntax>
	<RawSyntax>
		</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		customRadio
	</Keyword>
	<Description>
		Sends the message to the custom radio channel. The message is defined in the description.ext file or radio protocol.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/customRadio
	</WikiPage>
	<Syntax>
		Object customRadio Array
	</Syntax>
	<RawSyntax>
		unit customRadio [channel, message]
	</RawSyntax>
	<Example>
		$Code$_soldierOne customRadio [1, "WordEnemy"];$/Code$
	</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
		(December 3, 2016)
	To transmit user custom sounds (see Multiplayer_Custom_Sounds_Tutorial ), prefix the full filename including file extension with #. For example if there is a custom user sound file called MySound.ogg, to play it on the radio use:
	$Code$ player customRadio [1, "#MySound.ogg"];$/Code$
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		getMissionConfig
	</Keyword>
	<Description>
		Returns Config entry for the given scenario attribute from the 1st tier. The attribute can be config class or config property. If it is defined in multiple places, the command checks them in the following order:
	External Description.ext file
	Eden Editor scenario attribute
	So if attribute exists in both places, attribute from description.ext is used. Previously, scenario attributes were extracted from Description.ext using missionConfigFile. That still works, but it ignores attributes set directly in the editor and it should not be used anymore.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getMissionConfig
	</WikiPage>
	<Syntax>
		getMissionConfig String
	</Syntax>
	<RawSyntax>
		getMissionConfig attribute
	</RawSyntax>
	<Example>
		$Code$_header = getMissionConfig "Header"
	// Returns scenario header config. Replaces the previous approach which would scan only the external Description.ext file, but ignore the value set in the Eden Editor:_header = missionConfigFile "Header"; // Old approach$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Config
	</ReturnValue>

</NextListItem>

	<Keyword>
		setSoundEffect
	</Keyword>
	<Description>
		Defines the different sound effects.
	Sound - plays a 2D sound from CfgSounds
	Voice - plays a 3D sound from CfgSounds
	SoundEnv - plays an environmental sound from CfgEnvSounds
	SoundDet (only for triggers) - creates a dynamic sound object attached to a trigger defined in CfgSFX
	To stop any sound, deactivate the trigger (might take up to 0.5 sec to stop) or delete the trigger (immediate). Also use "$NONE$" to skip the sound (1st item), when there is none to be used (Example 3, 4, 5).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setSoundEffect
	</WikiPage>
	<Syntax>
		Object setSoundEffect Array
	</NextSyntax>
		Array setSoundEffect Array
	</Syntax>
	<RawSyntax>
		trigger setSoundEffect [sound, voice, soundEnv, soundDet]
	</NextRawSyntax>
		waypoint setSoundEffect [sound, voice, soundEnv, soundDet]
	</RawSyntax>
	<Example>
		$Code$_trigger setSoundEffect ["Alarm", "", "", ""];$/Code$
	</NextExample>
		$Code$[_group1,2] setSoundEffect ["Alarm", "", "", ""];$/Code$
	</NextExample>
		$Code$_trigger setSoundEffect ["$NONE$", "Alarm", "", ""];$/Code$
	</NextExample>
		$Code$_trigger setSoundEffect ["$NONE$", "", "BattlefieldFirefight1", ""];$/Code$
	</NextExample>
		$Code$_trigger setSoundEffect ["$NONE$", "", "", "Owl"];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(October 2, 2013)
	To avoid having to create a dummy sound definition, you can use $NONE$ instead.
	$Code$private "_trigger";
	_trigger = createTrigger ["EmptyDetector", position player];
	_trigger setTriggerStatements ["true", "", ""];
	_trigger setSoundEffect ["$NONE$", "", "BattlefieldFirefight1", ""];
	$/Code$
	</NextNote>
		(March 7, 2012)
	When using this function, I found that if the parameter sound was empty, then you would always get a 'Sound not found' error. The following code fixes this problem. You need to create a dummy sound. This is what example 3 is hinting towards.
	description.ext:
	$Code$class CfgSounds
	{
	sounds[] = {};
	class NoSound
	{
	name = "NoSound";
	sound[] = {"", 0, 1};
	titles[] = {};
	}; //Dummy sound needed for setSoundEffect command, due to stupid bug in engine.
	};
	$/Code$
	(code sample above written by 'CarlGustaffa' on the Bohemia Interactive forums.)
	script.sqf:
	$Code$_trigger = createTrigger[ "EmptyDetector", _position ];
	_trigger setTriggerStatements [ "true", "", "" ];
	_trigger setSoundEffect[ "NoSound", "", "", "Wind2_EP1" ];
	$/Code$
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		<
	</Keyword>
	<Description>
		Checks if the left number is smaller than the right one
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/a_less_b
	</WikiPage>
	<Syntax>
		Number < Number
	</Syntax>
	<RawSyntax>
		</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		logNetworkTerminate
	</Keyword>
	<Description>
		Terminates a network log file started with logNetwork with the given handle
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/logNetworkTerminate
	</WikiPage>
	<Syntax>
		logNetworkTerminate Number
	</Syntax>
	<RawSyntax>
		logNetworkTerminate handle
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		>
	</Keyword>
	<Description>
		Checks if the left number is greater than the right one
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/a_greater_b
	</WikiPage>
	<Syntax>
		Number > Number
	</Syntax>
	<RawSyntax>
		</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		wind
	</Keyword>
	<Description>
		Returns the current wind vector (in m/s) as array [x, y, z].
	NOTE: the last value (z, "up-down") always returns 0 – wind being only horizontal.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/wind
	</WikiPage>
	<Syntax>
		wind
	</Syntax>
	<RawSyntax>
		wind
	</RawSyntax>
	<Example>
		$Code$_windArray = wind ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		In OFP 1.96, wind speed and direction are directly related to overcast.
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		createMissionDisplay
	</Keyword>
	<Description>
		Create single missions display as a child of given display. The mission dialog will be set to the directory given as an argument "root".
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/createMissionDisplay
	</WikiPage>
	<Syntax>
		Display createMissionDisplay String
	</Syntax>
	<RawSyntax>
		display createMissionDisplay string
	</RawSyntax>
	<Example>
		$Code$_ChildDisplay = _Rootdisplay createMissionDisplay "Tutorial";$/Code$
	</NextExample>
		$Code$// In Arma 3 this would create scenarios UI
	findDisplay 46 createMissionDisplay "";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Display
	</ReturnValue>

</NextListItem>

	<Keyword>
		camPrepareBank
	</Keyword>
	<Description>
		Prepares the camera bank angle.
	This command is non-functional !
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/camPrepareBank
	</WikiPage>
	<Syntax>
		Object camPrepareBank Number
	</Syntax>
	<RawSyntax>
		camera camPrepareBank bank
	</RawSyntax>
	<Example>
		$Code$_camera camPrepareBank -0.1$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		currentWaypoint
	</Keyword>
	<Description>
		Return the index of the current waypoint.
	To determine the validity of the index, compare it to the waypoints count.
	If all waypoints are 'completed', then the index is 1 greater than the last valid index.
	If there are no waypoints, then the index is 0.
	By default, a group has 1 waypoint at their starting position, which is considered completed and so the currentWaypoint is 1.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/currentWaypoint
	</WikiPage>
	<Syntax>
		currentWaypoint Group
	</Syntax>
	<RawSyntax>
		currentWaypoint groupName
	</RawSyntax>
	<Example>
		$Code$_index = currentWaypoint group player ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlMapMouseOver
	</Keyword>
	<Description>
		Returns description of map sign mouse cursor is over. Works with in-game map as well as 2D editor map in edit mode.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlMapMouseOver
	</WikiPage>
	<Syntax>
		ctrlMapMouseOver Control
	</Syntax>
	<RawSyntax>
		ctrlMapMouseOver control
	</RawSyntax>
	<Example>
		$Code$( uiNamespace getVariable "_map") ctrlMapCursor ["Track","HC_overFriendly"];
	_mouseover = if ( count ( ctrlMapMouseOver (uiNamespace getVariable "_map")) 0) then
	{
	ctrlMapMouseOver ( uiNamespace getVariable "_map")
	}
	else
	{
	[""]
	};
	if (_mouseover select 0 == "task" && str (_logic getVariable "onTaskAssigned") != str {}) then
	{
	//--- Task
	( uiNamespace getVariable "_map") ctrlMapCursor ["Track","HC_overMission"];
	}
	else
	{
	//--- Waypoint
	( uiNamespace getVariable "_map") ctrlMapCursor ["Track","HC_move"];
	};$/Code$
	</NextExample>
		$Code$onEachFrame { hintSilent str ctrlMapMouseOver ( findDisplay 12 displayCtrl 51)};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		airDensityRTD
	</Keyword>
	<Description>
		Returns air density in given altitude
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/airDensityRTD
	</WikiPage>
	<Syntax>
		airDensityRTD Number
	</Syntax>
	<RawSyntax>
		airDensityRTD altitude
	</RawSyntax>
	<Example>
		$Code$_density = airDensityRTD 0;//Returns 1.22406$/Code$
	</NextExample>
		$Code$_density = airDensityRTD 1000;//Returns 1.11096$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		independent
	</Keyword>
	<Description>
		Pre-defined variable for the independent side.
	Alias for resistance.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/independent
	</WikiPage>
	<Syntax>
		independent
	</Syntax>
	<RawSyntax>
		independent
	</RawSyntax>
	<Example>
		$Code$// SQF:
	if (( side _unit) == independent ) then {
	hint "This is a independent unit!";
	};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Side
	</ReturnValue>

</NextListItem>

	<Keyword>
		hcSetGroup
	</Keyword>
	<Description>
		Add group to unit's high command bar.
	Array parameters are group, group-name and team (teammain, teamred, teamgreen, teamblue, teamyellow).
	Group is the only necessary parameter.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/hcSetGroup
	</WikiPage>
	<Syntax>
		Object hcSetGroup Array
	</Syntax>
	<RawSyntax>
		unit hcSetGroup array
	</RawSyntax>
	<Example>
		$Code$unit hcSetGroup [group, "HQ", teamred];$/Code$
	</NextExample>
		$Code$player hcSetGroup [group];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		findCover
	</Keyword>
	<Description>
		Returns the object around where the unit finds cover. The minDist, visibilityPosition and ignoreObject parameters are optional. Command is not functional since Arma 2.
	This function is no longer available in ArmA 2.
	This function is no longer available in Arma 3.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/findCover
	</WikiPage>
	<Syntax>
		Object findCover Array
	</Syntax>
	<RawSyntax>
		object findCover [position, hidePosition, maxDist, minDist, visibilityPosition, ignoreObject]
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(July 4, 2015)
	An alternative function in Arma 3 might be BIS_fnc_findSafePos
	</Note>
	<ReturnValue>
		Object
	</ReturnValue>

</NextListItem>

	<Keyword>
		logNetwork
	</Keyword>
	<Description>
		Registers new log file recording a network traffic and returns handle of the log.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/logNetwork
	</WikiPage>
	<Syntax>
		logNetwork String
	</Syntax>
	<RawSyntax>
		logNetwork logFile
	</RawSyntax>
	<Example>
		$Code$_handle = logNetwork "myLog.txt";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(March 15, 2016)
	With his syntax i get an error... - logNetwork "networkLog.txt";
	$Code$ 5:37:06 Error in expression logNetwork "networkLog.txt";
	5:37:06 Error position: logNetwork "networkLog.txt";
	5:37:06 Error lognetwork: Typ Zeichenfolge(STRING), erwartet(except) Array
	$/Code$
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		hcGroupParams
	</Keyword>
	<Description>
		Returns parameters describing group in high command bar.
	Return value is [string, float[4]]
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/hcGroupParams
	</WikiPage>
	<Syntax>
		Object hcGroupParams Group
	</Syntax>
	<RawSyntax>
		unit hcGroupParams group
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		speedMode
	</Keyword>
	<Description>
		Returns speed mode of the group, which can be any of the following:
	"LIMITED"
	"NORMAL"
	"FULL"
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/speedMode
	</WikiPage>
	<Syntax>
		speedMode Object/Group
	</Syntax>
	<RawSyntax>
		speedMode groupName
	</RawSyntax>
	<Example>
		$Code$_grpspeed1 = speedMode grp1$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		isWeaponDeployed
	</Keyword>
	<Description>
		Returns true if weapon is currently deployed.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isWeaponDeployed
	</WikiPage>
	<Syntax>
		isWeaponDeployed Object
	</Syntax>
	<RawSyntax>
		isWeaponDeployed unit
	</RawSyntax>
	<Example>
		$Code$_dep = isWeaponDeployed player ;$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(July 1, 2015)
	You can force a unit out of bipod or resting with:
	$Code$_unit playMove "";$/Code$
	</NextNote>
		(March 4, 2017)
	playMove, as well as switchMove, appear to not work when forcing a player out of being deployed. A more reliable method is: $Code$_player setPos (_player modelToWorld [0,0,0]);$/Code$
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		leaveVehicle
	</Keyword>
	<Description>
		Ceases the using of the vehicle by a group and unassigns vehicle from the group. If the argument is a single unit, the vehicle will be unassigned from unit's group. After vehicle is unassigned from the group, each individual crew member then unassigned from the vehicle.
	In short the command could be hypothetically presented as:
	leaveVehicle = un- addVehicle + unassignVehicle forEach crew
	However, to make it more reliable, it is best to move unit out of the vehicle manually with moveOut command and force unassign the vehicle with unassignVehicle
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/leaveVehicle
	</WikiPage>
	<Syntax>
		Group/Object leaveVehicle Object
	</Syntax>
	<RawSyntax>
		group leaveVehicle vehicle
	</RawSyntax>
	<Example>
		$Code$_unit leaveVehicle _vehicle$/Code$
	</NextExample>
		$Code$_grp leaveVehicle _vehicle$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
		(August 31, 2013)
	In ArmA 3 this command will not force a player to exit from a vehicle. It will unassign vehicle role for this player. AI crew however will also disembark.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		removeAllEventHandlers
	</Keyword>
	<Description>
		Removes all event handlers of given type that were added by addEventHandler. Since VBS2 v1.24 can be applied on individual weapon rounds.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/removeAllEventHandlers
	</WikiPage>
	<Syntax>
		Object removeAllEventHandlers String
	</Syntax>
	<RawSyntax>
		objectName removeAllEventHandlers handlerType
	</RawSyntax>
	<Example>
		$Code$player removeAllEventHandlers "killed";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		lbSetTextRight
	</Keyword>
	<Description>
		Sets the text on the right side of the item with the given index of the listbox or combobox with id idc of the topmost user dialog.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lbSetTextRight
	</WikiPage>
	<Syntax>
		lbSetTextRight Array
	</NextSyntax>
		Control lbSetTextRight Array
	</Syntax>
	<RawSyntax>
		lbSetTextRight [idc, index, name]
	</NextRawSyntax>
		control lbSetTextRight [index, name]
	</RawSyntax>
	<Example>
		$Code$lbSetTextRight [101, 0, "iskoda"];$/Code$
	</NextExample>
		$Code$_control lbSetTextRight [0, "iskoda"];$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
		More information on the LB command family can be found here
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		getSpeed
	</Keyword>
	<Description>
		Get the speed for the given speed mode.
	SpeedMode can be:
	"AUTO"
	"SLOW"
	"NORMAL"
	"FAST"
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getSpeed
	</WikiPage>
	<Syntax>
		Object getSpeed String
	</Syntax>
	<RawSyntax>
		object getSpeed speedMode
	</RawSyntax>
	<Example>
		$Code$_spd = player getSpeed "FAST";$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		deleteMarkerLocal
	</Keyword>
	<Description>
		Destroys the given marker.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/deleteMarkerLocal
	</WikiPage>
	<Syntax>
		deleteMarkerLocal String
	</Syntax>
	<RawSyntax>
		deleteMarkerLocal markerName
	</RawSyntax>
	<Example>
		$Code$deleteMarkerLocal "Marker1"$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
		(7 January, 2012)
	Unproven: I believe that if you use this command on a globally-created marker, and subsequently another machine executes a global command on the same marker (e.g. setMarkerPos), then the marker will be re-created on the machine it was previously deleted on. Can result in confusing marker behaviour.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		^
	</Keyword>
	<Description>
		Returns the left number to the power of the right one.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/a_%5E_b
	</WikiPage>
	<Syntax>
		Number ^ Number
	</Syntax>
	<RawSyntax>
		</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		systemChat
	</Keyword>
	<Description>
		Types text to the system radio channel. The text will be visible only on the PC where command was executed. If you need the message to show on all computers, you have to execute it globally (see remoteExec )
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/systemChat
	</WikiPage>
	<Syntax>
		systemChat String
	</Syntax>
	<RawSyntax>
		systemChat text
	</RawSyntax>
	<Example>
		$Code$systemChat "Hello world!";$/Code$
	</NextExample>
		$Code$driver vehicle player sideChat "sideChat";
	driver vehicle player globalChat "globalChat";
	driver vehicle player groupChat "groupChat";
	vehicle player vehicleChat "vehicleChat";
	driver vehicle player commandChat "commandChat";
	driver vehicle player customChat [1, "customChat"];
	systemChat "systemChat";$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		titleCut
	</Keyword>
	<Description>
		this command was obsoleted, use cutText instead.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/titleCut
	</WikiPage>
	<Syntax>
		titleCut Array
	</Syntax>
	<RawSyntax>
		titleCut [text, type, speed]
	</RawSyntax>
	<Example>
		$Code$titleCut ["Hello, how are you?","Plain Down",3];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		animationSourcePhase
	</Keyword>
	<Description>
		Returns current animation phase of given source. Similar to animationPhase or doorPhase but designed to complement animateSource.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/animationSourcePhase
	</WikiPage>
	<Syntax>
		Object animationSourcePhase String
	</Syntax>
	<RawSyntax>
		object animationSourcePhase source
	</RawSyntax>
	<Example>
		$Code$_phase = house animationSourcePhase "Door_1_source";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		selectNoPlayer
	</Keyword>
	<Description>
		Switches player to no unit, makes player return objNull. SP only, the command is completely ignored in MP.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/selectNoPlayer
	</WikiPage>
	<Syntax>
		selectNoPlayer
	</Syntax>
	<RawSyntax>
		selectNoPlayer
	</RawSyntax>
	<Example>
		$Code$// Single player:
	selectNoPlayer ;
	hint str player ; // NULL-object 
	// Rough multiplayer emulation:_noPlayer = createGroup sideLogic createUnit [
	"Logic",
	[0,0,1000],
	[],
	0,
	"NONE"
	];
	selectPlayer _noPlayer;
	hint str player ; //L Charlie 4-3:1 (KK)$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		Player returns objNull after this command has been used. It also has at least the following side effects: closeDialog won't work anymore and onKeyDown event handlers cease to detect the ESC key. In order to get things back to normal a new player object has to be set with selectPlayer. Using objNull won't cut it in this case.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		publicVariableClient
	</Keyword>
	<Description>
		Send the variable value to the client computer - same limitations regarding variable type as publicVariable.
	The Client ID is the temporary ID given to a connected client for that session. You can find out this ID with the owner command (using it on a player's character, for example, will give you that players client ID).
	In Arma 3 it is possible to broadcast nil value
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/publicVariableClient
	</WikiPage>
	<Syntax>
		Number publicVariableClient String
	</Syntax>
	<RawSyntax>
		clientID publicVariableClient varName
	</RawSyntax>
	<Example>
		$Code$3 publicVariableClient "CTFscoreOne";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(24 Aug, 2012)
	publicVariableServer (run on client)
	publicVariableClient (run on server)
	Publishes a variable (name as STRING) to a specific client, from the server. This is useful where you want to synchronize a variable with only a specific client.
	This is a useful way to cut down on network traffic, as publicVariable commands are issued as a priority message. So use publicVariable sparingly, and these commands where they apply. - Rocket
	</NextNote>
		(21 Sep, 2013)
	While publicVariable is JIP compatible and persistent, publicVariableClient is not. If you log out then log in with the same owner id the public variable sent to your client prior will be nil.
	$Code$//server
	pv = 123;
	3 publicVariableClient "pv";
	//connected client with id 3
	hint str pv; //123
	//
	//client log out/log in
	//
	//client id is still 3
	hint str pv; //error, undefined variable pv$/Code$
	</NextNote>
		(April 12, 2015)
	Tested in Arma 3 v1.43, publicVariableClient works client-to-client if owner id of the targeted client is known.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		countType
	</Keyword>
	<Description>
		Count how many objects in the array are of given type. This command also works with parent classes like "Air", "Tank", and "Car". For a full class reference see Classes.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/countType
	</WikiPage>
	<Syntax>
		String countType Array
	</Syntax>
	<RawSyntax>
		type countType objects
	</RawSyntax>
	<Example>
		$Code$_count = "Tank" countType list _triggerOne;$/Code$
	</NextExample>
		$Code$_count = "B_medic_F" countType units player ;$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(April 23, 2007)
	This command can be used on the whole hierarchical class tree (i.e. when checking a HMMWV, one could test for "HMMWV50", "Car", "LandVehicle", etc.)
	</NextNote>
		(May 4, 2016)
	To complement Kronzky's note, if one needs to count exact types, countType is not suitable for this, use count instead:
	$Code$_count = { typeOf _x == "B_medic_F"} count units player ;$/Code$
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		worldSize
	</Keyword>
	<Description>
		Returns config size of the current world.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/worldSize
	</WikiPage>
	<Syntax>
		worldSize
	</Syntax>
	<RawSyntax>
		worldSize
	</RawSyntax>
	<Example>
		$Code$_size = worldSize ; //8192$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		lbPicture
	</Keyword>
	<Description>
		Returns the picture name of the item with the given index of the listbox or combobox with id idc of the topmost user dialog.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lbPicture
	</WikiPage>
	<Syntax>
		lbPicture Array
	</NextSyntax>
		Control lbPicture Number
	</Syntax>
	<RawSyntax>
		lbPicture [idc, index]
	</NextRawSyntax>
		control lbPicture index
	</RawSyntax>
	<Example>
		$Code$_picture = lbPicture [101, 0];$/Code$
	</NextExample>
		$Code$_picture = _control lbPicture 0;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		More information on the LB command family can be found here
	</Note>
	<ReturnValue>
		String - String
	</ReturnValue>

</NextListItem>

	<Keyword>
		selectEditorObject
	</Keyword>
	<Description>
		Select an editor object. Does not un-select previously selected objects.
	i
	Some Old Editor Command
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/selectEditorObject
	</WikiPage>
	<Syntax>
		Control selectEditorObject String
	</Syntax>
	<RawSyntax>
		map selectEditorObject object
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Any_Value
	</ReturnValue>

</NextListItem>

	<Keyword>
		setCurrentTask
	</Keyword>
	<Description>
		Set the task as a current task of the person.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setCurrentTask
	</WikiPage>
	<Syntax>
		Object setCurrentTask Task
	</Syntax>
	<RawSyntax>
		object setCurrentTask task
	</RawSyntax>
	<Example>
		$Code$player setCurrentTask tskKillSpongebob;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		currentVisionMode
	</Keyword>
	<Description>
		Returns current vision mode of unit's weapon.
	0 - daytime
	1 - night vision
	2 - thermal vision
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/currentVisionMode
	</WikiPage>
	<Syntax>
		currentVisionMode Object
	</Syntax>
	<RawSyntax>
		currentVisionMode unit
	</RawSyntax>
	<Example>
		$Code$_currMode = currentVisionMode gunner _tank$/Code$
	</NextExample>
		$Code$if ( currentVisionMode player == 1) then
	{
	hint "nightvision active";
	};$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(April 29, 2016)
	The return value is somewhat erratic for UAVs. For example, if you are connected to a UAV, with the turret set to thermal vision and PIP feed enabled, "currentVisionMode gunner _uav" returns 2 when controlling the turret, but returns 0 after releasing control, even thought the PIP feed is still in thermal mode. WIth nightvision, it will return 1 whether or not you are controlling the turret, but if you switch from 1st to 3rd person before releasing control, then it returns 0 afterwards...
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlCommitted
	</Keyword>
	<Description>
		Check if the control animation is finished.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlCommitted
	</WikiPage>
	<Syntax>
		ctrlCommitted Control
	</Syntax>
	<RawSyntax>
		ctrlCommitted controlName
	</RawSyntax>
	<Example>
		$Code$_done = ctrlCommitted _control$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlSetStructuredText
	</Keyword>
	<Description>
		Set the structured text which will be displayed in structured text control.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlSetStructuredText
	</WikiPage>
	<Syntax>
		Control ctrlSetStructuredText Structured_Text
	</Syntax>
	<RawSyntax>
		control ctrlSetStructuredText structuredText
	</RawSyntax>
	<Example>
		$Code$_control ctrlSetStructuredText parseText "First line img image=data\isniper.paa / br / Second line"$/Code$
	</NextExample>
		$Code$// To center text vertically, add extra line above with blank space ( ) and set its size to adjust:
	with uiNamespace do {
	button = findDisplay 46 ctrlCreate ["RscShortcutButton", -1];
	button ctrlSetPosition [0,0,0.3,0.1];
	button ctrlCommit 0;
	button ctrlSetStructuredText parseText
	" t size='0.5' /t br/ t size='1' align='center' Button Text /t ";
	};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		halt
	</Keyword>
	<Description>
		Stops the program into a debugger. In retail version using halt results in error.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/halt
	</WikiPage>
	<Syntax>
		halt
	</Syntax>
	<RawSyntax>
		halt
	</RawSyntax>
	<Example>
		$Code$? _DbugWanted :halt$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		isFlatEmpty
	</Keyword>
	<Description>
		Checks given position against given filter params. Filter includes checks for:
	If there are any objects closer than given distance from given position (in 2D)
	If the area around position is flat enough to match given gradient
	If the given position is over water or land
	If the given position is over shore line
	The gradient seems to correlate with general hill steepness: 0.1 (10%) ~6 o, 0.5 (50%) ~27 o, 1.0 (100%) ~45 o, etc.There are also some oddities about this command that need to be noted:
	Objects accounted for proximity check seem to be static objects. Nearby vehicles and units do not seem to affect the output
	Given position will be magically transferred into given position + getTerrainHeightASL value
	The second element must be -1 ( = 0 really) at all times, otherwise command becomes unusable
	The command might be a bit heavy on computations so avoid frequent and large area checks
	See also: BIS_fnc_findSafePos
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isFlatEmpty
	</WikiPage>
	<Syntax>
		Array isFlatEmpty Array
	</Syntax>
	<RawSyntax>
		position isFlatEmpty [minDistance, mode, maxGradient, maxGradientRadius, overLandOrWater, shoreLine, ignoreObject]
	</RawSyntax>
	<Example>
		$Code$// Check if player position is over land:
	_overLand = !( position player isFlatEmpty [-1, -1, -1, -1, 0, false ] isEqualTo []);$/Code$
	</NextExample>
		$Code$// Check if player position is over shore line:
	_overShore = !( position player isFlatEmpty [-1, -1, -1, -1, 0, true ] isEqualTo []);$/Code$
	</NextExample>
		$Code$// Check if player position is over water:
	_overWater = !( position player isFlatEmpty [-1, -1, -1, -1, 2, false ] isEqualTo []);$/Code$
	</NextExample>
		$Code$// Check if no object is closer than 5m to player position:
	_isEmpty = !( position player isFlatEmpty [5, -1, -1, -1, -1, false, player ] isEqualTo []);$/Code$
	</NextExample>
		$Code$// Check if area 10m around player position is relatively flat:
	_isFlat = !( position player isFlatEmpty [-1, -1, 0.3, 10, -1] isEqualTo []);$/Code$
	</NextExample>
		$Code$// Check if area 15m around player position is very flat and empty:
	_isFlatEmpty = !( position player isFlatEmpty [15, -1, 0.1, 15, -1, false, player ] isEqualTo []);$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(April 24, 2016)
	When this command is instructed to check if area at given position is empty it takes into account the radius of the bounding sphere of surrounding objects. Because of this, the high voltage columns such as "Land_HighVoltageColumnWire_F" and such objects may appear extremely large to the calculations and the position will be rejected even if visually it doesn't look too bad. To avoid this, use findEmptyPosition command first to find guaranteed empty position, then pass the result to isFlatEmpty making sure you switched off proximity check by setting 1st param to -1. For example:
	$Code$// Check if given position is flat and empty within 1m radius
	[4274.66,12113,0.00139618] isFlatEmpty [1, -1, 0.1, 1, -1, false, objNull ]; //[]$/Code$
	The result suggests it is not flat and empty.
	$Code$// Check if given position is flat within 1m radius
	[4274.66,12113,0.00139618] isFlatEmpty [-1, -1, 0.1, 1, -1, false, objNull ]; //[4274.66,12113,48.3209]$/Code$
	The result suggests it is.
	$Code$// Check if given position is empty within 1m radius
	[4274.66,12113,0.00139618] isFlatEmpty [1, -1, -1, -1, -1, false, objNull ]; //[]$/Code$
	The result suggests it is not empty. But the position is in the middle of a road and there is nothing within 1m but there is "Land_HighVoltageColumnWire_F" not far.
	$Code$// Check if given position is empty within 1m radius ignoring nearest "Land_HighVoltageColumnWire_F"
	[4274.66,12113,0.00139618] isFlatEmpty [1, -1, -1, 1, -1, false, nearestObject [[4274.66,12113,0.00139618], "Land_HighVoltageColumnWire_F"]]; //[4274.66,12113,48.3209]$/Code$
	The result now suggests it is empty. So instead of relying on internal proximity check we can combine both commands:
	$Code$fnc_isFlatEmpty =
	{
	params ["_pos", "_params"];
	_pos = _pos findEmptyPosition [0, _params select 0];
	if (_pos isEqualTo []) exitWith {[]};
	_params =+ _params;
	_params set [0, -1];
	_pos = _pos isFlatEmpty _params;
	if (_pos isEqualTo []) exitWith {[]};
	_pos
	};
	// Test
	[[4274.66,12113,0.00139618], [1, -1, 0.1, 1, -1, false, objNull ]] call fnc_isFlatEmpty; //[4274.53,12113,48.3175]
	$/Code$
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		throw
	</Keyword>
	<Description>
		Throws an exception. The exception is processed by first catch block. This command will terminate further execution of the code.
	NOTE : Avoid using alternative shorthand syntax if you are planning on preparing your exception information dynamically, as it will have to be generated first regardless of the condition of the if statement before it, as shown in example 3.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/throw
	</WikiPage>
	<Syntax>
		throw Anything
	</NextSyntax>
		If_Type throw Anything
	</Syntax>
	<RawSyntax>
		throw expression
	</NextRawSyntax>
		if  throw exception
	</RawSyntax>
	<Example>
		$Code$try { throw "invalid argument"} catch { hint str _exception};$/Code$
	</NextExample>
		$Code$// Since Arma 3 v1.53.133045:
	123 try { if (_this != 123) throw "invalid argument"} catch { hint str _exception};$/Code$
	</NextExample>
		$Code$// The correct usage of shorthand alt syntax:
	try {
	if (a b) throw "Error: some error"; /// OK
	/// The command argument is static
	} catch {
	hint str _exception;
	};
	try {
	_someFunc = {
	.....
	};
	if (a b) throw ( call _someFunc); /// NOT OK
	/// The command argument is dynamic
	/// _someFunc is called first to get the value regardless of (a b) outcome
	} catch {
	hint str _exception;
	};
	try {
	_someFunc = {
	.....
	};
	if (a b) then { throw ( call _someFunc)}; /// OK
	/// The command argument is dynamic
	/// _someFunc is only called when (a b) is true
	} catch {
	hint str _exception;
	};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setAnimAimPrecision
	</Keyword>
	<Description>
		Set aimPrecision value of the current animation state (parameter aimPrecision)
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setAnimAimPrecision
	</WikiPage>
	<Syntax>
		Object setAnimAimPrecision Number
	</Syntax>
	<RawSyntax>
		unit setAnimAimPrecision value
	</RawSyntax>
	<Example>
		$Code$player setAnimAimPrecision 1$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		disableCollisionWith
	</Keyword>
	<Description>
		Disable collision between vehicles. This command doesn't disable collision between PhysX objects.
	!
	Command has to be executed where objects are local, and as long as they don't change locality, the effect of this command will be global.
	If the 2 objects are not local to the same computer, then it has to be executed on both computers to achieve the desired effect.
	If one or both objects change locality, the command needs to be executed again on the new owner 's machine(s) to maintain the effect.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/disableCollisionWith
	</WikiPage>
	<Syntax>
		Object disableCollisionWith Object
	</Syntax>
	<RawSyntax>
		vehicle disableCollisionWith vehicle
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		(April 4, 2015)
	disableCollisionWith is basically a script that when you apply it to an object, and your unit can go through it like a ghost. However, if you wish the object to be solid again, you may wish to use the enableCollisionWith.
	An example for this is:
	$Code$//name of unit in editor such as player1
	//name of object in editor such as barrel1
	barrel1 disableCollisionWith player1;
	//to make the barrel solid again, do this as vice versa if you know what your doing!
	barrel1 enableCollisionWith player1 $/Code$
	On a side note: this can come in handy a lot if you want a unit to sit on the back of a car or on top of a container
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		composeText
	</Keyword>
	<Description>
		Creates a structured text by joining the given structured or plain texts.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/composeText
	</WikiPage>
	<Syntax>
		composeText Array
	</Syntax>
	<RawSyntax>
		composeText [text1, text2,]
	</RawSyntax>
	<Example>
		$Code$_txt = composeText ["First line", image "data\isniper.paa", lineBreak, "Second line"];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Structured_Text
	</ReturnValue>

</NextListItem>

	<Keyword>
		someAmmo
	</Keyword>
	<Description>
		Check if unit has some ammo.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/someAmmo
	</WikiPage>
	<Syntax>
		someAmmo Object
	</Syntax>
	<RawSyntax>
		someAmmo unitName
	</RawSyntax>
	<Example>
		$Code$? not (someAmmo _loon1) : hint "Loon1 is out of ammo!"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		diag_captureFrameToFile
	</Keyword>
	<Description>
		This command starts counting frames from the moment it is executed and when the count reaches the number passed as param, the current frame is captured and
	written to a log file in the same directory as the.rpt file.
	The full Path to the log file is logged to simultaneously.
	The data in the log file can be copied and pasted into the diag_captureFrame UI dialog to get a visualisation later on.
	Note : Only available in specific builds. See Performance Profiling for details.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/diag_captureFrameToFile
	</WikiPage>
	<Syntax>
		diag_captureFrameToFile Number
	</Syntax>
	<RawSyntax>
		diag_captureFrameToFile frame
	</RawSyntax>
	<Example>
		$Code$diag_captureFrameToFile 1; //capture the first frame after command execution$/Code$
	</NextExample>
		$Code$diag_captureFrameToFile 24; //capture 24th frame after command execution$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		diag_activeSQSScripts
	</Keyword>
	<Description>
		Returns array with active SQSs.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/diag_activeSQSScripts
	</WikiPage>
	<Syntax>
		diag_activeSQSScripts
	</Syntax>
	<RawSyntax>
		diag_activeSQSScripts
	</RawSyntax>
	<Example>
		$Code${ systemChat str _x} forEach diag_activeSQSScripts ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		menuChecked
	</Keyword>
	<Description>
		Returns if item on given path is checked or not.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/menuChecked
	</WikiPage>
	<Syntax>
		menuChecked Array
	</Syntax>
	<RawSyntax>
		menuChecked [idc, path]
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		remove3DENConnection
	</Keyword>
	<Description>
		Remove connection between entities.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/remove3DENConnection
	</WikiPage>
	<Syntax>
		remove3DENConnection Array
	</Syntax>
	<RawSyntax>
		remove3DENConnection [type, from, to]
	</RawSyntax>
	<Example>
		$Code$remove3DENConnection ["RandomStart", get3DENSelected "Object","marker_0"]
	// Remove random start on marker "marker_0" from all selected objects.$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		addResources
	</Keyword>
	<Description>
		Adds resources to a team member.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/addResources
	</WikiPage>
	<Syntax>
		Team_Member addResources Array
	</Syntax>
	<RawSyntax>
		teamMember addResources [resource1, resource2,]
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		addHeadgear
	</Keyword>
	<Description>
		Creates a headgear item and tries to link it to headgear slot. If slot is occupied with another item, the item in the slot will be replaced.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/addHeadgear
	</WikiPage>
	<Syntax>
		Object addHeadgear String
	</Syntax>
	<RawSyntax>
		unit addHeadgear item
	</RawSyntax>
	<Example>
		$Code$player addHeadgear "H_HelmetB";$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		enableAudioFeature
	</Keyword>
	<Description>
		Enable/disable an audio feature, features are: "lowpass", "building_interior". Return previous state
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/enableAudioFeature
	</WikiPage>
	<Syntax>
		enableAudioFeature Array
	</Syntax>
	<RawSyntax>
		enableAudioFeature [feature, enable]
	</RawSyntax>
	<Example>
		$Code$prevState = enableAudioFeature ["lowpass", true ];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		showRadio
	</Keyword>
	<Description>
		Shows or hides the radio on the map screen, if enabled for the mission and you possess the item. (default true )
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/showRadio
	</WikiPage>
	<Syntax>
		showRadio Boolean
	</Syntax>
	<RawSyntax>
		showRadio show
	</RawSyntax>
	<Example>
		$Code$showRadio false$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(16 Aug, 2009)
	In Arma 2, the radio is now an item in ArmA 2. Class path is CfgWeapons- ItemRadio. Use the command addWeapon and removeWeapon to remove it from a unit's inventory. (example: player removeweapon "ItemRadio")
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		getUnitTrait
	</Keyword>
	<Description>
		Gets the current value of a trait of the given unit.
	Default traits are:
	audibleCoef (scalar)
	camouflageCoef (scalar)
	engineer (bool)
	explosiveSpecialist (bool)
	loadCoef (scalar)
	medic (bool)
	UAVHacker (bool)
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getUnitTrait
	</WikiPage>
	<Syntax>
		Object getUnitTrait String
	</Syntax>
	<RawSyntax>
		unit getUnitTrait skill_name
	</RawSyntax>
	<Example>
		$Code$player getUnitTrait "Medic";$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean/Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		clearRadio
	</Keyword>
	<Description>
		Clean up the content of radio protocol history.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/clearRadio
	</WikiPage>
	<Syntax>
		clearRadio
	</Syntax>
	<RawSyntax>
		clearRadio
	</RawSyntax>
	<Example>
		$Code$clearRadio;$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
		Use $Code$ enableRadio false;$/Code$ to disable the chat.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		ATLToASL
	</Keyword>
	<Description>
		Converts a position from PositionATL to PositionASL
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ATLToASL
	</WikiPage>
	<Syntax>
		ATLToASL PositionATL
	</Syntax>
	<RawSyntax>
		ATLToASL pos
	</RawSyntax>
	<Example>
		$Code$ATLToASL ( getPosATL player ) isEqualTo getPosASL player$/Code$
	</NextExample>
		$Code$_camPosASL = ATLToASL positionCameraToWorld [0,0,0];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		PositionASL
	</ReturnValue>

</NextListItem>

	<Keyword>
		lnbData
	</Keyword>
	<Description>
		Returns the additional text (invisible) in an item with the given position of the 2D listbox.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lnbData
	</WikiPage>
	<Syntax>
		lnbData Array
	</NextSyntax>
		Control lnbData Array
	</Syntax>
	<RawSyntax>
		lnbData [idc, [row, column]]
	</NextRawSyntax>
		ctrl lnbData [row, column]
	</RawSyntax>
	<Example>
		$Code$_ctrl lnbData [ lnbCurSelRow _ctrl,0]; //"#1"$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
		(Sep 9 2014)
	(A3 1.28)As for invisible data processing, lnbAddArray, lnbAddColumn, lnbData, lnbGetColumnsPosition, lnbSetColumnsPos, lnbSetData, lnbSetText, lnbSetValue, lnbText and lnbValue store data types into exact position of the listNbox with different spaces. Accessing data with coordinate command at nearly the same syntax:
	$Code$
	//Set same value to one position of a Control
	_ctrl lnbSetData [ [0,0],"#1"];
	lnbSetColumnsPos [102, [0,1], 1];
	_ctrl lnbSetText [ [0,1], "#1"];
	_ctrl lnbSetValue [ [0,0],1];
	//Accessing the value disregard affecting one another.
	_ctrl lnbData [0,0]; //"#1"
	lnbGetColumnsPosition _ctrl //[1];
	_ctrl lnbText [0,0];//"#1"
	_ctrl lnbValue [0,0];//1
	$/Code$
	For a direct visible control over CT_LISTNBOX:
	$Code$
	0 = [_CT_LISTNBOX] spawn {
	private ["_CT_LISTNBOX","_color","_current","_pic"];
	disableSerialization ;
	_CT_LISTNBOX = _this select 0;
	{
	_CT_LISTNBOX lnbAddRow [ getText (_x "displayNameShort"), getText (_x "displayName")];
	_CT_LISTNBOX lnbSetPicture [ [_foreachIndex,0], getText (_x "texture")];
	} forEach (" isClass _x" configClasses ( configFile "CfgRanks"));
	_CT_LISTNBOX lnbSetCurSelRow 0;
	_current = lnbCurSelRow _CT_LISTNBOX;
	_color = _CT_LISTNBOX lnbColor [_current,0];
	_CT_LISTNBOX lnbSetColor [ [_current,1], [(_color select 0)/2,0,0,1] ];
	_CT_LISTNBOX lnbDeleteColumn 0;
	_CT_LISTNBOX lnbDeleteRow 1;
	sleep 1;
	lnbClear _CT_LISTNBOX;//Clear all items but control still remains just invisible.
	};
	$/Code$
	A combined use of both invisible and visible data processing commands alive the Control.
	</Note>
	<ReturnValue>
		String - String
	</ReturnValue>

</NextListItem>

	<Keyword>
		fillWeaponsFromPool
	</Keyword>
	<Description>
		Adds magazines from the campaign pool to the given unit, depending on his weapons.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/fillWeaponsFromPool
	</WikiPage>
	<Syntax>
		fillWeaponsFromPool Object
	</Syntax>
	<RawSyntax>
		fillWeaponsFromPool unitName
	</RawSyntax>
	<Example>
		$Code$fillWeaponsFromPool _soldier$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		cameraInterest
	</Keyword>
	<Description>
		Return camera interest for given entity, as set by setCameraInterest, or as autodetected.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/cameraInterest
	</WikiPage>
	<Syntax>
		cameraInterest Object
	</Syntax>
	<RawSyntax>
		cameraInterest entity
	</RawSyntax>
	<Example>
		$Code$camInterest = cameraInterest myUnit;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		surfaceIsWater
	</Keyword>
	<Description>
		Returns whether water is at given position.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/surfaceIsWater
	</WikiPage>
	<Syntax>
		surfaceIsWater Array
	</Syntax>
	<RawSyntax>
		surfaceIsWater position
	</RawSyntax>
	<Example>
		$Code$_isWater= surfaceIsWater [1000, 3000];$/Code$
	</NextExample>
		$Code$_isWater = surfaceIsWater position player ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(4 May, 2012)
	Does not work with inland water. Works only with sea water.
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		addItem
	</Keyword>
	<Description>
		Creates new item and tries to add it into inventory. Inventory must have enough space to accomodate new item or command will fail.The item can also be a weapon or a magazine.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/addItem
	</WikiPage>
	<Syntax>
		Object addItem String
	</Syntax>
	<RawSyntax>
		unit addItem item
	</RawSyntax>
	<Example>
		$Code$bluforUnit addItem "NVGoggles";
	bluforUnit assignItem "NVGoggles";
	opforUnit addItem "NVGoggles_OPFOR";
	opforUnit assignItem "NVGoggles_OPFOR";
	independentUnit addItem "NVGoggles_INDEP";
	independentUnit assignItem "NVGoggles_INDEP";$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setRain
	</Keyword>
	<Description>
		Set rain density smoothly over the given transition time (in seconds). A transition time of zero means an immediate change. A rain density of zero is no rain, one is maximum rain. Rain is not possible when overcast is less than 0.7.
	NOTE : Since Arma 3 this command is MP synchronised, if executed on server, the changes will propagate globally. If executed on client effect is temporary as it will soon change to the server setting.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setRain
	</WikiPage>
	<Syntax>
		Number setRain Number
	</Syntax>
	<RawSyntax>
		time setRain rain
	</RawSyntax>
	<Example>
		$Code$60 setRain 1;$/Code$
	</NextExample>
		$Code$// Force no rain:
	0 setRain 0;
	forceWeatherChange ;
	999999 setRain 0;$/Code$
	</Example>
	<Locality>
		undefined / global
	</Locality>
	<Note>
		This scripting command must be executed on the server to work properly in multiplayer
	</NextNote>
		(December 15, 2015)
	setTimeMultiplier does NOT affect transition time.
	</NextNote>
		(November 16, 2016)
	Using Example 2 on dedicated server might need additional interference on JIP clients. The reason is that JIP has rain value 0 slowly changing to 0. To force client to sync one can execute this on client: $Code$ skipTime 1; skipTime -1;$/Code$
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		list
	</Keyword>
	<Description>
		List of units that would activate given Trigger.
	It returns nothing before the simulation started, i.e. in (undelayed) init.sqf files. Returns a pointer to the trigger's list after the simulation started. Since this is just a reference this means that the value in your local variable will change as the content of the trigger area changes. To permanently copy the returned list to a different variable, use _mylist = +(list triggerOne).
	The second example can be used inside the trigger (in that case, no need to name your trigger).
	The list returned for trigger of type "Not present" is the same as that returned for type "present".
	NOTE: While the command can query any trigger, local or remote, the result will be only for the trigger condition set on the local client. See createTrigger for more info.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/list
	</WikiPage>
	<Syntax>
		list Object
	</Syntax>
	<RawSyntax>
		list trigger
	</RawSyntax>
	<Example>
		$Code$_tlist = list _triggerOne;$/Code$
	</NextExample>
		$Code$hint format ["%1", thislist ];$/Code$
	</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
		(March 6, 2013)
	Calling list immediately after creating a trigger via createTrigger (and setting up activation, area, statements, timeout, etc..), will return null instead of an array. It seems the trigger needs about 1 second to initialise, after which it will behave as expected: returning an array of all the objects inside the trigger (the ones matching the criteria), or an empty array.
	</Note>
	<ReturnValue>
		Array/Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		groupFromNetId
	</Keyword>
	<Description>
		Get group with given unique ID. For objects use objectFromNetId. As this command is MP only, you can use BIS_fnc_groupFromNetId, which extends the use to SP as well.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/groupFromNetId
	</WikiPage>
	<Syntax>
		groupFromNetId String
	</Syntax>
	<RawSyntax>
		groupFromNetId id
	</RawSyntax>
	<Example>
		$Code$_group = groupFromNetId "4:45";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Group
	</ReturnValue>

</NextListItem>

	<Keyword>
		WFSideText
	</Keyword>
	<Description>
		Returns the un localized text value of an object's side / a group's side or a side as:
	east, opfor - "East"
	west, blufor - "West"
	resistance, independent - "Resistance"
	civilian - "Civilian"
	sideUnknown - "Unknown"
	sideEnemy - "Unknown"
	sideFriendly - "Unknown"
	sideLogic - "Unknown"
	sideEmpty - "Unknown"
	sideAmbientLife - "Unknown"
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/WFSideText
	</WikiPage>
	<Syntax>
		WFSideText Object/Group/Side
	</Syntax>
	<RawSyntax>
		WFSideText param
	</RawSyntax>
	<Example>
		$Code$WFSideText player ;$/Code$
	</NextExample>
		$Code$WFSideText group player ;$/Code$
	</NextExample>
		$Code$WFSideText west$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(August 17, 2014)
	WF stands for Warfare
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		weaponAccessoriesCargo
	</Keyword>
	<Description>
		Returns array with all items assigned to the given weapon in given cargo container.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/weaponAccessoriesCargo
	</WikiPage>
	<Syntax>
		Object weaponAccessoriesCargo Array
	</Syntax>
	<RawSyntax>
		container weaponAccessoriesCargo [weaponId, creatorId]
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		camPrepareDir
	</Keyword>
	<Description>
		Prepares the camera heading.
	This command is non-functional !
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/camPrepareDir
	</WikiPage>
	<Syntax>
		Object camPrepareDir Number
	</Syntax>
	<RawSyntax>
		camera camPrepareDir direction
	</RawSyntax>
	<Example>
		$Code$_camera camPrepareDir 150$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		diag_activeSQFScripts
	</Keyword>
	<Description>
		Returns an array with active SQFs.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/diag_activeSQFScripts
	</WikiPage>
	<Syntax>
		diag_activeSQFScripts
	</Syntax>
	<RawSyntax>
		diag_activeSQFScripts
	</RawSyntax>
	<Example>
		$Code${ systemChat str _x} forEach diag_activeSQFScripts ;$/Code$
	</NextExample>
		$Code$[] spawn {
	hint str diag_activeSQFScripts ; //[[" spawn ","",true,1]]
	};
	[] spawn {
	scriptName "myScript";
	hint str diag_activeSQFScripts ; //[["myScript","",true,1]]
	};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		lockCameraTo
	</Keyword>
	<Description>
		Lock/Unlock stabilized camera (in vanilla used currently only for UAVs) to target.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lockCameraTo
	</WikiPage>
	<Syntax>
		Object lockCameraTo Array
	</Syntax>
	<RawSyntax>
		vehicle lockCameraTo [target, turretPath]
	</RawSyntax>
	<Example>
		$Code$uav lockCameraTo [vehicle, [0,0]];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(April 10, 2015)
	The command also accepts a position (ASL) instead of an object. The vehicle has to have a stabilized optic for this command to work.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		tvSetValue
	</Keyword>
	<Description>
		Sets scalar data to item on given path. IDC means id of parent Tree View. If the given value is not integer, it will be converted to integer
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/tvSetValue
	</WikiPage>
	<Syntax>
		tvSetValue Array
	</NextSyntax>
		Control tvSetValue Array
	</Syntax>
	<RawSyntax>
		tvSetValue [idc, [path], val]
	</NextRawSyntax>
		_ctrl tvSetValue [ [path], val]
	</RawSyntax>
	<Example>
		$Code$tvSetValue [101, [0], 555];$/Code$
	</NextExample>
		$Code$_ctrl tvSetValue [ [0,0,0], 14];$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
		(September 11, 2014)
	(A3 1.28)tv command family overview
	$Code$
	//tv command family available for CT_TREE (type 12)
	private ["_count","_current","_data","_text","_value","_pic"];
	_CT_TREE tvAdd [ [],"Parent_A"];
	_CT_TREE tvAdd [ [0],"Child_A"];
	_CT_TREE tvAdd [ [0,0],"Grandchild_A"];
	_CT_TREE tvAdd [ [],"Parent_B"];
	_CT_TREE tvAdd [ [1],"Child_B"];
	_count = _CT_TREE tvCount []; //return 2
	_CT_TREE tvSetCurSel [0,0,0]; //select grandchild_A
	_current = tvCurSel _CT_TREE; //return [0,0,0]
	_CT_TREE tvSetData [_current,"I'm grandchild_A"];
	_data = _CT_TREE tvData _current; // "I'm grandchild_A"
	_text = _CT_TREE tvText _current; //"Grandchild_A"
	_CT_TREE tvSetValue [_current,14];
	_value = _CT_TREE tvValue _current; // 14
	_CT_TREE tvSetPicture [_current, getText ( configFile "CfgWeapons" "optic_NVS" "picture")];
	_pic = _CT_TREE tvPicture _current;
	_CT_TREE tvExpand [1];
	_CT_TREE tvSort [[], false ];
	_CT_TREE tvSortByValue [[], false ];
	_CT_TREE tvDelete [0,0]; //remove child_b
	tvClear 12;
	_CT_TREE tvCollapse [];
	$/Code$
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setLightIntensity
	</Keyword>
	<Description>
		Sets intensity of light.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setLightIntensity
	</WikiPage>
	<Syntax>
		Object setLightIntensity Number
	</Syntax>
	<RawSyntax>
		light setLightIntensity value
	</RawSyntax>
	<Example>
		$Code$myLight setLightIntensity 4;$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
		(Mar 24, 2014)
	In ArmA3 ver1.14 setLightIntensity will overwrite the previous effect processed by setLightBrightness on the same light source, vice versa. And both of them currently play the same role on brightness, for example: $Code$_light setLightIntensity 3000;// same as _light setLightBrightness 1;$/Code$
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		weaponAccessories
	</Keyword>
	<Description>
		Get array with all items linked to a given weapon.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/weaponAccessories
	</WikiPage>
	<Syntax>
		Object weaponAccessories String
	</Syntax>
	<RawSyntax>
		unit weaponAccessories weapon
	</RawSyntax>
	<Example>
		$Code$player weaponAccessories primaryWeapon player ; ["","acc_pointer_IR","optic_Aco",""]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(October 26, 2014)
	To check if currently selected muzzle has a silencer:
	$Code$hasSilencer = player weaponAccessories currentMuzzle player param [0, ""] != "";$/Code$
	</NextNote>
		(March 16, 2015)
	Since revision 129742, this command also returns an attached bipod.
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		musicVolume
	</Keyword>
	<Description>
		Checks the current music volume (set by fadeMusic )
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/musicVolume
	</WikiPage>
	<Syntax>
		musicVolume
	</Syntax>
	<RawSyntax>
		musicVolume
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		createLocation
	</Keyword>
	<Description>
		Creates a location of the specified class and dimensions at the specified position. Classes are defined in CfgLocationTypes.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/createLocation
	</WikiPage>
	<Syntax>
		createLocation Array
	</Syntax>
	<RawSyntax>
		createLocation [className, position, sizeX, sizeY]
	</RawSyntax>
	<Example>
		$Code$_location = createLocation [ "NameVillage", [4035,2151,10], 100, 100];$/Code$
	</NextExample>
		$Code$_location = createLocation [ "NameVillage", [4035,2151,10], 30, 30];
	_location setText "Player town";$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
		(12:25, 12 February 2010)
	Possible location types, see: Location Types
	For the actual name text of the location, use setText.
	</Note>
	<ReturnValue>
		Location
	</ReturnValue>

</NextListItem>

	<Keyword>
		getDLCs
	</Keyword>
	<Description>
		Returns array of appIDs of DLCs. Use filter param to get specific type of DLCs:
	0 - all
	1 - owned
	2 - not owned
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getDLCs
	</WikiPage>
	<Syntax>
		getDLCs Number
	</Syntax>
	<RawSyntax>
		getDLCs filter
	</RawSyntax>
	<Example>
		$Code$_ownedDLCs = getDLCs 1;$/Code$
	</NextExample>
		$Code$// Is the Karts DLC owned by this client?
	hintSilent str (288520 in ( getDLCs 1));$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(May 30, 2014)
	Current list of IDs that correspond to the available DLCs:
	275700 - Arma 3 Zeus
	249860 - Arma 3 Soundtrack
	304400 - Arma 3 DLC Bundle
	249861 - Arma 3 Maps
	249862 - Arma 3 Tactical Guide
	288520 - Arma 3 Karts
	304380 - Arma 3 Helicopters
	332350 - Arma 3 Marksmen
	</NextNote>
		(April 7, 2015)
	To add to the note above, app ID can be found in CfgMods. Here is an example path from zeus using the Splendid Config Viewer:
	$Code$ configFile "CfgMods" "Curator" "appId"$/Code$
	This method can be used to find app IDs without having to find a list like the one above.
	I am also pretty sure you are able to define your own app ID for your own mods using this method.
	</NextNote>
		(July 1, 2016)
	The required DLC-IDs equal to the Steam App-IDs of each obtainable DLC.
	To extend Sniperwolfs list:
	395180 - Arma 3 Apex
	</NextNote>
		(October 30, 2017)
	More dlc
	Arma 3 Laws of War 571710
	Arma 3 Jets 601670
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctSetValue
	</Keyword>
	<Description>
		Associates metadata (number) with the row determined by the index. Returns Nothing.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctSetValue
	</WikiPage>
	<Syntax>
		Control ctSetValue Number
	</Syntax>
	<RawSyntax>
		Control ctSetValue Number
	</RawSyntax>
	<Example>
		$Code$_control ctSetValue 0;$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		lnbGetColumnsPosition
	</Keyword>
	<Description>
		Returns relative screen X of ListNBox control columns position [0.1,0.3,0.6...]. Use lnbSetColumnsPos to set positions.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lnbGetColumnsPosition
	</WikiPage>
	<Syntax>
		lnbGetColumnsPosition Control
	</Syntax>
	<RawSyntax>
		lnbGetColumnsPosition _ctrl
	</RawSyntax>
	<Example>
		$Code$lnbGetColumnsPosition _ctrl;$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
		(Sep 9 2014)
	(A3 1.28)As for invisible data processing, lnbAddArray, lnbAddColumn, lnbData, lnbGetColumnsPosition, lnbSetColumnsPos, lnbSetData, lnbSetText, lnbSetValue, lnbText and lnbValue store data types into exact position of the listNbox with different spaces. Accessing data with coordinate command at nearly the same syntax:
	$Code$
	//Set same value to one position of a Control
	_ctrl lnbSetData [ [0,0],"#1"];
	lnbSetColumnsPos [102, [0,1], 1];
	_ctrl lnbSetText [ [0,1], "#1"];
	_ctrl lnbSetValue [ [0,0],1];
	//Accessing the value disregard affecting one another.
	_ctrl lnbData [0,0]; //"#1"
	lnbGetColumnsPosition _ctrl //[1];
	_ctrl lnbText [0,0];//"#1"
	_ctrl lnbValue [0,0];//1
	$/Code$
	For a direct visible control over CT_LISTNBOX:
	$Code$
	0 = [_CT_LISTNBOX] spawn {
	private ["_CT_LISTNBOX","_color","_current","_pic"];
	disableSerialization ;
	_CT_LISTNBOX = _this select 0;
	{
	_CT_LISTNBOX lnbAddRow [ getText (_x "displayNameShort"), getText (_x "displayName")];
	_CT_LISTNBOX lnbSetPicture [ [_foreachIndex,0], getText (_x "texture")];
	} forEach (" isClass _x" configClasses ( configFile "CfgRanks"));
	_CT_LISTNBOX lnbSetCurSelRow 0;
	_current = lnbCurSelRow _CT_LISTNBOX;
	_color = _CT_LISTNBOX lnbColor [_current,0];
	_CT_LISTNBOX lnbSetColor [ [_current,1], [(_color select 0)/2,0,0,1] ];
	_CT_LISTNBOX lnbDeleteColumn 0;
	_CT_LISTNBOX lnbDeleteRow 1;
	sleep 1;
	lnbClear _CT_LISTNBOX;//Clear all items but control still remains just invisible.
	};
	$/Code$
	A combined use of both invisible and visible data processing commands alive the Control.
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		removeAllMPEventHandlers
	</Keyword>
	<Description>
		Removes all MP event handlers of the given type which were added by addMPEventHandler. Command needs to be executed only on one PC for MP event handler to be removed globally.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/removeAllMPEventHandlers
	</WikiPage>
	<Syntax>
		Object removeAllMPEventHandlers String
	</Syntax>
	<RawSyntax>
		objectName removeAllMPEventHandlers event
	</RawSyntax>
	<Example>
		$Code$player removeAllMPEventHandlers "mpkilled";$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		addMagazineCargo
	</Keyword>
	<Description>
		Add magazines to the cargo space of vehicles, which can be taken out by infantry units. Once the magazine cargo space is filled up, any further addMagazineCargo commands are ignored.
	In Arma 3, arguments for this command must be local ( ). For global variant see addMagazineCargoGlobal
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/addMagazineCargo
	</WikiPage>
	<Syntax>
		Object addMagazineCargo Array
	</Syntax>
	<RawSyntax>
		vehicleName addMagazineCargo [magazineName, count]
	</RawSyntax>
	<Example>
		$Code$_truck addMagazineCargo ["M16", 5];$/Code$
	</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
		(October 24, 2009)
	Only works on clients.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctFindRowHeader
	</Keyword>
	<Description>
		Takes index of a row as a parameter. Returns index of the closest header above this row.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctFindRowHeader
	</WikiPage>
	<Syntax>
		Control ctFindRowHeader Number
	</Syntax>
	<RawSyntax>
		ctrl ctFindRowHeader row
	</RawSyntax>
	<Example>
		$Code$_index = _control ctFindRowHeader 0;$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		curatorRegisteredObjects
	</Keyword>
	<Description>
		Returns array with all objects that has curator registered and their settings.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/curatorRegisteredObjects
	</WikiPage>
	<Syntax>
		curatorRegisteredObjects Object
	</Syntax>
	<RawSyntax>
		curatorRegisteredObjects curatorObj
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		addCuratorAddons
	</Keyword>
	<Description>
		Allow curator use of given addon.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/addCuratorAddons
	</WikiPage>
	<Syntax>
		Object addCuratorAddons Array
	</Syntax>
	<RawSyntax>
		curatorObj addCuratorAddons addons
	</RawSyntax>
	<Example>
		$Code$curatorObj addCuratorAddons ["A3_Armor_F_AMV","A3_Armor_F_Panther"];$/Code$
	</NextExample>
		$Code$curatorObj addCuratorAddons ["A3_Modules_F_Curator_Lightning"];$/Code$
	</NextExample>
		$Code$// Addons can be stacked:
	curatorObj addCuratorAddons ["A3_Armor_F_AMV","A3_Armor_F_Panther"];
	curatorObj addCuratorAddons ["A3_Modules_F_Curator_Lightning"];
	diag_log curatorAddons curatorObj;[
	"A3_Armor_F_AMV",
	"A3_Armor_F_Panther",
	"A3_Modules_F_Curator_Lightning"
	]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		This scripting command must be executed on the server to work properly in multiplayer
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		menuSetData
	</Keyword>
	<Description>
		Sets new data into item on given path.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/menuSetData
	</WikiPage>
	<Syntax>
		menuSetData Array
	</Syntax>
	<RawSyntax>
		menuSetData [idc, path, data]
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		getShotParents
	</Keyword>
	<Description>
		Returns shot information Array for the given projectile in format [vehicle, instigator], where vehicle is the vehicle the shot was fired from, and the instigator is the person who pulled the trigger. If shot was fired by a soldier on foot or in FFV position in vehicle, the soldier is returned for the vehicle.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getShotParents
	</WikiPage>
	<Syntax>
		getShotParents Object
	</Syntax>
	<RawSyntax>
		getShotParents projectile
	</RawSyntax>
	<Example>
		$Code$_shotParents = getShotParents myProjectile;$/Code$
	</NextExample>
		$Code$tank addEventHandler ["Fired", { systemChat str getShotParents (_this select 6)}];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		camCommitPrepared
	</Keyword>
	<Description>
		Smoothly conduct the changes that were assigned to a camera within the given time. If the time is set to zero, the changes are done immediately.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/camCommitPrepared
	</WikiPage>
	<Syntax>
		Object camCommitPrepared Number
	</Syntax>
	<RawSyntax>
		camera camCommitPrepared time
	</RawSyntax>
	<Example>
		$Code$//create a camera object
	_cam = "camera" camCreate [5600,4800,10];
	_cam camPrepareTarget player ;
	_cam cameraEffect ["internal", "BACK"];
	_cam camCommitPrepared 0;
	//smoothly move the camera to its new position in 6 seconds.
	_cam camPreparePos [5680,4720,20];
	_cam camCommitPrepared 6;
	waitUntil { camCommitted _cam};
	//proceed$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		simulCloudOcclusion
	</Keyword>
	<Description>
		Returns clouds occlusion between two given points (0 - no clouds, 1 - full clouds).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/simulCloudOcclusion
	</WikiPage>
	<Syntax>
		simulCloudOcclusion Array
	</Syntax>
	<RawSyntax>
		simulCloudOcclusion [pos1,pos2]
	</RawSyntax>
	<Example>
		$Code$canSeeSun = ( simulCloudOcclusion == 0)$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(8 August, 2014)
	The simulCloudOcclusion command is not recognized on dedicated servers, and will produce an error. If you use this command, it cannot be anywhere within a script that is run on the dedicated server, or the entire script will halt. To get around this, you can use: $Code$if ! isDedicated then {[] execVM "simulCloudOcclusionScript.sqf"};$/Code$
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		getCameraViewDirection
	</Keyword>
	<Description>
		Returns the direction unit is looking in render time scope. While for AI the origin for the view direction vector can be taken from eyePos unit, for human player the origin should be taken from player camera position positionCameraToWorld [0,0,0]
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getCameraViewDirection
	</WikiPage>
	<Syntax>
		getCameraViewDirection Object
	</Syntax>
	<RawSyntax>
		getCameraViewDirection unit
	</RawSyntax>
	<Example>
		$Code$// Draw AI eye direction (green), weapon direction (red) and camera direction (blue) in 3D:
	bob = createGroup east createUnit ["O_Soldier_F", [0,0,0], [], 0, "NONE"];
	bob setVehiclePosition [ player modelToWorld [0,100,0], [], 0, "NONE"];
	onEachFrame
	{
	_beg = ASLToAGL eyePos bob;
	_endE = (_beg vectorAdd ( eyeDirection bob vectorMultiply 100));
	drawLine3D [ _beg, _endE, [0,1,0,1]];
	_endW = (_beg vectorAdd (bob weaponDirection currentWeapon bob vectorMultiply 100));
	drawLine3D [_beg, _endW, [1,0,0,1]];
	_endV = (_beg vectorAdd ( getCameraViewDirection bob vectorMultiply 100));
	drawLine3D [_beg, _endV, [0,0,1,1]];
	};$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		getMass
	</Keyword>
	<Description>
		Returns mass of a PhysX object.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getMass
	</WikiPage>
	<Syntax>
		getMass Object
	</Syntax>
	<RawSyntax>
		getMass object
	</RawSyntax>
	<Example>
		$Code$_mass = getMass _myCar$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(April 15, 2015)
	This function will return 0 for infantry AI units. That means a manned Blufor Hunter has the same mass than an empty one (8306.63).
	Crates return their initial mass, but if you empty them or load items, magazines and weapons, the mass remains the same. In fact, none of these (non-physx) objects has a mass.
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		endLoadingScreen
	</Keyword>
	<Description>
		Finishes loading screen started by startLoadingScreen.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/endLoadingScreen
	</WikiPage>
	<Syntax>
		endLoadingScreen
	</Syntax>
	<RawSyntax>
		endLoadingScreen
	</RawSyntax>
	<Example>
		$Code$startLoadingScreen ["Loading My Mission"];
	//Batch of code
	//Batch of code
	//Batch of code
	progressLoadingScreen 0.5;
	//Batch of code
	//Batch of code
	//Batch of code
	endLoadingScreen ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctRowCount
	</Keyword>
	<Description>
		Returns number of rows (headers not included) in the RscControlsTable.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctRowCount
	</WikiPage>
	<Syntax>
		ctRowCount Control
	</Syntax>
	<RawSyntax>
		ctRowCount Control
	</RawSyntax>
	<Example>
		$Code$ctRowCount _control;$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlDelete
	</Keyword>
	<Description>
		Deletes given control.
	Returns whether the deletion was successful.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlDelete
	</WikiPage>
	<Syntax>
		ctrlDelete Control
	</Syntax>
	<RawSyntax>
		ctrlDelete control
	</RawSyntax>
	<Example>
		$Code$ctrlDelete (( findDisplay 20000) displayCtrl 20001);$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(April 18, 2015)
	ctrlDelete can only delete controls created with ctrlCreate. Use ctrlShow false and ctrlEnable false to disable existing controls.
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		globalRadio
	</Keyword>
	<Description>
		Sends the audio message to the global radio channel. The message is defined in CfgRadio in the description.ext file or config radio protocol. The transmission will play only on the PC where command was executed. If you need the transmission to play on all computers, you have to execute it globally (see remoteExec ).
	Note: When transmitting unit gets killed, transmission will be interrupted, however when receiving unit gets killed, the transmission continues to play.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/globalRadio
	</WikiPage>
	<Syntax>
		Object globalRadio String
	</Syntax>
	<RawSyntax>
		unit globalRadio radioName
	</RawSyntax>
	<Example>
		$Code$_soldierOne globalRadio "messageOne";$/Code$
	</NextExample>
		$Code$player globalRadio configName selectRandom ("true" configClasses ( configFile "CfgRadio"));$/Code$
	</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
		(December 3, 2016)
	To transmit user custom sounds (see Multiplayer_Custom_Sounds_Tutorial ), prefix the full filename including file extension with #. For example if there is a custom user sound file called MySound.ogg, to play it on the radio use:
	$Code$ player globalRadio "#MySound.ogg";$/Code$
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		checkAIFeature
	</Keyword>
	<Description>
		Check if given AI feature is currently enabled. Feature may be one of:
	"AwareFormationSoft", "CombatFormationSoft".
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/checkAIFeature
	</WikiPage>
	<Syntax>
		checkAIFeature String
	</Syntax>
	<RawSyntax>
		checkAIFeature feature
	</RawSyntax>
	<Example>
		$Code$_featureUsed = checkAIFeature "AwareFormationSoft"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		isSimpleObject
	</Keyword>
	<Description>
		Returns true if given object is simple object
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isSimpleObject
	</WikiPage>
	<Syntax>
		isSimpleObject Object
	</Syntax>
	<RawSyntax>
		isSimpleObject object
	</RawSyntax>
	<Example>
		$Code$_isSimple = isSimpleObject _obj1;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		kbAddDatabase
	</Keyword>
	<Description>
		Register knowledge base database to given person. See Conversations for more details.
	This function is no longer available in ArmA 2.
	This function is no longer available in Arma 3.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/kbAddDatabase
	</WikiPage>
	<Syntax>
		Object kbAddDatabase String
	</Syntax>
	<RawSyntax>
		person kbAddDatabase fileName
	</RawSyntax>
	<Example>
		$Code$_hasBeenAdded = _unit kbAddDatabase "chat.txt"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		primaryWeaponMagazine
	</Keyword>
	<Description>
		Returns array containing class name of currently loaded primary weapon magazine (or magazine s in case of weapon having grenade launcher), otherwise it returns []. This command is used for infantry weapons only.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/primaryWeaponMagazine
	</WikiPage>
	<Syntax>
		primaryWeaponMagazine Object
	</Syntax>
	<RawSyntax>
		primaryWeaponMagazine unit
	</RawSyntax>
	<Example>
		$Code$hint primaryWeaponMagazine player ; //["30Rnd_65x39_caseless_mag"]$/Code$
	</NextExample>
		$Code$_array = primaryWeaponMagazine player ;
	if ( count _array 0) then {
	hint ("Primary weapon is loaded with " + (_array select 0) + "!");
	} else {
	if ( primaryWeapon player != "") then {
	hint "Primary weapon is not loaded!";
	} else {
	hint "Player doesn't have a primary weapon!";
	};
	};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(June 8, 2014)
	This function returns an array like ["type of magazine loaded in primary weapon", "type of grenade loaded in launcher if exist"]
	For example ["30Rnd_556x45_Stanag", "1Rnd_HE_Grenade_shell"], with no consideration about amount of these ammo.
	However, be careful if you intend to use it in expression like : (magazines _unit) - (primaryWeaponMagazine _unit), i.e. magazines "minus" this array,
	The result will inventory all magazines (with grenades, chemlights...) except ALL magazines (and grenades eventually) belonging to the TYPE of the loaded one! i.e. you suppress ALL "30Rnd_556x45_Stanag" but the "30Rnd_556x45_Stanag_Tracer_Green" are still remaining.
	If you kill the unit, the same expression will return a consistent inventory as primary weapon "disappears" and primaryWeaponMagazine is empty. "30Rnd_556x45_Stanag" are back!
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		waypointDescription
	</Keyword>
	<Description>
		Gets the waypoint description.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/waypointDescription
	</WikiPage>
	<Syntax>
		waypointDescription Array
	</Syntax>
	<RawSyntax>
		waypointDescription waypoint
	</RawSyntax>
	<Example>
		$Code$waypointDescription [groupOne,1]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		setParticleFire
	</Keyword>
	<Description>
		Set fire parameters to particle effect.
	Note: You need to create emitter at first. Basic parameters of particle effect must be defined too. You can use script commands setParticleClass or setParticleParams to do so (see example). Correspondence between CfgCloudlets class param names and command array of params:
	$Code$particleSource setParticleFire
	[
	coreIntensity,
	coreDistance,
	damageTime
	];$/Code$
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setParticleFire
	</WikiPage>
	<Syntax>
		Object setParticleFire Array
	</Syntax>
	<RawSyntax>
		source setParticleFire [coreIntensity, coreDistance, damageTime]
	</RawSyntax>
	<Example>
		$Code$_emitter = "#particlesource" createVehicleLocal ( getPos player );
	_emitter setParticleClass "MediumSmoke";
	_emitter setParticleFire [0.3,1.0,0.1];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		registerTask
	</Keyword>
	<Description>
		Register a new task type. Parameters are defined in the given config class (subclass of CfgTasks).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/registerTask
	</WikiPage>
	<Syntax>
		Team_Member registerTask String
	</Syntax>
	<RawSyntax>
		teamMember registerTask entryName
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		commandFire
	</Keyword>
	<Description>
		Order the given unit to fire on the given target (via the radio).
	If the target is objNull, the unit is ordered to fire on its current target (set with doTarget or commandTarget ).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/commandFire
	</WikiPage>
	<Syntax>
		Object/Array commandFire Object
	</Syntax>
	<RawSyntax>
		unitName commandFire target
	</RawSyntax>
	<Example>
		$Code$_ESoldier1 commandFire _WSoldier1$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		createMarkerLocal
	</Keyword>
	<Description>
		Creates a local marker at the given position. Marker exists only on PC that created it. The marker name has to be unique.
	NOTE: Local markers have own set of local commands "XXXXLocal" to work with. If you use global marker command on a local marker, the local marker will become global marker.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/createMarkerLocal
	</WikiPage>
	<Syntax>
		createMarkerLocal Array
	</Syntax>
	<RawSyntax>
		createMarkerLocal [name, position]
	</RawSyntax>
	<Example>
		$Code$_marker = createMarkerLocal ["Marker1", position player ];$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
		To create a marker which is visible on the map you need to define at least the following three settings:
	$Code$_markerstr = createMarkerLocal ["markername",[_Xpos,_Ypos]];
	_markerstr setMarkerShapeLocal "ICON";
	_markerstr setMarkerTypeLocal "DOT";$/Code$
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		with
	</Keyword>
	<Description>
		Creates a With Type that is used inside a do construct in order to execute code inside a given namespace.
	when used in a do-construct in scripts with allowed suspension, an unexpected namespace switch could happen (see note below)
	NOTE for the reasons unknown, namespace switching might unexpectedly occur inside some scopes ( for, if, try, call ) started in scheduled scripts ( canSuspend true) after small suspension if with was not the main scope. For example:
	$Code$[] spawn
	{
	with uiNamespace do
	{
	for "_i" from 1 to 1 do
	{
	systemChat str [
	currentNamespace isEqualTo uiNamespace,
	currentNamespace isEqualTo missionNamespace
	];
	// result [true, false]
	sleep 0.05; // -- small suspension
	systemChat str [
	currentNamespace isEqualTo uiNamespace,
	currentNamespace isEqualTo missionNamespace
	];
	// result [false, true] -- switching
	};
	};
	};$/Code$
	However if with used in parent scope, everything works correctly:
	$Code$ with uiNamespace do
	{
	[] spawn
	{
	for "_i" from 1 to 1 do
	{
	systemChat str [
	currentNamespace isEqualTo uiNamespace,
	currentNamespace isEqualTo missionNamespace
	];
	// result [true, false]
	sleep 0.05; // -- small suspension
	systemChat str [
	currentNamespace isEqualTo uiNamespace,
	currentNamespace isEqualTo missionNamespace
	];
	// result [true, false] -- NO switching
	};
	};
	};$/Code$
	To eliminate possibility of error you can also use setVariable or getVariable with desired Namespace, which is also scheduled environment safe.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/with
	</WikiPage>
	<Syntax>
		with Namespace
	</Syntax>
	<RawSyntax>
		with namespace
	</RawSyntax>
	<Example>
		$Code$_myWithType = with uiNamespace ;$/Code$
	</NextExample>
		$Code$with missionNamespace do {global = global + 1};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		With_Type
	</ReturnValue>

</NextListItem>

	<Keyword>
		vectorDistance
	</Keyword>
	<Description>
		Distance between two 3D vectors.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/vectorDistance
	</WikiPage>
	<Syntax>
		Array vectorDistance Array
	</Syntax>
	<RawSyntax>
		vector1 vectorDistance vector2
	</RawSyntax>
	<Example>
		$Code$_euclideanDist = getPosASL player vectorDistance [0,0,0];$/Code$
	</NextExample>
		$Code$( getPosASL _a) vectorDistance ( getPosASL _b); /* same as */( getPosATL _a) distance ( getPosATL _b);$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(28 Jun, 2014)
	(ArmA3 1.22)Algorithm:
	$Code$
	Vector1 = [x1,y1,z1]; Vector2 = [x2,y2,z2];
	Result = sqrt ((x2 - x1) ^ 2 + (y2 - y1) ^ 2 + (z2 - z1) ^ 2);
	$/Code$
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		getSlingLoad
	</Keyword>
	<Description>
		Return object which is sling loaded by vehicle
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getSlingLoad
	</WikiPage>
	<Syntax>
		getSlingLoad Object
	</Syntax>
	<RawSyntax>
		getSlingLoad vehicle
	</RawSyntax>
	<Example>
		$Code$_cargo = getSlingLoad heli1;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(05 April, 2014)
	Returns objNull when nothing is sling loaded.
	</Note>
	<ReturnValue>
		Object
	</ReturnValue>

</NextListItem>

	<Keyword>
		addMagazines
	</Keyword>
	<Description>
		Adds multiple magazines to the unit. For cargo containers use addMagazineCargoGlobal command.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/addMagazines
	</WikiPage>
	<Syntax>
		Object addMagazines Array
	</Syntax>
	<RawSyntax>
		unit addMagazines [magazineName, count]
	</RawSyntax>
	<Example>
		$Code$player addMagazines ["30Rnd_65x39_caseless_mag", 3];$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		markerShape
	</Keyword>
	<Description>
		Gets the marker shape. See setMarkerShape for a list of strings that can be returned.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/markerShape
	</WikiPage>
	<Syntax>
		markerShape String
	</Syntax>
	<RawSyntax>
		markerShape name
	</RawSyntax>
	<Example>
		$Code$if ( markerShape "Marker1" == "RECTANGLE") then { hint "Marker1 is a rectangle!"}$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(May 30, 2016)
	Free hand drawn markers return "POLYLINE"
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		surfaceType
	</Keyword>
	<Description>
		Returns what surface type is at the given position.
	See the spoiler for surface types:
	Show text
	A3 1.28:
	"#GdtStratisConcrete"
	"#GdtStratisDryGrass"
	"#GdtStratisGreenGrass"
	"#GdtStratisRocky"
	"#GdtStratisForestPine"
	"#GdtStratisBeach"
	"#GdtStratisDirt"
	"#GdtVRsurface01"
	"#GdtDirt"
	"#GdtGrassGreen"
	"#GdtGrassDry"
	"#GdtSoil"
	"#GdtThorn"
	"#GdtStony"
	"#GdtConcrete"
	"#GdtMarsh"
	"#GdtBeach"
	"#GdtSeabed"
	"#GdtDead"
	A3 1.66:
	"#Default"
	"#Water"
	"#SurfRoadDirt"
	"#SurfRoadConcrete"
	"#SurfRoadTarmac"
	"#SurfWood"
	"#SurfMetal"
	"#SurfRoofTin"
	"#SurfRoofTiles"
	"#SurfIntWood"
	"#SurfIntConcrete"
	"#SurfIntTiles"
	"#SurfIntMetal"
	"#SurfWater"
	"#TEST_SurfNormal"
	"#GdtStratisConcrete"
	"#GdtStratisBeach"
	"#GdtStratisDirt"
	"#GdtStratisSeabedCluttered"
	"#GdtStratisSeabed"
	"#GdtStratisDryGrass"
	"#GdtStratisGreenGrass"
	"#GdtStratisRocky"
	"#GdtStratisThistles"
	"#GdtStratisForestPine"
	"#GdtRubble"
	"#GdtForestPine"
	"#GdtConcrete"
	"#GdtSoil"
	"#GdtBeach"
	"#GdtRock"
	"#GdtDead"
	"#GdtDirt"
	"#GdtDesert"
	"#GdtGrassGreen"
	"#GdtGrassDry"
	"#GdtGrassWild"
	"#GdtWeed"
	"#GdtWildField"
	"#GdtThorn"
	"#GdtStony"
	"#GdtStonyThistle"
	"#GdtMud"
	"#GdtMarsh"
	"#GdtSeabed"
	"#concrete"
	"#concrete_out"
	"#concrete_inside"
	"#dirtrunway"
	"#road"
	"#floor"
	"#floor_inside"
	"#carpet_inside"
	"#carpet"
	"#mud"
	"#concrete_hall"
	"#stones"
	"#cardboard"
	"#lino"
	"#steel"
	"#trash"
	"#parquet"
	"#sand"
	"#metalPlate"
	"#woodenFloor"
	"#planks"
	"#planks_inside"
	"#grid"
	"#rubble"
	"#BuildingRubble"
	"#tiling"
	"#wavyMetal"
	"#GdtVRsurface01"
	"#surf_metal"
	"#surf_roadconcrete"
	"#surf_roaddirt"
	"#surf_roadtarmac"
	"#surf_rooftiles"
	"#surf_rooftin"
	"#surf_wood"
	"#surfint_concrete"
	"#surfint_metal"
	"#surfint_tiles"
	"#surfint_wood"
	"#road_exp"
	"#sand_exp"
	"#SurfRoadDirt_exp"
	"#SurfRoadConcrete_exp"
	"#SurfRoadTarmac_exp"
	"#SurfTrailDirt_exp"
	"#concrete_exp"
	"#concrete_in_exp"
	"#concrete_hall_exp"
	"#floor_exp"
	"#floor_in_exp"
	"#stones_exp"
	"#planks_in_exp"
	"#planks_exp"
	"#softwood_in_exp"
	"#steel_exp"
	"#metalPlate_exp"
	"#metalPlatePressed_exp"
	"#metalPlate_in_exp"
	"#grid_exp"
	"#wavyMetal_exp"
	"#carpet_exp"
	"#carpet_in_exp"
	"#mat_in_exp"
	"#mud_exp"
	"#straw_exp"
	"#cardboard_exp"
	"#lino_in_exp"
	"#lino_exp"
	"#roof_tiles_exp"
	"#trash_exp"
	"#rubble_exp"
	"#BuildingRubble_exp"
	"#GdtGrassShort"
	"#GdtGrassTall"
	"#GdtGrassLong"
	"#GdtVolcanoBeach"
	"#GdtRedDirt"
	"#GdtAsphalt"
	"#GdtField"
	"#GdtForest"
	"#GdtVolcano"
	"#GdtCliff"
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/surfaceType
	</WikiPage>
	<Syntax>
		surfaceType Array
	</Syntax>
	<RawSyntax>
		surfaceType position
	</RawSyntax>
	<Example>
		$Code$_surface = surfaceType [4500, 4500];$/Code$
	</NextExample>
		$Code$_surface = surfaceType position player ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(February 05, 2010)
	In ArmA 2 returned value is "#UTGRASS" for natural surface and "#UTCONCRETE" for urban surface.
	</NextNote>
		(December 16, 2006)
	Only seems to return either "#GRASSSOUTH" or "#GRASSGENERAL", even when you're in a building or in water.
	</NextNote>
		(December 30, 2006)
	Another returned value is "#SANDGENERAL". However, when providing an exact [x,y] position the "surfaceType" function seems to return the general surface type of the environment rather than the exact type on that given position.
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		opfor
	</Keyword>
	<Description>
		Pre-defined variable for the opfor side.
	Alias for east.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/opfor
	</WikiPage>
	<Syntax>
		opfor
	</Syntax>
	<RawSyntax>
		opfor
	</RawSyntax>
	<Example>
		$Code$if ( side player == opfor ) then {
	hint "OPFOR";
	};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Side
	</ReturnValue>

</NextListItem>

	<Keyword>
		taskCompleted
	</Keyword>
	<Description>
		Return if task is completed. (state Succeeded, Failed or Canceled)
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/taskCompleted
	</WikiPage>
	<Syntax>
		taskCompleted Task
	</Syntax>
	<RawSyntax>
		taskCompleted task
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		currentCommand
	</Keyword>
	<Description>
		Return the current command type (empty string when no command) for the commander of given vehicle (or for a given soldier). Value returned can be one of:
	"WAIT", "ATTACK", "HIDE", "MOVE", "HEAL", "REPAIR", "REFUEL", "REARM", "SUPPORT", "JOIN", "GET IN", "FIRE", "GET OUT", "STOP", "EXPECT", "ACTION", "ATTACKFIRE",
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/currentCommand
	</WikiPage>
	<Syntax>
		currentCommand Object
	</Syntax>
	<RawSyntax>
		currentCommand vehicleName
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		flagAnimationPhase
	</Keyword>
	<Description>
		Returns flag position on the flag pole in range of 0..1, where 0 is bottom of the flag pole, 1 is the top of the flag pole. The result is local to the PC on which command is executed
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/flagAnimationPhase
	</WikiPage>
	<Syntax>
		flagAnimationPhase Object
	</Syntax>
	<RawSyntax>
		flagAnimationPhase flag
	</RawSyntax>
	<Example>
		$Code$flagAnimationPhase _flag1; //0.5$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		setMarkerPos
	</Keyword>
	<Description>
		Moves the marker. Pos format is Position2D.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setMarkerPos
	</WikiPage>
	<Syntax>
		String setMarkerPos Array
	</Syntax>
	<RawSyntax>
		markerName setMarkerPos pos
	</RawSyntax>
	<Example>
		$Code$"MarkerOne" setMarkerPos getMarkerPos "MarkerTwo"$/Code$
	</Example>
	<Locality>
		undefined / global
	</Locality>
	<Note>
		Effect is local in OFP.
	</NextNote>
		(March 31, 2008)
	This command will not move a marker on dedicated server (if a client calls it). AI will continue to respawn at old spot if you are moving something like respawn_west.
	</NextNote>
		(August 7, 2009)
	The marker position can actually be set in 3D. This has a benefit for respawn markers, when placed at the correct altitude ASL on the LHD, the correct altitude will be used for respawn. There is no particular benefit for regular markers since markerPos will still return 0 for the altitude array element.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		addItemPool
	</Keyword>
	<Description>
		Adds count items of type name into the weapon pool (used in the campaign to transfer items to the next mission)
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/addItemPool
	</WikiPage>
	<Syntax>
		addItemPool Array
	</Syntax>
	<RawSyntax>
		addItemPool [itemName, count]
	</RawSyntax>
	<Example>
		$Code$addItemPool ["ItemGPS", 5];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		cbSetChecked
	</Keyword>
	<Description>
		Sets the current state of a checkbox (CT_CHECKBOX type 77 of Dialog Control ).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/cbSetChecked
	</WikiPage>
	<Syntax>
		Control cbSetChecked Boolean
	</Syntax>
	<RawSyntax>
		control cbSetChecked state
	</RawSyntax>
	<Example>
		$Code$_myCheckBox cbSetChecked true ;$/Code$
	</NextExample>
		$Code$_disp = findDisplay 46 createDisplay "RscDisplayEmpty";
	_chk = _disp ctrlCreate ["RscCheckBox", -1];
	_chk cbSetChecked true ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setWaypointTimeout
	</Keyword>
	<Description>
		Defines the time between condition satisfaction and waypoint finish (randomly from min to max, with an average value mid).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setWaypointTimeout
	</WikiPage>
	<Syntax>
		Array setWaypointTimeout Array
	</Syntax>
	<RawSyntax>
		waypoint setWaypointTimeout [min, mid, max]
	</RawSyntax>
	<Example>
		$Code$[_grp, 2] setWaypointTimeout [5, 10, 6];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(00:32, 12 December 2010)
	The example doesn't seem to make sense, according to the listed syntax. It seems to set a Max time greater than the Mid time.
	</NextNote>
		(03:30, 12 December 2010)
	If mid is greater than max, the result will be really near the mid value.
	Results with the values of the example: 8.237, 9.383, 10.425, 9.417, 9.43401, 10.425, 9.90601, 9.96701, 9.42401, 9.42502, 9.96698, 9.89999...
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		allowGetIn
	</Keyword>
	<Description>
		Set if the units given in the list are allowed to enter vehicles.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/allowGetIn
	</WikiPage>
	<Syntax>
		Array allowGetIn Boolean
	</Syntax>
	<RawSyntax>
		unitArray allowGetIn allow
	</RawSyntax>
	<Example>
		$Code$[_soldier1, _soldier2] allowGetIn true ;$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
		(8 May, 2014)
	(ArmA3 ver 1.18), here's a quick reference to unit's embarkation and disembarkation.
	Command
	Remote Control
	Behavior
	Role Unassigning
	orderGetIn
	false
	orderGetIn won't take effect on player controlled AI units, and which needs to be used together with assaignAs command family. Generally speaking, orderGetIn is a Role Excuator.
	When orderGetIn was disabled it won't automatically unassign unit's vehicle role but will force the unit get out of the vehicle and stop him re-entering until it was enabled again. orderGetIn false won't stop a unit when he is embarking a vehicle in the half way but unassignVehicle will do. orderGetIn false will wait to fire until the unit enter a vehicle.
	allowGetIn
	false
	allowGetIn won't take effect on player controlled AI units. Different from orderGetIn, this command is a Role Holder, it can control the unit's movement in the half way set by orderGetIn but not by setWaypointType, unit will be forced to get out from a vehicle by allowGetIn false and won't automatically re-enter the vehicle until allowGetIn true
	allowGetIn won't do anything with unit's vehicle role
	doGetOut
	true
	Works on player controlled ai silently, unit will automatically get back to the vehicle after disembarkation. (Unit won't get out until vehicle is stopped or landed)
	false
	commandGetOut
	true
	Same as doGetOut with radio message. (Unit won't get out until vehicle is stopped or landed)
	false
	leaveVehicle
	false
	leaveVehicle can't force a player controlled AI disembark
	true
	action ["GetOut",_veh]
	true
	Eject immediately without parachute
	false
	action ["Eject",_veh]
	true
	Eject immediately with parachute if needed
	false
	setWaypointType "GETIN"
	false
	Waypoint won't be affected by orderGetIn false or allowGetIn false until the unit is on the vehicle.
	N/A
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		getUnitLoadout
	</Keyword>
	<Description>
		Returns an array with all assigned items, weapons, containers and their stored items.
	Detailed explanation of the returned array: Talk:getUnitLoadout
	This command is not final and might be changed in a near future.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getUnitLoadout
	</WikiPage>
	<Syntax>
		getUnitLoadout Object
	</NextSyntax>
		getUnitLoadout String/Config
	</Syntax>
	<RawSyntax>
		getUnitLoadout unit
	</NextRawSyntax>
		getUnitLoadout class
	</RawSyntax>
	<Example>
		$Code$getUnitLoadout player ;$/Code$
	</NextExample>
		$Code$getUnitLoadout "B_Soldier_F";$/Code$
	</NextExample>
		$Code$getUnitLoadout ( configFile "CfgVehicles" "B_Soldier_F");$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array - Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		visibleGPS
	</Keyword>
	<Description>
		Checks if the player has GPS receiver opened and visible
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/visibleGPS
	</WikiPage>
	<Syntax>
		visibleGPS
	</Syntax>
	<RawSyntax>
		visibleGPS
	</RawSyntax>
	<Example>
		$Code$if ( visibleGPS ) then { hint "GPS is visible"};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		loadVest
	</Keyword>
	<Description>
		Returns current sum of mass from items stored in a vest.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/loadVest
	</WikiPage>
	<Syntax>
		loadVest Object
	</Syntax>
	<RawSyntax>
		loadVest unit
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		serverCommand
	</Keyword>
	<Description>
		Executes a server command. Which command is available for execution can be found with serverCommandAvailable and whether or not it can be executed with serverCommandExecutable.
	If serverCommand is executed on a client, it must be executed from UI event handler ( ctrlAddEventHandler, displayAddEventHandler ), such as onButtonDown or other User_Interface_Event_Handlers.
	As of Arma 3 v1.39 serverCommand can be used on dedicated server and headless clients. This requires a password, both set in server.cfg and passed to the command itself (See Alt Syntax). This new version also doesn't need to be executed from within a UI Eventhandler.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/serverCommand
	</WikiPage>
	<Syntax>
		serverCommand String
	</NextSyntax>
		String serverCommand String
	</Syntax>
	<RawSyntax>
		serverCommand command
	</NextRawSyntax>
		password serverCommand command
	</RawSyntax>
	<Example>
		$Code$serverCommand "#logout";$/Code$
	</NextExample>
		$Code$// Create button on the main map which will show userlist to anyone who clicks on it:
	with uiNamespace do
	{
	ctrl = findDisplay 12 ctrlCreate ["RscButton", -1];
	ctrl ctrlSetPosition [0,0,0.5,0.1];
	ctrl ctrlSetText "USERLIST";
	ctrl ctrlCommit 0;
	ctrl ctrlAddEventHandler ["ButtonDown",
	{
	serverCommand "#userlist";
	}];
	};$/Code$
	</NextExample>
		$Code$serverCommand format ["#kick %1",_name];$/Code$
	</NextExample>
		$Code$_isOK = "MyServerCommandPassword" serverCommand "#lock";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean - Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		lbDelete
	</Keyword>
	<Description>
		Removes the item with the given index from the listbox or combobox with id idc of the topmost user dialog.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lbDelete
	</WikiPage>
	<Syntax>
		lbDelete Array
	</NextSyntax>
		Control lbDelete Number
	</Syntax>
	<RawSyntax>
		lbDelete [idc, index]
	</NextRawSyntax>
		control lbDelete index
	</RawSyntax>
	<Example>
		$Code$lbDelete [101, 0];$/Code$
	</NextExample>
		$Code$_control lbDelete 0;$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
		More information on the LB command family can be found here
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setMimic
	</Keyword>
	<Description>
		Set person's facial expression. Following mimic values are recognized:
	"Default"
	"Normal"
	"Smile"
	"Hurt"
	"Ironic"
	"Sad"
	"Cynic"
	"Surprised"
	"Agresive"
	"Angry"
	Since Arma 2 OA 1.6*, these values are used :
	"neutral"
	"dead"
	"danger"
	"hurt"
	"aware"
	"safe"
	"combat"
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setMimic
	</WikiPage>
	<Syntax>
		Object setMimic String
	</Syntax>
	<RawSyntax>
		person setMimic mimic
	</RawSyntax>
	<Example>
		$Code$_soldier1 setmimic "angry"$/Code$
	</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
		To give the impression of hard faced guys going into a mission, use the setmimic "angry" command. I always have this on my guys to stop them grinning during a cutscene/mission.
	</NextNote>
		In OFP v1.96, a character will keep any facial expression you set indefinately. Setmimic to "" to return soldier to automatic facial expressions.
	</NextNote>
		(Jan 19, 2010)
	Not working in Arma 2 1.05.
	</NextNote>
		(September 2, 2013)
	In Arma 3 the following face expressions work: "neutral","dead","danger","hurt","aware","safe","combat". Names must be written in all lower case letters. There is another grimace in config - "unconscious", which doesn't quite work.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		getPosASLVisual
	</Keyword>
	<Description>
		Returns an object's rendered 3D position ASL (z value above sea level) in render time scope. Alias of visiblePositionASL.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getPosASLVisual
	</WikiPage>
	<Syntax>
		getPosASLVisual Object
	</Syntax>
	<RawSyntax>
		getPosASLVisual object
	</RawSyntax>
	<Example>
		$Code$_playerRenderedPosASL = getPosASLVisual player ;$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		taskChildren
	</Keyword>
	<Description>
		Return the child tasks of the specified task.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/taskChildren
	</WikiPage>
	<Syntax>
		taskChildren Task
	</Syntax>
	<RawSyntax>
		taskChildren task
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		arrayIntersect
	</Keyword>
	<Description>
		Intersects array1 with array2 returning array of unique common elements. Additionally, using the same array for array1 and array2 will simply return array of unique elements. Intersects only 1st dimension of an array.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/arrayIntersect
	</WikiPage>
	<Syntax>
		Array arrayIntersect Array
	</Syntax>
	<RawSyntax>
		array1 arrayIntersect array2
	</RawSyntax>
	<Example>
		$Code$_arr1 = [1,2,3,4,5,2,3,4];
	_arr2 = [4,5,6,1,2,3,5,6];
	hint str (_arr1 arrayIntersect _arr2); // [4,5,1,2,3]$/Code$
	</NextExample>
		$Code$_arr = [1,2,3,1,2,3,1,2,3,4,5];
	hint str (_arr arrayIntersect _arr); // [1,2,3,4,5]$/Code$
	</NextExample>
		$Code$// Remove nils :
	hint str ([1,2, nil,3] arrayIntersect [1,2, nil,3]); // [1,2,3]$/Code$
	</NextExample>
		$Code$// Also works with array elements which are equal :
	hint str ([[1],[2],[3]] arrayIntersect [[2],[3],[4]]); // [[2],[3]]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		commandStop
	</Keyword>
	<Description>
		Order the given unit(s) to stop (via the radio). A stop command will never finish, the unit will never be ready.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/commandStop
	</WikiPage>
	<Syntax>
		commandStop Object/Array
	</Syntax>
	<RawSyntax>
		commandStop unitName
	</RawSyntax>
	<Example>
		$Code$commandStop _soldier1;$/Code$
	</NextExample>
		$Code$commandStop [_soldier1, _soldier2];$/Code$
	</NextExample>
		$Code$commandStop ( units player );$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
		In ArmA 1.14, this command will not stop a unit that has been given a move order by means of selecting the unit, then clicking on the in game map (or ground).
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		selectRandomWeighted
	</Keyword>
	<Description>
		Returns a random element from the given array according to assigned weights. Engine solution to BIS_fnc_selectRandomWeighted. A few notes:
	Negative weights are not supported
	If an item's weight is 0, the item is ignored
	The weights don't have to total to 1
	If numbers of items and weights do not match, the shortest array is used
	A single array Syntax is slightly faster then Alt Syntax
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/selectRandomWeighted
	</WikiPage>
	<Syntax>
		selectRandomWeighted Array
	</NextSyntax>
		Array selectRandomWeighted Array
	</Syntax>
	<RawSyntax>
		selectRandomWeighted valuesAndWeights
	</NextRawSyntax>
		values selectRandomWeighted weights
	</RawSyntax>
	<Example>
		$Code$_randomWeightedElement = selectRandomWeighted [1,0.1,2,0.2,3,1.3,4,2.4,5,7.5];$/Code$
	</NextExample>
		$Code$_randomWeightedElement = [1,2,3,4,5] selectRandomWeighted [0.1,0.2,1.3,2.4,7.5];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(June 26, 2017)
	A 100000 runs of the following code:
	$Code$_values = [0,1,2,3,4,5,6,7,8,9];
	_weights = [0.109,0.65,0.01,1.01,1.24,0,1.59,0.09,1.15,0.55];
	_result = _values selectRandomWeighted _weights;$/Code$
	Gave this result:
	0 - 0
	0.01 - 144
	0.09 - 1409
	0.109 - 1633
	0.55 - 8673
	0.65 - 10127
	1.01 - 15668
	1.15 - 18059
	1.24 - 19518
	1.59 - 24769
	</Note>
	<ReturnValue>
		Anything - Anything
	</ReturnValue>

</NextListItem>

	<Keyword>
		setPlateNumber
	</Keyword>
	<Description>
		Change the license plates on any vehicle which has plates configured. Max 15 characters are allowed!
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setPlateNumber
	</WikiPage>
	<Syntax>
		Object setPlateNumber String
	</Syntax>
	<RawSyntax>
		vehicle setPlateNumber string
	</RawSyntax>
	<Example>
		$Code$vehicle player setPlateNumber "Custom Plate 99"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setVelocityTransformation
	</Keyword>
	<Description>
		Places an object at an interpolated position between two other objects and sets its vectors in proportion to the relative position.
	The final position/vector is determined by the "interval" specified in the command.
	This assumes an imaginary path between the two reference objects, where
	at the beginning of the path (interval: 0) the position and vector are identical to the first reference object,
	at the end of the path (interval: 1) they're identical to the second reference object,
	and at 0.5 they are halfway in-between.
	See setVelocityTransformation (VBS2) for more details.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setVelocityTransformation
	</WikiPage>
	<Syntax>
		Object setVelocityTransformation Array
	</Syntax>
	<RawSyntax>
		object setVelocityTransformation [position1, position2, velocity1, velocity2, direction1, direction2, upVector1, upVector2, interval]
	</RawSyntax>
	<Example>
		$Code$_tracker setVelocityTransformation [
	getPosASL _currentPos,
	getPosASL _nextPos,
	velocity _currentVelocity,
	velocity _nextVelocity,
	vectorDir _currentVectorDir,
	vectorDir _nextVectorDir,
	vectorUp _currentVectorUp,
	vectorUp _nextVectorUp,
	_timeDiff
	];$/Code$
	</NextExample>
		$Code$// Bob on imaginary stairway to heaven:
	bob = createAgent ["C_man_1", player getRelPos [5, 0], [], 0, "CAN_COLLIDE"];
	bob switchMove "ladderciviluploop";
	pos1 = getPosASL bob;
	pos2 = pos1 vectorAdd [0,0,0.75];
	bob addEventHandler ["AnimDone",
	{
	pos1 = pos2;
	pos2 = pos2 vectorAdd [0,0,0.75]
	}];
	onEachFrame
	{
	if (! alive bob) then
	{
	onEachFrame {};
	bob switchMove "";
	bob removeAllEventHandlers "AnimDone";
	};
	bob setVelocityTransformation [
	pos1,
	pos2,
	[0,0,0],
	[0,0,0],
	[0,1,0],
	[0,1,0],
	[0,0,1],
	[0,0,1],
	moveTime bob
	];
	};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(Aug 4, 2014 – 12:35)
	(A3 1.24) Generally speaking setVelocityTransformation is more likely a combination of setPosASL, setVectorDirAndUp (or BIS_fnc_setPitchBank ) and time multiplier. It can be used as a position tracker with all necessary information collected, copied and then released within one function. Here’s a simple reproduction on how setVelocityTransformation works in game:
	$Code$
	private ["_dataOld","_dataNext","_capturedData","_obj","_fps","_startTrackingTime","_stepOld","_stepNext","_tracker","_tempTime"];
	_stepOld = 0;
	_tempTime = 0;
	_stepNext = 1;
	while { true } do {
	_capturedData = _capturedData + [[ getPosASL _obj, velocity _obj, vectorDir _obj, vectorUp _obj]];
	sleep _fps;
	_tempTime = _tempTime + _fps;
	if (_tempTime = _startTrackingTime) then {
	_dataOld = _capturedData select _stepOld;
	_dataNext = _capturedData select _stepNext;
	_stepOld = _stepOld + 1;
	_stepNext = if (_stepNext = ( count _capturedData)) then [{_stepOld},{_stepNext + 1}];
	_tracker setVelocityTransformation
	[_dataOld select 0,_dataNext select 0,_dataOld select 1,_dataNext select 1,
	_dataOld select 2,_dataNext select 2,_dataOld select 3,_dataNext select 3,1];
	};
	};$/Code$
	Tracker starts coping the route and stance from the object when time start counting. TimeDiff determines the distance multiply between the current position and the next position.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		lbSortByValue
	</Keyword>
	<Description>
		Sorts the ListBox entries by lbValue. The entries are sorted in ascending order. Also note that this command will mix up the entries randomly if multiple entries have the same value.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lbSortByValue
	</WikiPage>
	<Syntax>
		lbSortByValue Control
	</NextSyntax>
		lbSortByValue Number
	</Syntax>
	<RawSyntax>
		lbSortByValue control
	</NextRawSyntax>
		lbSortByValue idc
	</RawSyntax>
	<Example>
		$Code$lbSortByValue _control;$/Code$
	</NextExample>
		$Code$lbSortByValue 101;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		A good way to avoid that this Command will mix your Listbox up is, to assign your Value summed up with the Index ID returned by lbAdd to your Listbox Entries.
	Posted: Sep 10 2014
	</NextNote>
		More information on the LB command family can be found here
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		camCommand
	</Keyword>
	<Description>
		Executes a command on the given camera / actor object. Known commands for:
	All camera types - "manual on", "manual off"
	"camera" - "inertia on", "inertia off"
	"seagull" - "landed", "airborne"
	When you execute camCommand "landed" on a flying seagull, it will land and sit on the floor until you call camCommand "airborne". The camCommand changes are conducted immediately, the command doesn't wait for camCommit.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/camCommand
	</WikiPage>
	<Syntax>
		Object camCommand String
	</Syntax>
	<RawSyntax>
		camera camCommand command
	</RawSyntax>
	<Example>
		$Code$_camera camCommand "manual on";$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
		(May 23, 2017)
	In Arma 3 with the addition of the curator camera type, the following commands are supported:
	$Code$_camera = "CamCurator" camCreate [0,0,0];
	_camera camCommand "maxPitch 89";
	_camera camCommand "minPitch -89";
	_camera camCommand "speedDefault 0.1";
	_camera camCommand "speedMax 2";
	_camera camCommand "ceilingHeight 5000";
	_camera camCommand "atl off";
	_camera camCommand "surfaceSpeed off";
	$/Code$
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		controlsGroupCtrl
	</Keyword>
	<Description>
		Returns a child control with specified idc from a controls group
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/controlsGroupCtrl
	</WikiPage>
	<Syntax>
		Control controlsGroupCtrl Number
	</Syntax>
	<RawSyntax>
		ctrlgrp controlsGroupCtrl idc
	</RawSyntax>
	<Example>
		$Code$_control = _controlsGroup controlsGroupCtrl 101;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Control
	</ReturnValue>

</NextListItem>

	<Keyword>
		windStr
	</Keyword>
	<Description>
		Returns the current wind strength.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/windStr
	</WikiPage>
	<Syntax>
		windStr
	</Syntax>
	<RawSyntax>
		windStr
	</RawSyntax>
	<Example>
		$Code$10 setWindStr (0.5 * windStr );$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		magazinesDetailBackpack
	</Keyword>
	<Description>
		Returns an array with the type names of all the unit's backpack magazines.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/magazinesDetailBackpack
	</WikiPage>
	<Syntax>
		magazinesDetailBackpack Object
	</Syntax>
	<RawSyntax>
		magazinesDetailBackpack unit
	</RawSyntax>
	<Example>
		$Code$magazinesDetailBackpack player$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		getFriend
	</Keyword>
	<Description>
		Returns if sides are friendly or hostile. For a value smaller than 0.6 it results in being enemy, otherwise it's friendly. See also Side relations.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getFriend
	</WikiPage>
	<Syntax>
		Side getFriend Side
	</Syntax>
	<RawSyntax>
		side1 getFriend side2
	</RawSyntax>
	<Example>
		$Code$value = west getFriend east ;$/Code$
	</NextExample>
		$Code$_isEnemy = side _killer getFriend side _victim 0.6;$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		isKindOf
	</Keyword>
	<Description>
		Checks whether the object is (a subtype) of the given type. While main syntax and alt syntax support only CfgVehicles, CfgAmmo and CfgNonAIVehicles, alt syntax 2 allows to specify any config, including mission config.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isKindOf
	</WikiPage>
	<Syntax>
		Object isKindOf String
	</NextSyntax>
		String isKindOf String
	</NextSyntax>
		String isKindOf Array
	</Syntax>
	<RawSyntax>
		object isKindOf typeName
	</NextRawSyntax>
		typeName1 isKindOf typeName2
	</NextRawSyntax>
		typeName1 isKindOf [typeName2, targetConfig]
	</RawSyntax>
	<Example>
		$Code$vehicle player isKindOf "Tank";$/Code$
	</NextExample>
		$Code$"BMP2" isKindOf "Tank";$/Code$
	</NextExample>
		$Code$currentWeapon player isKindOf ["Rifle", configFile "CfgWeapons"];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(April 23, 2007)
	This command can be used on the whole hierarchical class tree (i.e. when checking a HMMWV, one could test for "HMMWV50", "Car", "LandVehicle", etc., all of which would return true.)
	</NextNote>
		(16 Apr, 2008)
	It appears isKindOf is limited to the CfgVehicles branch of the class hierachy.
	So CfgWeapons, CfgMagazines, etc will return false for checks like:
	("M9" isKindOf "Pistol") returns false
	</NextNote>
		(8 Nov, 2009)
	In a2 isKindOf also works for CfgAmmo in addition to CfgVehicles: ("M_9M311_AA" isKindOf "MissileBase") returns true. NOT for CfgWeapons, CfgMagazines and others..
	</NextNote>
		(June 16, 2015)
	In case you cannot use isKindOf because of the reasons stated, just use BIS fnc returnParents with class names as return value:
	$Code$ _isKindOf = "Rifle" in [( configFile "CfgWeapons" "BWA3_G36K"), true ] call BIS_fnc_returnParents ; // is true$/Code$
	</NextNote>
		(September 6, 2015)
	In A3 isKindOf works well with CfgWeapons and CfgMagazines using the syntax from example 3.
	It should be prefered to James' solution as it performs more than 25x faster. Tested in debug console with the following code snippets:
	$Code$bool = "CA_Magazine" in ([( configFile "CfgMagazines" "HandGrenade"),true] call BIS_fnc_returnParents ); -- 0.12111ms$/Code$
	$Code$bool = "HandGrenade" isKindOf ["CA_Magazine", configFile "CfgMagazines"]; -- 0.00439453ms$/Code$
	When checking in CfgVehicles the syntax from example 2 performs a little faster.
	</Note>
	<ReturnValue>
		Boolean - Boolean - Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		pixelGridNoUIScale
	</Keyword>
	<Description>
		Returns grid size based on screen resolution and configs: uiScaleFactor, uiScaleMaxGrids
	As mentioned in the name of this command, the user interface scale is ignored.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/pixelGridNoUIScale
	</WikiPage>
	<Syntax>
		pixelGridNoUIScale
	</Syntax>
	<RawSyntax>
		pixelGridNoUIScale
	</RawSyntax>
	<Example>
		$Code$_gridHeightNoUIScale = pixelH * pixelGridNoUIScale ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		waypointLoiterRadius
	</Keyword>
	<Description>
		Gets the waypoint loiter radius. Waypoint uses format Waypoint.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/waypointLoiterRadius
	</WikiPage>
	<Syntax>
		waypointLoiterRadius Waypoint
	</Syntax>
	<RawSyntax>
		waypointLoiterRadius Waypoint
	</RawSyntax>
	<Example>
		$Code$_radius = waypointLoiterRadius [groupOne, 1];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		allSites
	</Keyword>
	<Description>
		Return all sites in map.
	This command is considered deprecated and is no longer supported
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/allSites
	</WikiPage>
	<Syntax>
		allSites
	</Syntax>
	<RawSyntax>
		allSites
	</RawSyntax>
	<Example>
		$Code$_allSites = allSites ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		moveToFailed
	</Keyword>
	<Description>
		Check if latest low level moveTo command failed.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/moveToFailed
	</WikiPage>
	<Syntax>
		moveToFailed Object
	</Syntax>
	<RawSyntax>
		moveToFailed person
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		removeHeadgear
	</Keyword>
	<Description>
		Removes headgear from a unit. If unit has no headgear command quietly fails.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/removeHeadgear
	</WikiPage>
	<Syntax>
		removeHeadgear Object
	</Syntax>
	<RawSyntax>
		removeHeadgear unit
	</RawSyntax>
	<Example>
		$Code$removeHeadgear player ;$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
		(August 5, 2016)
	To clarify, this command effectively DELETES the headgear. It does not simply remove it from unit's head and move it into inventory.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		flagOwner
	</Keyword>
	<Description>
		Returns the global owner of a flag. A getter for setFlagOwner. Note that owner of a flag is Object rather than Number, as how it is usually with other owner commands
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/flagOwner
	</WikiPage>
	<Syntax>
		flagOwner Object
	</Syntax>
	<RawSyntax>
		flagOwner flag
	</RawSyntax>
	<Example>
		$Code$_person = flagOwner _flagOne;$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Object
	</ReturnValue>

</NextListItem>

	<Keyword>
		lnbSize
	</Keyword>
	<Description>
		Returns size of 2D listbox or combobox as [rows, columns].
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lnbSize
	</WikiPage>
	<Syntax>
		lnbSize Control/Number
	</Syntax>
	<RawSyntax>
		lnbSize ctrl
	</RawSyntax>
	<Example>
		$Code$lnbSize _ctrl;//[8,2]$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		goto
	</Keyword>
	<Description>
		In SQS scripts only: Go to given label.
	String argument is used here.
	Be sure to use double quotes around label name in goto. Define the label with #. Note that Labels are not case sensitive and that labels are searched for from the top of the script, so multiple occurrences of a label will only result in the top most one ever being found.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/goto
	</WikiPage>
	<Syntax>
		goto String
	</Syntax>
	<RawSyntax>
		goto label
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(August 4, 2006)
	Notes from before the conversion:
	This function works only inside of SQS script.
	The search for labels always begins at the top of the script so that if there are multiple occurrences of a label the first occurrence will always be the one found.
	Because of the searching order, it is faster to place loops which are executed often at the top of a script.
	Labels are not case sensitive.
	Loops which look something like the example below should be avoided as many of them could cause the mission to slow down:
	#wait
	if (condition) then { goto "wait"}
	It is better to use the @ command to wait for a condition to be true, or put a small delay into the wait loop.
	Example
	While it is not required to include a delay in a loop, such a loop without a delay can cause the script to slow the game down, as the loop will be executed many times before the game engine interrupts the script.
	Unless you really want the loop to execute multiple times during a frame, you should include a small delay.
	You would need to have many scripts running for this to be a significant issue.
	Deciding whether to use a script with a loop or a trigger or even a @ statement to detect a condition is a complicated matter and should be subject to experimentation.
	</NextNote>
		(August 4, 2006)
	A goto command called within a forEach loop, will only execute a single jump to goto, once the forEach loop has finished:
	{ goto "wait"} forEach [0,1,2,3,4]
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setPitch
	</Keyword>
	<Description>
		Sets the pitch of a persons voice.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setPitch
	</WikiPage>
	<Syntax>
		Object setPitch Number
	</Syntax>
	<RawSyntax>
		person setPitch pitch
	</RawSyntax>
	<Example>
		$Code$unit1 setPitch 1$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		animationState
	</Keyword>
	<Description>
		Returns the name of a unit's current primary animation. Seems to be forced to lower case in Arma 3.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/animationState
	</WikiPage>
	<Syntax>
		animationState Object
	</Syntax>
	<RawSyntax>
		animationState unitName
	</RawSyntax>
	<Example>
		$Code$_state = animationState player ;$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(August 22, 2014)
	(A3 1.26) To sort animation state by keyword, use BIS_fnc_ambientAnimGetParams
	$Code$ ("KNEEL" call BIS_fnc_ambientAnimGetParams ) select 0;
	//return: ["amovpknlmstpslowwrfldnon"…]$/Code$
	Useful keywords are: "STAND", "WATCH", "GUARD", "LISTEN_BRIEFING", "LEAN_ON_TABLE", "LEAN", "SIT_AT_TABLE", "KNEEL", "PRONE_INJURED", "BRIEFING" ect.
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		teamMember
	</Keyword>
	<Description>
		Return an agent for given person.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/teamMember
	</WikiPage>
	<Syntax>
		teamMember Object
	</Syntax>
	<RawSyntax>
		teamMember person
	</RawSyntax>
	<Example>
		$Code$_agent = teamMember player ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Team_Member
	</ReturnValue>

</NextListItem>

	<Keyword>
		animatePylon
	</Keyword>
	<Description>
		Force animation of pylon to given state, -1 for reset to engine handling, can cause weapon inoperative, because weapon is released when pylon state =1.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/animatePylon
	</WikiPage>
	<Syntax>
		Object animatePylon Array
	</Syntax>
	<RawSyntax>
		vehicle animatePylon [pylon nameindex, anim phase]
	</RawSyntax>
	<Example>
		$Code$( vehicle player ) animatePylon [1, 0.5];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		isNil
	</Keyword>
	<Description>
		Tests whether the variable defined by the String argument is undefined, or whether an expression result passed as Code is undefined.
	The command returns true if the variable or the expression result is undefined (i.e. the expression result is Void ), and false in all other cases.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isNil
	</WikiPage>
	<Syntax>
		isNil String
	</NextSyntax>
		isNil Code
	</Syntax>
	<RawSyntax>
		isNil variableName
	</NextRawSyntax>
		isNil code
	</RawSyntax>
	<Example>
		$Code$if ( isNil "_pokus") then {_pokus = 0};$/Code$
	</NextExample>
		$Code$isNil { player getVariable "someVar"};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		I recently had a strange experience with this command. I forgot to wrap the name of the variable with quotes, and it returned the opposite of the true null status of the variable. Just something to watch out for.
	</NextNote>
		^ If you don't wrap the name of the variable in quotes, then it will instead read the value of the variable itself. If that variable is a string or code, then the command will use that string or code held by the variable. Example:
	_myvar = "_hisvar";
	isnil _myvar;
	//will return true if _hisvar is null
	_myvar = {tank1};
	sleep (random 50);
	isnil _myvar;
	//will return if tank1 is nil, at the time the isnil command is checked (not at the time _myvar is established)
	-- General Barron 10:37, 30 December 2009 (CET)
	</NextNote>
		isNil is also able to check if an expression is undefined. As such, an alternative way to check variables would be:
	isNil {variable}
	you can use this method to also check if variables defined using setVariable exist as well:
	isNil {player getVariable "Something"}
	As well as testing if a function returns a value
	func_ChangeVehicleName =
	{
	_this setVehicleVarName "newName";
	};
	if (isNil {player call func_ChangeVehicleName}) // returns true, because this function does not return anything
	</NextNote>
		(September 25, 2014)
	While isNil isn't available in OFP/CWA you can easily emulate it with something like this:
	_nil = format["%1",_nilstring];
	?(format["%1",foo]==_nil): foo = "Hello World!"
	</NextNote>
		(October 25, 2014)
	You can also use isNil to check if an array element exists or if a setVariable variable exists
	$Code$_array = [0,1,2,3];
	if (isNil {_array select 4}) then {hint "Element does not exist";};$/Code$
	$Code$if ( isNil { missionNamespace getVariable "MY_VARIABLE"})$/Code$
	When trying to test array elements, you can only test elements that are 1 element out of range. Testing elements 2 or more elements out of range will result in a script error.
	</NextNote>
		(June 25, 2017)
	isNil in combination with code will execute that code so be aware.
	</NextNote>
		(July 18, 2017)
	isNil CODE will execute the code in unscheduled environment
	</Note>
	<ReturnValue>
		Boolean - Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		addWeapon
	</Keyword>
	<Description>
		Add a weapon to a unit. The unit must be local to the computer where command is executed. For a global version of this command see addWeaponGlobal.
	Infantry units can only carry a specific number of weapons, once the weapon slots are filled, any further addWeapon commands are ignored.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/addWeapon
	</WikiPage>
	<Syntax>
		Object addWeapon String
	</Syntax>
	<RawSyntax>
		unit addWeapon weapon
	</RawSyntax>
	<Example>
		$Code$player addMagazine "30Rnd_556x45_Stanag";
	player addWeapon "BAF_L85A2_RIS_SUSAT";$/Code$
	</NextExample>
		$Code$An_2 addMagazine "100Rnd_762x51_M240";
	An_2 addWeapon "M240_veh";$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		(August 2, 2006)
	Notes from before the conversion:
	To ensure that the weapon is loaded at the start of the mission, add at least one magazine ( addMagazine ) before adding the weapon. To remove weapons use the removeAllWeapons or the removeWeapon commands.
	</NextNote>
		When adding a weapon in-game, a bug means that sometimes the weapon can't be fired. Swap to a different weapon and swap back again to enable the newly added weapon to fire; or drop and pick up the weapon again.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		listVehicleSensors
	</Keyword>
	<Description>
		Returns an array of the sensors in the given vehicle's config (configfile CfgVehicles vehicle Components SensorsManagerComponent Components).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/listVehicleSensors
	</WikiPage>
	<Syntax>
		listVehicleSensors Object
	</Syntax>
	<RawSyntax>
		listVehicleSensors vehicle
	</RawSyntax>
	<Example>
		$Code$_sensors = listVehicleSensors ( vehicle player );
	hint str _sensors;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		cheatsEnabled
	</Keyword>
	<Description>
		Checks whether cheats are enabled (whether the designers' version is running).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/cheatsEnabled
	</WikiPage>
	<Syntax>
		cheatsEnabled
	</Syntax>
	<RawSyntax>
		cheatsEnabled
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		boundingBox
	</Keyword>
	<Description>
		Returns a bounding box of given object in model coordinate space. This command is rather generous on the size estimation, for more precise coordinates use boundingBoxReal
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/boundingBox
	</WikiPage>
	<Syntax>
		boundingBox Object
	</Syntax>
	<RawSyntax>
		boundingBox model
	</RawSyntax>
	<Example>
		$Code$_box = boundingBox _abrams$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlModelDirAndUp
	</Keyword>
	<Description>
		Returns vectorDir and vectorUp of the model used in 3D Dialog Control.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlModelDirAndUp
	</WikiPage>
	<Syntax>
		ctrlModelDirAndUp Control
	</Syntax>
	<RawSyntax>
		ctrlModelDirAndUp control
	</RawSyntax>
	<Example>
		$Code$_vectorDirAndUp = ctrlModelDirAndUp _control3D;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		vectorMagnitudeSqr
	</Keyword>
	<Description>
		Squared magnitude of a 3D vector.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/vectorMagnitudeSqr
	</WikiPage>
	<Syntax>
		vectorMagnitudeSqr Array
	</Syntax>
	<RawSyntax>
		vectorMagnitudeSqr vector
	</RawSyntax>
	<Example>
		$Code$_sizeSqr = vectorMagnitudeSqr [0,3,4]; //25$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(28 Jun, 2014)
	(ArmA3 1.22)Algorithm:
	$Code$
	Vector = [x,y,z];
	Result = (x ^ 2) + (y ^ 2) + (z ^ 2)
	$/Code$
	It is recommended to use vectorMagnitudeSqr instead of BIS_fnc_magnitudeSqr.
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		isLightOn
	</Keyword>
	<Description>
		Returns true if vehicle headlights are on otherwise false.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isLightOn
	</WikiPage>
	<Syntax>
		isLightOn Object
	</Syntax>
	<RawSyntax>
		isLightOn vehicle
	</RawSyntax>
	<Example>
		$Code$_lightsOn = isLightOn vehicle player ;$/Code$
	</NextExample>
		$Code$_pilotLightOn = isLightOn heli;$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		setWaypointStatements
	</Keyword>
	<Description>
		The waypoint is done only when the condition is fulfilled. When the waypoint is done, the statement expression is executed.
	Within the Condition & Statement code string:
	this refers to the group leader
	thisList refers to an array containing each unit in the group
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setWaypointStatements
	</WikiPage>
	<Syntax>
		Array setWaypointStatements Array
	</Syntax>
	<RawSyntax>
		waypoint setWaypointStatements [condition, statement]
	</RawSyntax>
	<Example>
		$Code$new_wp setWaypointStatements [" true ", " hint 'hello'; hint 'goodbye'"];$/Code$
	</NextExample>
		$Code$new_wp setWaypointStatements [" true ", " diag_log ['GroupLeader: ', this ]; diag_log ['Units: ', thislist ]"];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(May 21, 2016)
	Within the completion statement currentWaypoint will give the index of the waypoint being completed (as opposed to the following one).
	This is particularly useful if you need a self deleting waypoint: $Code$ setWaypointStatements [" true "," deleteWaypoint [ group this, currentWaypoint ( group this)]"]$/Code$
	</NextNote>
		(May 9, 2017)
	The condition block carries the same rules as functions which return a value. The return value must be of type Boolean. I can bypass the use of triggers in this manner.
	$Code$_wp setWaypointStatements [" code code code; _returnBool ", " onActivation block; "];$/Code$
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		tvSetData
	</Keyword>
	<Description>
		Sets string data to item on given path. IDC means id of parent Tree View.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/tvSetData
	</WikiPage>
	<Syntax>
		tvSetData Array
	</NextSyntax>
		Control tvSetData Array
	</Syntax>
	<RawSyntax>
		tvSetData [idc, [path], data]
	</NextRawSyntax>
		_ctrl tvSetData [ [path], data]
	</RawSyntax>
	<Example>
		$Code$tvSetData [101, [0], "Test data"];$/Code$
	</NextExample>
		$Code$_ctrl tvSetData [ [0,0,0], "Test data"];$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
		(Sep 11 2014)
	(A3 1.28)tv command family overview
	$Code$
	//tv command family available for CT_TREE (type 12)
	private ["_count","_current","_data","_text","_value","_pic"];
	_CT_TREE tvAdd [ [],"Parent_A"];
	_CT_TREE tvAdd [ [0],"Child_A"];
	_CT_TREE tvAdd [ [0,0],"Grandchild_A"];
	_CT_TREE tvAdd [ [],"Parent_B"];
	_CT_TREE tvAdd [ [1],"Child_B"];
	_count = _CT_TREE tvCount []; //return 2
	_CT_TREE tvSetCurSel [0,0,0]; //select grandchild_A
	_current = tvCurSel _CT_TREE; //return [0,0,0]
	_CT_TREE tvSetData [_current,"I'm grandchild_A"];
	_data = _CT_TREE tvData _current; // "I'm grandchild_A"
	_text = _CT_TREE tvText _current; //"Grandchild_A"
	_CT_TREE tvSetValue [_current,14];
	_value = _CT_TREE tvValue _current; // 14
	_CT_TREE tvSetPicture [_current, getText ( configFile "CfgWeapons" "optic_NVS" "picture")];
	_pic = _CT_TREE tvPicture _current;
	_CT_TREE tvExpand [1];
	_CT_TREE tvSort [[], false ];
	_CT_TREE tvSortByValue [[], false ];
	_CT_TREE tvDelete [0,0]; //remove child_b
	tvClear 12;
	_CT_TREE tvCollapse [];
	$/Code$
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		shownMap
	</Keyword>
	<Description>
		Checks if client has Map enabled in description.ext ( showMap param) or force enabled with showMap command.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/shownMap
	</WikiPage>
	<Syntax>
		shownMap
	</Syntax>
	<RawSyntax>
		shownMap
	</RawSyntax>
	<Example>
		$Code$if ( shownMap ) then { hint "You have Map enabled"};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		setWeaponReloadingTime
	</Keyword>
	<Description>
		Sets states and/or makes an action of/on weapon. Reload time is between 0 and 1 inclusive, where 1 is 100% of maximum reloading time.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setWeaponReloadingTime
	</WikiPage>
	<Syntax>
		Object setWeaponReloadingTime Array
	</Syntax>
	<RawSyntax>
		vehicle setWeaponReloadingTime [gunner, muzzleName, reloadTime]
	</RawSyntax>
	<Example>
		$Code$_done = _vehicle setWeaponReloadingTime [ gunner ( vehicle player ), currentMuzzle ( gunner ( vehicle player )), 0.5];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(January 15, 2012)
	The description is confusing to me. What the command essential does is to set the reloading state/time of the given weapon. For example you can fire a missile, and make the weapon available to fire again instantly if you apply 0.
	Or you can delay or stop the reload event indefinitely. The 0-1 range is a percentage - the reload time is taken from the weapons's config value (either reloadTime or magazineReloadTime - not sure). The effect is one time only each - it does not modify the weapon's general reload time.
	Works also for infantry weapons - probably useful weapons with longer reload time like sniper weapons or launchers:
	player setWeaponReloadingTime [player,currentWeapon player,0];
	No idea what's point of the return value.
	</NextNote>
		(May 14, 2017)
	Note that setWeaponReloadingTime is only having effect on a current weapon state (loaded projectile) so since the projectile is fired the next one will be reverted to a weapon config defaults. To keep the fire rate speed changed over time, use this code:
	$Code$player addEventHandler ["FiredMan",{
	params ["","_weapon","_muzzle"];
	private _type = _weapon call BIS_fnc_itemType;
	private _time = -1;
	switch (_type select 1) do {
	case 'SniperRifle' : {_time = 0.5};
	case 'AssaultRifle' : {};
	case 'Handgun' : {};
	case 'Rifle' : {};
	case 'SubmachineGun' : {};
	case 'MachineGun' : {};
	case 'Mortar' : {};
	case 'GrenadeLauncher' : {};
	case 'BombLauncher' : {};
	case 'MissileLauncher' : {};
	case 'RocketLauncher' : {};
	case 'Cannon' : {};
	case 'Throw' : {};
	};
	if (_time isEqualTo -1) exitWith {};
	(vehicle player) setWeaponReloadingTime [(vehicle player), _muzzle, _time];
	}];
	$/Code$
	This Event Handler makes the gun of specific type shoot at a desired rate on each weapon state (sniper rifle will shoot 50% faster in this example). For more information about weapon kinds are there, visit BIS_fnc_itemType.
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		enableDynamicSimulation
	</Keyword>
	<Description>
		Enables or disables Arma_3_Dynamic_Simulation for given non AI object
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/enableDynamicSimulation
	</WikiPage>
	<Syntax>
		Object/Group enableDynamicSimulation Boolean
	</Syntax>
	<RawSyntax>
		object enableDynamicSimulation enable
	</RawSyntax>
	<Example>
		$Code$_myObject enableDynamicSimulation true ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		preprocessFile
	</Keyword>
	<Description>
		Reads and processes the content of the specified file. Preprocessor is C-like, supports comments using // or /* and */ and PreProcessor Commands. Due to the hard-drive access this command executes (and the lack of caching) this command should not be used in time-critical script loops.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/preprocessFile
	</WikiPage>
	<Syntax>
		preprocessFile String
	</Syntax>
	<RawSyntax>
		preprocessFile fileName
	</RawSyntax>
	<Example>
		$Code$_content = preprocessFile "myFunction.sqf";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(March 4, 2008)
	File path is always relative to mission directory. If script dir\a.sqf includes dir\b.sqf, use "dir\b.sqf" and not "b.sqf".
	</NextNote>
		(July 8, 2011)
	Use preprocessFileLineNumbers instead as it provides more context information on error.
	</NextNote>
		(December 17, 2013)
	The main difference between preprocessFile and preprocessFileLineNumbers is that the latter adds #line directive to the target file, which allows to log the __LINE__ error happened at and the __FILE__ error happened in.
	</NextNote>
		(July 25, 2014)
	Essentially what the preprocessFile command does is it refers to the contents of a file as a string:
	Example 1:
	boop.html:
	$Code$ t align = 'center' valign = 'middle' shadow = '0' size = '2' structured text /t $/Code$
	init.sqf:
	$Code$_text = parseText preprocessFile "boop.html";
	hint _text;
	$/Code$
	This is especially useful for long strings, and it works on files with any file extension as long as they can be edited with a text editor.
	Example 2:
	init.sqf:
	$Code$ hint preprocessFile "description.ext";
	copyToClipboard preprocessFile "mission.sqm";
	$/Code$
	The above is all valid. However, using *.jpg or any other files saved in an image format is not possible.
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		menuClear
	</Keyword>
	<Description>
		Removes all entries from given menu strip.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/menuClear
	</WikiPage>
	<Syntax>
		menuClear Number
	</Syntax>
	<RawSyntax>
		menuClear idc
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		getAnimAimPrecision
	</Keyword>
	<Description>
		Returns aim precision for current animation
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getAnimAimPrecision
	</WikiPage>
	<Syntax>
		getAnimAimPrecision Object
	</Syntax>
	<RawSyntax>
		getAnimAimPrecision unit
	</RawSyntax>
	<Example>
		$Code$getAnimAimPrecision player;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		setIdentity
	</Keyword>
	<Description>
		Set identity of person.
	Identities are defined in Description.ext of the mission or campaign. For a list of available faces, glasses and speakers check Category:CfgIdentities.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setIdentity
	</WikiPage>
	<Syntax>
		Object setIdentity String
	</Syntax>
	<RawSyntax>
		person setIdentity identity
	</RawSyntax>
	<Example>
		$Code$_soldier1 setIdentity "MyLittleSoldier";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(August 28, 2013)
	For ArmA3 the definition format in the Description.ext file is:
	class CfgIdentities
	{
	class MyLittleSoldier
	{
	name = "Givens";
	nameSound = "Givens";
	face="WhiteHead_06";
	glasses="None";
	speaker="Male05ENG";
	pitch=1.1;
	};
	};
	nameSound can be any preset BIS recorded name value. By default units will be called out in voice by their number. By using nameSound you can call them out by name using the following values:
	Default:
	Armstrong
	Nichols
	Tanny
	Frost
	Lacey
	Larkin
	Kerry
	Jackson
	Miller
	McKendrick
	Levine
	Reynolds
	BLUFOR:
	Adams
	Bennett
	Campbell
	Dixon
	Everett
	Franklin
	Givens
	Hawkins
	Lopez
	Martinez
	O'Connor
	Ryan
	Patterson
	Sykes
	Taylor
	Walker
	OPFOR:
	Amin
	Masood
	Fahim
	Habibi
	Kushan
	Jawadi
	Nazari
	Siddiqi
	Takhtar
	Wardak
	Yousuf
	INDEPENDENT:
	Anthis
	Costa
	Dimitirou
	Elias
	Gekas
	Kouris
	Leventis
	Markos
	Nikas
	Nicolo
	Panas
	Petros
	Rosi
	Samaras
	Stavrou
	Thanos
	Vega
	CODE NAMES:
	Ghost
	Stranger
	Fox
	Snake
	Razer
	Jester
	Nomad
	Viper
	Korneedler
	face can be any of the following:
	AfricanHead_01
	AfricanHead_02
	AfricanHead_03
	AsianHead_A3_01
	AsianHead_A3_02
	AsianHead_A3_03
	GreekHead_A3_01
	GreekHead_A3_02
	GreekHead_A3_03
	GreekHead_A3_04
	GreekHead_A3_05
	GreekHead_A3_06
	GreekHead_A3_07
	GreekHead_A3_08
	GreekHead_A3_09
	PersianHead_A3_01
	PersianHead_A3_02
	PersianHead_A3_03
	NATOHead_01
	WhiteHead_02
	WhiteHead_03
	WhiteHead_04
	WhiteHead_05
	WhiteHead_06
	WhiteHead_07
	WhiteHead_08
	WhiteHead_09
	WhiteHead_10
	WhiteHead_11
	WhiteHead_12
	WhiteHead_13
	WhiteHead_14
	WhiteHead_15
	speaker can be any of the following:
	Male01ENG
	Male01ENGB
	Male01GRE
	Male01PER
	Male02ENG
	Male02ENGB
	Male02GRE
	Male02PER
	Male03ENG
	Male03ENGB
	Male03GRE
	Male03PER
	Male04ENG
	Male04ENGB
	Male04GRE
	Male05ENG
	Male06ENG
	Male07ENG
	Male08ENG
	Male09ENG
	In ArmA 3 1.04+ these settings can also be set individually without description.ext editing by using the following commands: setFace, setName, setNameSound, setSpeaker, setPitch
	</NextNote>
		(August 4, 2006)
	Notes from before the conversion:
	The definition format in the Description.ext file is:
	class CfgIdentities
	{
	class John_Doe
	{
	name = "John Bartholemew Doe";
	face = "Face20";
	glasses = "None";
	speaker = "Dan";
	pitch = 1.1;
	};
	};
	In Operation Flashpoint,
	Name can be any string.
	Face can take any of the following values:
	Male: "Face1"... to "Face52", "Face99" & "FaceR01" to "Face R04"
	Female: "Eva", "Kamila", "Lada", "Lucie", "Marketa" & "Nada"
	Glasses can take the following values: "None", "Spectacles" & "Sunglasses"
	Speaker determines which voice is used and can take any of the following values:
	"Adam"
	"Dan"
	"George"
	"Greg"
	"John"
	"Jonah"
	"Marc"
	"Patrick"
	"Paul"
	"Peter"
	"Rich"
	"Rob"
	"Ted"
	"Tom"
	"Nikolai"
	"Vitaliy"
	"Sergey"
	"Oleg"
	"Ruslan"
	"Aleksei"
	"Andrei"
	"Boris"
	"Georgiy"
	"Vadim"
	"Vladimir"
	"Ivan"
	Pitch sets the tone of voice. 1.0 for normal; 1.0 for deep; 1.0 for high pitched
	</NextNote>
		(November 18, 2006)
	Preview of all faces in Armed Assault can be found on Czech Biki
	</NextNote>
		(May 10, 2008)
	Glasses and Female faces do not work as of Arma patch 1.12beta.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		velocityModelSpace
	</Keyword>
	<Description>
		Returns the velocity (speed vector) of the vehicle as an array with format [x, y, z]. Vector is in model space.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/velocityModelSpace
	</WikiPage>
	<Syntax>
		velocityModelSpace Object
	</Syntax>
	<RawSyntax>
		velocityModelSpace vehicle
	</RawSyntax>
	<Example>
		$Code$velocityModelSpace _chopper;
	comment "Returns [X (left(-) right(+)), Y (backward(-) forward(+)), Z (down(-) up(+))]";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(December 11, 2014)
	This function is useful for helicopters as it returns Z vector like an indicator of thrust/load ratio. More or less climb (+) or descent (-) tendency but:
	As X,Y,Z vectors are relative to vehicle attitude, this function doesn't return a climb or descend rate (as the attitude of the vehicle can be far from horizontal). You can get negative Z vector, in jets, while climbing fast, peeling off in the sky!
	More or less, you can use as a Z accelerometer factor but invert the sign: +G acceleration (negative vector below the jet) is -Z here.
	If not "physically" correct, the behavior is sufficient enough for Arma flight model.
	</NextNote>
		(June 21, 2015)
	Previous note is physically incorrect. Velocity can not be used to give information about Thrust/Load ratio or G-Forces/acceleration. To get acceleration you have to create the derivative of velocity after time dv/dt - the difference of velocity between 2 timesteps divided by the time that passed between the 2 steps.
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		importAllGroups
	</Keyword>
	<Description>
		Imports all groups into the RTE.
	i
	Some Old Editor Command
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/importAllGroups
	</WikiPage>
	<Syntax>
		importAllGroups Control
	</Syntax>
	<RawSyntax>
		importAllGroups map
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		menuData
	</Keyword>
	<Description>
		Returns data stored in menu entry on given path.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/menuData
	</WikiPage>
	<Syntax>
		menuData Array
	</Syntax>
	<RawSyntax>
		menuData [idc, path]
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		overcast
	</Keyword>
	<Description>
		Return the current overcast level. Zero is clear skies, one is maximum cloud cover.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/overcast
	</WikiPage>
	<Syntax>
		overcast
	</Syntax>
	<RawSyntax>
		overcast
	</RawSyntax>
	<Example>
		$Code$_cloudLevel = overcast$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		copyToClipboard
	</Keyword>
	<Description>
		Copy text string to the clipboard.
	In MP available only on the client that is server
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/copyToClipboard
	</WikiPage>
	<Syntax>
		copyToClipboard String
	</Syntax>
	<RawSyntax>
		copyToClipboard text
	</RawSyntax>
	<Example>
		$Code$copyToClipboard str _data;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(October 12, 2014)
	To add a line break in output text do this:
	$Code$_br = toString [13,10];//(carriage return & line feed)
	_string = "Line 1" + _br + "Line 2";
	copyToClipboard _string;
	$/Code$
	Paste into text editor of choice, you get:
	$Code$Line 1
	Line 2$/Code$
	(A3 1.30 Stable executed inside.sqf via execVM )
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		cos
	</Keyword>
	<Description>
		Cosine of a number, argument in degrees.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/cos
	</WikiPage>
	<Syntax>
		cos Number
	</Syntax>
	<RawSyntax>
		cos x
	</RawSyntax>
	<Example>
		$Code$cos 60;//returns 0.5$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(August 8, 2006)
	Be aware that there might be rounding errors in the results of this command.
	cos 90
	for example doesn't return the expected '0', but '-4.37114e-008'. So, if you want to compare results of Cosinus, don't use the compare operator
	(cos 90)==0
	but rather use less than.
	(cos 90) 0.00001
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		fuel
	</Keyword>
	<Description>
		Checks how much fuel is left in the gas tank of a vehicle.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/fuel
	</WikiPage>
	<Syntax>
		fuel Object
	</Syntax>
	<RawSyntax>
		fuel vehicle
	</RawSyntax>
	<Example>
		$Code$if ( fuel vehicle player == 0) then { hint "The vehicle is out of fuel!"};$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		Vehicles refuelled in game with the Fuel trucks e.t.c never get completely refuelled. After refuelling, rather than returning a value of 1 when the fuel command is called. They return a value greater than 0.98 and less than 1.
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		setDetailMapBlendPars
	</Keyword>
	<Description>
		Sets the detail texture map blend pars. Allows for smooth transition between detailed and undetailed terrain texture at distance. If noDetail fullDetail, the texture detail will incur smooth transition in the area between the thresholds. If noDetail = fullDetail there will be obvious visible edge between texture detail changes at fullDetail distance.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setDetailMapBlendPars
	</WikiPage>
	<Syntax>
		setDetailMapBlendPars Array
	</Syntax>
	<RawSyntax>
		setDetailMapBlendPars [fullDetail, noDetail]
	</RawSyntax>
	<Example>
		$Code$setDetailMapBlendPars [20, 50];$/Code$
	</NextExample>
		$Code$setDetailMapBlendPars ( if ( currentWeapon player in [
	"Binocular",
	"Rangefinder",
	"Laserdesignator"
	]) then [
	{[300,600]},
	{[20,50]}
	]);$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setFSMVariable
	</Keyword>
	<Description>
		Set variable to given value in the variable space of given FSM.
	The FSM handle is the number returned by the execFSM command.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setFSMVariable
	</WikiPage>
	<Syntax>
		Number setFSMVariable Array
	</Syntax>
	<RawSyntax>
		handle setFSMVariable [name, value]
	</RawSyntax>
	<Example>
		$Code$_handle = execFSM "test.fsm";
	_handle setFSMVariable ["_foo", 23];
	
	// sets variable _foo in the FSM to 23$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(March 23, 2014)
	If the variable is not yet defined within the FSM it will be created.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		isAutonomous
	</Keyword>
	<Description>
		Returns true if UAV is in autonomous mode.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isAutonomous
	</WikiPage>
	<Syntax>
		isAutonomous Object
	</Syntax>
	<RawSyntax>
		isAutonomous uav
	</RawSyntax>
	<Example>
		$Code$bool = isAutonomous uav;$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		airplaneThrottle
	</Keyword>
	<Description>
		Returns throttle position. Works only on player's vehicle.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/airplaneThrottle
	</WikiPage>
	<Syntax>
		airplaneThrottle Object
	</Syntax>
	<RawSyntax>
		airplaneThrottle airplane
	</RawSyntax>
	<Example>
		$Code$_trottle = airplaneThrottle myPlane$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		setPylonLoadOut
	</Keyword>
	<Description>
		Will add missile to vehicle pylon, TransportPylonsComponent in config is required
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setPylonLoadOut
	</WikiPage>
	<Syntax>
		Object setPylonLoadOut Array
	</Syntax>
	<RawSyntax>
		vehicle setPylonLoadOut [pylon nameindex, magazine name, forced, turret]
	</RawSyntax>
	<Example>
		$Code$( vehicle player ) setPylonLoadOut ["pylon1", ""];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		logEntities
	</Keyword>
	<Description>
		Creates a log file containing the list of all game entities in scene.
	File is created in the same directory as.rpt file.
	Special: BattlEye's RCON variant of this command is #logEntities (see also Multiplayer_Server_Commands )
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/logEntities
	</WikiPage>
	<Syntax>
		logEntities
	</Syntax>
	<RawSyntax>
		logEntities
	</RawSyntax>
	<Example>
		$Code$logEntities ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		File name example:
	logEntities_4688_12-04-2014_12-19-39.log
	File content example:
	====================== Vehicles =======================
	Loc:1, ForDel:0, Dstr:0, DmgDstr:0, DmgDead:0, Sim:1, Inv: 0, AnyPl:1, Out: 0, NetID:2:3, Pos: [2476.243896][73.782043], N:B_Soldier_F
	Loc:1, ForDel:0, Dstr:0, DmgDstr:0, DmgDead:0, Sim:1, Inv: 0, AnyPl:0, Out: 0, NetID:0:0, Pos: [2471.500977][62.477680], N:Snake_random_F
	Loc:1, ForDel:0, Dstr:0, DmgDstr:0, DmgDead:0, Sim:1, Inv: 0, AnyPl:0, Out: 0, NetID:0:0, Pos: [2489.192383][73.935181], N:Snake_random_F
	Loc:1, ForDel:0, Dstr:0, DmgDstr:0, DmgDead:0, Sim:1, Inv: 0, AnyPl:0, Out: 0, NetID:0:0, Pos: [2487.953857][73.828362], N:Snake_random_F
	Loc:1, ForDel:0, Dstr:0, DmgDstr:0, DmgDead:0, Sim:1, Inv: 0, AnyPl:0, Out: 0, NetID:0:0, Pos: [2800.174805][96.234093], N:Rabbit_F
	Loc:1, ForDel:0, Dstr:0, DmgDstr:0, DmgDead:0, Sim:1, Inv: 0, AnyPl:0, Out: 0, NetID:0:0, Pos: [2825.378418][2.068635], N:Rabbit_F
	Loc:1, ForDel:0, Dstr:0, DmgDstr:0, DmgDead:0, Sim:1, Inv: 0, AnyPl:0, Out: 0, NetID:0:0, Pos: [2888.919434][6.837101], N:Rabbit_F
	Loc:1, ForDel:0, Dstr:0, DmgDstr:0, DmgDead:0, Sim:1, Inv: 0, AnyPl:0, Out: 0, NetID:0:0, Pos: [2910.756104][16.089361], N:Rabbit_F
	Loc:0, ForDel:0, Dstr:0, DmgDstr:0, DmgDead:0, Sim:1, Inv: 1, AnyPl:0, Out: 0, NetID:2:0, Pos: [9.000000][9.000000], N:Logic
	Total objects: 9
	Statistics objects: 9
	IsLocal: 8
	IsMarkedToDelete: 0
	IsDestroyed: 0
	IsDamageDestroyed: 0
	IsDamageDead: 0
	IsNotSimulated: 9
	IsVisible: 1
	IsAnyPlayer: 1
	IsOutsideMap: 0
	=================== Slow vehicles =====================
	Total objects: 214
	Statistics objects: 0
	Static objects are accounted in total object count but not included in statistics
	IsLocal: 0
	IsMarkedToDelete: 0
	IsDestroyed: 0
	IsDamageDestroyed: 0
	IsDamageDead: 0
	IsNotSimulated: 0
	IsVisible: 0
	IsAnyPlayer: 0
	IsOutsideMap: 0
	=================== Out vehicles ====================
	Loc:1, ForDel:0, Dstr:0, DmgDstr:0, DmgDead:0, Sim:1, Inv: 0, AnyPl:0, Out: 0, NetID:2:1, Pos: [2476.243896][73.782043], N:Supply40
	Loc:1, ForDel:0, Dstr:0, DmgDstr:0, DmgDead:0, Sim:1, Inv: 0, AnyPl:0, Out: 0, NetID:2:2, Pos: [2476.243896][73.782043], N:Supply140
	Total objects: 2
	Statistics objects: 2
	IsLocal: 2
	IsMarkedToDelete: 0
	IsDestroyed: 0
	IsDamageDestroyed: 0
	IsDamageDead: 0
	IsNotSimulated: 2
	IsVisible: 0
	IsAnyPlayer: 0
	IsOutsideMap: 0
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		radioVolume
	</Keyword>
	<Description>
		Checks the current radio volume (set by fadeRadio ).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/radioVolume
	</WikiPage>
	<Syntax>
		radioVolume
	</Syntax>
	<RawSyntax>
		radioVolume
	</RawSyntax>
	<Example>
		$Code$_volume = radioVolume;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		unlinkItem
	</Keyword>
	<Description>
		Unassign and delete existing item from its assigned slot. If item does not exist or is not in the assigned slot, command simply fails.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/unlinkItem
	</WikiPage>
	<Syntax>
		Object unlinkItem String
	</Syntax>
	<RawSyntax>
		unit unlinkItem item
	</RawSyntax>
	<Example>
		$Code$bluforUnit unlinkItem "NVGoggles";
	opforUnit unlinkItem "NVGoggles_OPFOR";
	independentUnit unlinkItem "NVGoggles_INDEP";$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		members
	</Keyword>
	<Description>
		Return a list of members in given team.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/members
	</WikiPage>
	<Syntax>
		members Team_Member
	</Syntax>
	<RawSyntax>
		members team
	</RawSyntax>
	<Example>
		$Code$_members = members _team$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		west
	</Keyword>
	<Description>
		West side.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/west
	</WikiPage>
	<Syntax>
		west
	</Syntax>
	<RawSyntax>
		west
	</RawSyntax>
	<Example>
		$Code$// SQS:
	?((side _unit) == west ) : hint "This is a western unit!"$/Code$
	</NextExample>
		$Code$// SQF:
	if (( side _unit) == west ) then {
	hint "This is a western unit!";
	};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Side
	</ReturnValue>

</NextListItem>

	<Keyword>
		nearestLocations
	</Keyword>
	<Description>
		Returns an array of locations of chosen type(s) within the given radius of the given position, sorted from nearest to farthest.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/nearestLocations
	</WikiPage>
	<Syntax>
		nearestLocations Array
	</Syntax>
	<RawSyntax>
		nearestLocations [position, [locationType,], radius, sortPosition]
	</RawSyntax>
	<Example>
		$Code$_nearbyLocations = nearestLocations [ position player, ["RockArea","VegetationFir"], 100];$/Code$
	</NextExample>
		$Code$// Find any of nearest locations:
	allLocationTypes = [];
	"allLocationTypes pushBack configName _x" configClasses (
	configFile "CfgLocationTypes"
	);
	{
	systemChat format [
	"%1 (%2) - %3m",
	_x,
	text _x,
	position player distance _x
	];
	} forEach nearestLocations [ player, allLocationTypes, 500];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		shownHUD
	</Keyword>
	<Description>
		Returns array of Booleans corresponding to the visibility of various HUD elements (see extended showHUD ).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/shownHUD
	</WikiPage>
	<Syntax>
		shownHUD
	</Syntax>
	<RawSyntax>
		shownHUD
	</RawSyntax>
	<Example>
		$Code$_hudStatus = shownHUD ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		sliderSpeed
	</Keyword>
	<Description>
		Return speed, as an Array [min, max] of slider idc of topmost user dialog.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/sliderSpeed
	</WikiPage>
	<Syntax>
		sliderSpeed Number
	</NextSyntax>
		sliderSpeed Control
	</Syntax>
	<RawSyntax>
		sliderSpeed idc
	</NextRawSyntax>
		sliderSpeed control
	</RawSyntax>
	<Example>
		$Code$_slidespeed1 = sliderSpeed 105;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array - Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		add3DENEventHandler
	</Keyword>
	<Description>
		Add code to be run when a Eden Editor event is triggered.
	See the list of all Eden Editor Event Handlers.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/add3DENEventHandler
	</WikiPage>
	<Syntax>
		add3DENEventHandler Array
	</Syntax>
	<RawSyntax>
		add3DENEventHandler [type,code]
	</RawSyntax>
	<Example>
		$Code$eh = add3DENEventHandler ["onUndo",{ systemChat "Zip..."}];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		emptyPositions
	</Keyword>
	<Description>
		Returns the number of given positions in the vehicle.
	Positions can be "Commander", "Driver", "Gunner" or "Cargo"
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/emptyPositions
	</WikiPage>
	<Syntax>
		Object emptyPositions String
	</Syntax>
	<RawSyntax>
		vehicle emptyPositions position
	</RawSyntax>
	<Example>
		$Code$_freeCargoPositions = vehicle player emptyPositions "cargo";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		assignItem
	</Keyword>
	<Description>
		Assigns existing item from inventory (uniform, vest, backpack) to a correct slot. If the slot is occupied by another item, it gets replaced.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/assignItem
	</WikiPage>
	<Syntax>
		Object assignItem String
	</Syntax>
	<RawSyntax>
		unit assignItem item
	</RawSyntax>
	<Example>
		$Code$bluforUnit addItem "NVGoggles";
	bluforUnit assignItem "NVGoggles";
	opforUnit addItem "NVGoggles_OPFOR";
	opforUnit assignItem "NVGoggles_OPFOR";
	independentUnit addItem "NVGoggles_INDEP";
	independentUnit assignItem "NVGoggles_INDEP";$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		tvSetColor
	</Keyword>
	<Description>
		Sets text color on given Tree View Item
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/tvSetColor
	</WikiPage>
	<Syntax>
		tvSetColor Array
	</NextSyntax>
		Control tvSetColor Array
	</Syntax>
	<RawSyntax>
		tvSetColor [idc, path, color]
	</NextRawSyntax>
		control tvSetColor [path, color]
	</RawSyntax>
	<Example>
		$Code$tvSetColor [101, [0,0], [1,0,0,1]];$/Code$
	</NextExample>
		$Code$_ctrl tvSetColor [[0,0], [1,0,0,1]];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		waypointScript
	</Keyword>
	<Description>
		Gets the waypoint script.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/waypointScript
	</WikiPage>
	<Syntax>
		waypointScript Array
	</Syntax>
	<RawSyntax>
		waypointScript waypoint
	</RawSyntax>
	<Example>
		$Code$waypointScript [groupOne,1]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		globalChat
	</Keyword>
	<Description>
		Types text to the global radio channel. The text will be visible only on the PC where command was executed. If you need the message to show on all computers, you have to execute it globally (see remoteExec )
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/globalChat
	</WikiPage>
	<Syntax>
		Object globalChat String
	</Syntax>
	<RawSyntax>
		unitName globalChat chatText
	</RawSyntax>
	<Example>
		$Code$_soldierOne globalChat "Show this text";$/Code$
	</NextExample>
		$Code$driver vehicle player sideChat "sideChat";
	driver vehicle player globalChat "globalChat";
	driver vehicle player groupChat "groupChat";
	vehicle player vehicleChat "vehicleChat";
	driver vehicle player commandChat "commandChat";
	driver vehicle player customChat [1, "customChat"];
	systemChat "systemChat";$/Code$
	</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
		In OFP 1.96, this command can be used by a Game_Logic unit, which will result in the text being displayed on screen without any indication of the side of radio source, or quotation marks. For example : gamelogic1 globalchat "hello world" will create the text hello world in the radio log.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlParent
	</Keyword>
	<Description>
		Returns container of the given control.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlParent
	</WikiPage>
	<Syntax>
		ctrlParent Control
	</Syntax>
	<RawSyntax>
		ctrlParent controlName
	</RawSyntax>
	<Example>
		$Code$_display = ctrlParent _control$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Display
	</ReturnValue>

</NextListItem>

	<Keyword>
		setNameSound
	</Keyword>
	<Description>
		Sets the nameSound of a person. By default, when giving orders, the units are addressed by their number. When nameSound is set, it will be used instead to address the unit. For example: "Two, hold fire!", one can have: "Miller, hold fire!"
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setNameSound
	</WikiPage>
	<Syntax>
		Object setNameSound String
	</Syntax>
	<RawSyntax>
		person setNameSound name
	</RawSyntax>
	<Example>
		$Code$unit1 setNameSound "dixon";$/Code$
	</NextExample>
		$Code$unit1 setNameSound ""; // will reset to default behaviour$/Code$
	</NextExample>
		$Code$_name = "Masood";
	unit1 setNameSound _name;
	unit1 setName _name;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(September 19, 2013)
	nameSound can be any preset BIS recorded name value. By default units will be called out in voice by their number. By using nameSound you can call them out by name using the following values:
	Default:
	Armstrong
	Nichols
	Tanny
	Frost
	Lacey
	Larkin
	Kerry
	Jackson
	Miller
	McKendrick
	Levine
	Reynolds
	BLUFOR:
	Adams
	Bennett
	Campbell
	Dixon
	Everett
	Franklin
	Givens
	Hawkins
	Lopez
	Martinez
	OConnor
	Ryan
	Patterson
	Sykes
	Taylor
	Walker
	OPFOR:
	Amin
	Masood
	Fahim
	Habibi
	Kushan
	Jawadi
	Nazari
	Siddiqi
	Takhtar
	Wardak
	Yousuf
	INDEPENDENT:
	Anthis
	Costa
	Dimitirou
	Elias
	Gekas
	Kouris
	Leventis
	Markos
	Nikas
	Nicolo
	Panas
	Petros
	Rosi
	Samaras
	Stavrou
	Thanos
	Vega
	CODE NAMES:
	Ghost
	Stranger
	Fox
	Snake
	Razer
	Jester
	Nomad
	Viper
	Korneedler
	</NextNote>
		(December 22, 2013)
	setting an incorrect value like "0" or "randomString" will remove the callsign (" /* 2, */ fall back")
	</NextNote>
		(April 25, 2015)
	While kylania listed available names, you can use any word you want. Available words for english can be found in configfile "RadioProtocolENG" "Words".
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		disableAI
	</Keyword>
	<Description>
		Disable parts of the AI behaviour to get a better control over the actions of a unit. Must be executed where AI unit is local. If unit changes locality, it might need to be executed again at the new locality to maintain effect.
	Possible values are:
	"TARGET" - stop the unit to watch the assigned target / group commander may not assign targets
	"AUTOTARGET" - prevent the unit from assigning a target independently and watching unknown objects / no automatic target selection
	"MOVE" - disable the AI's movement / do not move
	"ANIM" - disable ability of AI to change animation. Available only since ArmA: Cold War Assault (OFP 1.99).
	"TEAMSWITCH" - AI disabled because of Team Switch
	"FSM" - disable the execution of AI behavior scripts. Available only since Operation Arrowhead v1.60.
	"WEAPONAIM" - no weapon aiming
	"AIMINGERROR" - prevents AI's aiming from being distracted by its shooting, moving, turning, reloading, hit, injury, fatigue, suppression or concealed/lost target Available only since Arma 3 v1.42.
	"SUPPRESSION" - prevents AI from being suppressed Available only since Arma 3 v1.42.
	"CHECKVISIBLE" - disables visibility raycasts Available only since Arma 3 v1.54.
	"COVER" - disables usage of cover positions by the AI Available only since Arma 3 v1.56.
	"AUTOCOMBAT" - disables autonomous switching to COMBAT when in danger Available only since Arma 3 v1.56.
	"PATH" - stops the AI’s movement but not the target alignment Available only since Arma 3 v1.61.
	"MINEDETECTION" - disable Ai mine detection.
	"ALL" - all of the above Available since Arma 3 v1.65
	Note: In OFP there is no way to undo this command.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/disableAI
	</WikiPage>
	<Syntax>
		Object disableAI String
	</Syntax>
	<RawSyntax>
		unitName disableAI section
	</RawSyntax>
	<Example>
		$Code$_soldier1 disableAI "AUTOTARGET";$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		(26.9.2013)
	After substantial testing in ArmA3 1.01, the AI sections are as follows:
	MOVE: disabling this will stop units from turning and moving. Units will still change stance and fire at the enemy if the enemy happens to walk right in front of the barrel. Unit will watch enemies that are in their line of sight, but won't turn their bodies to face the enemy, only their head. Works for grouped units as well. Good for staging units and holding them completely still. Movement can't be controlled by a script either, you have to re-enable movement for that. Unit will still be able to aim within his cone of fire.
	AUTOTARGET: Essentially makes single units without a group, "deaf". The unit still goes prone and combat ready if he hears gunfire. They won't turn around when gunfire comes from the behind, but if an enemy walks in front they will target the enemy and fire as normal. WON'T WORK FOR GROUPED UNITS WITH A LEADER, the leader will assign targets to the units and effectively enables the AI back on.
	TARGET: Will prevent units from engaging the target. Units still move around for cover etc...but won't hunt down the player. Works in groups as well. Excellent for keeping units inside bases or other areas without having them flank or engage anyone. They will still seek good cover if something is close by.
	ANIM: completely freezes the unit, including breathing. Won't even blink. No move command works until the unit is unfrozen.
	FSM: Essentially makes the enemy "dumber". Enemies react slower to enemy fire and the enemy stops using hand signals. Disabling FSM, can give the impression of untrained units as they react slower and are more disorganized than when FSM is enabled. Good for rebel fighters and when enabled better for professional armies.
	</NextNote>
		(August 3, 2006)
	Notes from before the conversion:
	The "TARGET" section of the AI is likely different than what you would think. Normally, when an AI group is standing still and sees an enemy, the group will break formation and start moving towards the enemy. If you disable the "TARGET" AI, then the AI units will stay where they are at. Even if you disable the "MOVE" AI, the units will still move out to attack the enemy, unless you disable the "TARGET" AI. Disabling both these AI sections is useful when placing units in defensive positions. This way, you can have them stay behind their cover, and not run out into the open.
	This command has also a bug: after mission save or load the effect will be no longer active and you must set it again. It's also good way to detect number of saves and loads (loads can be recognized using time command).
	</NextNote>
		(Feb 7, 2009)
	Multiplayer Use as of ArmA v1.14:
	Contrary to the post above, using this command WILL disable A.I. movement ability if used with the "MOVE" parameter. Works even when the A.I. is grouped with other units. I use this command to set up stationary targets at objectives all the time. Works on a dedicated server.
	</NextNote>
		(September 19, 2015)
	Beware that disabling "TARGET" AI to units in the player's group will disable the ability to execute engage orders issued by the player.
	</NextNote>
		(August 24, 2016)
	As of version 1.65 dev., disableAI "MOVE" will also stop vehicles driven by AI.
	</NextNote>
		(September 26, 2016)
	Command is buggy in version 1.64.138497 as it disables the ability to drive vehicles for players. Tested with $Code$player disableAI "move"$/Code$. Entering a vehicle is possible, but not starting the engine. $Code$player enableAI "move"$/Code$ enables the player to drive again.
	Already in the feedback tracker: https://feedback.bistudio.com/T120346
	</NextNote>
		(Januaary 21, 2017)
	Does not lower CPU usage of still AI without enemies in range
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		onGroupIconClick
	</Keyword>
	<Description>
		Defines an action performed when player clicked on group marker (3D or in a map). The code executed once. This EH, unlike onGroupIconOverEnter and onGroupIconOverLeave, has one more param which returns 1 if RMB was pressed, 0 otherwise.
	i
	Since Arma 3 v1.57 a stackable version of this EH is available: GroupIconClick
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/onGroupIconClick
	</WikiPage>
	<Syntax>
		onGroupIconClick String/Code
	</Syntax>
	<RawSyntax>
		onGroupIconClick command
	</RawSyntax>
	<Example>
		$Code$onGroupIconClick
	{
	// Passed values for _this are:
	_is3D = _this select 0;
	_group = _this select 1;
	_wpID = _this select 2;
	_RMB = _this select 3;
	_posx = _this select 4;
	_posy = _this select 5;
	_shift = _this select 6;
	_ctrl = _this select 7;
	_alt = _this select 8;
	_message = format ["____ Info ____"];
	{_message = _message + format ["\n %1",_x]} forEach _this;
	hint _message;
	}$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		diag_log
	</Keyword>
	<Description>
		Dumps the argument's value to the report file. Each call creates a new line in the file.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/diag_log
	</WikiPage>
	<Syntax>
		diag_log Anything
	</Syntax>
	<RawSyntax>
		diag_log anything
	</RawSyntax>
	<Example>
		$Code$diag_log time ;$/Code$
	</NextExample>
		$Code$diag_log format ["%1, %2", player, time ];$/Code$
	</NextExample>
		$Code$_arr = [1, "foo", player, "bar"];
	{
	diag_log _x ;
	} forEach _arr; // Creates 4 entries on 4 lines$/Code$
	</NextExample>
		$Code$_arr = [1, "foo", player, "bar"];
	diag_log _arr;
	// Creates one entry of e.g. [1,"foo",B Alpha 1-1:1 (Player Name),"bar"]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		To dump a string without "" use text.
	Posted 23:35, 19 April 2011
	</NextNote>
		in patch 1.59 there is a limit of 1044 characters to be printed, no error or crash but diag_log line will simply end at character number 1044.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		tvData
	</Keyword>
	<Description>
		Returns string data from item on given path. IDC means id of parent Tree View.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/tvData
	</WikiPage>
	<Syntax>
		tvData Array
	</NextSyntax>
		Control tvData Array
	</Syntax>
	<RawSyntax>
		tvData [idc, [path]]
	</NextRawSyntax>
		control tvData [path]
	</RawSyntax>
	<Example>
		$Code$tvData [101, [0]];$/Code$
	</NextExample>
		$Code$(_display displayCtrl 101) tvData [0];$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
		(Sep 11 2014)
	(A3 1.28)tv command family overview
	$Code$
	//tv command family available for CT_TREE (type 12)
	private ["_count","_current","_data","_text","_value","_pic"];
	_CT_TREE tvAdd [ [],"Parent_A"];
	_CT_TREE tvAdd [ [0],"Child_A"];
	_CT_TREE tvAdd [ [0,0],"Grandchild_A"];
	_CT_TREE tvAdd [ [],"Parent_B"];
	_CT_TREE tvAdd [ [1],"Child_B"];
	_count = _CT_TREE tvCount []; //return 2
	_CT_TREE tvSetCurSel [0,0,0]; //select grandchild_A
	_current = tvCurSel _CT_TREE; //return [0,0,0]
	_CT_TREE tvSetData [_current,"I'm grandchild_A"];
	_data = _CT_TREE tvData _current; // "I'm grandchild_A"
	_text = _CT_TREE tvText _current; //"Grandchild_A"
	_CT_TREE tvSetValue [_current,14];
	_value = _CT_TREE tvValue _current; // 14
	_CT_TREE tvSetPicture [_current, getText ( configFile "CfgWeapons" "optic_NVS" "picture")];
	_pic = _CT_TREE tvPicture _current;
	_CT_TREE tvExpand [1];
	_CT_TREE tvSort [[], false ];
	_CT_TREE tvSortByValue [[], false ];
	_CT_TREE tvDelete [0,0]; //remove child_b
	tvClear 12;
	_CT_TREE tvCollapse [];
	$/Code$
	</Note>
	<ReturnValue>
		String - String
	</ReturnValue>

</NextListItem>

	<Keyword>
		setSimpleTaskDestination
	</Keyword>
	<Description>
		Attach a destination to the simple task. Overrides setSimpleTaskTarget
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setSimpleTaskDestination
	</WikiPage>
	<Syntax>
		Task setSimpleTaskDestination Array
	</Syntax>
	<RawSyntax>
		task setSimpleTaskDestination pos
	</RawSyntax>
	<Example>
		$Code$_tskGoHere setSimpleTaskDestination ( getMarkerPos "obj1");$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		shownArtilleryComputer
	</Keyword>
	<Description>
		Checks whether the player has the artillery computer currently open.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/shownArtilleryComputer
	</WikiPage>
	<Syntax>
		shownArtilleryComputer
	</Syntax>
	<RawSyntax>
		shownArtilleryComputer
	</RawSyntax>
	<Example>
		$Code$if ( shownArtilleryComputer ) then { hint "Artillery Computer shown on screen"; };$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		kbTell
	</Keyword>
	<Description>
		Make the person tell to the receiver the sentence. See Conversations for more details.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/kbTell
	</WikiPage>
	<Syntax>
		Object kbTell Array
	</Syntax>
	<RawSyntax>
		person kbTell [receiver, topicName, sentenceClass]
	</RawSyntax>
	<Example>
		$Code$player kbTell [BIS_HQ, "myTopic", "playerSentence1"];$/Code$
	</NextExample>
		$Code$player kbTell [
	BIS_HQ, // to
	"Airstrike", // topic
	"AirstrikeRequest", // sentence
	["Team", {}, "Anvil", ["Anvil"]], // argument 1
	["Location", {}, "Strelka", ["Strelka"]], // argument 2
	true]; // use radio
	// bikb reference:
	/*
	class AirstrikeRequest
	{
	text = "%team requesting close air support at grid %location ";
	speech[] = { %Team, RequestingCloseAirSupportAtGrid, %Location };
	class Arguments
	{
	class Team { type = "simple"; };
	class Location { type = "simple"; };
	};
	};*/$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(may 02, 2010)
	Jezuro's helping topic on BIforum : link
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		try
	</Keyword>
	<Description>
		Defines a try-catch structure. This sets up an exception handling block. Any thrown exception in a try block is caught in a catch block. The structured exception block has the following form:
	$Code$ try //begin of try-catch block
	{ //block, that can throw exception }
	catch
	{ //block, that process an exception. Exception is described in _exception variable };$/Code$
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/try
	</WikiPage>
	<Syntax>
		try Code
	</NextSyntax>
		Anything try Code
	</Syntax>
	<RawSyntax>
		try code
	</NextRawSyntax>
		args try code
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(June 9, 2015)
	Do not expect this behave like Javascript try catch and ignore all errors. But it does have one useful behaviour. Normally when runtime error occurs in SQF (unlike when there is compile error) it continues to execute till the end. But if the script is placed in try {} scope and throw is used upon error, the script immediately terminates, exits the try {} scope and enters catch {} scope. This way it is possible to process possible exceptions in civilised manner.
	</Note>
	<ReturnValue>
		Exception - Exception
	</ReturnValue>

</NextListItem>

	<Keyword>
		camCreate
	</Keyword>
	<Description>
		Create a camera or a seagull object on the given position. Also other objects can be created this way, but vehicles created with camCreate cannot be entered. Any units created with camCreate will remain static. Differently to createVehicle, objects are created without consideration of the collision detection with surrounding objects, thus the objects are spawned exactly at the given position. camCreate is conducted immediately, the command doesn't wait for camCommit.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/camCreate
	</WikiPage>
	<Syntax>
		String camCreate Array
	</Syntax>
	<RawSyntax>
		type camCreate position
	</RawSyntax>
	<Example>
		$Code$_cam = "camera" camCreate ( position player )$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
		(August 3, 2006)
	Notes from before the conversion:
	(CWR 1.91) createVehicle is a valid replacement (with special consideration to locality).
	You can also use camCreate to create objects.
	$Code$flare1 = "flare" camCreate getPos gameLogic_1$/Code$
	However, soldier units created in this way have little or no AI.
	</Note>
	<ReturnValue>
		Object
	</ReturnValue>

</NextListItem>

	<Keyword>
		createSoundSource
	</Keyword>
	<Description>
		Creates a sound source of the given type (type is the name of the subclass of CfgVehicles which is pointing to the sound defined in CfgSFX ). If the markers array contains several marker names, the position of a random one is used, otherwise, the given position is used. The sound source is placed inside a circle with this position as its center and placement as its radius. Some of the vanilla classes pre-configured in Arma 3:
	"Sound_Alarm"
	"Sound_Alarm2"
	"Sound_BattlefieldExplosions"
	"Sound_BattlefieldFirefight"
	"Sound_Fire"
	"Sound_SmokeWreck1"
	"Sound_SparklesWreck1"
	"Sound_SparklesWreck2"
	"Sound_Stream"
	Since Arma 3 v1.69.141183 it is possible to define sounds for use with createSoundSource in mission config. As mentioned earlier, the sounds needed for this command should be defined inside CfgVehicles class, which itself references CfgSFX class. If given class searched in main config and is not found, the search will continue in description.ext. Here is an example of suitable mission config definition:
	// description.ext
	class CfgSFX
	{
	class MyOwl
	{
	sound0 [] = { "@A3\Sounds_F\environment\animals\birds\owl1", db - 10, 1.0, 1000, 0.2, 0, 15, 30 }; // path to addon sound
	sound1 [] = { "@A3\Sounds_F\environment\animals\birds\owl2", db - 10, 1.0, 1000, 0.2, 0, 15, 30 }; // path to addon sound
	sound2 [] = { "@A3\Sounds_F\environment\animals\birds\owl3", db - 10, 1.0, 1000, 0.2, 0, 15, 30 }; // path to addon sound
	sounds [] = { sound0, sound1, sound2 };
	empty [] = { "", 0, 0, 0, 0, 0, 0, 0 };
	};
	};
	class CfgVehicles
	{
	class MyOwlSound // class name to be used with createSoundSource
	{
	sound = "MyOwl" ; // reference to CfgSFX class
	};
	};
	$Code$_owl = createSoundSource ["MyOwlSound", position player, [], 0];$/Code$
	Note that the sound created by createSoundSource will always be looping. Also when CfgSFX sound definition contains more than 1 sound, there is no guarantee that the sound played will be the same on every PC in Multiplayer.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/createSoundSource
	</WikiPage>
	<Syntax>
		createSoundSource Array
	</Syntax>
	<RawSyntax>
		createSoundSource [type, position, markers, placement]
	</RawSyntax>
	<Example>
		$Code$_soundSource = createSoundSource ["LittleDog", position player, [], 0]$/Code$
	</NextExample>
		$Code$[] spawn
	{
	_alarm = createSoundSource ["Sound_Alarm", position player, [], 0]; //starts alarm
	sleep 10;
	deleteVehicle _alarm; //stops alarm
	};$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Object
	</ReturnValue>

</NextListItem>

	<Keyword>
		lnbSetPicture
	</Keyword>
	<Description>
		Sets the picture in the item with the given position of the 2D listbox.
	Name is the picture name.
	The picture is searched in the mission, directory, the dtaExt subdirectory of the campaign directory, and the dtaExt directory and the data bank (or directory).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lnbSetPicture
	</WikiPage>
	<Syntax>
		lnbSetPicture Array
	</NextSyntax>
		Control lnbSetPicture Array
	</Syntax>
	<RawSyntax>
		lnbSetPicture [IDC, [Row, Column], PicturePathOrPictureName]
	</NextRawSyntax>
		_ctrl lnbSetPicture [ [Row, Column], PicturePathOrPictureName]
	</RawSyntax>
	<Example>
		$Code$lnbSetPicture [1, [0, 0], "Picture"];$/Code$
	</NextExample>
		$Code$_ctrl lnbSetPicture [ [0, 0], "\A3\Ui_f\data\GUI\Cfg\Ranks\lieutenant_gs.paa"];$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
		(Sep 9 2014)
	(A3 1.28)As for invisible data processing, lnbAddArray, lnbAddColumn, lnbData, lnbGetColumnsPosition, lnbSetColumnsPos, lnbSetData, lnbSetText, lnbSetValue, lnbText and lnbValue store data types into exact position of the listNbox with different spaces. Accessing data with coordinate command at nearly the same syntax:
	$Code$
	//Set same value to one position of a Control
	_ctrl lnbSetData [ [0,0],"#1"];
	lnbSetColumnsPos [102, [0,1], 1];
	_ctrl lnbSetText [ [0,1], "#1"];
	_ctrl lnbSetValue [ [0,0],1];
	//Accessing the value disregard affecting one another.
	_ctrl lnbData [0,0]; //"#1"
	lnbGetColumnsPosition _ctrl //[1];
	_ctrl lnbText [0,0];//"#1"
	_ctrl lnbValue [0,0];//1
	$/Code$
	For a direct visible control over CT_LISTNBOX:
	$Code$
	0 = [_CT_LISTNBOX] spawn {
	private ["_CT_LISTNBOX","_color","_current","_pic"];
	disableSerialization ;
	_CT_LISTNBOX = _this select 0;
	{
	_CT_LISTNBOX lnbAddRow [ getText (_x "displayNameShort"), getText (_x "displayName")];
	_CT_LISTNBOX lnbSetPicture [ [_foreachIndex,0], getText (_x "texture")];
	} forEach (" isClass _x" configClasses ( configFile "CfgRanks"));
	_CT_LISTNBOX lnbSetCurSelRow 0;
	_current = lnbCurSelRow _CT_LISTNBOX;
	_color = _CT_LISTNBOX lnbColor [_current,0];
	_CT_LISTNBOX lnbSetColor [ [_current,1], [(_color select 0)/2,0,0,1] ];
	_CT_LISTNBOX lnbDeleteColumn 0;
	_CT_LISTNBOX lnbDeleteRow 1;
	sleep 1;
	lnbClear _CT_LISTNBOX;//Clear all items but control still remains just invisible.
	};
	$/Code$
	A combined use of both invisible and visible data processing commands alive the Control.
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		selectRandom
	</Keyword>
	<Description>
		Returns a random element from the given array. Engine solution to BIS_fnc_selectRandom
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/selectRandom
	</WikiPage>
	<Syntax>
		selectRandom Array
	</Syntax>
	<RawSyntax>
		selectRandom array
	</RawSyntax>
	<Example>
		$Code$_randomElement = selectRandom [1,2,3,4,5];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Anything
	</ReturnValue>

</NextListItem>

	<Keyword>
		copyFromClipboard
	</Keyword>
	<Description>
		Return the content of the (text) clipboard.
	Disabled in Multiplayer for security reasons
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/copyFromClipboard
	</WikiPage>
	<Syntax>
		copyFromClipboard
	</Syntax>
	<RawSyntax>
		copyFromClipboard
	</RawSyntax>
	<Example>
		$Code$hint copyFromClipboard ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		vectorCos
	</Keyword>
	<Description>
		Cosine of angle between two 3D vectors.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/vectorCos
	</WikiPage>
	<Syntax>
		Array vectorCos Array
	</Syntax>
	<RawSyntax>
		vector1 vectorCos vector2
	</RawSyntax>
	<Example>
		$Code$_cos = getPos player vectorCos [0,0,2];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(28 Jun, 2014)
	(ArmA3 1.22)Algorithm:
	$Code$
	Vector1 = [x1,y1,z1]; Vector2 = [x2,y2,z2];
	Result = ((x1 * x2) + (y1 * y2) + (z1 * z2))/(( sqrt (x1 ^ 2 + y1 ^ 2 + z1 ^ 2))*( sqrt (x2 ^ 2 + y2 ^ 2 + z2 ^ 2)))
	$/Code$
	Given two vectors of attributes, A and B, the cosine similarity, cos(θ), is represented using a dot product and magnitude. The resulting similarity values indicating intermediate similarity or dissimilarity between two vectors.
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		units
	</Keyword>
	<Description>
		Returns an array with all the units in the group or group of the unit. For a destroyed object an empty array is returned.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/units
	</WikiPage>
	<Syntax>
		units Group/Object
	</Syntax>
	<RawSyntax>
		units groupOrUnit
	</RawSyntax>
	<Example>
		$Code$_myUnitCount = count units group player ;$/Code$
	</NextExample>
		$Code$_isInMyGroup = _soldier1 in units player ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(September 24, 2009)
	The returned array on MP clients is not updated when team members die (only when they are deleted). ( Tested on VBS2 )
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		setDammage
	</Keyword>
	<Description>
		Damage / repair object.
	Damage 0 means fully functional, damage 1 means completely destroyed / dead.
	Alias of setDamage, which was introduced to fix a spelling error in this operator's name.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setDammage
	</WikiPage>
	<Syntax>
		Object setDammage Number
	</Syntax>
	<RawSyntax>
		object setDammage damage
	</RawSyntax>
	<Example>
		$Code$_soldier1 setDammage 1;$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
		In OFP, setting a unit's damage to a negative value will set it's health to full, but impair their aim.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		taskState
	</Keyword>
	<Description>
		Returns the current state of a task.
	Possible return values are:
	None
	Created
	Assigned
	Succeeded
	Failed
	Canceled
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/taskState
	</WikiPage>
	<Syntax>
		taskState Task
	</Syntax>
	<RawSyntax>
		taskState task
	</RawSyntax>
	<Example>
		$Code$tskSomeTask = player createSimpleTask ["NewTask"];
	hint format["Taskstate: %1", taskState tskSomeTask];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		addMusicEventHandler
	</Keyword>
	<Description>
		Adds playMusic event handler. Returns id of the handler or -1 when failed. Just like addMissionEventHandler, music EH is also attached to the mission.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/addMusicEventHandler
	</WikiPage>
	<Syntax>
		addMusicEventHandler Array
	</Syntax>
	<RawSyntax>
		addMusicEventHandler [type, function]
	</RawSyntax>
	<Example>
		$Code$_ehID = addMusicEventHandler ["MusicStart", { hint str _this}];$/Code$
	</NextExample>
		$Code$_ehID = addMusicEventHandler ["MusicStop", { hint str _this}];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(March 4, 2013)
	There are these two types at this time:
	MusicStart - It is triggered when the music is started (command playMusic ). In variable _this is stored class name from CfgMusic.
	MusicStop - It is triggered when the music is ended (command playMusic ). In variable _this is stored class name from CfgMusic.
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		setRank
	</Keyword>
	<Description>
		Sets rank of given unit.
	Possible values: PRIVATE, CORPORAL, SERGEANT, LIEUTENANT, CAPTAIN, MAJOR or COLONEL.
	Since Arma 3 v1.67 this command is
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setRank
	</WikiPage>
	<Syntax>
		Object setRank String
	</Syntax>
	<RawSyntax>
		unitName setRank rank
	</RawSyntax>
	<Example>
		$Code$player setRank "COLONEL"$/Code$
	</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
		(Mar 26, 2009)
	Changing a unit's rank using either setUnitRank or setRank will also REPLACE their current rating dependent on their new rank (colonels have a rating of 7500 etc). That is to say REPLACE, not add to: the unit's old rating will disappear with the rank change.
	</NextNote>
		(April 12, 2014)
	Behavior when used on players in multiplayer seems unpredictable. (ArmA 3 1.00)
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		isNumber
	</Keyword>
	<Description>
		Check if config entry represents number.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isNumber
	</WikiPage>
	<Syntax>
		isNumber Config
	</Syntax>
	<RawSyntax>
		isNumber config
	</RawSyntax>
	<Example>
		$Code$_ok = isNumber (configFile "CfgVehicles")
	// Result is false$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		diag_enable
	</Keyword>
	<Description>
		Used to enable/disabled various diagnostics.
	Only available in the Arma 3 Diagnostic exe
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/diag_enable
	</WikiPage>
	<Syntax>
		String diag_enable Boolean
	</Syntax>
	<RawSyntax>
		diag_mode diag_enable state
	</RawSyntax>
	<Example>
		$Code$"All" diag_enable true$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		fireAtTarget
	</Keyword>
	<Description>
		Remotely forces a unit to fire the given weapon. See also: BIS_fnc_fire
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/fireAtTarget
	</WikiPage>
	<Syntax>
		Object fireAtTarget Array
	</Syntax>
	<RawSyntax>
		sourceVehicle fireAtTarget [targetVehicle, weaponMuzzleName]
	</RawSyntax>
	<Example>
		$Code$_handle = this fireAtTarget [groundtarget1,"HellfireLauncher"];$/Code$
	</NextExample>
		$Code$_handle = Igla_AA_pod_TK_EP1 fireAtTarget [_helicopter, currentWeapon Igla_AA_pod_TK_EP1];$/Code$
	</NextExample>
		$Code$_handle = Igla_AA_pod_TK_EP1 fireAtTarget [helicopter];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(Sep 16, 2010)
	Most likely only for missiles and for interaction with player only.
	</NextNote>
		(Apr 8, 2014)
	(A3 1.14) Source vehicle is only limited to manned vehicle while any other types won’t be able to active fireAtTarget handle, e.g.
	$Code$
	_handle = _InfantryUnit fireAtTarget [_Infnatrytarget,( weapons _Infantryunit select 0)];
	//false & no bullet shoot
	$/Code$
	Target has no limitation and can be any object:
	$Code$
	_handle = ( vehicle _veh) fireAtTarget [ObjNull,( weapons ( vehicle _veh) select 0)];
	//true & a bullet shoot
	$/Code$
	Handle returns false if weapon class name is inaccurate, e.g.
	$Code$
	_Handle = ( vehicle _veh) fireAtTarget [ObjNull,”UnknownWeapon”];
	//false & no bullet shoot.
	$/Code$
	Handle still returns true even though the vehicle is unavailable to shoot any bullet:
	$Code$
	_weapon = weapons ( vehicle _veh) select 0;
	( vehicle _veh) setAmmo [_weapon,0];
	_Handle = ( vehicle _veh) fireAtTarget [ObjNull,_weapon];
	//true & no bullet shoot
	$/Code$
	difference
	command
	Source
	Target
	Behavior
	Workaround templets
	fire
	Either Unit or manned vehicle
	N/A
	Fired aiming at air for infantry rifle
	Together with selectWeapon,
	suggested to work with "throw","put" weapon type
	for infantry, or vehicle entity indeed.
	fireAtTarget
	Manned vehicle only
	Any object
	Normal shoot, won’t aim at target automatically
	_veh doWatch _target;
	waitUntil {_veh aimedAtTarget [_target] 0};
	_veh fireAtTarget [_target];
	forceWeaponFire
	Either Unit or manned aircraft (weapon operator)
	N/A
	Normal shoot, can change fire mode
	//E.g. unit won't shoot until he is facing the target.
	_unit doWatch _tar;
	waitUntil {
	_dir = direction _unit;
	_relative = [_unit,_tar] call BIS_fnc_relativeDirTo ;
	if (_dir == _relative) exitWith {
	_unit forceWeaponFire [ currentWeapon _unit,"single"];
	};
	false
	};
	doFire
	Unit only
	Either unit or vehicle
	automatic aiming and shooting
	No special example.
	commandFire
	Unit only
	Either unit or vehicle
	automatic aiming and shooting
	No special example.
	action ["UseWeapon"]
	Either unit or manned vehicle
	N/A
	unexpected behavior
	N/A
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		sideChat
	</Keyword>
	<Description>
		Types text to the side radio channel. Must have assigned "ItemRadio" to see or transmit the messages. The text will be visible only on the PC where command was executed. If you need the message to show on all computers, you have to execute it globally (see remoteExec )
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/sideChat
	</WikiPage>
	<Syntax>
		Object sideChat String
	</NextSyntax>
		Array sideChat String
	</Syntax>
	<RawSyntax>
		unitName sideChat chatText
	</NextRawSyntax>
		[side, identity] sideChat chatText
	</RawSyntax>
	<Example>
		$Code$_soldierOne sideChat "Show this text";$/Code$
	</NextExample>
		$Code$[ west, "HQ"] sideChat "Hi there";$/Code$
	</NextExample>
		$Code$driver vehicle player sideChat "sideChat";
	driver vehicle player globalChat "globalChat";
	driver vehicle player groupChat "groupChat";
	vehicle player vehicleChat "vehicleChat";
	driver vehicle player commandChat "commandChat";
	driver vehicle player customChat [1, "customChat"];
	systemChat "systemChat";$/Code$
	</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
		In OFP v1.96, sideChat messages can be sent from 2 abstract sources: "Papa_Bear" and "Base FireFly". Use sideChat on an array in the form [SIDE,"base"],[SIDE,"HQ"],[SIDE,"Papa_bear"] or [SIDE,"airbase"], where SIDE is the side broadcasting. "HQ", "base" and "Papa_bear" seem to be the same object. The callsign strings can be re-defined using a stringTable.csv file, using STR_CFG_PAPABEAR and STR_CFG_FIREFLYBASE. Example : [EAST,"base"] sideChat "Return to base!".
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		land
	</Keyword>
	<Description>
		Force helicopter landing. Landing mode may be:
	"LAND" (complete stop)
	"GET IN" (hovering very low, for another unit to get in)
	"GET OUT" (hovering low,for another unit to get out)
	"NONE" (cancel a landing) Available since ArmA 2 57463 build.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/land
	</WikiPage>
	<Syntax>
		Object land String
	</Syntax>
	<RawSyntax>
		helicopter land mode
	</RawSyntax>
	<Example>
		$Code$_cobraOne land "LAND"$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		(August 4, 2006)
	Notes from before the conversion:
	Helos will land at the nearest "H" or "Invisible H", if there is one around (within 500m in ArmA).
	</NextNote>
		To make a helicopter LAND correctly and not hovering over the landing position use unitReady to check if the helicopter already has reached his destination.
	You can fix a landing bug by using a short delay bevore checking the unitReady command.
	_helicopter move (getPos _destination);
	sleep 3;
	while { ( (alive _helicopter) && !(unitReady _helicopter) ) } do
	{
	sleep 1;
	};
	if (alive _helicopter) then
	{
	_helicopter land "LAND";
	};
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		vectorWorldToModelVisual
	</Keyword>
	<Description>
		Converts vector direction from world to model space in render time scope.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/vectorWorldToModelVisual
	</WikiPage>
	<Syntax>
		Object vectorWorldToModelVisual Array
	</Syntax>
	<RawSyntax>
		object vectorWorldToModelVisual worldDir
	</RawSyntax>
	<Example>
		$Code$// Convert world space vector [0,-10,4] to model space of object _airplane:
	_airplane vectorWorldToModelVisual [0,-10,4];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		getObjectType
	</Keyword>
	<Description>
		Returns object type as a number:
	1 - Primary - Normal object placed in Visitor, part of landscape
	2 - Network - Road placed in Visitor, part of landscape
	4 - Temporary - Temporary object (like tracks)
	8 - TypeVehicle - Some entity added by game
	16 - TypeTempVehicle - Temporary entity
	32 - LandDecal - Land decal
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getObjectType
	</WikiPage>
	<Syntax>
		getObjectType Object
	</Syntax>
	<RawSyntax>
		getObjectType object
	</RawSyntax>
	<Example>
		$Code$_objType = getObjectType player ;$/Code$
	</NextExample>
		$Code$_objType = getObjectType cursorObject ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		floor
	</Keyword>
	<Description>
		Returns the next lowest integer in relation to x.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/floor
	</WikiPage>
	<Syntax>
		floor Number
	</Syntax>
	<RawSyntax>
		floor x
	</RawSyntax>
	<Example>
		$Code$floor 5.25
	Result is 5$/Code$
	</NextExample>
		$Code$floor -5.25
	Result is -6$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		direction
	</Keyword>
	<Description>
		Returns the direction an object or a location is facing (differs from getDir in that this also works with locations).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/direction
	</WikiPage>
	<Syntax>
		direction Object/Location
	</Syntax>
	<RawSyntax>
		direction object
	</RawSyntax>
	<Example>
		$Code$player setDir 90;
	_d = direction player ;//returns 90$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		collect3DENHistory
	</Keyword>
	<Description>
		Execute a block of code in which all Eden Editor operations will be recorded as one history step. For example creating an entity, setting its attributes and then connections would normally be recorded as three different steps. Calling them all within single collect3DENHistory block will group them together and the user will need to undo only once to revert the changes.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/collect3DENHistory
	</WikiPage>
	<Syntax>
		collect3DENHistory Code
	</Syntax>
	<RawSyntax>
		collect3DENHistory code
	</RawSyntax>
	<Example>
		$Code$collect3DENHistory {
	_logic = create3DENEntity ["Logic", "Logic", position player ];
	add3DENConnection ["Sync", [_logic], player ];
	};
	// Creates a logic and connects it to player in one history step.$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		slingLoadAssistantShown
	</Keyword>
	<Description>
		Returns true of Sling Load Assistant is open
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/slingLoadAssistantShown
	</WikiPage>
	<Syntax>
		slingLoadAssistantShown
	</Syntax>
	<RawSyntax>
		slingLoadAssistantShown
	</RawSyntax>
	<Example>
		$Code$waitUntil { slingLoadAssistantShown };
	hint "You lack rudimentary motor skills and basic eye-hand coordination.";
	//scold user for unethical practices$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		publicVariableServer
	</Keyword>
	<Description>
		Send the variable value to the server - same limitations regarding variable type as publicVariable.
	In Arma 3 it is possible to broadcast nil value
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/publicVariableServer
	</WikiPage>
	<Syntax>
		publicVariableServer String
	</Syntax>
	<RawSyntax>
		publicVariableServer varName
	</RawSyntax>
	<Example>
		$Code$publicVariableServer "CTFscoreOne";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(24 Aug, 2012)
	publicVariableServer (run on client)
	publicVariableClient (run on server)
	Publishers the variable (name as STRING) to the server only. Useful when you want to synchronize a variable with the server but not any other clients. - Rocket
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		splitString
	</Keyword>
	<Description>
		An SQF version of C++ strtok. Splits given string str into an array of tokens according to given delimiters. In addition, if empty string "" is used for delimiters, str is split by each character.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/splitString
	</WikiPage>
	<Syntax>
		String splitString String
	</Syntax>
	<RawSyntax>
		str splitString delimiters
	</RawSyntax>
	<Example>
		$Code$_str = "- This, is a sample string." splitString "-,. "; // ["This","is","a","sample","string"]
	_str joinString " "; // "This is a sample string"$/Code$
	</NextExample>
		$Code$"\A3\ui_f\data\map\vehicleicons\iconLogic_ca.paa" splitString "\.";
	// ["A3","ui_f","data","map","vehicleicons","iconLogic_ca","paa"]$/Code$
	</NextExample>
		$Code$"1:2:3" splitString ":"; // ["1","2","3"]$/Code$
	</NextExample>
		$Code$["test","test"] joinString toString [12345] splitString toString [12345]; // ["test","test"]$/Code$
	</NextExample>
		$Code$"Japa is the best!" splitString "" joinString " "; // "J a p a i s t h e b e s t !"$/Code$
	</NextExample>
		$Code$_cmd = currentMagazineDetail player ; //"9mm 16Rnd Mag(13/16)[id/cr:10000011/0]"
	_cmd splitString "([ ]/:)"; //["9mm","16Rnd","Mag","13","16","id","cr","10000011","0"]$/Code$
	</NextExample>
		$Code$// Remove all \r\n from file:
	loadFile "somefile.txt" splitString toString [13,10] joinString " "$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(May 17, 2016)
	This command is unreliable/broken when it comes to some non-ASCII characters (as of Arma 3 1.58):
	$Code$"Mörser" splitString ""
	- ["M"," "," ","r","s","e","r"]
	"Mörser" splitString "ö"
	- ["M","rser"]
	"Mörser" splitString "ä"
	- ["M"," rser"]$/Code$
	</NextNote>
		(October 17, 2016)
	This commands works only with ASCII chars, any chars with codes 127, also used in different languages, will be converted to [" ", " "]. Use toArray to preserve special characters:
	$Code$_spaced = toArray "Mörser" apply { toString [_x]} joinString " "; // M ö r s e r$/Code$
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		skillFinal
	</Keyword>
	<Description>
		Returns final, recalculated sub skill value of given unit. (with regard to AI Level coefficient (Difficulty settings)).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/skillFinal
	</WikiPage>
	<Syntax>
		Object skillFinal String
	</Syntax>
	<RawSyntax>
		unit skillFinal skillName
	</RawSyntax>
	<Example>
		$Code$_unitTrueEndurance = unit1 skillFinal "endurance";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		Since 1.40 the command works also in MP environment
	</NextNote>
		(January 31, 2015)
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		uniformMagazines
	</Keyword>
	<Description>
		Get array with all magazines from uniform of the given unit.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/uniformMagazines
	</WikiPage>
	<Syntax>
		uniformMagazines Object
	</Syntax>
	<RawSyntax>
		uniformMagazines unit
	</RawSyntax>
	<Example>
		$Code$uniformMagazines player ;[
	"6.5mm 30Rnd STANAG Mag(30/30)[id/cr:1/0](3x)"
	]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		setCompassOscillation
	</Keyword>
	<Description>
		Sets compass oscillation.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setCompassOscillation
	</WikiPage>
	<Syntax>
		setCompassOscillation Array
	</Syntax>
	<RawSyntax>
		setCompassOscillation [angle, frequencyMin, frequencyMax]
	</RawSyntax>
	<Example>
		$Code$setCompassOscillation [1, 1, 1];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		getPilotCameraRotation
	</Keyword>
	<Description>
		Returns rotation (relative to the centered camera position) of the object airplane or helicopter pilotCamera.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getPilotCameraRotation
	</WikiPage>
	<Syntax>
		getPilotCameraRotation Object
	</Syntax>
	<RawSyntax>
		getPilotCameraRotation object
	</RawSyntax>
	<Example>
		$Code$_pilotCamRot = getPilotCameraRotation vehicle player$/Code$
	</Example>
	<Locality>
		local / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		menuSize
	</Keyword>
	<Description>
		Returns how many sub entries is in item on given path.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/menuSize
	</WikiPage>
	<Syntax>
		menuSize Array
	</Syntax>
	<RawSyntax>
		menuSize [idc, path]
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		setDestination
	</Keyword>
	<Description>
		Set the destination for path planning of the pilot.
	Possible values for planningMode are:
	"DoNotPlan" - used when not moving
	"DoNotPlanFormation" - used in formation when simple path testing is used
	"LEADER PLANNED" - used for formation leader (full path finding used)
	"LEADER DIRECT" - used for DirectGo (like getin, supply)
	"FORMATION PLANNED" - used in formation when full path finding is used
	"VEHICLE PLANNED" - used for vehicle driver
	Works best when used on agents
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setDestination
	</WikiPage>
	<Syntax>
		Object setDestination Array
	</Syntax>
	<RawSyntax>
		object setDestination [position, planningMode, forceReplan]
	</RawSyntax>
	<Example>
		$Code$bob setDestination [ screenToWorld [0.5,0.5], "LEADER PLANNED", true ]$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setWaypointHousePosition
	</Keyword>
	<Description>
		For waypoints attached to a house, this defines the target house position.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setWaypointHousePosition
	</WikiPage>
	<Syntax>
		Array setWaypointHousePosition Number
	</Syntax>
	<RawSyntax>
		waypoint setWaypointHousePosition pos
	</RawSyntax>
	<Example>
		$Code$[_grp, 2] setWaypointHousePosition 1;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		boundingCenter
	</Keyword>
	<Description>
		Returns the position of original (loaded) center of object in model coordinates.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/boundingCenter
	</WikiPage>
	<Syntax>
		boundingCenter Object
	</Syntax>
	<RawSyntax>
		boundingCenter object
	</RawSyntax>
	<Example>
		$Code$_center = boundingCenter TruckOne$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		getTotalDLCUsageTime
	</Keyword>
	<Description>
		Returns total DLC usage time in this game session
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getTotalDLCUsageTime
	</WikiPage>
	<Syntax>
		getTotalDLCUsageTime
	</Syntax>
	<RawSyntax>
		getTotalDLCUsageTime
	</RawSyntax>
	<Example>
		$Code$_dlcTime = getTotalDLCUsageTime ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		switchLight
	</Keyword>
	<Description>
		Controls whether a lamp is lit or not. For working with CfgNonAIVehicles class "StreetLamp" only.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/switchLight
	</WikiPage>
	<Syntax>
		Object switchLight String
	</Syntax>
	<RawSyntax>
		lamp switchLight mode
	</RawSyntax>
	<Example>
		$Code$( object 12345) switchLight "OFF"$/Code$
	</NextExample>
		$Code$nearestObject [player, "Streetlamp"] switchLight "OFF"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(January 23, 2010)
	If you want turn street lamp off in ArmA2, the syntax is:
	ID959522=position player nearestObject 959522
	ID959522 switchLight "off"
	</NextNote>
		(September 16, 2013)
	In ArmA3 use setHit instead:
	$Code$_lamp = nearestObject [ player, "Lamps_base_F"];
	_lamp setHit ["light_1_hitpoint", 0.97]; //off
	_lamp setHit ["light_1_hitpoint", 0]; //on$/Code$
	Switch all lights off in the 500 radius of player:
	$Code${
	for "_i" from 0 to count getAllHitPointsDamage _x - 1 do
	{
	_x setHitIndex [_i, 0.97];
	};
	}
	forEach nearestObjects
	[
	player,
	[
	"Lamps_base_F",
	"PowerLines_base_F",
	"PowerLines_Small_base_F"
	],
	500
	];$/Code$
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		tvExpandAll
	</Keyword>
	<Description>
		Expands all tree items for the given Tree View.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/tvExpandAll
	</WikiPage>
	<Syntax>
		tvExpandAll Number
	</NextSyntax>
		tvExpandAll Control
	</Syntax>
	<RawSyntax>
		tvExpandAll idc
	</NextRawSyntax>
		tvExpandAll control
	</RawSyntax>
	<Example>
		$Code$tvExpandAll 101;$/Code$
	</NextExample>
		$Code$tvExpandAll _ctrl;$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		lbSetPictureColor
	</Keyword>
	<Description>
		Sets the color of item's picture (left) with the given index of the listbox with id idc of the topmost user dialog to the given color. Color is in format Color. Color which consists from only zeros means disable this override.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lbSetPictureColor
	</WikiPage>
	<Syntax>
		lbSetPictureColor Array
	</NextSyntax>
		Control lbSetPictureColor Array
	</Syntax>
	<RawSyntax>
		lbSetPictureColor [idc, index, color]
	</NextRawSyntax>
		control lbSetPictureColor [index, color]
	</RawSyntax>
	<Example>
		$Code$lbSetPictureColor [101, 0, [0, 1, 0, 0.5]];$/Code$
	</NextExample>
		$Code$_ctrl lbSetPictureColor [0, [1, 1, 1, 1]];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		More information on the LB command family can be found here
	</NextNote>
		(August 18, 2015)
	(ArmA 3 1.48) To give an image on the right side of a listbox item:
	$Code$_ctrl lbSetPictureRightColor [_index, [1,1,1,0.7]];$/Code$
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		weaponInertia
	</Keyword>
	<Description>
		Returns current rate of how much the weapon view is distorted because of quick aiming
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/weaponInertia
	</WikiPage>
	<Syntax>
		weaponInertia Object
	</Syntax>
	<RawSyntax>
		weaponInertia unit
	</RawSyntax>
	<Example>
		$Code$_inertia = weaponInertia player ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		hideObjectGlobal
	</Keyword>
	<Description>
		This command is designed for MP. Hides object on all connected clients as well as JIP. Call on the server only. Can be used on all objects with class names, i.e. ( typeOf object != ""). In SP this command behaves just like hideObject.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/hideObjectGlobal
	</WikiPage>
	<Syntax>
		hideObjectGlobal Object
	</NextSyntax>
		Object hideObjectGlobal Boolean
	</Syntax>
	<RawSyntax>
		hideObjectGlobal object
	</NextRawSyntax>
		object hideObjectGlobal hidden
	</RawSyntax>
	<Example>
		$Code$hideObjectGlobal nearestBuilding [2500,2500,0];$/Code$
	</NextExample>
		$Code$objectname hideObjectGlobal true;$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
		This scripting command must be executed on the server to work properly in multiplayer
	</NextNote>
		(June 27, 2015)
	hideObject and hideObjectGlobal disable object collision in addition to rendering. A3 1.45.131175
	(tested by hiding buildings and running through, driving through, flying through, and shooting through where the building used to be)
	</NextNote>
		(September 1, 2016)
	As of A3 1,62.134494 running hideObjectGlobal in big loop may cause some objects not to be hidden for a players already connected or passed JIP. To avoid players rendering desync consider running that in preInit schedule of a server.
	</NextNote>
		(August 7, 2017)
	In A3 1.72.142342 when you hide object via hideObjectGlobal, model sounds still be audible.
	For e.g. if you delete apex house from map, you still hear a conditioner sound at this spot
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctValue
	</Keyword>
	<Description>
		Returns metadata (number) associated with a particular row of RscControlsTable.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctValue
	</WikiPage>
	<Syntax>
		ctValue Control
	</Syntax>
	<RawSyntax>
		ctValue Control
	</RawSyntax>
	<Example>
		$Code$_number = ctValue _control;$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		hasPilotCamera
	</Keyword>
	<Description>
		Returns true if the object airplane or helicopter has a pilotCamera.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/hasPilotCamera
	</WikiPage>
	<Syntax>
		hasPilotCamera Object
	</Syntax>
	<RawSyntax>
		hasPilotCamera object
	</RawSyntax>
	<Example>
		$Code$hasPilotCamera vehicle player$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		sliderSetRange
	</Keyword>
	<Description>
		Set limits of slider idc of topmost user dialog.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/sliderSetRange
	</WikiPage>
	<Syntax>
		sliderSetRange Array
	</NextSyntax>
		Control sliderSetRange Array
	</Syntax>
	<RawSyntax>
		sliderSetRange [idc, min, max]
	</NextRawSyntax>
		control sliderSetRange [min, max]
	</RawSyntax>
	<Example>
		$Code$sliderSetRange [101, 0, 100];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		removeAllItemsWithMagazines
	</Keyword>
	<Description>
		Removes all itemsWithMagazines from the uniform, vest and backpack.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/removeAllItemsWithMagazines
	</WikiPage>
	<Syntax>
		removeAllItemsWithMagazines Object
	</Syntax>
	<RawSyntax>
		removeAllItemsWithMagazines unit
	</RawSyntax>
	<Example>
		$Code$removeAllItemsWithMagazines player ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		current3DENOperation
	</Keyword>
	<Description>
		Returns the currently performed editing operation in Eden Editor.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/current3DENOperation
	</WikiPage>
	<Syntax>
		current3DENOperation
	</Syntax>
	<RawSyntax>
		current3DENOperation
	</RawSyntax>
	<Example>
		$Code$if ( current3DENOperation == "Move") then { hint "Moving";};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		setUnitLoadout
	</Keyword>
	<Description>
		Creates a loadout from given inventory structure and applies it to a unit.
	This command is not final and might be changed in a near future.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setUnitLoadout
	</WikiPage>
	<Syntax>
		Object setUnitLoadout Array
	</Syntax>
	<RawSyntax>
		unit setUnitLoadout [loadout, rearm]
	</RawSyntax>
	<Example>
		$Code$_loadout = getUnitLoadout player_1 ;
	player_2 setUnitLoadout _loadout;//Copies loadout from player_1 and applies it to player_2$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		clearAllItemsFromBackpack
	</Keyword>
	<Description>
		Removes all items from the backpack.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/clearAllItemsFromBackpack
	</WikiPage>
	<Syntax>
		clearAllItemsFromBackpack Object
	</Syntax>
	<RawSyntax>
		clearAllItemsFromBackpack unit
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		createDisplay
	</Keyword>
	<Description>
		Creates child display of given display and loads from "resourceName". The notable difference between createDisplay and createDialog is that with createDisplay the player would be able to move whilst having control of the mouse pointer.
	Since Arma 3 v1.49.131653 createDisplay returns Display and will first look in description.ext for resourceName config, if not found, it will then look in main config.
	Displays created with both createDisplay and createDialog will take control of the mouse pointer and will close when user presses Esc.
	$Code$_emptyDisplay = findDisplay 46 createDisplay "RscDisplayEmpty";$/Code$
	If display is needed which exists independently, it can be created in IGUI layer with cutRsc command.
	$Code$"someLayer" cutRsc ["RscTitleDisplayEmpty", "PLAIN"];
	_emptyDisplay = uiNamespace getVariable "RscTitleDisplayEmpty";$/Code$
	Such display can be closed with closeDisplay command or by overwriting the same cut layer with another output. Note that "Unload" EH for some reason does not work with such display.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/createDisplay
	</WikiPage>
	<Syntax>
		Display createDisplay String
	</Syntax>
	<RawSyntax>
		parent createDisplay resourceName
	</RawSyntax>
	<Example>
		$Code$findDisplay 46 createDisplay "RscCredits";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(August 23, 2014)
	Do not simply createDisplay from UI context code such as "ButtonDown" UI Event handler, as it will crash the game. Instead use spawn scope:
	$Code$[] spawn { findDisplay 46 createDisplay "RscCredits"};$/Code$
	</NextNote>
		(November 15, 2014)
	Arma3 v1.34
	When using CreateDisplay instead of CreateDialog, all the commands for working with the controls of the display only work with the control version, not the IDC version.
	EXAMPLE:
	$Code$LbAdd [1234, "item"]; // does not work on displays, and won't error either
	_ctrl LbAdd "item"; // does work with displays$/Code$
	So you have to use the control(DisplayCtrl) and not the IDC.
	</NextNote>
		(July 29, 2017)
	A user dialog created with createDisplay over mission display ( findDisplay 46) will stop display event handlers added to mission display from firing. However if it is created with createDialog then the event handlers continue to work.
	</Note>
	<ReturnValue>
		Nothing/Display
	</ReturnValue>

</NextListItem>

	<Keyword>
		getText
	</Keyword>
	<Description>
		Extract text from config entry.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getText
	</WikiPage>
	<Syntax>
		getText Config
	</Syntax>
	<RawSyntax>
		getText config
	</RawSyntax>
	<Example>
		$Code$_text = getText ( configFile "CfgVehicles" "Thing" "icon");$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(Mar 28, 2014)
	(ArmA3 1.14) It's recommended to use BIS_fnc_GetCfgData or BIS_fnc_returnConfigEntry to get variable cfg data rather than conditioning via isNumber, isText, isArray, getNumber, getText and getArray combination.
	Traditional workaround:
	$Code$
	_cfg = configFile "CfgVehicles" _SomeAddonClassName "DestructionEffects" "Smoke1" "type"
	switch ( true ) do
	{
	case ( isNumber _cfg): { getNumber _cfg};
	case ( isText _cfg): { getText _cfg};
	case ( isArray _cfg): { getArray _cfg;};
	default { nil };
	};
	$/Code$
	Recommended workaround:
	$Code$
	( configFile "CfgVehicles" _SomeAddonClassName "DestructionEffects" "Smoke1" "type") call BIS_fnc_GetCfgData ;
	$/Code$
	To return default value once entry was not found, we can use BIS_fnc_returnConfigEntry instead of BIS_fnc_GetCfgData. e.g.
	$Code$
	[( configFile "CannonFire" "LightExp"),"lifeTime",0] call BIS_fnc_returnConfigEntry ;//0.5
	$/Code$
	To compose collected String into Array, use BIS_fnc_getCfgDataArray instead. E.g.
	$Code$
	( configFile "CfgVehicles" _SomeAddonClassName "DestructionEffects" "Smoke1" "type") call BIS_fnc_getCfgDataArray ;
	$/Code$
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		triggerAttachObject
	</Keyword>
	<Description>
		Assigns a static object to the trigger. The activation source is changed to "STATIC".
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/triggerAttachObject
	</WikiPage>
	<Syntax>
		Object triggerAttachObject Number
	</Syntax>
	<RawSyntax>
		triggerName triggerAttachObject objectId
	</RawSyntax>
	<Example>
		$Code$_trigger triggerAttachObject 1234;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(October 31, 2013)
	This command doesn't quite work in Arma 3 [1]
	Further investigation reveals that objectId param for this command is some kind of map id and not the id you can see in the editor. This map id could be seen in multiplayer when looking at netId of the static objects, for example "1:-23984219837", the -23984219837 would be the objectId. Unfortunately it still doesn't work.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		hasInterface
	</Keyword>
	<Description>
		Returns true if the computer has an interface (a real player). False for a dedicated server or for a headless client.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/hasInterface
	</WikiPage>
	<Syntax>
		hasInterface
	</Syntax>
	<RawSyntax>
		hasInterface
	</RawSyntax>
	<Example>
		$Code$headless = !( hasInterface || isDedicated );$/Code$
	</NextExample>
		$Code$_isHC = ! hasInterface && ! isDedicated ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(December 21, 2014)
	$Code$ if ( isDedicated ) then {
	//run on dedicated server only
	};
	if ( isServer ) then {
	//run on dedicated server or player host
	};
	if ( hasInterface ) then {
	//run on all player clients incl. player host
	};
	if (! isDedicated ) then {
	//run on all player clients incl. player host and headless clients
	};
	if (! isServer ) then {
	//run on all player clients incl. headless clients but not player host
	};
	if (! hasInterface ) then {
	//run on headless clients and dedicated server
	};
	if (! hasInterface && ! isDedicated ) then {
	//run on headless clients only
	};$/Code$
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		removeMagazineGlobal
	</Keyword>
	<Description>
		Removes the magazine from the unit.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/removeMagazineGlobal
	</WikiPage>
	<Syntax>
		Object removeMagazineGlobal String
	</Syntax>
	<RawSyntax>
		unit removeMagazineGlobal magazineName
	</RawSyntax>
	<Example>
		$Code$player removeMagazineGlobal "30Rnd_65x39_caseless_mag";$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setUnloadInCombat
	</Keyword>
	<Description>
		If cargo or turret units should get out of vehicle when in combat. If true, vehicle will stop and units will dismount. Vehicle must be local.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setUnloadInCombat
	</WikiPage>
	<Syntax>
		Object setUnloadInCombat Array
	</Syntax>
	<RawSyntax>
		vehicle setUnloadInCombat [allowCargo, allowTurrets]
	</RawSyntax>
	<Example>
		$Code$_veh setUnloadInCombat [ true, false ];$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		airportSide
	</Keyword>
	<Description>
		Checks a side of the airport. ID is the number to identify which airport on the island you want to check.
	Possible values for sara are:
	0 - Paraiso
	1 - Rahmadi
	2 - Pita
	3 - Antigua
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/airportSide
	</WikiPage>
	<Syntax>
		airportSide Number
	</NextSyntax>
		airportSide Object
	</Syntax>
	<RawSyntax>
		airportSide id
	</NextRawSyntax>
		airportSide target
	</RawSyntax>
	<Example>
		$Code$airportSide 0;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Side - Side
	</ReturnValue>

</NextListItem>

	<Keyword>
		setCurrentChannel
	</Keyword>
	<Description>
		Sets given channel as current chat channel. Scripted way of selecting desired channel on the UI. The given channel may be disabled (see enableChannel ), this is why this command returns boolean, true on success or false on failure. Correspondence between channel and number:
	0 = Global
	1 = Side
	2 = Command
	3 = Group
	4 = Vehicle
	5 = Direct
	6-15 = Custom Radio (see radioChannelCreate )
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setCurrentChannel
	</WikiPage>
	<Syntax>
		setCurrentChannel Number
	</Syntax>
	<RawSyntax>
		setCurrentChannel channel
	</RawSyntax>
	<Example>
		$Code$_isDirectSelected = setCurrentChannel 5; // sets Direct channel as current active$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
		(December 9, 2015)
	This command can be used together with custom radio channels, but an offset of 5 must be added to the index from radioChannelCreate.
	$Code$_index = radioChannelCreate [[1, 0, 0, 1], "Custom Channel 1", "%UNIT_NAME", [player]];
	setCurrentChannel (_index + 5);
	$/Code$
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		isEqualTypeAll
	</Keyword>
	<Description>
		Compares types of all elements of an array to the type of a single value.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isEqualTypeAll
	</WikiPage>
	<Syntax>
		Array isEqualTypeAll Anything
	</Syntax>
	<RawSyntax>
		arr isEqualTypeAll val
	</RawSyntax>
	<Example>
		$Code$_arr = [1,2,3,4,5,6,7,8,9,0];
	_arr isEqualTypeAll ""; //false
	_arr isEqualTypeAll 0; //true$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(November 25, 2015)
	This command will return false if the array on the left side is empty ([]) regardless of the sample value.
	$Code$[] isEqualTypeAll ""
	- false
	$/Code$
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		assignedCommander
	</Keyword>
	<Description>
		Returns the soldier assigned to the given vehicle as a commander.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/assignedCommander
	</WikiPage>
	<Syntax>
		assignedCommander Object
	</Syntax>
	<RawSyntax>
		assignedCommander vehicle
	</RawSyntax>
	<Example>
		$Code$_commander = assignedCommander vehicleName$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Object
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlTextHeight
	</Keyword>
	<Description>
		Returns the control text height. Supported control types are:
	CT_STATIC 0
	CT_EDIT 2 ( Since Arma 3 v1.57.135040 )
	CT_STRUCTURED_TEXT 13
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlTextHeight
	</WikiPage>
	<Syntax>
		ctrlTextHeight Control
	</Syntax>
	<RawSyntax>
		ctrlTextHeight control
	</RawSyntax>
	<Example>
		$Code$_h = ctrlTextHeight _ctrl;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(May 24, 2017)
	in ArmA 3 v.1.70.141764, this command always returns 0 if the control has no width.
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		isForcedWalk
	</Keyword>
	<Description>
		Returns true if player is forced to walk with forceWalk.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isForcedWalk
	</WikiPage>
	<Syntax>
		isForcedWalk Object
	</Syntax>
	<RawSyntax>
		isForcedWalk unitName
	</RawSyntax>
	<Example>
		$Code$_bool = isForcedWalk player ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		lbSetPictureColorDisabled
	</Keyword>
	<Description>
		Sets the disabled color of item's picture (left) with the given index of the listbox with id idc of the topmost user dialog to the given color. Color is in format Color. Color which consists from only zeros means disable this override.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lbSetPictureColorDisabled
	</WikiPage>
	<Syntax>
		lbSetPictureColorDisabled Array
	</NextSyntax>
		Control lbSetPictureColorDisabled Array
	</Syntax>
	<RawSyntax>
		lbSetPictureColorDisabled [idc, index, color]
	</NextRawSyntax>
		control lbSetPictureColorDisabled [index, color]
	</RawSyntax>
	<Example>
		$Code$lbSetPictureColorDisabled [101, 0, [1, 1, 1, 0.25]];$/Code$
	</NextExample>
		$Code$_ctrl lbSetPictureColorDisabled [0, [1, 1, 1, 0.25]];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		More information on the LB command family can be found here
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		currentMagazineDetailTurret
	</Keyword>
	<Description>
		Returns the class name of currently used magazine on specified turret. Use turret path [-1] for driver's turret. Note that a turret is not loaded until unit enters it, so this command will return "".
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/currentMagazineDetailTurret
	</WikiPage>
	<Syntax>
		Object currentMagazineDetailTurret Array
	</Syntax>
	<RawSyntax>
		vehicle currentMagazineDetailTurret [turret path]
	</RawSyntax>
	<Example>
		$Code$_magazineDetail = MBT_Kuma currentMagazineDetailTurret [0];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		addMagazineAmmoCargo
	</Keyword>
	<Description>
		Adds magazines with specified ammo count to the cargo space of a vehicle or a container.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/addMagazineAmmoCargo
	</WikiPage>
	<Syntax>
		Object addMagazineAmmoCargo Array
	</Syntax>
	<RawSyntax>
		cargospace addMagazineAmmoCargo [magazine, quantity, ammocount]
	</RawSyntax>
	<Example>
		$Code$_ammobox addMagazineAmmoCargo ["30Rnd_65x39_caseless_mag", 2, 5];$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		cursorTarget
	</Keyword>
	<Description>
		Returns the target pointed at by the player (usually with cross-hairs). The target has to be known to the player to some degree ( knowsAbout 0). If target is completely unknown, command returns objNull.
	A valid target could belong to an enemy or a friendly side. Buildings are normally known to player and so are valid targets. Try nearTargets to see what else is considered a target. While friendly targets are usually known to the player, enemy targets can be totally unknown, especially if "auto-spotting" (or sometimes called "auto-reporting") is switched off. To check if auto-spotting is enabled: difficultyEnabled "autospot"
	cursorTarget also returns locked target for the duration of the lock even if there is another target under the cursor. As soon as missile is fired, cursorTarget switches to current known target under cursor or objNull. Targeting (currently "T" in Arma 3) works regardless of the state of "auto-spotting".
	Adding a target to the known list could be done with reveal command. When auto-spotting is enabled, zooming on the enemy target with cross-hairs usually reveals the target. As friendly targets are always known, zooming on friendly target could improve knowsAbout value.
	Side relations can also influence target knowledge. For example east target is unknown target for civilian, but making them friends with setFriend instantly improves civilian knowledge of the east.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/cursorTarget
	</WikiPage>
	<Syntax>
		cursorTarget
	</Syntax>
	<RawSyntax>
		cursorTarget
	</RawSyntax>
	<Example>
		$Code$alive cursorTarget ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(01:25, 18 February 2011 (CET))
	If the player is in a vehicle and a lockable weapon is selected and a target is locked, the locked target will be returned, regardless if it's in sight or not.
	</NextNote>
		(11 March 2011)
	Addition to Myke's note:
	It also works for infantry with launchers that canLock, like Javelin or AA.
	Only the lock cursor must be visible on the target - not a full lock necessarily.
	</NextNote>
		(13:09, 11 July 2009 (CEST))
	Player must knows about what he is pointing to for this command to return something other than NULL-OBJECT
	This command doesn't work through building windows
	This recognition doesn't work with every object : soldiers, vehicles, big houses are ok, but not trees, plants, road signs or others little things
	</NextNote>
		(22:11, 23 August 2013 (CEST))
	To add to Lou Montana's note, use reveal command on the object you want to be detected with cursorTarget when pointing at it. Without it, distant units are most likely to return objNull even if you shoot and hit them. Units that have been previously subjected to enableSimulation false; or enableSimulationGlobal false; may stay unrecognised for a long time even after simulation was re-enabled, returning objNull as cursorTarget. Force revealing units with reveal command usually solves the problem. For example: $Code${ player reveal _x} forEach allUnits ;$/Code$
	</NextNote>
		(December 3, 2014)
	cursorTarget seems to change when your cursor enters an object's boundingBox. Because of this, if the player is inside the boundingBox, the object will always be the current cursorTarget if the player is not looking at another object, although sometimes the object will remain the cursorTarget even if the player does.
	</NextNote>
		(April 21, 2015)
	Cursortarget will not return enemy units, even very close, if "autoreport" is disabled in game difficulty settings, and if player is alone.
	However, when enemy units open fire on player, the cursortarget becomes functional on these units. If player is in a group, cursortarget is also functional (report by other units).
	</NextNote>
		(February 5, 2016)
	CursorTarget will return a Null_Object for all of thus which have a disabled simulation (_object enableSimulation false).
	</Note>
	<ReturnValue>
		Object
	</ReturnValue>

</NextListItem>

	<Keyword>
		inputAction
	</Keyword>
	<Description>
		Return the state of input devices mapped to given input action.
	For Arma 3 inputActions see: inputAction/actions.
	For Arma 3 inputActions bindings see: inputAction/actions/bindings.
	For earlier Arma editions see Category:Key Actions.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/inputAction
	</WikiPage>
	<Syntax>
		inputAction String
	</Syntax>
	<RawSyntax>
		inputAction name
	</RawSyntax>
	<Example>
		$Code$inputAction "leanLeft"
	// Returns 1 if the button mapped to "leanLeft" is pressed currently else 0.$/Code$
	</NextExample>
		$Code$[] spawn {
	waitUntil { inputAction "reloadMagazine" 0};
	hint "Reload Key Pressed";
	};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(07:38, 15 October 2010 (CEST))
	This command also returns values other than 0 and 1 (like 0.02 or 1.3). Any value greater than zero usually signals that the key or button is pressed. inputAction does not work reliably when used in RscDisplayMission's onKeyDown event handler (the same is probably true for other input related event handlers).
	</NextNote>
		(May 8, 2014)
	inputAction does not return the actual state of the queried key when a dialog screen is open. Instead, it will always return 0.
	</NextNote>
		(July 31, 2015)
	inputAction is capable of returning the state of analog inputs. This includes mouse, joystick, and even TrackIR. A joystick axis will return a value from 0 to 1, while mouse movement returns the rate of change, which can be 1.
	Right mouse click is currently not supported, but right mouse hold is. http://feedback.arma3.com/view.php?id=25015
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		setSpeedMode
	</Keyword>
	<Description>
		Set group speed mode. Mode may be one of:
	"LIMITED" (half speed)
	"NORMAL" (full speed, maintain formation)
	"FULL" (do not wait for any other units in formation)
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setSpeedMode
	</WikiPage>
	<Syntax>
		Object/Group setSpeedMode String
	</Syntax>
	<RawSyntax>
		groupName setSpeedMode mode
	</RawSyntax>
	<Example>
		$Code$_groupOne setSpeedMode "LIMITED"$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		(14 Feb 2010)
	Although setSpeedMode can be called on an individual unit, the entire group will be affected.
	</NextNote>
		(17 May 2008)
	In Multiplayer, this command is overwritten by itself to NORMAL or FULLSPEED (i don't know which one, but it's fast move) when you ask the unit to move via script (ex : _unit doMove (getMarkerPos "destination"); )
	The solution to solve this problem is to initialize the setSpeedMode after your order the unit to move.
	So basically it gives you :
	_unit doMove (getMarkerPos "destination");
	_unit setSpeedMode "LIMITED";
	If you plan to move the unit again after it reaches its destination, you will have to set the speed mode to LIMITED again like i did just above.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		isVehicleCargo
	</Keyword>
	<Description>
		Return transporting vehicle if vehicle is loaded in one.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isVehicleCargo
	</WikiPage>
	<Syntax>
		isVehicleCargo Object
	</Syntax>
	<RawSyntax>
		isVehicleCargo vehicle
	</RawSyntax>
	<Example>
		$Code$// Blackfish with given variable name blackfish, with a vehicle inside called quad
	_transportingVehicle = isVehicleCargo quad; //returns blackfish
	//Vehicle called quad that is not being transported as cargo
	_transportingVehicle = getVehicleCargo quad; //returns objNull$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Object
	</ReturnValue>

</NextListItem>

	<Keyword>
		items
	</Keyword>
	<Description>
		Returns an array of names of all special items of a vehicle or a soldier.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/items
	</WikiPage>
	<Syntax>
		items Object
	</Syntax>
	<RawSyntax>
		items unit
	</RawSyntax>
	<Example>
		$Code$_itemsplayer = items player ;$/Code$
	</NextExample>
		$Code$player sideChat format ["%1", items player ];$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(June 18, 2013)
	Arma 3, version 0.70 - magazines, explosives, grenades and all items currently linked on the unit are not returned now.
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		preprocessFileLineNumbers
	</Keyword>
	<Description>
		Returns the preprocessed content of the given file. The preprocessor is C-like, it supports comments using /* */ and PreProcessor_Commands. The preprocessor also adds a default debug entrypoint for compiler at the begining of script: #line 1 "aFilename"
	The #line keyword can be used in any script that are not preprocess, or with preprocess script with extra macro to protect reserverd sharp character. The format is:
	#line number " name "
	followed by new line. number could be only positive integer and name could be any name. This will be used only if an error occurs in the script. The error will contain the line:
	File filename, line linenumber
	where filename will be the name you set and linenumber will be number + how many lines it is from the #line line. If the error happened on the line right under #line it will add 0 to number, if on second line, it will add 1 etc.
	It is possible to use more than one #line keywords, but it seems having just one at the top for little script is enough to pinpoint position of the error easily.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/preprocessFileLineNumbers
	</WikiPage>
	<Syntax>
		preprocessFileLineNumbers String
	</Syntax>
	<RawSyntax>
		preprocessFileLineNumbers fileName
	</RawSyntax>
	<Example>
		$Code$_string = preprocessFileLineNumbers "A3\ui_f\scripts\IGUI\RscUnitInfo.sqf"
	// Result is:
	//#line 1 "A3\ui_f\scripts\IGUI\RscUnitInfo.sqf"
	//disableserialization;
	//........$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(December 17, 2013)
	The main difference between preprocessFile and preprocessFileLineNumbers is that the latter adds #line keyword to the target file, which allows to log the __LINE__ error happened at and the __FILE__ error happened in.
	</NextNote>
		(November 4, 2017)
	The #line directive get's removed from the output.
	So to add a custom #line directive before while using preprocessFileLineNumbers, you have to use a preprocessor macro like this:
	#define DEBUG(sharp,name) sharp##line 0 name
	and add this at the right place in your code
	DEBUG(#,"your filename");
	This way you can have custom filenames in error messages.
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		setLightAmbient
	</Keyword>
	<Description>
		Set ambient color of light. This includes surfaces that face away from the light, unlike setLightColor.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setLightAmbient
	</WikiPage>
	<Syntax>
		Object setLightAmbient Array
	</Syntax>
	<RawSyntax>
		light setLightAmbient [r, g, b]
	</RawSyntax>
	<Example>
		$Code$myLight setLightAmbient [0.5,0,0]; //produces red light around the origin source$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
		(Dec 1, 2006)
	Light can be created with command createVehicleLocal with special vehicle class "#lightpoint"
	for example:
	$Code$_light = "#lightpoint" createVehicleLocal pos;
	_light setLightBrightness 1.0;
	_light setLightAmbient [0.0, 1.0, 0.0];
	_light setLightColor [0.0, 1.0, 0.0];
	_light lightAttachObject [_object, [0,0,0]];
	$/Code$
	</NextNote>
		(Aug 17, 2007)
	To clarify:
	setLightAmbient - Terrain and surrounding objects are bathed in this colour.
	setLightColor - Controls the "haze" seen around the lightsource (ex flares).
	</NextNote>
		(Mar 25, 2014)
	When both setLightAmbient and setLightColor were [0,0,0], there won’t be any visual presentation on the light source.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		getPosASLW
	</Keyword>
	<Description>
		Returns the object position height above sea surface (waves included).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getPosASLW
	</WikiPage>
	<Syntax>
		getPosASLW Object
	</Syntax>
	<RawSyntax>
		getPosASLW obj
	</RawSyntax>
	<Example>
		$Code$_pos = getPosASLW _diver;$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		getPosWorld
	</Keyword>
	<Description>
		Returns PositionWorld, which is PositionASL of the model centre [0,0,0] of an object, rather than transformed boundingCenter or LandContact vertices.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getPosWorld
	</WikiPage>
	<Syntax>
		getPosWorld Object
	</Syntax>
	<RawSyntax>
		getPosWorld object
	</RawSyntax>
	<Example>
		$Code$_obj setPosWorld getPosWorld _obj;$/Code$
	</NextExample>
		$Code$ATLToASL (_groundObj modelToWorld [0,0,0]) isEqualTo getPosWorld _groundObj; //true$/Code$
	</NextExample>
		$Code$// Wave height under a boat:
	_h = ((boat modelToWorld [0,0,0]) vectorDiff getPosWorld boat) select 2;$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		menuHover
	</Keyword>
	<Description>
		Returns path to menu entry mouse is currently hovering over.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/menuHover
	</WikiPage>
	<Syntax>
		menuHover Number
	</Syntax>
	<RawSyntax>
		menuHover idc
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlSetFontSecondary
	</Keyword>
	<Description>
		Sets the font size of the secondary text of given control.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlSetFontSecondary
	</WikiPage>
	<Syntax>
		Control ctrlSetFontSecondary String
	</Syntax>
	<RawSyntax>
		ctrl ctrlSetFontSecondary fontClass
	</RawSyntax>
	<Example>
		$Code$_control ctrlSetFontSecondary "TahomaB";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setPilotCameraRotation
	</Keyword>
	<Description>
		Sets rotation (relative to the centered camera position) of the object airplane or helicopter pilotCamera.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setPilotCameraRotation
	</WikiPage>
	<Syntax>
		Object setPilotCameraRotation Array
	</Syntax>
	<RawSyntax>
		object setPilotCameraRotation rotation
	</RawSyntax>
	<Example>
		$Code$vehicle player setPilotCameraRotation [ rad 90, rad 45 ]$/Code$
	</Example>
	<Locality>
		local / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setPlayable
	</Keyword>
	<Description>
		Create MP role for the unit. The roles created this way are used for Join In Progress and Team Switch.
	NOTE: Currently in Arma 3 this command does nothing.
	Doesn't work as intended
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setPlayable
	</WikiPage>
	<Syntax>
		setPlayable Object
	</Syntax>
	<RawSyntax>
		setPlayable unitName
	</RawSyntax>
	<Example>
		$Code$setPlayable _aPerson$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(december 19, 2009)
	if you want to add a TeamSwitchable unit (at least in Arma2), better use addSwitchableUnit
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		teamSwitch
	</Keyword>
	<Description>
		Invoke the Team Switch dialog (force it even when conditions are not met). There has to be at least one playable unit for team switch to work, and for this command to work in MP, respawn type in description.ext should be 5 (SIDE).
	NOTE: When player switches and leaves behind AI unit, you need to enable "TeamSwitch" AI on it _unit enableAI "TeamSwitch" so that the unit continues with waypoints
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/teamSwitch
	</WikiPage>
	<Syntax>
		teamSwitch
	</Syntax>
	<RawSyntax>
		teamSwitch
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		screenshot
	</Keyword>
	<Description>
		Captures a screenshot and stores it to given filename. PNG is the only available format and the file must have.png extension.
	The file is saved into Screenshots folder in the Profile directory. The folder is by default limited to 250 MB to prevent abuse.
	To increase the limit, add the following line at the end of the profile file:
	$Code$maxScreenShotFolderSizeMB = 2000;$/Code$
	2000 can be replaced by any value in MB.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/screenshot
	</WikiPage>
	<Syntax>
		screenshot String
	</Syntax>
	<RawSyntax>
		screenshot filename
	</RawSyntax>
	<Example>
		$Code$screenshot "";$/Code$
	</NextExample>
		$Code$screenshot "testFile.png";$/Code$
	</NextExample>
		$Code$// The following code will result in the screenshot being placed in \Documents\Arma 3\Screenshots\any\where\you\want.png
	screenshot "any\where\you\want.png";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(July 18, 2016)
	This command only captures the rendered picture (including ppEffects). GUI nor the mouse are visible on the screenshot. (ArmA 3 1.62.137494)
	</NextNote>
		(December 3, 2017)
	Change Sampling on Video Options to make bigger picture than your screen.
	For example, 200% sampling on 1920x1080 screen and take screenshot via this command, it will generate a 3840x2160 picture.
	</NextNote>
		(March 20, 2018)
	The command will silently fail if your profiles folder is configured to be somewhere else (-profiles parameter), or if your HDR setting is below 16 (configurable in arma3.cfg or medium and above in in-game settings)
	For full reference on recommended settings consult Eden Editor: Configuring Asset Previews
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		attachedObjects
	</Keyword>
	<Description>
		Returns a list of attached objects.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/attachedObjects
	</WikiPage>
	<Syntax>
		attachedObjects Object
	</Syntax>
	<RawSyntax>
		attachedObjects obj
	</RawSyntax>
	<Example>
		$Code${
	detach _x;
	} forEach attachedObjects player ;$/Code$
	</NextExample>
		$Code$if ( count attachedObjects player == 0) then {
	hint "There are no objects attached to player";
	};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		animateSource
	</Keyword>
	<Description>
		Process an animation of the object. If animate uses class name from CfgModels Animations, animateSource uses name defined by source property. This allows to use just one command on a bunch of animations related to the same source simultaneously. Since Arma 3 v1.65.138459 speed of animation can be altered with coefficient.
	A class with the same source name should also be present in main config in CfgVehicles AnimationSources and have to be bound to the "user" controller for the command to work. If in order to animate door in example below using animate command it would require 2 calls:
	house animate ["Door_1_rot", 1];
	house animate ["Door_Handle_1_rot", 1];
	With animateSource this would require only 1 (provided everything is configured correctly):
	house animateSource ["Door_1_sound_source", 1];
	// model.cfg
	....
	class Animations
	{
	class Door_1_rot
	{
	type = rotation ;
	source = Door_1_sound_source ;
	selection = Door_1 ;
	axis = Door_1_axis ;
	memory = 1 ;
	minValue = 0.1 ;
	maxValue = 1 ;
	angle0 = 0 ;
	angle1 = ( rad 110 );
	};
	class Door_Handle_1_rot
	{
	type = rotation ;
	source = Door_1_noSound_source ;
	selection = Door_Handle_1 ;
	axis = Door_Handle_1_axis ;
	memory = 1 ;
	minValue = 0 ;
	maxValue = 0.1 ;
	angle0 = 0 ;
	angle1 = ( rad - 50 );
	};
	};
	...
	// config.cpp
	...
	class AnimationSources
	{
	class Door_1_sound_source
	{
	source = "user" ;
	initPhase = 0 ;
	animPeriod = 1 ;
	sound = "GenericDoorsSound" ;
	soundPosition = "Door_1_trigger" ;
	};
	};
	...
	If you don't know much about model config you can use this page createVehicle/vehicles for reference. Some of the AnimationSources are listed with the class names of the available assets in Arma 3. If it says "user", the chances are it could work with animateSource (see example 2).
	It is recommended that animateSource command is used instead of animate whenever is possible, as it is more efficient and optimized for MP
	Mixing animateSource command with animate command to animate the same part can lead to unexpected behavior
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/animateSource
	</WikiPage>
	<Syntax>
		Object animateSource Array
	</Syntax>
	<RawSyntax>
		object animateSource [source, phase, speed]
	</RawSyntax>
	<Example>
		$Code$house animateSource ["Door_1_source", 1, true ];$/Code$
	</NextExample>
		$Code$// Create UGV and manipulate its turret (Currently not possible to do with animate command. See createVehicle/vehicles for reference)
	ugv = "B_UGV_01_F" createVehicle ( player getRelPos [5, 0]);
	ugv addAction ["Show Turret",
	{
	ugv animateSource ["Turret", 0];
	ugv animateSource ["MainTurret", rad 0, true ];
	ugv animateSource ["MainGun", rad 0, true ];
	}];
	ugv addAction ["Hide Turret", {ugv animateSource ["Turret", 1]}];
	ugv addAction ["Turret Left", {ugv animateSource ["MainTurret", rad 90]}];
	ugv addAction ["Turret Right", {ugv animateSource ["MainTurret", - rad 90]}];
	ugv addAction ["Turret Up", {ugv animateSource ["MainGun", rad 30]}];
	ugv addAction ["Turret Down", {ugv animateSource ["MainGun", - rad 20]}];$/Code$
	</NextExample>
		$Code$barGate animateSource ["Door_1_source",0]; //Close
	barGate animateSource ["Door_1_source",1]; //Open$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		enableVehicleCargo
	</Keyword>
	<Description>
		Enable/disable option to transport other vehicles (if configured) or be transported.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/enableVehicleCargo
	</WikiPage>
	<Syntax>
		Object enableVehicleCargo Boolean
	</Syntax>
	<RawSyntax>
		vehicle enableVehicleCargo enable
	</RawSyntax>
	<Example>
		$Code$vehicle enableVehicleCargo true ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(June 20, 2016)
	Setting enableVehicleCargo to true does not mean a vehicle can now load vehicles as cargo. They are still required to be correctly setup as shown on the Vehicle in Vehicle Transport page.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		moveInCommander
	</Keyword>
	<Description>
		Move soldier into vehicle commander position (Immediate, no animation).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/moveInCommander
	</WikiPage>
	<Syntax>
		Object moveInCommander Object
	</Syntax>
	<RawSyntax>
		unitName moveInCommander vehicle
	</RawSyntax>
	<Example>
		$Code$_soldierOne moveInCommander _tankOne$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		(August 4, 2006)
	Notes from before the conversion:
	MP Note Functions MoveInCommander can only be called for local soldiers. They will be ignored for remote soldiers. (see Locality in Multiplayer )
	</NextNote>
		In OFP v1.96, the moveIn commands will not trigger an associated getIn event. To ensure the getIn event is fired, use the "getIn Commander" action command.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		switchMove
	</Keyword>
	<Description>
		When used on a person, the given move is started immediately (there is no transition). Use switchmove "" to switch back to the default movement if there is no transition back, otherwise the person may be stuck.
	List of moves in ArmA 2
	List of moves in Armed Assault
	List of moves in Operation Flashpoint: Resistance
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/switchMove
	</WikiPage>
	<Syntax>
		Object switchMove String
	</Syntax>
	<RawSyntax>
		person switchmove movename
	</RawSyntax>
	<Example>
		$Code$_loon1 switchMove "FXStandDip"$/Code$
	</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
		(March 25, 2007)
	In some cases the movement won't stay. I.e. AI hostages that put their hands behind their heads (_hostage switchMove "AmovPercMstpSsurWnonDnon") won't hold their hands up, unless you first use disableAI "autoTarget" on them. They mostly put their hands down because they 'noticed' unknown objects.
	</NextNote>
		(August 03, 2008)
	This command will not cause an AnimChanged or AnimDone event. However, playMove will.
	</NextNote>
		(November 12, 2016)
	When using this command on the player unit outside unscheduled UI contexts, it will cause a minor camera glitch for a single frame.
	For example, Draw3D and KeyDown are UI contexts and so are not affected by the glitch, but EachFrame and scheduled scripts are not UI contexts and are affected by the glitch.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		removeVest
	</Keyword>
	<Description>
		Removes vest from unit.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/removeVest
	</WikiPage>
	<Syntax>
		removeVest Object
	</Syntax>
	<RawSyntax>
		removeVest unit
	</RawSyntax>
	<Example>
		$Code$removeVest player ;$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		forgetTarget
	</Keyword>
	<Description>
		Resets info group has about target
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/forgetTarget
	</WikiPage>
	<Syntax>
		Group/Object forgetTarget Object
	</Syntax>
	<RawSyntax>
		group forgetTarget target
	</RawSyntax>
	<Example>
		$Code$soldier1 forgetTarget soldier2;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		isEqualTypeAny
	</Keyword>
	<Description>
		Compares type of given value to every type in the given array and if match is found, true is returned.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isEqualTypeAny
	</WikiPage>
	<Syntax>
		Anything isEqualTypeAny Array
	</Syntax>
	<RawSyntax>
		val isEqualTypeAny types
	</RawSyntax>
	<Example>
		$Code$_var = [1,2,3];
	_var isEqualTypeAny [0,"", objNull ]; //false
	_var isEqualTypeAny [0,"", objNull,[]]; //true$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		currentThrowable
	</Keyword>
	<Description>
		Returns currently selected throwable, which will be launched if user presses "G".
	Please note: The weapon/magazine id system is W.I.P. and may change without notice.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/currentThrowable
	</WikiPage>
	<Syntax>
		currentThrowable Object
	</Syntax>
	<RawSyntax>
		currentThrowable player
	</RawSyntax>
	<Example>
		$Code$currentThrowable player ; //["SmokeShellGreen","SmokeShellGreenMuzzle",[1.00002e+007,0]]$/Code$
	</NextExample>
		$Code$_ct = currentThrowable player ; //["HandGrenade","HandGrenadeMuzzle",[1e+007,0]]
	_id = (_ct select 2 select 0) - 10000000; //18$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		lbSetColor
	</Keyword>
	<Description>
		Sets the color of the item (left) with the given index of the listbox or combobox with id idc of the topmost user dialog to color.
	Colour is in format Color.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lbSetColor
	</WikiPage>
	<Syntax>
		lbSetColor Array
	</NextSyntax>
		Control lbSetColor Array
	</Syntax>
	<RawSyntax>
		lbSetColor [idc, index, color]
	</NextRawSyntax>
		control lbSetColor [index, color]
	</RawSyntax>
	<Example>
		$Code$lbSetColor [101, 0, [0, 1, 0, 0.5]];$/Code$
	</NextExample>
		$Code$_control lbSetColor [0, [0, 1, 0, 0.5]];$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
		More information on the LB command family can be found here
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setSimpleTaskTarget
	</Keyword>
	<Description>
		Attach a target to the simple task. Overrides setSimpleTaskDestination.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setSimpleTaskTarget
	</WikiPage>
	<Syntax>
		Task setSimpleTaskTarget Array
	</Syntax>
	<RawSyntax>
		task setSimpleTaskTarget [target, precisePosition]
	</RawSyntax>
	<Example>
		$Code$task setSimpleTaskTarget [targetVehicle, true];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		uniformItems
	</Keyword>
	<Description>
		Get array with all items (of any kind, even weapons) from uniform.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/uniformItems
	</WikiPage>
	<Syntax>
		uniformItems Object
	</Syntax>
	<RawSyntax>
		uniformItems unit
	</RawSyntax>
	<Example>
		$Code$uniformItems player ;[
	"FirstAidKit",
	"30Rnd_65x39_caseless_mag",
	"30Rnd_65x39_caseless_mag",
	"30Rnd_65x39_caseless_mag"
	]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		visiblePosition
	</Keyword>
	<Description>
		Returns an object's rendered position (z value above surface underneath) in render time scope. Same as getPosVisual
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/visiblePosition
	</WikiPage>
	<Syntax>
		visiblePosition Object
	</Syntax>
	<RawSyntax>
		visiblePosition object
	</RawSyntax>
	<Example>
		$Code$playerRenderedPos = visiblePosition player;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(February 4, 2015)
	Z (visiblePosition select 2) works but if unit/object is in a building, Z remains at ground level. If you need Z depending on building floors/stages, use getPosAtl select 2 instead.
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		nearEntities
	</Keyword>
	<Description>
		Find entities in the sphere with given radius. If typeName(s) is (are) given, only entities of given type (or its subtype) are listed.
	This command returns only alive entities. If you need to return dead entities as well use entities command.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/nearEntities
	</WikiPage>
	<Syntax>
		Object/Array nearEntities Number
	</NextSyntax>
		Object/Array nearEntities Array
	</Syntax>
	<RawSyntax>
		position nearEntities radius
	</NextRawSyntax>
		position nearEntities [typeName, radius]
	</RawSyntax>
	<Example>
		$Code$_list = player nearEntities 20;
	_list = ( position player ) nearEntities 50;
	_list = player nearEntities ["Man", 1000];
	_list = ( position player ) nearEntities ["LaserTarget", 3000];
	_list = player nearEntities [["Car", "Motorcycle", "Tank"], 50];
	_list = ( position player ) nearEntities [["Man", "Air", "Car", "Motorcycle", "Tank"], 200];$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(27 Mar, 2014)
	According to Code Optimisation, this function is the fastest and should be used instead of nearestObjects when suitable.
	</Note>
	<ReturnValue>
		Array - Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		setVehicleArmor
	</Keyword>
	<Description>
		Sets the armor (or health for men) state of the vehicle (a value from 0 to 1).
	Works like setDamage only in reverse: player setVehicleArmor 1 is the same as player setDamage 0, and player setVehicleArmor 0 is the same as player setDamage 0.97
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setVehicleArmor
	</WikiPage>
	<Syntax>
		Object setVehicleArmor Number
	</Syntax>
	<RawSyntax>
		vehicleName setVehicleArmor value
	</RawSyntax>
	<Example>
		$Code$player setVehicleArmor 0.5;$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		sideFriendly
	</Keyword>
	<Description>
		The Friendly side (used for captives).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/sideFriendly
	</WikiPage>
	<Syntax>
		sideFriendly
	</Syntax>
	<RawSyntax>
		sideFriendly
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Side
	</ReturnValue>

</NextListItem>

	<Keyword>
		disableUAVConnectability
	</Keyword>
	<Description>
		Disables unit's AV terminal(s) connecting to UAV.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/disableUAVConnectability
	</WikiPage>
	<Syntax>
		Object disableUAVConnectability Array
	</Syntax>
	<RawSyntax>
		object disableUAVConnectability [uav, checkAllItems]
	</RawSyntax>
	<Example>
		$Code$unit disableUAVConnectability [uav,true];$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		curatorEditingAreaType
	</Keyword>
	<Description>
		Returns type of edit areas assigned to curator (blacklist/whitelist).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/curatorEditingAreaType
	</WikiPage>
	<Syntax>
		curatorEditingAreaType Object
	</Syntax>
	<RawSyntax>
		curatorEditingAreaType obj
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		drawPolygon
	</Keyword>
	<Description>
		Draws given polygon on the given map control with given color. The polygon must consist of at least 3 points. Unlike with other draw shape commands and due to complexity, this command does not support filling of the polygon with color. Use drawTriangle command to construct and fill polygon shape as a workaround.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/drawPolygon
	</WikiPage>
	<Syntax>
		Control drawPolygon Array
	</Syntax>
	<RawSyntax>
		map drawPolygon [polygon, color]
	</RawSyntax>
	<Example>
		$Code$test_polygon = [];
	for "_i" from 1 to 12 do
	{
	test_polygon pushBack ( player getPos [10 + random 100, 360/_i]);
	};
	findDisplay 12 displayCtrl 51 ctrlAddEventHandler ["Draw",
	{
	_this select 0 drawPolygon [test_polygon, [0,0,1,1]];
	}];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		addCuratorEditableObjects
	</Keyword>
	<Description>
		Register objects which can be edited by a curator.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/addCuratorEditableObjects
	</WikiPage>
	<Syntax>
		Object addCuratorEditableObjects Array
	</Syntax>
	<RawSyntax>
		curatorObj addCuratorEditableObjects [objects,addCrew]
	</RawSyntax>
	<Example>
		$Code$curatorModule addCuratorEditableObjects [[car], true ];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		This scripting command must be executed on the server to work properly in multiplayer
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		lightnings
	</Keyword>
	<Description>
		Return the current lightnings value.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lightnings
	</WikiPage>
	<Syntax>
		lightnings
	</Syntax>
	<RawSyntax>
		lightnings
	</RawSyntax>
	<Example>
		$Code$// Get the current lightnings value:
	_lightningsVal = lightnings ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		setMarkerDirLocal
	</Keyword>
	<Description>
		Sets the orientation of the marker. Angle is in degrees.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setMarkerDirLocal
	</WikiPage>
	<Syntax>
		String setMarkerDirLocal Number
	</Syntax>
	<RawSyntax>
		markerName setMarkerDirLocal angle
	</RawSyntax>
	<Example>
		$Code$"Marker1" setMarkerDirLocal 90;$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		disableUserInput
	</Keyword>
	<Description>
		Disable and enable the keyboard and mouse input, usually used during cutscenes.
	Be careful with the usage of this command, always remember to enable the user input again, as once the user input is disabled, you can only shut down OFP but not exit the mission with escape.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/disableUserInput
	</WikiPage>
	<Syntax>
		disableUserInput Boolean
	</Syntax>
	<RawSyntax>
		disableUserInput state
	</RawSyntax>
	<Example>
		$Code$disableUserInput true
	; cutscene
	disableUserInput false$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
		(14 March 2014)
	Sometimes, when disableUserInput true command is invoked while the user is holding a button, when disableUserInput false is called and the user is no longer holding the button, the input will resume as if the user is still holding the button. To reset this behaviour, disable and enable user input again in the same frame:
	$Code$ disableUserInput true ;
	//do something
	disableUserInput false ;
	disableUserInput true ;
	disableUserInput false ;$/Code$
	Unfortunately, if the user is moving mouse when disableUserInput true command is invoked, the mouse input will get stuck for the whole duration of disabled user input but will reset as soon as disableUserInput false is called. I was unable to find workaround for this one.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		landAt
	</Keyword>
	<Description>
		Order an AI airplane to land at a given airport. ID is the number to identify which map airport you want the airplane to land at. Since Arma 3 v1.68 it is possible to also make the airplane land at a dynamic airport object (e.g. aircraft carrier, makeshift runway...).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/landAt
	</WikiPage>
	<Syntax>
		Object landAt Number
	</NextSyntax>
		Object landAt Object
	</Syntax>
	<RawSyntax>
		plane landAt id
	</NextRawSyntax>
		_plane1 landAt _dynamicAirport1
	</RawSyntax>
	<Example>
		$Code$_plane1 landAt 1;$/Code$
	</NextExample>
		$Code$_dynamicAirport1 = "DynamicAirport_01_F" createVehicle position player ;
	_plane1 landAt _dynamicAirport1;$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		ARMA 3:
	Altis :
	0 = Airbase
	1 = AAC Airfield
	2 = Krya Nera Airstrip
	3 = Selakeno Airfield
	4 = Molos Airfield
	5 = Almyra Salt Lake Airstrip
	Posted 17:56, 21 September 2010 (CEST)
	</NextNote>
		ARMA 2 OA:
	Takistan :
	0 = Airport NorthWest
	1 = Airport SouthEast
	Planes approach all airports from South West
	ARMA 2:
	Utes :
	0 = There is only one airport
	Chernarus :
	0 = Airport NorthWest close to Grishno
	1 = Airport NorthEast close to Kranostav
	2 = Airport SouthWest close to Balota
	3 = Nearest Airport
	Planes approach all airports from South East
	ARMA:
	Sahrani :
	0: - Paraiso
	1: - Rahmadi
	2: - Pita
	3: - Antigua
	</NextNote>
		(November 8, 2014)
	In Arma 3 (1.34) landAt only works for fixed-wing aircraft. Rotary-wing craft ignore this command.
	</NextNote>
		(June 19, 2016)
	ARMA 3 : Tanoa
	0 = Aeroport de Tanoa
	1 = Tuvanaka Airbase
	2 = Saint-George Airstrip
	3 = Bala Airstrip
	4 = La Rochelle Aerodome
	ARMA 3 : Stratis
	0 = Stratis Airbase
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		waypointsEnabledUAV
	</Keyword>
	<Description>
		Checks if the UAV has waypoints enabled.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/waypointsEnabledUAV
	</WikiPage>
	<Syntax>
		waypointsEnabledUAV Object
	</Syntax>
	<RawSyntax>
		waypointsEnabledUAV uav
	</RawSyntax>
	<Example>
		$Code$_uav enableUAVWaypoints false ;
	hint str waypointsEnabledUAV _uav; // returns false$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		selectWeaponTurret
	</Keyword>
	<Description>
		Selects the given weapon on specified turret. Use turret path [-1] for driver's turret. Since ver. 1.63.136864 this command supports both weapon name and muzzle name.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/selectWeaponTurret
	</WikiPage>
	<Syntax>
		Object selectWeaponTurret Array
	</Syntax>
	<RawSyntax>
		vehicle selectWeaponTurret [weapon, turretPath]
	</RawSyntax>
	<Example>
		$Code$MBT_Kuma selectWeaponTurret ["LMG_coax",[0]];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(February 13, 2017)
	The command will treat weapon or muzzle param like a weapon first. If no such weapon is found then it will try to find muzzle with such name. For example AMV-7 Marshall APC has main gun "autocannon_40mm_CTWS" which has 2 muzzles "HE" and "AP". Default muzzle is "HE". So if you try to select weapon by the name "autocannon_40mm_CTWS" you will always get "HE" muzzle selected. However if you pass "AP" as param, it will correctly select "AP" muzzle, since no "AP" weapon exists on this turret it will continue searching for a muzzle with this name and will find it eventually.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setLightFlareMaxDistance
	</Keyword>
	<Description>
		Sets max distance where the flare is visible.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setLightFlareMaxDistance
	</WikiPage>
	<Syntax>
		Object setLightFlareMaxDistance Number
	</Syntax>
	<RawSyntax>
		light setLightFlareMaxDistance distance
	</RawSyntax>
	<Example>
		$Code$myLight setLightFlareMaxDistance 500;$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		allMines
	</Keyword>
	<Description>
		Returns an array of all mines in the mission
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/allMines
	</WikiPage>
	<Syntax>
		allMines
	</Syntax>
	<RawSyntax>
		allMines
	</RawSyntax>
	<Example>
		$Code$allMines$/Code$
	</NextExample>
		$Code$( allMines select 0) mineDetectedBy west ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlAddEventHandler
	</Keyword>
	<Description>
		Add an event handler ( User Interface Event Handlers ) to the given control. Returns id of the handler or -1 when failed.
	NOTE: Control EHs are processed in reversed order, i.e. last added: first, first added: last. So if you have an override it should be set up in the 1st added EH.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlAddEventHandler
	</WikiPage>
	<Syntax>
		Control ctrlAddEventHandler Array
	</Syntax>
	<RawSyntax>
		control ctrlAddEventHandler [handler,function]
	</RawSyntax>
	<Example>
		$Code$_map ctrlAddEventHandler ["draw","_this call BIS_fnc_strategicMapOpen_draw"];$/Code$
	</NextExample>
		$Code$_map ctrlAddEventHandler ["draw",{ hintSilent str _this}];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(October 30, 2013)
	As of Arma 3 v1.05.111658 ctrlAddEventHandler and displayAddEventHandler support script Code in addition to String [1]
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		saveGame
	</Keyword>
	<Description>
		Autosave game (used for Retry).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/saveGame
	</WikiPage>
	<Syntax>
		saveGame
	</Syntax>
	<RawSyntax>
		saveGame
	</RawSyntax>
	<Example>
		$Code$saveGame ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		compile
	</Keyword>
	<Description>
		Compile expression.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/compile
	</WikiPage>
	<Syntax>
		compile String
	</Syntax>
	<RawSyntax>
		compile expression
	</RawSyntax>
	<Example>
		$Code$_string = "a = a + 1";
	_code = compile _string;
	call _code;$/Code$
	</NextExample>
		$Code$hint str compile "a = b";
	//Result: {a=b}$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Code
	</ReturnValue>

</NextListItem>

	<Keyword>
		getEditorObjectScope
	</Keyword>
	<Description>
		Returns the editor object scope of the specified editor object.
	i
	Some Old Editor Command
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getEditorObjectScope
	</WikiPage>
	<Syntax>
		Control getEditorObjectScope String
	</Syntax>
	<RawSyntax>
		map getEditorObjectScope object
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		tvSetTooltip
	</Keyword>
	<Description>
		Sets the tooltip text associated with the specified tree view path.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/tvSetTooltip
	</WikiPage>
	<Syntax>
		tvSetTooltip Array
	</NextSyntax>
		Control tvSetTooltip Array
	</Syntax>
	<RawSyntax>
		tvSetTooltip [idc, path, text]
	</NextRawSyntax>
		ctrl tvSetTooltip [path, text]
	</RawSyntax>
	<Example>
		$Code$tvSetTooltip [101, [0,2], "This is a tooltip"];$/Code$
	</NextExample>
		$Code$_tree tvSetTooltip [[0,2], "This is a tooltip"];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		unitIsUAV
	</Keyword>
	<Description>
		Returns true if the unit type is UAV - coresponding to transport param "isUAV"
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/unitIsUAV
	</WikiPage>
	<Syntax>
		unitIsUAV Object
	</Syntax>
	<RawSyntax>
		unitIsUAV unit
	</RawSyntax>
	<Example>
		$Code$_isUAV = unitIsUAV veh;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		currentWeapon
	</Keyword>
	<Description>
		Return the name of the currently selected weapon (on the primary turret for vehicles).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/currentWeapon
	</WikiPage>
	<Syntax>
		currentWeapon Object
	</Syntax>
	<RawSyntax>
		currentWeapon vehicle
	</RawSyntax>
	<Example>
		$Code$_weaponClass = currentWeapon (vehicle player);//Example: "M16A2GL"$/Code$
	</NextExample>
		$Code$_weaponClass = currentWeapon player;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(July 15, 2009)
	You have to make a little delay (sleep 0.001; (not less)) to use this command, else you will be returned an empty string.
	</NextNote>
		(July 15, 2009)
	It seems it's not working in 1.02 for other unit than player.
	</NextNote>
		(May 4, 2010)
	This works for vehicles providing there is a gunner
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		queryMagazinePool
	</Keyword>
	<Description>
		Return number of magazines of type name in magazine pool (used in campaign to transfer magazines into next mission).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/queryMagazinePool
	</WikiPage>
	<Syntax>
		queryMagazinePool String
	</Syntax>
	<RawSyntax>
		queryMagazinePool name
	</RawSyntax>
	<Example>
		$Code$_num = queryMagazinePool "M16";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		taskMarkerOffset
	</Keyword>
	<Description>
		Returns model space position for the task marker
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/taskMarkerOffset
	</WikiPage>
	<Syntax>
		taskMarkerOffset Object
	</Syntax>
	<RawSyntax>
		taskMarkerOffset unit
	</RawSyntax>
	<Example>
		$Code$_offset = taskMarkerOffset player ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		is3DENMultiplayer
	</Keyword>
	<Description>
		Returns true if the Eden Editor is in multiplayer mode. Returns true in the following cases:
	Multiplayer Preview launched directly from 3DEN - true in preview and only for the creator
	MP mission is chosen for editing when creating a server: Multiplayer - Server Browser - Host Server. When 3D EDITOR button is clicked for selected mission and 3DEN is launched, command returns true within the editor environment. (see also is3DEN )
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/is3DENMultiplayer
	</WikiPage>
	<Syntax>
		is3DENMultiplayer
	</Syntax>
	<RawSyntax>
		is3DENMultiplayer
	</RawSyntax>
	<Example>
		$Code$if is3DENMultiplayer then { systemChat "Your hosting a test server!"};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		removeAll3DENEventHandlers
	</Keyword>
	<Description>
		Removes all Eden Editor event handlers of given type.
	See the list of all Eden Editor Event Handlers.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/removeAll3DENEventHandlers
	</WikiPage>
	<Syntax>
		removeAll3DENEventHandlers String
	</Syntax>
	<RawSyntax>
		removeAll3DENEventHandlers type
	</RawSyntax>
	<Example>
		$Code$removeAll3DENEventHandlers "onUndo";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setEditorObjectScope
	</Keyword>
	<Description>
		This command defines the level of access a user has to editor objects.
	"objects" is an array of either Editor Objects (eg ["_unit_0"]) or actual Game Objects (eg [player]). If the array is empty then the command will automatically parse all editor objects.
	"editorType" is the editor type to effect (eg "unit", "vehicle", "center") or "" for all types.
	"condition" is an executable string that must evaluate to true or false. If true, the scope of the evaluated editor object will be modified. "_x" can be used in the string as reference to the ingame representation of the currently processed array member.
	"scope" is one of "HIDE", "VIEW", "SELECT", "LINKTO", "LINKFROM", "ALLNODRAG", "ALLNOTREE", "ALLNOCOPY", "ALLNOSELECT" or "ALL".
	"subordinatesAlso" is a boolean value. If true then subordinates in the editor will be assigned the same scope as the parent.
	i
	Some Old Editor Command
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setEditorObjectScope
	</WikiPage>
	<Syntax>
		Control setEditorObjectScope Array
	</Syntax>
	<RawSyntax>
		map setEditorObjectScope [objects, editorType, condition, scope, subordinatesAlso]
	</RawSyntax>
	<Example>
		$Code$_map setEditorObjectScope [ [],"vehicle", "side effectiveCommander _x != side player", "HIDE", false]$/Code$
	</NextExample>
		$Code$((findDisplay 128) displayCtrl 51) setEditorObjectScope [ ["_unit_0"], "", "true", "ALLNODRAG", false]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		diag_codePerformance
	</Keyword>
	<Description>
		Attempts to run given code with given arguments given number of cycles in unscheduled environment and returns average time it took to run the code as well as actual number of executions performed. The command will return as soon as possible if the tested code is slow and the duration of the command exceeds 1 second. Engine alternative to BIS_fnc_codePerformance
	NOTE: For security purposes, this command will only run for 1 cycle in MP, unless in-game debug console is available via description.ext option or Eden attribute setting.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/diag_codePerformance
	</WikiPage>
	<Syntax>
		diag_codePerformance Array
	</Syntax>
	<RawSyntax>
		diag_codePerformance [code, arguments, cycles]
	</RawSyntax>
	<Example>
		$Code$_result = diag_codePerformance [{ private _a = 123;}, 0, 10000];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		didJIP
	</Keyword>
	<Description>
		Checks if the current client Joined In Progress.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/didJIP
	</WikiPage>
	<Syntax>
		didJIP
	</Syntax>
	<RawSyntax>
		didJIP
	</RawSyntax>
	<Example>
		$Code$clientDidJIP = didJIP ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(February 23, 2016)
	reports false in CfgFunctions with preInit = 1; even when the client joined in progress.
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		findDisplay
	</Keyword>
	<Description>
		Find display by its IDD (which is defined in the description.ext or config).
	If the specified display can't be found displayNull ("No display") is returned, (which can be tested with the isNull command.)
	The primary display uses IDD 46. (eg: findDisplay 46). This will return displayNull on a dedicated server (so be sure to check isDedicated if using this in a waitUntil condition).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/findDisplay
	</WikiPage>
	<Syntax>
		findDisplay Number
	</Syntax>
	<RawSyntax>
		findDisplay idd
	</RawSyntax>
	<Example>
		$Code$_display = findDisplay 1;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(15 June 2008)
	findDisplay does not find displays defined under RscTitles (even when they are visible).
	To access those types of displays, either assign the resource to a global variable, or pass its this value to a script, during the onLoad event:
	e.g. class RscTitles {
	class MyRsc {
	onLoad = "myDisplay = (_this select 0)"; // or
	// onLoad = "_this execVM 'myDialog.sqf'";
	...
	You can then use the stored value as you would for regular dialogs:
	$Code$(myDisplay displayCtrl 1111) ctrlSetText "hello there");$/Code$
	</NextNote>
		(17 March 2010)
	I posted a tutorial on finding and using displays here.
	</NextNote>
		(07 March 2014)
	The Zeus Display uses IDD 312
	</NextNote>
		(March 25, 2015)
	Display 12 is map
	</NextNote>
		(June 25, 2017)
	I have tested the behavior of this command and I found out that it [ findDisplay ] appears to only return the display AFTER any onLoad event handler of that display is done. So, using findDisplay inside an onLoad event handler is useless.
	</NextNote>
		(August 14, 2017)
	There are some specific cases, where findDisplay will not be able to find an existing display. Here's the cases and how to act on them:
	$Code$//Your display has IDD= -1.
	class RscDisplayNew
	{
	idd=-1;
	scriptName = "RscDisplayNew";
	...
	};$/Code$
	$Code$//Your display doesn't have IDD
	class RscDisplayNew
	{
	scriptName = "RscDisplayNew";
	...
	};$/Code$
	$Code$//Your display doesn't have scriptname with IDD = -1
	class RscDisplayNew
	{
	idd=-1;
	...
	};$/Code$
	$Code$//Your display doesn't have scriptname, neither IDD
	class RscDisplayNew
	{
	...
	};$/Code$
	1.
	You actually can find a -1 display, but this means finding a display with this IDD might be a problem, when there are a few displays marked as -1.
	So as you can see, theres an entry called scriptName. You can get a reference to this display by using uiNamespace :
	$Code$(uiNamespace getVariable "RscDisplayNew")$/Code$
	NOTE : Variables are overwritten with a reference of the last declared display under the same scriptName entry. Take a look at case 3 for solution.
	2.
	Displays without IDD's can actually exist. They can be manipulated only in a way described in the first case using uiNamespace.
	3.
	You can really have this display seeking it manually in a allDisplays return. This is experimental, but working option.
	4.
	You will have a problem finding this display, since this display doesn't exist even in allDisplays (?) return. Behaviour unknown.
	</Note>
	<ReturnValue>
		Display
	</ReturnValue>

</NextListItem>

	<Keyword>
		setParticleParams
	</Keyword>
	<Description>
		Set parameters to particle source. Array is in format ParticleArray.
	Since Arma 3 version 1.11.114706 you can use this command to overwrite many values set by setParticleClass, particularity those defined in ParticleArray. Correspondence between CfgCloudlets class param names and command array of params:
	$Code$particleSource setParticleParams
	[
	/* String or Array - If string then the name of the particleShape. And following default values are used:
	particleFSNtieth = 1
	particleFSIndex = 0
	particleFSFrameCount = 1
	particleFSLoop = true
	*/
	[
	particleShape, /* String */
	particleFSNtieth, /* Number */
	particleFSIndex, /* Number */
	particleFSFrameCount, /* Number */
	particleFSLoop /*Optional - Boolean. Default: true */
	],
	animationName, /* String */
	particleType, /* String - Enum: Billboard, SpaceObject*/
	timerPeriod, /* Number */
	lifeTime, /* Number */
	position, /*3D Array of numbers as relative position to particleSource or (if object at index 18 is set) object.
	Or (if object at index 18 is set) String as memoryPoint of object.*/
	moveVelocity, /*3D Array of numbers.*/
	rotationVelocity, /* Number */
	weight, /* Number */
	volume, /* Number */
	rubbing, /* Number */
	size, /* Array of Number */
	color, /* Array of Array of RGBA Numbers */
	animationSpeed, /* Array of Number */
	randomDirectionPeriod, /* Number */
	randomDirectionIntensity, /* Number */
	onTimerScript, /* String */
	beforeDestroyScript, /* String */
	this, /* Object */
	angle, /*Optional Number - Default: 0*/
	onSurface, /*Optional Boolean */
	bounceOnSurface, /*Optional Number */
	emissiveColor /*Optional Array of Array of RGBA Numbers */
	];$/Code$
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setParticleParams
	</WikiPage>
	<Syntax>
		Object setParticleParams Array
	</Syntax>
	<RawSyntax>
		particleSource setParticleParams array
	</RawSyntax>
	<Example>
		$Code$see ParticleArray$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		debugFSM
	</Keyword>
	<Description>
		Dump (something about FSM) to debugging output. This command is (assumed to be) non-functional in the retail version.
	Non functional in retail
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/debugFSM
	</WikiPage>
	<Syntax>
		Number debugFSM Boolean
	</Syntax>
	<RawSyntax>
		FSMhandle debugFSM true
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		distributionRegion
	</Keyword>
	<Description>
		Returns the numerical index for the distribution region of this copy of ArmA.
	1 - US
	2 - Rest of the world
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/distributionRegion
	</WikiPage>
	<Syntax>
		distributionRegion
	</Syntax>
	<RawSyntax>
		distributionRegion
	</RawSyntax>
	<Example>
		$Code$distributionRegion == 1$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		hintSilent
	</Keyword>
	<Description>
		Same as hint, but without a sound.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/hintSilent
	</WikiPage>
	<Syntax>
		hintSilent String/Structured_Text
	</Syntax>
	<RawSyntax>
		hintSilent text
	</RawSyntax>
	<Example>
		$Code$hintSilent "You texte comes here !"$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		posWorldToScreen
	</Keyword>
	<Description>
		Convert world coordinates to screen coordinates in map.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/posWorldToScreen
	</WikiPage>
	<Syntax>
		Control posWorldToScreen Array
	</Syntax>
	<RawSyntax>
		map posWorldToScreen position
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		lbValue
	</Keyword>
	<Description>
		Returns the additional integer value in the item with the given index of the listbox or combobox with id idc of the topmost user dialog.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lbValue
	</WikiPage>
	<Syntax>
		lbValue Array
	</NextSyntax>
		Control lbValue Number
	</Syntax>
	<RawSyntax>
		lbValue [idc, index]
	</NextRawSyntax>
		control lbValue index
	</RawSyntax>
	<Example>
		$Code$_value = lbValue [101, 0];$/Code$
	</NextExample>
		$Code$_value = _control lbValue 0;$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
		More information on the LB command family can be found here
	</Note>
	<ReturnValue>
		Number - Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		setVectorDir
	</Keyword>
	<Description>
		Set object's direction vector. Up vector will remain unchanged.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setVectorDir
	</WikiPage>
	<Syntax>
		Object setVectorDir Array
	</Syntax>
	<RawSyntax>
		object setVectorDir [x,y,z]
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		(March 16, 2008)
	Command can be also used to rotate camera in all three axis.
	</NextNote>
		(21:06, 3 March 2009 (CET))
	setVectorDir can only influence an object's pitch. It can not influence bank. Example:
	$Code$player setVectorDir [0,0,1]$/Code$
	If the player is facing 0 degrees (north), then this will do NOTHING.
	If the player is facing 90 degrees (east), then this will make him pitch 90 degrees up.
	You can't directly pitch an object beyond 90 degrees, because this would change its facing direction. You must first flip it's direction using setDir, then you must bank the object 180 degrees, THEN you pitch the object appropriately.
	</NextNote>
		(August 17, 2015)
	In Arma 3, setVectorDir does not control an object's pitch or bank, in fact, it is not possible to change either of those solely using setVectorDir. This command can only affect horizontal rotation along the x-plane, unless an object first has it's vectorUp changed to something other than [0,0,1]. Correct input to setVectorDir should be calculated using the trigonometric functions sin and cos.
	examples:
	$Code$
	0 degrees (north)
	player setVectorDir
	[
	sin 0, //equals 0
	cos 0, //equals 1
	1
	];
	45 degrees (north-east)
	player setVectorDir
	[
	sin 45, //equals 0.707
	cos 45, //equals 0.707
	1
	];$/Code$
	If you are doing trigonometric calculations, it may be better to use setVectorDir rather than setDir, since sine and cosine have already been calculated and will not need to be re-calculated
	(also, setDir probably uses setVectorDir anyway.)
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		sideEnemy
	</Keyword>
	<Description>
		The enemy side (used for renegades). Unit of this side is enemy to everyone.
	To become one, you can attack members of your own side or use addRating.
	When below a rating of -2000 units switch automatically to this side.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/sideEnemy
	</WikiPage>
	<Syntax>
		sideEnemy
	</Syntax>
	<RawSyntax>
		sideEnemy
	</RawSyntax>
	<Example>
		$Code$if ( side player == sideEnemy ) then {
	hint "We've got a renegade!";
	};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Side
	</ReturnValue>

</NextListItem>

	<Keyword>
		triggerActivation
	</Keyword>
	<Description>
		Returns trigger activation in the form [by, type, repeating].
	Note: The trigger could be local or remote but the result returned by this command will be for the trigger condition set up locally on the client that executed the command. See createTrigger for more info.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/triggerActivation
	</WikiPage>
	<Syntax>
		triggerActivation Object
	</Syntax>
	<RawSyntax>
		triggerActivation trigger
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		allPlayers
	</Keyword>
	<Description>
		Returns a list of all human players including dead players. The command also returns all connected headless clients. To filter headless clients out:
	$Code$_justPlayers = allPlayers - entities "HeadlessClient_F";$/Code$
	NOTES:
	In player hosted game, the complete array of allPlayers may get delayed at the start. Use BIS_fnc_listPlayers if you need it earlier
	The order of players in the return array may differ from server to clients
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/allPlayers
	</WikiPage>
	<Syntax>
		allPlayers
	</Syntax>
	<RawSyntax>
		allPlayers
	</RawSyntax>
	<Example>
		$Code${
	systemChat format [
	"Player %1 is %2",
	name _x,
	["dead", "alive"] select alive _x
	];
	} forEach allPlayers ;$/Code$
	</NextExample>
		$Code$_bluNums = west countSide allPlayers ;$/Code$
	</NextExample>
		$Code$// Find all human players if headless clients are used:
	_allHCs = entities "HeadlessClient_F";
	_allHPs = allPlayers - _allHCs;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		markerColor
	</Keyword>
	<Description>
		Returns marker color for given marker. See setMarkerColor. Note: This function is identical to getMarkerColor.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/markerColor
	</WikiPage>
	<Syntax>
		markerColor String
	</Syntax>
	<RawSyntax>
		markerColor markerName
	</RawSyntax>
	<Example>
		$Code$if ( markerColor "Marker1" == "ColorRed") then { hint "Marker1 is red!"}$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		removeCuratorEditingArea
	</Keyword>
	<Description>
		Removes editing area for given curator.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/removeCuratorEditingArea
	</WikiPage>
	<Syntax>
		Object removeCuratorEditingArea Number
	</Syntax>
	<RawSyntax>
		curatorObj removeCuratorEditingArea editAreaID
	</RawSyntax>
	<Example>
		$Code$myCurator removeCuratorEditingArea 3;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		createTrigger
	</Keyword>
	<Description>
		Creates a sensor ( trigger ) of the given type and at the given position. The type must be a class name in CfgNonAIVehicles or CfgVehicles with simulation = detector. An array containing all units that have activated the trigger is available via list triggerobj. Created triggers can be deleted using deleteVehicle.
	NOTE1: Since Arma 3 v1.43.129935 triggers can be created locally on clients setting optional param makeGlobal to false
	NOTE2: Since Arma 3 v1.53.132440 triggers can be disabled/enabled using enableSimulation command
	Triggers are created with default params, which are:
	a: 50.0
	b: 50.0
	c: -1
	angle: 0
	rectangular: false
	activationBy: None
	activationType: Present
	repeating: false
	timeoutMin: 0
	timeoutMid: 0
	timeoutMax: 0
	interruptable: true
	type: None
	text: ""
	name: ""
	expCond: "this"
	expActiv: ""
	expDesactiv: ""
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/createTrigger
	</WikiPage>
	<Syntax>
		createTrigger Array
	</Syntax>
	<RawSyntax>
		createTrigger [type, position, makeGlobal]
	</RawSyntax>
	<Example>
		$Code$_trg = createTrigger ["EmptyDetector", getPos player ];
	_trg setTriggerArea [5, 5, 0, false ];
	_trg setTriggerActivation ["CIV", "PRESENT", true ];
	_trg setTriggerStatements ["this", "hint 'Civilian near player'", "hint 'no civilian near'"];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(March 6, 2013)
	Calling list immediately after creating a trigger this way (and setting up activation, area, statements, timeout, etc..), will return null instead of an array. It seems the trigger needs about 1 second to initialise, after which it will behave as expected: returning an array of all the objects inside the trigger (the ones matching the criteria), or an empty array.
	</Note>
	<ReturnValue>
		Object
	</ReturnValue>

</NextListItem>

	<Keyword>
		is3DEN
	</Keyword>
	<Description>
		Returns true if the Eden Editor is currently being used. true when inside editor environment, false during preview. (see also is3DENMultiplayer )
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/is3DEN
	</WikiPage>
	<Syntax>
		is3DEN
	</Syntax>
	<RawSyntax>
		is3DEN
	</RawSyntax>
	<Example>
		$Code$if is3DEN then { systemChat "Welcome to Eden Editor!"};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		lbSetSelected
	</Keyword>
	<Description>
		Set the selection state of the given row of the given listbox of style LB_MULTI. For single selection listbox use lbSetCurSel instead.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lbSetSelected
	</WikiPage>
	<Syntax>
		Control lbSetSelected Array
	</Syntax>
	<RawSyntax>
		control lbSetSelected [index, selected]
	</RawSyntax>
	<Example>
		$Code$_control lbSetSelected [0, true ];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(April 10, 2016)
	This command works fine with listboxs of style LB_MULTI and should not be marked as obsolete as lbSetCurSel does not provide the same functionality.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		tvSetPictureColor
	</Keyword>
	<Description>
		Sets the colour of the picture (set via tvSetPicture ) under the specified tree view path.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/tvSetPictureColor
	</WikiPage>
	<Syntax>
		tvSetPictureColor Array
	</NextSyntax>
		Control tvSetPictureColor Array
	</Syntax>
	<RawSyntax>
		tvSetPictureColor [idc, path, color]
	</NextRawSyntax>
		ctrl tvSetPictureColor [path, color]
	</RawSyntax>
	<Example>
		$Code$tvSetPictureColor [101, [0,2], [1,0,1,1]];$/Code$
	</NextExample>
		$Code$_tree tvSetPictureColor [[0,2], [1,0,1,1]];$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		getAmmoCargo
	</Keyword>
	<Description>
		Returns the amount of ammo resources in the cargo space of a rearm vehicle.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getAmmoCargo
	</WikiPage>
	<Syntax>
		getAmmoCargo Object
	</Syntax>
	<RawSyntax>
		getAmmoCargo vehicle
	</RawSyntax>
	<Example>
		$Code$value = getAmmoCargo myVehicleName;$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(December 22, 2014)
	If the vehicle is not alive, it always returns Nothing, which you should check for using isNil.
	If the vehicle is unable to carry that type of cargo, it returns -1.#IND, which you should check for using finite.
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		diag_fpsMin
	</Keyword>
	<Description>
		Returns minimal framerate. Calculated from the longest frame over last 16 frames.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/diag_fpsMin
	</WikiPage>
	<Syntax>
		diag_fpsMin
	</Syntax>
	<RawSyntax>
		diag_fpsMin
	</RawSyntax>
	<Example>
		$Code$_minfps = diag_fpsMin ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		difficultyEnabledRTD
	</Keyword>
	<Description>
		Returns true if rotorlib simulation is enabled. Forcing by mission is included
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/difficultyEnabledRTD
	</WikiPage>
	<Syntax>
		difficultyEnabledRTD
	</Syntax>
	<RawSyntax>
		difficultyEnabledRTD
	</RawSyntax>
	<Example>
		$Code$_rtdOn = difficultyEnabledRTD$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		fadeSpeech
	</Keyword>
	<Description>
		Cause a smooth change in the master speech volume. The change duration is given by time, the target volume by volume. The default master is 1.0.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/fadeSpeech
	</WikiPage>
	<Syntax>
		Number fadeSpeech Number
	</Syntax>
	<RawSyntax>
		time fadeSpeech volume
	</RawSyntax>
	<Example>
		$Code$5 fadeSpeech 0.1;$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		canAddItemToVest
	</Keyword>
	<Description>
		Checks if given object can be stored into soldier's vest.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/canAddItemToVest
	</WikiPage>
	<Syntax>
		Object canAddItemToVest String
	</NextSyntax>
		Object canAddItemToVest Array
	</Syntax>
	<RawSyntax>
		unit canAddItemToVest item
	</NextRawSyntax>
		unit canAddItemToVest [item, count]
	</RawSyntax>
	<Example>
		$Code$_item = "HandGrenade";
	_fits = player canAddItemToVest _item;
	if (_fits) then {
	player addItemToVest _item;
	} else {
	hint "no room!";
	};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean - Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		setTriggerActivation
	</Keyword>
	<Description>
		Defines the trigger activation type.
	See ArmA:Mission Editor - Triggers for a thorough overview of triggers and its fields for activation, effects, etc. Since Arma 3 v1.67, "ANYPLAYER" activation can be used to detect any player.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setTriggerActivation
	</WikiPage>
	<Syntax>
		Object setTriggerActivation Array
	</Syntax>
	<RawSyntax>
		trigger setTriggerActivation [by, type, repeating]
	</RawSyntax>
	<Example>
		$Code$_trigger setTriggerActivation ["WEST", "EAST D", true ]$/Code$
	</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		getEditorMode
	</Keyword>
	<Description>
		Returns the current mode of the editor.
	i
	Some Old Editor Command
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getEditorMode
	</WikiPage>
	<Syntax>
		getEditorMode Control
	</Syntax>
	<RawSyntax>
		getEditorMode map
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		deleteIdentity
	</Keyword>
	<Description>
		Delete an identity (created with saveIdentity ) from the campaign's progress file.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/deleteIdentity
	</WikiPage>
	<Syntax>
		deleteIdentity String
	</Syntax>
	<RawSyntax>
		deleteIdentity identityName
	</RawSyntax>
	<Example>
		$Code$?deleteIdentity "playerIdentity":hint "Delete ok"$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		inflame
	</Keyword>
	<Description>
		Control fireplace burning. Set inflame to true (on) or false (off).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/inflame
	</WikiPage>
	<Syntax>
		Object inflame Boolean
	</Syntax>
	<RawSyntax>
		fireplace inflame burn
	</RawSyntax>
	<Example>
		$Code$_fireplaceOne inflame true ;$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		endl
	</Keyword>
	<Description>
		Creates a string containing a line break, similar to lineBreak for text. The name is inspired by c++ std::endl (line end). The command returns "\r\n", which contains control characters rather than printable characters:
	hint str count "\r\n"; // 4
	hint str count endl ; // 2
	The line break works for diag_log and ctrlSetText. It doesn't work with the hint because hint interprets printable "\n" as line break instead. Alternatively one can use toString command to get other characters.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/endl
	</WikiPage>
	<Syntax>
		endl
	</Syntax>
	<RawSyntax>
		endl
	</RawSyntax>
	<Example>
		$Code$diag_log ("line1" + endl + "line2");$/Code$
	</NextExample>
		$Code$_ctrl = findDisplay 46 ctrlCreate ["RscTextMulti", -1];
	_ctrl ctrlSetPosition [0,0,1,1];
	_ctrl ctrlCommit 0;
	_ctrl ctrlSetText format ["line1%1line2%1line3", endl ];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		getObjectTextures
	</Keyword>
	<Description>
		Gets all custom textures (hiddenSelectionsTextures) associated with the object.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getObjectTextures
	</WikiPage>
	<Syntax>
		getObjectTextures Object
	</Syntax>
	<RawSyntax>
		getObjectTextures obj
	</RawSyntax>
	<Example>
		$Code$_textures = getObjectTextures player ;$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		addWeaponGlobal
	</Keyword>
	<Description>
		Add a weapon to a unit. Infantry units can only carry weapons in their respective slots (primary, secondary and handgun), the addWeaponGlobal command will replace the weapon currently in a slot with the added weapon if it shares the same slot.
	To make sure the added weapon is loaded and ready, add the magazine first.
	This command is broken when used on dedicated server
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/addWeaponGlobal
	</WikiPage>
	<Syntax>
		Object addWeaponGlobal String
	</Syntax>
	<RawSyntax>
		unit addWeaponGlobal weapon
	</RawSyntax>
	<Example>
		$Code${
	_x addMagazineGlobal "Laserbatteries";
	_x addWeaponGlobal "Laserdesignator";
	} forEach allUnits ;$/Code$
	</NextExample>
		$Code${
	if ( typeOf _x == "O_Heli_Attack_02_black_F") then {
	_x addMagazineGlobal "38Rnd_80mm_rockets";
	_x addWeaponGlobal "rockets_Skyfire";
	};
	} forEach vehicles ;$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
		(July 7, 2015)
	If you do not remove weapon first, using this command from dedicated server will duplicate weapon.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		sideLogic
	</Keyword>
	<Description>
		The Logic side.
	Side of Game Logics and Modules.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/sideLogic
	</WikiPage>
	<Syntax>
		sideLogic
	</Syntax>
	<RawSyntax>
		sideLogic
	</RawSyntax>
	<Example>
		$Code$if ( side _obj == sideLogic ) then {
	hint "It's a logic!";
	};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Side
	</ReturnValue>

</NextListItem>

	<Keyword>
		setCaptive
	</Keyword>
	<Description>
		Mark a unit as captive. If unit is a vehicle, commander is marked. A captive is neutral to everyone (belong to civilian side ), and will not trigger "detected by" conditions for its original side.
	Using a number (instead of a boolean) for the status has no further effect on the engine's behavior, but can be used by captiveNum to keep track of the captivity status at a finer resolution (e.g. handcuffed, grouped, etc.). The numbered status syntax was introduced in Arma 2.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setCaptive
	</WikiPage>
	<Syntax>
		Object setCaptive Boolean
	</NextSyntax>
		Object setCaptive Number
	</Syntax>
	<RawSyntax>
		unitName setCaptive status
	</NextRawSyntax>
		unitName setCaptive status
	</RawSyntax>
	<Example>
		$Code$_soldier1 setCaptive true ;$/Code$
	</NextExample>
		$Code$_soldier1 setCaptive 1;$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		(August 4, 2006)
	This function does not remove unit's weapons.
	If you make a unit captive, that unit will still fire on the enemy, but the enemy will not fire back.
	</NextNote>
		(January 1, 2011)
	If you change a unit from captive to no longer captive (for example, to "reveal" an undercover unit), enemy units that already have prior knowledge of the unit as a captive will only partially engage, making it very easy for the undercover unit. This seems to be a bug.
	However other enemy unit the unit later encounters will engage freely with full force.
	</NextNote>
		(November 19, 2017)
	Talkingtoaj note doesn't apply to Arma 3 anymore (earlier than 1.76)
	A captive unit will immediately be shot (after a normal "human" reaction time from the AI)
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		camSetFovRange
	</Keyword>
	<Description>
		Set the zoom level ( F ield O f V iew) start and end values for automatical zooming.
	The default zoom level is 0.7 where 0 is the nearest and 1 is the most far zoom value.
	This command is non-functional !
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/camSetFovRange
	</WikiPage>
	<Syntax>
		Object camSetFovRange Array
	</Syntax>
	<RawSyntax>
		camera camSetFovRange fovRange
	</RawSyntax>
	<Example>
		$Code$_cam camSetFovRange [0.1, 0.7];$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		forEachMemberAgent
	</Keyword>
	<Description>
		Executes the given command recursively for each agent that is a member of the given team. For just teams use forEachMemberTeam. For both teams and agents use forEachMember.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/forEachMemberAgent
	</WikiPage>
	<Syntax>
		Code forEachMemberAgent Team_Member
	</Syntax>
	<RawSyntax>
		command forEachMemberAgent team
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		isLaserOn
	</Keyword>
	<Description>
		Returns true if the vehicle has its laser turned on. Not to be confused with isIRLaserOn which is for units
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isLaserOn
	</WikiPage>
	<Syntax>
		isLaserOn Object
	</Syntax>
	<RawSyntax>
		isLaserOn vehicle
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		set3DENLayer
	</Keyword>
	<Description>
		Set layer for Eden Entity.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/set3DENLayer
	</WikiPage>
	<Syntax>
		EdenEntity set3DENLayer Number
	</Syntax>
	<RawSyntax>
		entity set3DENLayer layerID
	</RawSyntax>
	<Example>
		$Code$_myLayer = -1 add3DENLayer "CTRG";
	player set3DENLayer _myLayer;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		getMissionConfigValue
	</Keyword>
	<Description>
		Returns value of the given scenario attribute from the 1st tier. Since only config properties have values, the attribute should be config property. If it is not found or config class is given, the return is nil. If the attribute defined in multiple places, the command checks them in the following order:
	External Description.ext file
	Eden Editor scenario attribute
	So if attribute exists in both places, attribute from description.ext is used. Previously, scenario attributes were extracted from Description.ext using missionConfigFile. That still works, but it ignores attributes set directly in the editor and it should not be used anymore.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getMissionConfigValue
	</WikiPage>
	<Syntax>
		getMissionConfigValue String
	</NextSyntax>
		getMissionConfigValue Array
	</Syntax>
	<RawSyntax>
		getMissionConfigValue attribute
	</NextRawSyntax>
		getMissionConfigValue [attribute, defaultValue]
	</RawSyntax>
	<Example>
		$Code$_respawnDelay = getMissionConfigValue ["respawnDelay",0]
	// Returns respawn delay value. Replaces the previous approach which would scan only the external Description.ext file, but ignore the value set in the Eden Editor:_respawnDelay = getNumber ( missionConfigFile "respawnDelay"); // Old approach$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number/String/Array - Number/String/Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		simulationEnabled
	</Keyword>
	<Description>
		Check if the entity has enabled simulation.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/simulationEnabled
	</WikiPage>
	<Syntax>
		simulationEnabled Object
	</Syntax>
	<RawSyntax>
		simulationEnabled entity
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		vectorDiff
	</Keyword>
	<Description>
		Subtracts one 3D vector from another. (vector1 - vector2)
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/vectorDiff
	</WikiPage>
	<Syntax>
		Array vectorDiff Array
	</Syntax>
	<RawSyntax>
		vector1 vectorDiff vector2
	</RawSyntax>
	<Example>
		$Code$hint str ( velocity car vectorDiff velocity bike);$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(28 Jun, 2014)
	(ArmA3 1.22)Algorithm:
	$Code$
	Vector1 = [x1,y1,z1]; Vector2 = [x2,y2,z2];
	Result = [x1 – x2,y1 – y2,z1 – z2;]
	$/Code$
	It is recommended to use vectorDiff instead of BIS_fnc_vectorDiff.
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		evalObjectArgument
	</Keyword>
	<Description>
		Return argument in mission editor of a given object.
	i
	Some Old Editor Command
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/evalObjectArgument
	</WikiPage>
	<Syntax>
		Control evalObjectArgument Array
	</Syntax>
	<RawSyntax>
		map evalObjectArgument [object, argument]
	</RawSyntax>
	<Example>
		$Code$// returns string "[1009.0351, 1319.4928]"
	( findDisplay 128 displayCtrl 51) getObjectArgument ["_unit_1", "POSITION"]
	// returns array [1009.0351, 1319.4928]
	( findDisplay 128 displayCtrl 51) evalObjectArgument ["_unit_1", "POSITION"]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Any_Value
	</ReturnValue>

</NextListItem>

	<Keyword>
		clearBackpackCargoGlobal
	</Keyword>
	<Description>
		Removes all backpacks from the vehicle cargo space. MP synchronized.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/clearBackpackCargoGlobal
	</WikiPage>
	<Syntax>
		clearBackpackCargoGlobal Object
	</Syntax>
	<RawSyntax>
		clearBackpackCargoGlobal unit
	</RawSyntax>
	<Example>
		$Code$clearBackpackCargoGlobal jeepOne;$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
		(July 6, 2017)
	This will remove not only backpacks, but vests and uniforms as well.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		pushBackUnique
	</Keyword>
	<Description>
		Adds element to the back of the given array but only if it is unique to the array. The index of the added element is returned upon success, otherwise -1. This command modifies the original array.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/pushBackUnique
	</WikiPage>
	<Syntax>
		Array pushBackUnique Anything
	</Syntax>
	<RawSyntax>
		array pushBackUnique element
	</RawSyntax>
	<Example>
		$Code$_arr = [1,2,3];
	_index = _arr pushBackUnique 3;
	hint str [_index, _arr]; //[-1,[1,2,3]]$/Code$
	</NextExample>
		$Code$_arr = [1,2,3];
	_index = _arr pushBackUnique 4;
	hint str [_index, _arr]; //[3,[1,2,3,4]]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		isCollisionLightOn
	</Keyword>
	<Description>
		Returns true if vehicle collision lights are on otherwise false.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isCollisionLightOn
	</WikiPage>
	<Syntax>
		isCollisionLightOn Object
	</Syntax>
	<RawSyntax>
		isCollisionLightOn vehicle
	</RawSyntax>
	<Example>
		$Code$_collisionLightOn = isCollisionLightOn heli;$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(April 6, 2015)
	Bind Collision light action to UserAction 2
	$Code$this addAction ["", {
	_this select 1 action [
	["CollisionLightOn", "CollisionLightOff"] select isCollisionLightOn (_this select 0),
	_this select 0
	];
	}, "", -10, false, true, "User2", "_this == driver _target"];$/Code$
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		time
	</Keyword>
	<Description>
		Returns time elapsed since mission started (in seconds). The value is different on each client. If you need unified time, use serverTime.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/time
	</WikiPage>
	<Syntax>
		time
	</Syntax>
	<RawSyntax>
		time
	</RawSyntax>
	<Example>
		$Code$_future = time + 30;
	waitUntil { time = _future}; /* continue after 30 seconds... */$/Code$
	</NextExample>
		$Code$// Wait until mission fully started:
	waitUntil { time 0};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(August 4, 2006)
	Notes from before the conversion:
	Not to be confused with _time. Within a script, the reserved local variable _time returns the time elapsed since the script started running. Note that the value of time is not saved when the mission is saved and so will be reset to zero when a mission is restarted from a saved position. The value of _time is saved correctly and will resume from where it was.
	_time has only special meaning in SQS scripts, in SQF script it is just another variable. -- Killzone_Kid
	</NextNote>
		(January 5, 2007)
	Notes from before the conversion:
	time works properly in sqf called with execVM command. In an other hand, _time does not works in sqf called with execVM command.(Arma v1.02.5103GER)
	</NextNote>
		(October 02, 2010)
	On overloaded servers (below ~10 server FPS), time readings are unreliable. Seconds actually take longer. While the clients keep a steady tempo, server time lags behind, resulting in considerable offset between client and server time (easily 30 minutes for a 2 hour game). Client time is synchronised to server time during JIP, but other than that it runs independently.
	</NextNote>
		(30 Oct 2013)
	Arma 3 JIP bug:
	As of Arma 3 v1.02, for JIP clients 'time' value will start off counting from 0, not the real 'time' value. After about 2.5sec (on average), it will then jump to a high value and synchronise with the real 'time' value, which could be 900, for example.
	Therefore, do not use 'time' for any start of mission init timeouts; it's unreliable. (It's odd that it doesn't synchronise at the same time as public variables.)
	</NextNote>
		(September 1, 2016)
	In MP : Since per-client time and server time is unconsistant I strongly recommend execution of time-critical tasks from server-side scripts and with remoteExec or remoteExecCall ( Since only A3 1.50 alternative may be publicVariableClient with pre-defined handler) as this will eliminate any time calculation lags and make it reliable.
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlShow
	</Keyword>
	<Description>
		Set if a control of the currently active user dialog is shown or not.
	Read Dialog Control for more information about user dialogs and controls.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlShow
	</WikiPage>
	<Syntax>
		ctrlShow Array
	</NextSyntax>
		Control ctrlShow Boolean
	</Syntax>
	<RawSyntax>
		ctrlShow [idc, show]
	</NextRawSyntax>
		controlName ctrlShow show
	</RawSyntax>
	<Example>
		$Code$ctrlShow [100, false ];$/Code$
	</NextExample>
		$Code$_control ctrlShow false ;$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		synchronizedTriggers
	</Keyword>
	<Description>
		Returns the list of triggers synchronized with a given waypoint.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/synchronizedTriggers
	</WikiPage>
	<Syntax>
		synchronizedTriggers Waypoint
	</Syntax>
	<RawSyntax>
		synchronizedTriggers waypoint
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		lockDriver
	</Keyword>
	<Description>
		Lock the driver position of the vehicle. This command must be executed where vehicle is local.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lockDriver
	</WikiPage>
	<Syntax>
		Object lockDriver Boolean
	</Syntax>
	<RawSyntax>
		vehicle lockDriver lock
	</RawSyntax>
	<Example>
		$Code$vehicleName lockDriver true ;$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		nearestLocation
	</Keyword>
	<Description>
		Return the closest location of specified class to a given position. Checked range is unlimited (i.e. covers the whole map).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/nearestLocation
	</WikiPage>
	<Syntax>
		nearestLocation Array
	</Syntax>
	<RawSyntax>
		nearestLocation [position, locationClass]
	</RawSyntax>
	<Example>
		$Code$_nearestCity = nearestLocation [ getPos player, "nameCity"];$/Code$
	</NextExample>
		$Code$_anyNearestLocation = nearestLocation [ player, ""];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Location
	</ReturnValue>

</NextListItem>

	<Keyword>
		briefingName
	</Keyword>
	<Description>
		Returns the name of the current briefing/scenario name.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/briefingName
	</WikiPage>
	<Syntax>
		briefingName
	</Syntax>
	<RawSyntax>
		briefingName
	</RawSyntax>
	<Example>
		$Code$_name = briefingName ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		setLeader
	</Keyword>
	<Description>
		Set the leader of given team. Effect is local, unless both leader unit and team are local to PC on which command is executed, then effect is global.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setLeader
	</WikiPage>
	<Syntax>
		Team_Member setLeader Team_Member
	</Syntax>
	<RawSyntax>
		team setLeader leader
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		isKeyActive
	</Keyword>
	<Description>
		Checks whether the given key is active in the current user profile.
	See keys, keysLimit and doneKeys in the description.ext file of the missions.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isKeyActive
	</WikiPage>
	<Syntax>
		isKeyActive String
	</Syntax>
	<RawSyntax>
		isKeyActive keyName
	</RawSyntax>
	<Example>
		$Code$_ok = isKeyActive "Mission04Key"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		tvCollapse
	</Keyword>
	<Description>
		Collapses tree item pointed to by the path. IDC means id of parent Tree View.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/tvCollapse
	</WikiPage>
	<Syntax>
		tvCollapse Array
	</NextSyntax>
		Control tvCollapse Array
	</Syntax>
	<RawSyntax>
		tvCollapse [idc, path]
	</NextRawSyntax>
		control tvCollapse path
	</RawSyntax>
	<Example>
		$Code$tvCollapse [101, [0]];$/Code$
	</NextExample>
		$Code$_ctrl tvCollapse [0];$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
		(Sep 11 2014)
	(A3 1.28)tv command family overview
	$Code$
	//tv command family available for CT_TREE (type 12)
	private ["_count","_current","_data","_text","_value","_pic"];
	_CT_TREE tvAdd [ [],"Parent_A"];
	_CT_TREE tvAdd [ [0],"Child_A"];
	_CT_TREE tvAdd [ [0,0],"Grandchild_A"];
	_CT_TREE tvAdd [ [],"Parent_B"];
	_CT_TREE tvAdd [ [1],"Child_B"];
	_count = _CT_TREE tvCount []; //return 2
	_CT_TREE tvSetCurSel [0,0,0]; //select grandchild_A
	_current = tvCurSel _CT_TREE; //return [0,0,0]
	_CT_TREE tvSetData [_current,"I'm grandchild_A"];
	_data = _CT_TREE tvData _current; // "I'm grandchild_A"
	_text = _CT_TREE tvText _current; //"Grandchild_A"
	_CT_TREE tvSetValue [_current,14];
	_value = _CT_TREE tvValue _current; // 14
	_CT_TREE tvSetPicture [_current, getText ( configFile "CfgWeapons" "optic_NVS" "picture")];
	_pic = _CT_TREE tvPicture _current;
	_CT_TREE tvExpand [1];
	_CT_TREE tvSort [[], false ];
	_CT_TREE tvSortByValue [[], false ];
	_CT_TREE tvDelete [0,0]; //remove child_b
	tvClear 12;
	_CT_TREE tvCollapse [];
	$/Code$
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setMarkerBrush
	</Keyword>
	<Description>
		Selects the fill texture for the marker ("RECTANGLE" or "ELLIPSE"). Brush is the name of the subclass in CfgMarkerBrushes.
	brush can be:
	"Solid"
	"SolidFull" (A3 only)
	"Horizontal"
	"Vertical"
	"Grid"
	"FDiagonal"
	"BDiagonal"
	"DiagGrid"
	"Cross"
	"Border"
	"SolidBorder"
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setMarkerBrush
	</WikiPage>
	<Syntax>
		String setMarkerBrush String
	</Syntax>
	<RawSyntax>
		markerName setMarkerBrush brush
	</RawSyntax>
	<Example>
		$Code$"Marker1" setMarkerBrush "DIAGGRID";$/Code$
	</Example>
	<Locality>
		undefined / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		AGLToASL
	</Keyword>
	<Description>
		Converts position from PositionAGL to PositionASL
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/AGLToASL
	</WikiPage>
	<Syntax>
		AGLToASL PositionAGL
	</Syntax>
	<RawSyntax>
		AGLToASL posAGL
	</RawSyntax>
	<Example>
		$Code$_playerPosASL = AGLToASL ( player modelToWorld [0,0,0]);$/Code$
	</NextExample>
		$Code$_camPosASL = AGLToASL positionCameraToWorld [0,0,0];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		PositionASL
	</ReturnValue>

</NextListItem>

	<Keyword>
		triggerActivated
	</Keyword>
	<Description>
		Returns true if the trigger has been activated.
	Note: The trigger could be local or remote but the result returned by this command will be for the trigger condition set up locally on the client that executed the command. See createTrigger for more info.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/triggerActivated
	</WikiPage>
	<Syntax>
		triggerActivated Object
	</Syntax>
	<RawSyntax>
		triggerActivated trigger
	</RawSyntax>
	<Example>
		$Code$if ( triggerActivated trg1) then {
	// Code
	};$/Code$
	</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
		If trigger already activated at least once, triggerActivated will only return false if trigger is set to activate Repeatedly.
	In other words, a trigger set to activate Once will always return true once activated at least once (even if trigger is no longer activated).
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		getHideFrom
	</Keyword>
	<Description>
		Returns the Position where object believes the enemy to be. If there is no direct line of sight between the object and the enemy, this position is extrapolated based on the last known position and speed of the enemy. A returned position of [0,0,0] implies that object does not knowAbout enemy. If enemy is null it is some position in front of the object or enemy position.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getHideFrom
	</WikiPage>
	<Syntax>
		Object getHideFrom Object
	</Syntax>
	<RawSyntax>
		object getHideFrom enemy
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(April 25, 2015)
	This command is definatlely not broken, at least not in A3 1.42. It functions exactly as the description says it does. The reason why the Z value is elevated is because it represents the units torso. When the unit is prone and spotted, the Z value is much less. Here you can see a perfectly working example of this command Talk:getHideFrom#Operation Script Sample
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		setParticleClass
	</Keyword>
	<Description>
		Set parameters from existing config class. ClassName is name of the class from CfgCloudlets.
	Since version 1.11.114706 you can use setParticleParams to overwrite many values set by config class, particularity those defined in ParticleArray.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setParticleClass
	</WikiPage>
	<Syntax>
		Object setParticleClass String
	</Syntax>
	<RawSyntax>
		source setParticleClass className
	</RawSyntax>
	<Example>
		$Code$_source01 = "#particlesource" createVehicleLocal _pos01;
	_source01 setParticleClass "ObjectDestructionFire1Smallx";
	_source01 attachTo [_object,[0,0,0]];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(June 28, 2015)
	This can be very useful for getting features that can't normally be added with commands, such as AI view blocking and particles that can only be above/underwater.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		waypointAttachVehicle
	</Keyword>
	<Description>
		Attaches a Unit to the given Waypoint.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/waypointAttachVehicle
	</WikiPage>
	<Syntax>
		Array waypointAttachVehicle Object
	</Syntax>
	<RawSyntax>
		waypoint waypointAttachVehicle vehicleName
	</RawSyntax>
	<Example>
		$Code$[_grp, 2] waypointAttachVehicle vehicle player$/Code$
	</NextExample>
		$Code$[_grp, 2] waypointAttachVehicle _soldier1$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(June 19, 2010)
	You can attach waypoint only to vehicle inserted from classic editor. Trying to attach it to dynamically spawned ( createUnit, createVehicle ) won't work. Engine will then try to find suitable target by itself, affecting game performance.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		synchronizedWaypoints
	</Keyword>
	<Description>
		Returns the list of waypoints synchronized with a given trigger or waypoint.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/synchronizedWaypoints
	</WikiPage>
	<Syntax>
		synchronizedWaypoints Object/Waypoint
	</Syntax>
	<RawSyntax>
		synchronizedWaypoints obj
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		curatorCamera
	</Keyword>
	<Description>
		Returns curator camera object.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/curatorCamera
	</WikiPage>
	<Syntax>
		curatorCamera
	</Syntax>
	<RawSyntax>
		curatorCamera
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Object
	</ReturnValue>

</NextListItem>

	<Keyword>
		setRainbow
	</Keyword>
	<Description>
		Changes the rainbow value smoothly during the given time (in seconds). A time of zero means there will be an immediate change.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setRainbow
	</WikiPage>
	<Syntax>
		Number setRainbow Number
	</Syntax>
	<RawSyntax>
		time setRainbow value
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(April 24, 2015)
	It should be known that this command does not create a rainbow in all conditions. As in real life, the rainbow can only appear after rainfall and opposite of the sun when it is low on the horizon.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		squadParams
	</Keyword>
	<Description>
		Returns data about squad of given unit loaded from squad.xml.
	All items in returned array are String.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/squadParams
	</WikiPage>
	<Syntax>
		squadParams Object
	</Syntax>
	<RawSyntax>
		squadParams unit
	</RawSyntax>
	<Example>
		$Code$_info = squadParams player ;$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(July 19, 2015)
	Returns an empty array in singleplayer.
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		engineOn
	</Keyword>
	<Description>
		Activates and deactivates the engine of a vehicle. This command has to be executed where vehicle is local.
	NOTE: Executed on a remote vehicle this command may turn the engine on but then it will get turned off by itself after a short while.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/engineOn
	</WikiPage>
	<Syntax>
		Object engineOn Boolean
	</Syntax>
	<RawSyntax>
		vehicle engineOn state
	</RawSyntax>
	<Example>
		$Code$if (! isEngineOn _jeep) then { _jeep engineOn true ; };$/Code$
	</NextExample>
		$Code$waitUntil { player == driver _jeep; };
	vehicle player engineOn true ;$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		(August 25, 2014)
	To switch engine off can also use setFuel and fuel :
	$Code$ private "_gas";
	_gas = fuel heli;
	heli setFuel 0;
	sleep 0.01;
	heli setFuel _gas;$/Code$
	Also sets helicopter fuel back to original quantity. Works on every other vehicle.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		lbSetPictureColorSelected
	</Keyword>
	<Description>
		Sets the selected color of item's picture (left) with the given index of the listbox with id idc of the topmost user dialog to the given color. Color is in format Color. Color which consists from only zeros means disable this override.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lbSetPictureColorSelected
	</WikiPage>
	<Syntax>
		lbSetPictureColorSelected Array
	</NextSyntax>
		Control lbSetPictureColorSelected Array
	</Syntax>
	<RawSyntax>
		lbSetPictureColorSelected [idc, index, color]
	</NextRawSyntax>
		control lbSetPictureColorSelected [index, color]
	</RawSyntax>
	<Example>
		$Code$lbSetPictureColorSelected [101, 0, [0, 1, 0, 0.5]];$/Code$
	</NextExample>
		$Code$_ctrl lbSetPictureColorSelected [0, [1, 1, 1, 1]];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		More information on the LB command family can be found here
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		actionKeysNamesArray
	</Keyword>
	<Description>
		Returns a list of button names assigned to the given user action. You can find the action names in config class ControllerSchemes or user action names.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/actionKeysNamesArray
	</WikiPage>
	<Syntax>
		actionKeysNamesArray String
	</NextSyntax>
		actionKeysNamesArray Array
	</Syntax>
	<RawSyntax>
		actionKeysNamesArray userAction
	</NextRawSyntax>
		actionKeysNamesArray [userAction, maxKeys]
	</NextRawSyntax>
		actionKeysNamesArray [userAction, maxKeys, inputDevicePriority]
	</RawSyntax>
	<Example>
		$Code$list = actionKeysNamesArray "ReloadMagazine";$/Code$
	</NextExample>
		$Code$list = actionKeysNamesArray ["ReloadMagazine", 1];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(October 26, 2014)
	inputDevicePriority 'Controler' is not a spelling mistake in description.
	</Note>
	<ReturnValue>
		Array - Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		allowCrewInImmobile
	</Keyword>
	<Description>
		If true, units can be in a vehicle with broken tracks/wheels.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/allowCrewInImmobile
	</WikiPage>
	<Syntax>
		Object allowCrewInImmobile Boolean
	</Syntax>
	<RawSyntax>
		vehicle allowCrewInImmobile bool
	</RawSyntax>
	<Example>
		$Code$_vehicle allowCrewInImmobile true ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(April 27, 2015)
	This will stop AI disembarking when immobile
	$Code$KK_fnc_allowCrewInImmobile = {
	_this allowCrewInImmobile true;
	{
	_x disableAI "FSM";
	_x setBehaviour "CARELESS";
	} forEach crew _this;
	};
	//example
	car call KK_fnc_allowCrewInImmobile;$/Code$
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		fullCrew
	</Keyword>
	<Description>
		Returns array with all crew inside given vehicle. Since Arma 3 v1.55.133810 it is possible to return empty seats as well.
	NOTE that with introduction of person turrets, the cargo indexes listed in the return are true for moveInCargo command but incompatible with actions such as "GetInCargo" and "MoveToCargo". To find out seats compatible with cargo action commands, execute command with "cargo" filter:
	$Code$ fullCrew [heli, "cargo", true ];$/Code$
	The return array is ordered according to cargo index compatible with action cargo commands, i.e. 1st element has index 0, second - index 1, etc. For example armed WY-55 Hellcat reports:
	[[ NULL-object,"cargo",2,[],false],[ NULL-object,"cargo",3,[],false],[ NULL-object,"cargo",4,[],false],[ NULL-object,"cargo",5,[],false]]
	for cargo positions. The following commands will put player in the same seat:
	$Code$ player moveInCargo [heli, 2];
	player action ["GetInCargo", heli, 0];$/Code$
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/fullCrew
	</WikiPage>
	<Syntax>
		fullCrew Object
	</NextSyntax>
		fullCrew Array
	</Syntax>
	<RawSyntax>
		fullCrew vehicle
	</NextRawSyntax>
		fullCrew [vehicle, type, includeEmpty]
	</RawSyntax>
	<Example>
		$Code$_list = fullCrew vehicle player ;$/Code$
	</NextExample>
		$Code$_list = fullCrew [ vehicle player, "turret"];$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(December 13, 2014)
	Be aware that the returned role may or may not be in lowercase. E.g. it's "driver" for the driver, but "Turret" for turret units.
	As of Arma 3 version 1.36, the alternative syntax of this command returns all crew members if the filter is anything except "driver", "commander", "gunner", "turret" or "cargo"
	The filter is not case sensitive.
	</Note>
	<ReturnValue>
		Array - Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		priority
	</Keyword>
	<Description>
		Return the priority of the task.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/priority
	</WikiPage>
	<Syntax>
		priority Task
	</Syntax>
	<RawSyntax>
		priority task
	</RawSyntax>
	<Example>
		$Code$_prioTsk01 = priority task01$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		camPrepareFovRange
	</Keyword>
	<Description>
		Prepares the camera field of view range for auto zooming.
	This command is non-functional !
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/camPrepareFovRange
	</WikiPage>
	<Syntax>
		Object camPrepareFovRange Array
	</Syntax>
	<RawSyntax>
		camera camPrepareFovRange fovRange
	</RawSyntax>
	<Example>
		$Code$_camera camPrepareFovRange [0.1, 0.5]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		onCommandModeChanged
	</Keyword>
	<Description>
		Defines code performed when hc command mode changes either because of (Left Ctrl + Space) shortcut or hcShowBar scripting command. Groups hc mode must contain at least one group for this command to work (see High Command ). Attached code receives _isHighCommand boolean.
	i
	Since Arma 3 v1.57 a stackable version of this EH is available: CommandModeChanged
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/onCommandModeChanged
	</WikiPage>
	<Syntax>
		onCommandModeChanged Code/String
	</Syntax>
	<RawSyntax>
		onCommandModeChanged code
	</RawSyntax>
	<Example>
		$Code$//Examples in-use can be found in:
	//ca\modules\HC\data\scripts\HC_GUI.sqf
	//A3\modules_f\HC\data\scripts\HC_GUI.sqf$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		animateBay
	</Keyword>
	<Description>
		Force animation of bay to given state, -1 for reset to engine handling, can cause weapon inoperative, because weapon is released when bay state =1.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/animateBay
	</WikiPage>
	<Syntax>
		Object animateBay Array
	</Syntax>
	<RawSyntax>
		vehicle animateBay [pylon nameindex, anim phase]
	</RawSyntax>
	<Example>
		$Code$( vehicle player ) animateBay ["pylonLeft1", 0.5];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		flagTexture
	</Keyword>
	<Description>
		Returns texture of the local instance of the flag. A getter for setFlagTexture. It will not return flag textures applied using forceFlagTexture, use getForcedFlagTexture for that.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/flagTexture
	</WikiPage>
	<Syntax>
		flagTexture Object
	</Syntax>
	<RawSyntax>
		flagTexture flagCarrier
	</RawSyntax>
	<Example>
		$Code$_flagTexture = flagTexture _flag1;$/Code$
	</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		setVehicleAmmo
	</Keyword>
	<Description>
		Sets how much ammunition (compared to a full state defined by the vehicle type) the vehicle has. Note that the ammo will be added only to local turrets. To check locality of turret use turretLocal.
	The value ranges from 0 to 1.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setVehicleAmmo
	</WikiPage>
	<Syntax>
		Object setVehicleAmmo Number
	</Syntax>
	<RawSyntax>
		vehicleName setVehicleAmmo value
	</RawSyntax>
	<Example>
		$Code$player setVehicleAmmo 0;$/Code$
	</NextExample>
		$Code$_vehicle setVehicleAmmo 1;$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		This command does not add magazines to vehicle weapons that normally start with more than one magazine. It can however, remove these magazines.
	</NextNote>
		A2:OA v1.59 - Magazines of vehicle turrets are also refilled by this command.
	</NextNote>
		If you 'unit/vehicle setVehicleAmmo 0;' an unit/vehicle first, you cannot refill it with 'unit/vehicle setVehicleAmmo 1;'.
	You need to execute where the unit is local.
	You need to execute on the effectiveCommander of a vehicle.
	</NextNote>
		In ArmA 3, using this command seems correctly rearm the vehicle and its turrets in all situations (tested with beta 0.72).
	</NextNote>
		In ArmA 3, when using this on a player, this command can only reduce the number of magazine in relation to the current ammo quantity of the unit. For example if player has 8 magazines, player setVehicleAmmo 0.5; will leave unit with 4 mags. Executing player setVehicleAmmo 0.5; again will leave unit with 2 mags. player setVehicleAmmo 0.5; again - 1 mag. player setVehicleAmmo 0; will remove all mags. If player had 10 mags with 30 bullets in each, player setVehicleAmmo 0.01; will leave player with loaded mag with 3 bullets in it (300 x 0.01 = 3)
	</NextNote>
		(December 20, 2014)
	This command does not operate compared to a full state defined by the vehicle type, but rather relative to a vehicle's current magazine loadout. To get the former behaviour use setVehicleAmmoDef, which utilizes the vehicles default magazine loadout (i.e. its CfgVehicles magazines[] values).
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		disableConversation
	</Keyword>
	<Description>
		Disable the ability to talk to other people.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/disableConversation
	</WikiPage>
	<Syntax>
		Object disableConversation Boolean
	</Syntax>
	<RawSyntax>
		unitName disableConversation disable
	</RawSyntax>
	<Example>
		$Code$player disableConversation true$/Code$
	</NextExample>
		$Code$soldier1 disableConversation true$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(July 10, 2009)
	Note that this will also prevent you from using group radio.
	If you just want player unable to speak to others (or one particular soldier),
	use $Code$player setVariable ["BIS_noCoreConversations", true];$/Code$
	or, for the other soldier,
	$Code$unitName setVariable ["BIS_noCoreConversations", true];$/Code$
	</NextNote>
		(August 18, 2010)
	My previous note is incorrect now, you can use disableConversation and still use the group radio, at least in A2:OA !
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		enginesTorqueRTD
	</Keyword>
	<Description>
		Torque produced by engines in N·m (Newton*meter)
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/enginesTorqueRTD
	</WikiPage>
	<Syntax>
		enginesTorqueRTD Object
	</Syntax>
	<RawSyntax>
		enginesTorqueRTD RTD_helicopter
	</RawSyntax>
	<Example>
		$Code$_UH80_E1 = ( enginesTorqueRTD _UH80) select 0;//engine 1 Torque
	_UH80_E2 = ( enginesTorqueRTD _UH80) select 1;//engine 2 Torque$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		clientOwner
	</Keyword>
	<Description>
		Returns the client's owner id
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/clientOwner
	</WikiPage>
	<Syntax>
		clientOwner
	</Syntax>
	<RawSyntax>
		clientOwner
	</RawSyntax>
	<Example>
		$Code$_id = clientOwner ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(February 17, 2016)
	On hosted server there could be some inconsistency between clientOwner, owner and object creator id, especially in missions started from save. On the dedicated server this command however works reliably.
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		setFlagOwner
	</Keyword>
	<Description>
		Sets flag owner. When owner is set to objNull or any object other than a unit of class man or logic, flag is returned to the flagpole. A flag owned by a logic has no visual representation.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setFlagOwner
	</WikiPage>
	<Syntax>
		Object setFlagOwner Object
	</Syntax>
	<RawSyntax>
		flag setFlagOwner owner
	</RawSyntax>
	<Example>
		$Code$_flag1 setFlagOwner _soldier1;$/Code$
	</NextExample>
		$Code$// To return the flag back to the flag pole:
	//Method 1: (set owner null)
	flag _flagCarrier setFlagOwner objNull ;
	//Method 2: (set the flag mast as the owner)
	flag _flagCarrier setFlagOwner flag _flagCarrier;$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
		Since flags can not be owned by vehicles, use "flag setFlagOwner driver tank1" or "flag1 setFlagOwner tank1D" to assign the flag to the vehicle's driver. The second method will only work if tank1 is the name of a unit, not a variable refering to it. True for OFP&Arma
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		getGroupIcon
	</Keyword>
	<Description>
		Get group icon properties.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getGroupIcon
	</WikiPage>
	<Syntax>
		Group getGroupIcon Number
	</Syntax>
	<RawSyntax>
		group getGroupIcon ID
	</RawSyntax>
	<Example>
		$Code$_grpIconId = _group getVariable "BIS_MARTA_ICON_TYPE";
	_grpIcon = _group getGroupIcon _grpIconId;$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		playerSide
	</Keyword>
	<Description>
		Returns the player's side. This is valid even when the player controlled person is dead (a difference from side player ).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/playerSide
	</WikiPage>
	<Syntax>
		playerSide
	</Syntax>
	<RawSyntax>
		playerSide
	</RawSyntax>
	<Example>
		$Code$if ( side man1 == playerSide ) then {
	hint "man1 is on your side!";
	};$/Code$
	</NextExample>
		$Code$switch ( playerSide ) do {
	case west : {
	hint "You are BLUFOR";
	};
	case east : {
	hint "You are OPFOR";
	};
	};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(27 Jan, 2008)
	playerSide defaults to west for JIP players early on during initialization regardless of their side.
	So if you are a JIP player on another side (like east ), you will need to cater for this for any early initializations.
	</NextNote>
		(13 Oct, 2008)
	playerSide also shows your starting side, even if your side changes to enemy due to a bad rating. In that case, playerSide != side player.
	</Note>
	<ReturnValue>
		Side
	</ReturnValue>

</NextListItem>

	<Keyword>
		log
	</Keyword>
	<Description>
		Base-10 logarithm of x.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/log
	</WikiPage>
	<Syntax>
		log Number
	</Syntax>
	<RawSyntax>
		log x
	</RawSyntax>
	<Example>
		$Code$_log = log 10; // 1$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(23:14, 16 Jun 2014)
	(A3 1.20) To clarify:
	$Code$y = 10 ^ x // x = log y$/Code$
	People use logarithm at the purpose of simplifying multiplication via exponents plus years before.
	$Code$23456*45634 = 1.07039e+009
	log 23456 = 4.37025; log 45634 = 4.65929; ( log 23456) + ( log 45634) = 9.02954
	10^(( log 23456) + ( log 45634)) = 10 ^ 9.02954 // same as 23456*45634
	$/Code$
	As modern usage, for instance, to evaluate another exponent when multiple is known (Which magnitude is 4 times stronger than 8.3 earthquake?):
	$Code$//_Unknown = log x; 8.3 = log y
	// x = 10 ^_Unknown; y = 10 ^8.3
	//x/y = (10 ^_Unknown)/(10 ^8.3) = log 4
	// x/y = _Unknown – 8.3 = 0.6
	//_result = 8.9 magnitude
	_result = ( log 4) + 8.3
	$/Code$
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		isMultiplayerSolo
	</Keyword>
	<Description>
		Returns true when playing a game in solo multiplayer (for example Apex coop campaign PLAY SOLO option).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isMultiplayerSolo
	</WikiPage>
	<Syntax>
		isMultiplayerSolo
	</Syntax>
	<RawSyntax>
		isMultiplayerSolo
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		set3DENMissionAttribute
	</Keyword>
	<Description>
		Set scenario attribute.
	An attribute is identified by its property ( data when it's engine-drive attribute) value in config. For the list of all attributes with their properties, see Setting Attributes.
	!
	Attributes are available only within the Eden Editor workspace. You cannot access them in scenario preview or exported scenario!
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/set3DENMissionAttribute
	</WikiPage>
	<Syntax>
		String set3DENMissionAttribute Array
	</Syntax>
	<RawSyntax>
		section set3DENMissionAttribute [ class, value ]
	</RawSyntax>
	<Example>
		$Code$"Multiplayer" set3DENMissionAttribute ["respawn",3];
	// Set respawn type to 3$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		unlockAchievement
	</Keyword>
	<Description>
		Unlock the given achievement.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/unlockAchievement
	</WikiPage>
	<Syntax>
		unlockAchievement String
	</Syntax>
	<RawSyntax>
		unlockAchievement name
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(February 10, 2016)
	This is an obsolete command used in the experimental Arma 2 Xbox 360 version.
	https://forums.bistudio.com/topic/187873-unlockachievment-command/
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		formation
	</Keyword>
	<Description>
		Returns the current formation of a group.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/formation
	</WikiPage>
	<Syntax>
		formation Object/Group
	</Syntax>
	<RawSyntax>
		formation grp
	</RawSyntax>
	<Example>
		$Code$formation group player$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(January 9, 2007)
	Additional ARMA Formations: "File" - Column Compact. "DIAMOND" - Delta.
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		handgunMagazine
	</Keyword>
	<Description>
		Returns either single element array, containing class name of currently loaded in the handgun magazine, or an empty array if unit has no handgun or handgun is not loaded. This command is used for infantry weapons only.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/handgunMagazine
	</WikiPage>
	<Syntax>
		handgunMagazine Object
	</Syntax>
	<RawSyntax>
		handgunMagazine unit
	</RawSyntax>
	<Example>
		$Code$hint handgunMagazine player ; //["16Rnd_9x21_Mag"]$/Code$
	</NextExample>
		$Code$_array = handgunMagazine player ;
	if ( count _array 0) then {
	hint ("Handgun is loaded with " + (_array select 0) + "!");
	} else {
	if ( handgunWeapon player != "") then {
	hint "Handgun is not loaded!";
	} else {
	hint "Player doesn't have a handgun!";
	};
	};$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		findNearestEnemy
	</Keyword>
	<Description>
		Finds the nearest enemy to the specified position. Returns a null object if the object's group does not know about any enemies. This command will return nearest object that is known to the unit and is considered enemy. An empty vehicle that is part of enemy group assets (see addVehicle ) can be returned as valid nearest target.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/findNearestEnemy
	</WikiPage>
	<Syntax>
		Object findNearestEnemy Object/Array
	</Syntax>
	<RawSyntax>
		object findNearestEnemy position
	</RawSyntax>
	<Example>
		$Code$_myNearestEnemy = ( units _myGroup select 0) findNearestEnemy player ;$/Code$
	</NextExample>
		$Code$_myNearestEnemy = player findNearestEnemy player ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Object
	</ReturnValue>

</NextListItem>

	<Keyword>
		showPad
	</Keyword>
	<Description>
		Shows or hides the notebook on the map screen, if enabled for the mission. (default true ). It is no longer relevant to Arma 2.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/showPad
	</WikiPage>
	<Syntax>
		showPad Boolean
	</Syntax>
	<RawSyntax>
		showPad show
	</RawSyntax>
	<Example>
		$Code$showPad false$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		onEachFrame
	</Keyword>
	<Description>
		Runs given statement every frame.
	i
	Since Arma 3 v1.57 a stackable version of this EH is available: EachFrame
	In order to keep compatibility between official and community content the functions BIS_fnc_addStackedEventHandler and BIS_fnc_removeStackedEventHandler should be used instead.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/onEachFrame
	</WikiPage>
	<Syntax>
		onEachFrame String/Code
	</Syntax>
	<RawSyntax>
		onEachFrame statement
	</RawSyntax>
	<Example>
		$Code$onEachFrame { hintSilent str position player }; //Hints position every frame$/Code$
	</NextExample>
		$Code$// Private variables defined outside of onEachFrame scope are not inherited:
	_myvar = "bob";
	myvar = "bill";
	onEachFrame { hintSilent str [_myvar, myvar]};
	//Result: [any,"bill"]$/Code$
	</NextExample>
		$Code$// Only one onEachFrame loop can exist at any time:
	onEachFrame { player sideChat "first"};
	onEachFrame { player sideChat "second"};
	//Result: "second","second","second"..."second"
	// Note how "first" never gets shown even though it precedes "second". This is because script thread is executing within the same frame and first onEachFrame is overwritten before it has a chance to execute its statement.$/Code$
	</NextExample>
		$Code$// Script suspension is not permitted within onEachFrame scope:
	onEachFrame { sleep 1};
	//ERROR!!!$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(21 Dec, 2012)
	$Code$ onEachFrame {}; //Reset event$/Code$
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		freeLook
	</Keyword>
	<Description>
		Returns true if freelook is active.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/freeLook
	</WikiPage>
	<Syntax>
		freeLook
	</Syntax>
	<RawSyntax>
		freeLook
	</RawSyntax>
	<Example>
		$Code$systemChat (if freeLook then {"Quit looking around player!"} else {""});$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		moveToCompleted
	</Keyword>
	<Description>
		Check if latest low level moveTo command is finished.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/moveToCompleted
	</WikiPage>
	<Syntax>
		moveToCompleted Object
	</Syntax>
	<RawSyntax>
		moveToCompleted person
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		setMarkerDir
	</Keyword>
	<Description>
		Sets the orientation of the marker. Angle is in degrees.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setMarkerDir
	</WikiPage>
	<Syntax>
		String setMarkerDir Number
	</Syntax>
	<RawSyntax>
		markerName setMarkerDir angle
	</RawSyntax>
	<Example>
		$Code$"Marker1" setMarkerDir 90;$/Code$
	</Example>
	<Locality>
		undefined / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		nearRoads
	</Keyword>
	<Description>
		Find the road segments within the circle of given radius.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/nearRoads
	</WikiPage>
	<Syntax>
		Object/Array nearRoads Number
	</Syntax>
	<RawSyntax>
		pos nearRoads radius
	</RawSyntax>
	<Example>
		$Code$_list = player nearRoads 50;$/Code$
	</NextExample>
		$Code$_list = ( position _unit) nearRoads 50;$/Code$
	</NextExample>
		$Code$_list = [1800,5700] nearRoads 50;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(26 Mar, 2011)
	NearRoads always gets data in the same order. In a 300 meter radius around Feruz Abad, for example, the first one is in the south-west corner and the last one is in the north-east.
	Click below for picture.
	[1]
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		isArray
	</Keyword>
	<Description>
		Check if config entry represents array.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isArray
	</WikiPage>
	<Syntax>
		isArray Config
	</Syntax>
	<RawSyntax>
		isArray config
	</RawSyntax>
	<Example>
		$Code$_ok = isArray (configFile "CfgVehicles")
	// Result is false$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		forceAddUniform
	</Keyword>
	<Description>
		Create a new uniform and hard link it into slot (without any restrictions).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/forceAddUniform
	</WikiPage>
	<Syntax>
		Object forceAddUniform String
	</Syntax>
	<RawSyntax>
		unit forceAddUniform type
	</RawSyntax>
	<Example>
		$Code$_unit forceAddUniform "U_B_CombatUniform_mcam";$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		createMPCampaignDisplay
	</Keyword>
	<Description>
		Create a MP campaign display. The class name must be a mission collection declared in the configs; in example, configFile /"CfgMissions"/"MPMissions"/"Apex"/
	If the class doesn't exist or isn't a mission collection, the display will be created empty.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/createMPCampaignDisplay
	</WikiPage>
	<Syntax>
		Display createMPCampaignDisplay String
	</Syntax>
	<RawSyntax>
		display createMPCampaignDisplay class
	</RawSyntax>
	<Example>
		$Code$findDisplay 46 createMPCampaignDisplay "Apex";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(July 14, 2016)
	$Code$ findDisplay 46 createMPCampaignDisplay "123";$/Code$
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		commitOverlay
	</Keyword>
	<Description>
		Commit the current overlay.
	i
	Some Old Editor Command
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/commitOverlay
	</WikiPage>
	<Syntax>
		commitOverlay Control
	</Syntax>
	<RawSyntax>
		commitOverlay map
	</RawSyntax>
	<Example>
		$Code$commitOverlay _map,$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		clearMagazineCargoGlobal
	</Keyword>
	<Description>
		Removes all magazines from the vehicle cargo space. MP synchronized.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/clearMagazineCargoGlobal
	</WikiPage>
	<Syntax>
		clearMagazineCargoGlobal Object
	</Syntax>
	<RawSyntax>
		clearMagazineCargoGlobal unit
	</RawSyntax>
	<Example>
		$Code$clearMagazineCargoGlobal jeepOne;$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		enableCamShake
	</Keyword>
	<Description>
		Allows camera shake effects via addCamShake. If set to false, then a currently active shake effect will stop immediately.
	By default, shake effects are enabled, but once they have been disabled by this command, they will have to be enabled first, in order to be visible.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/enableCamShake
	</WikiPage>
	<Syntax>
		enableCamShake Boolean
	</Syntax>
	<RawSyntax>
		enableCamShake value
	</RawSyntax>
	<Example>
		$Code$enableCamShake false ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		vehicleCargoEnabled
	</Keyword>
	<Description>
		Check if the vehicle has enabled transporting other vehicles or not.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/vehicleCargoEnabled
	</WikiPage>
	<Syntax>
		vehicleCargoEnabled Object
	</Syntax>
	<RawSyntax>
		vehicleCargoEnabled vehicle
	</RawSyntax>
	<Example>
		$Code$// Blackfish (Vehicle Transport) with given variable name blackfish
	_canTransportVehicles = vehicleCargoEnabled blackfish; //returns true$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		kbReact
	</Keyword>
	<Description>
		Pass a non-verbal communication to the receiver. See Conversations for more details.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/kbReact
	</WikiPage>
	<Syntax>
		Object kbReact Array
	</Syntax>
	<RawSyntax>
		person kbReact [receiver, topic, sentenceID, [argumentName, argumentValue, argumentText, argumentSpeech], ]
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		safeZoneXAbs
	</Keyword>
	<Description>
		Returns SafeZone left border (of all monitors, in case there's more than one)
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/safeZoneXAbs
	</WikiPage>
	<Syntax>
		safeZoneXAbs
	</Syntax>
	<RawSyntax>
		safeZoneXAbs
	</RawSyntax>
	<Example>
		$Code$_szX = safeZoneXAbs;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		setDefaultCamera
	</Keyword>
	<Description>
		Sets the position and direction for the camera used after camera is set on no object (log out view when leaving MP game for example)
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setDefaultCamera
	</WikiPage>
	<Syntax>
		setDefaultCamera Array
	</Syntax>
	<RawSyntax>
		setDefaultCamera [position, direction]
	</RawSyntax>
	<Example>
		$Code$setDefaultCamera [[5000,5000,200],[1,1,-1]];$/Code$
	</NextExample>
		$Code$// Lift camera 100m up above current player position and point downwards:
	setDefaultCamera [ ATLtoASL ( player modelToWorld [0,0,100]),[0,0,-1]];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		toUpper
	</Keyword>
	<Description>
		Converts the supplied string to all uppercase characters.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/toUpper
	</WikiPage>
	<Syntax>
		toUpper String
	</Syntax>
	<RawSyntax>
		toUpper string
	</RawSyntax>
	<Example>
		$Code$hint toUpper("AaBb1")
	// returns "AABB1"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		removeItemFromUniform
	</Keyword>
	<Description>
		Removes item from soldier's uniform. Can be used with magazines and weapons too.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/removeItemFromUniform
	</WikiPage>
	<Syntax>
		Object removeItemFromUniform String
	</Syntax>
	<RawSyntax>
		unit removeItemFromUniform item
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		displaySetEventHandler
	</Keyword>
	<Description>
		Sets given event handler of given display.
	The return code of the provided function should indicate whether this event was handled correctly. This implies telling the engine whether it's default code should be executed.
	See User Interface Event Handlers for the full list of handler names.
	If applicable, see DIK_KeyCodes for a list of key code constants, which are relevant to key related user interface events like: KeyDown & KeyUp.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/displaySetEventHandler
	</WikiPage>
	<Syntax>
		Display displaySetEventHandler Array
	</Syntax>
	<RawSyntax>
		display displaySetEventHandler [handlerName, function]
	</RawSyntax>
	<Example>
		$Code$_control displaySetEventHandler ["KeyDown", ""]$/Code$
	</NextExample>
		$Code$init.sqf
	keyspressed = compile preprocessFile "keyspressed.sqf";
	_display = findDisplay 46;
	_display displaySetEventHandler ["KeyDown","_this call keyspressed"];
	keyspressed.sqf
	private['_handled'];
	_handled = false;
	switch (_this select 1) do
	{
	//F key
	case 33:
	{
	// code here
	_handled = true;
	};
	};
	_handled;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(Nov 25, 2009)
	Always use displayAddEventHandler instead, as DSetEH overwrites other (peoples') DEH.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setDrawIcon
	</Keyword>
	<Description>
		Set the icon to be shown in 2D editor for the specified editor object. If maintain size is false,icon will not scale depending on the scale,of the map. If maintain size is a number,the icon will maintain size,if map scale is below that number. is3D,show line and priority are,optional.
	i
	Some Old Editor Command
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setDrawIcon
	</WikiPage>
	<Syntax>
		Control setDrawIcon Array
	</Syntax>
	<RawSyntax>
		map setDrawIcon [object,texture,color,offset,width,height,maintain size,angle,string identifier,shadow,is3D,draw line,priority]
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setAperture
	</Keyword>
	<Description>
		Sets custom camera aperture (-1 to do it automatically).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setAperture
	</WikiPage>
	<Syntax>
		setAperture Number
	</Syntax>
	<RawSyntax>
		setAperture aperture
	</RawSyntax>
	<Example>
		$Code$setAperture 0.3;$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
		The aperture value to simulate typical daylight (outdoor) conditions is 50. The aperture value to simulate typical daylight (indoor) conditions is 30. Setting the value to less than 20 will result in a very bright scene, suitable for night conditions. The closer the number is to 0, the more light will be let into the lens, to carry on the aperture metaphor. Different lighting/weather conditions can change the actual indoor and outdoor aperture values. Experiment and test to be sure.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		menuSetPicture
	</Keyword>
	<Description>
		Sets new picture into menu entry on given path.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/menuSetPicture
	</WikiPage>
	<Syntax>
		menuSetPicture Array
	</NextSyntax>
		Control menuSetPicture Array
	</Syntax>
	<RawSyntax>
		menuSetPicture [idc, path, picture]
	</NextRawSyntax>
		control menuSetPicture [path, picture]
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		reverse
	</Keyword>
	<Description>
		Reverses given array by reference (modifies the original array, just like resize ).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/reverse
	</WikiPage>
	<Syntax>
		reverse Array
	</Syntax>
	<RawSyntax>
		reverse array
	</RawSyntax>
	<Example>
		$Code$_arr = [1,2,3];
	reverse _arr;
	hint str _arr; //[3,2,1]$/Code$
	</NextExample>
		$Code$_wordArr = toArray "gateman";
	reverse _wordArr;
	hint toString _wordArr; //nametag$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		backpackSpaceFor
	</Keyword>
	<Description>
		Returns how much space is in backpack for given weapon or magazine
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/backpackSpaceFor
	</WikiPage>
	<Syntax>
		Object backpackSpaceFor String
	</Syntax>
	<RawSyntax>
		backpack backpackSpaceFor weaponName
	</RawSyntax>
	<Example>
		$Code$( backpack player ) backpackSpaceFor "m16"; // [weapons, magazines]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		switchGesture
	</Keyword>
	<Description>
		When used on a person,the given move is started immediately (there is no transition).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/switchGesture
	</WikiPage>
	<Syntax>
		Object switchGesture String
	</Syntax>
	<RawSyntax>
		soldier switchGesture moveName
	</RawSyntax>
	<Example>
		$Code$soldierOne switchGesture "Wave";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(August 31, 2010)
	Rpt says "Not implemented" as of OA 1.54.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlSetFont
	</Keyword>
	<Description>
		Sets the font for given control (see Fonts )
	Available Arma 3 fonts
	"EtelkaMonospacePro"
	"EtelkaMonospaceProBold"
	"EtelkaNarrowMediumPro"
	"LCD14"
	"LucidaConsoleB"
	"PuristaBold"
	"PuristaLight"
	"PuristaMedium"
	"PuristaSemibold"
	"RobotoCondensed"
	"RobotoCondensedBold"
	"RobotoCondensedLight"
	"TahomaB"
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlSetFont
	</WikiPage>
	<Syntax>
		Control ctrlSetFont String
	</Syntax>
	<RawSyntax>
		control ctrlSetFont fontName
	</RawSyntax>
	<Example>
		$Code$_control ctrlSetFont "TahomaB"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		isLocalized
	</Keyword>
	<Description>
		Checks whether given string name is localized.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isLocalized
	</WikiPage>
	<Syntax>
		isLocalized String
	</Syntax>
	<RawSyntax>
		isLocalized stringName
	</RawSyntax>
	<Example>
		$Code$if ( isLocalized "STR_DN_SNAKE") then {
	hint localize "STR_DN_SNAKE";
	} else {
	hint "STR_DN_SNAKE";
	diag_log "ToDo: STR_DN_SNAKE is not localized";
	};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		canMove
	</Keyword>
	<Description>
		Returns if the given vehicle is still able to move. This command checks only the damage value, not the amount of fuel!
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/canMove
	</WikiPage>
	<Syntax>
		canMove Object
	</Syntax>
	<RawSyntax>
		canMove unitName
	</RawSyntax>
	<Example>
		$Code$// SQS :
	?!( canMove _tank) : player sideChat "He's nailed on the ground! Now hurry!"$/Code$
	</NextExample>
		$Code$if (! canMove _tank) then
	{
	player sideChat "He's nailed on the ground! Now hurry!";
	};$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(08:17, 22 Juil 2016 (UTC))
	This command will return true for a car or a tank out of fuel, but false for an helicopter or a plane for the same condition.
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		leaderboardsRequestUploadScore
	</Keyword>
	<Description>
		Starts async. operation to upload score to board with given name, value always overwrite the current value in the board. The details array is optional. The board has to be initialized before the call.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/leaderboardsRequestUploadScore
	</WikiPage>
	<Syntax>
		leaderboardsRequestUploadScore Array
	</Syntax>
	<RawSyntax>
		leaderboardsRequestUploadScore [boardName, score, [details]]
	</RawSyntax>
	<Example>
		$Code$leaderboardsRequestUploadScore ["TT01", 1234, [5,6,7,8]]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		menuEnable
	</Keyword>
	<Description>
		Enables disabled menu entry on given path.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/menuEnable
	</WikiPage>
	<Syntax>
		menuEnable Array
	</Syntax>
	<RawSyntax>
		menuEnable [idc, path]
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		displayRemoveAllEventHandlers
	</Keyword>
	<Description>
		Remove all event handlers from the given display.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/displayRemoveAllEventHandlers
	</WikiPage>
	<Syntax>
		Display displayRemoveAllEventHandlers String
	</Syntax>
	<RawSyntax>
		display displayRemoveAllEventHandlers handlerName
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		serverName
	</Keyword>
	<Description>
		Returns name of the hosting server in MP, "" in SP.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/serverName
	</WikiPage>
	<Syntax>
		serverName
	</Syntax>
	<RawSyntax>
		serverName
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		disableRemoteSensors
	</Keyword>
	<Description>
		This command will halt raycasting calculations (on the local machine only) for all groups which don't contain any local entities. If a group contains a single local entity then calculations will still be performed for the entire group.
	These raycasts are used to determine what other entities an entity can see, and they take a lot of CPU time. This is of course a bit of a trick, because rather than a true optimization, it disables part of the simulation. However, there are certainly types of scenarios where these raycasts are not needed. An example is a fully Player-versus-Player scenario, where the visibility between every combination of player entity is not needed. So why not disable this by default? There are cases where you do require these raycasts, for example in stealth scenarios. Without them, commands like knowsAbout, nearTargets and targetKnowledge will only function for local units! The commands themselves are local, can be used on servers and clients, and the state is reset when the scenario ends. So, carefully consider whether your scenario can benefit from this method.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/disableRemoteSensors
	</WikiPage>
	<Syntax>
		disableRemoteSensors Boolean
	</Syntax>
	<RawSyntax>
		disableRemoteSensors state
	</RawSyntax>
	<Example>
		$Code$disableRemoteSensors false;$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		displayParent
	</Keyword>
	<Description>
		Returns parent display of the given display.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/displayParent
	</WikiPage>
	<Syntax>
		displayParent Display
	</Syntax>
	<RawSyntax>
		displayParent display
	</RawSyntax>
	<Example>
		$Code$_display = displayParent findDisplay 49; // Display #46$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Display
	</ReturnValue>

</NextListItem>

	<Keyword>
		hcShownBar
	</Keyword>
	<Description>
		Return true if the high command bar is shown/active.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/hcShownBar
	</WikiPage>
	<Syntax>
		hcShownBar
	</Syntax>
	<RawSyntax>
		hcShownBar
	</RawSyntax>
	<Example>
		$Code$if ( hcShownBar ) then { hint "HC bar is active";};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		camPreparePos
	</Keyword>
	<Description>
		Prepares the camera position (format Position ).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/camPreparePos
	</WikiPage>
	<Syntax>
		Object camPreparePos Array
	</Syntax>
	<RawSyntax>
		camera camPreparePos position
	</RawSyntax>
	<Example>
		$Code$_camera camPreparePos getPos player$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		enableRadio
	</Keyword>
	<Description>
		Enable and disable radio messages to be heard and shown in the left lower corner of the screen. This command can be helpful during cutscenes.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/enableRadio
	</WikiPage>
	<Syntax>
		enableRadio Boolean
	</Syntax>
	<RawSyntax>
		enableRadio state
	</RawSyntax>
	<Example>
		$Code$enableRadio false$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
		(7 August, 2008)
	This command doesn't disable text-chat in multiplayer.
	</NextNote>
		(11 September, 2008)
	Does not affect VON.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		enableEndDialog
	</Keyword>
	<Description>
		Enables the execution of a custom camera sequence after the players death, coded in the script onPlayerKilled.sqs.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/enableEndDialog
	</WikiPage>
	<Syntax>
		enableEndDialog
	</Syntax>
	<RawSyntax>
		enableEndDialog
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		canVehicleCargo
	</Keyword>
	<Description>
		Returns bool array if it is possible to load cargo inside vehicle and if possible to load cargo into empty vehicle
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/canVehicleCargo
	</WikiPage>
	<Syntax>
		Object canVehicleCargo Object
	</Syntax>
	<RawSyntax>
		vehicle canVehicleCargo cargo
	</RawSyntax>
	<Example>
		$Code$// Blackfish with no vehicle cargo loaded
	_result = blackfish canVehicleCargo offroad; //[true, true]$/Code$
	</NextExample>
		$Code$// Blackfish with one vehicle cargo called offroad already loaded
	_result = blackfish canVehicleCargo offroad; //[false, false]
	
	// Even if the Blackfish was empty offroad can't be loaded because it's already in a cargo space$/Code$
	</NextExample>
		$Code$// Blackfish with one vehicle cargo called offroad already loaded
	_result = blackfish canVehicleCargo offroad2; //[false, true]
	
	// offroad2 can't be loaded because there isn't enough space in the Blackfish, but if there was space offroad2 could be loaded into the Blackfish$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		addWeaponCargoGlobal
	</Keyword>
	<Description>
		Add weapons to the cargo space of vehicles, which can be taken out by infantry units.
	MP Synchronized
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/addWeaponCargoGlobal
	</WikiPage>
	<Syntax>
		Object addWeaponCargoGlobal Array
	</Syntax>
	<RawSyntax>
		vehicleName addWeaponCargoGlobal [weaponName, count]
	</RawSyntax>
	<Example>
		$Code$_truck addWeaponCargoGlobal["M16",5];$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
		(November 7, 2011)
	Synchronized to JIP as well.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		closeDisplay
	</Keyword>
	<Description>
		Close given display with exit code. Most common exit codes are:
	$Code$#define IDC_OK 1 //emulate "Ok" button$/Code$
	$Code$#define IDC_CANCEL 2 //emulate "Cancel" button$/Code$
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/closeDisplay
	</WikiPage>
	<Syntax>
		Display closeDisplay Number
	</Syntax>
	<RawSyntax>
		display closeDisplay exitcode
	</RawSyntax>
	<Example>
		$Code$_display closeDisplay 1;$/Code$
	</NextExample>
		$Code$#define IDC_OK 1
	_display closeDisplay IDC_OK;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(November 18, 2015)
	closeDisplay does not instantly close the display but does it on next display simulation cycle (when display becomes active)
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		diag_recordTurretLimits
	</Keyword>
	<Description>
		Start recording tool for creating turret aiming limits.
	Command is only available when using Arma 3 Diagnostics Exe on Dev-Branch.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/diag_recordTurretLimits
	</WikiPage>
	<Syntax>
		diag_recordTurretLimits Boolean
	</Syntax>
	<RawSyntax>
		diag_recordTurretLimits section
	</RawSyntax>
	<Example>
		$Code$diag_recordTurretLimits true;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		markerPos
	</Keyword>
	<Description>
		Get marker Position. Note: This function is identical to getMarkerPos.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/markerPos
	</WikiPage>
	<Syntax>
		markerPos String
	</Syntax>
	<RawSyntax>
		markerPos markerName
	</RawSyntax>
	<Example>
		$Code$_mPos = markerPos "markerOne";$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(March 17, 2014)
	Position's Z coordinate will always be 0."
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		uniformContainer
	</Keyword>
	<Description>
		Returns a cargo container of a unit's uniform.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/uniformContainer
	</WikiPage>
	<Syntax>
		uniformContainer Object
	</Syntax>
	<RawSyntax>
		uniformContainer unit
	</RawSyntax>
	<Example>
		$Code$hint str uniformContainer player ; //2df7dd00# 163941: dummyweapon.p3d$/Code$
	</NextExample>
		$Code$hint str getMagazineCargo uniformContainer player ;
	// [
	//["30Rnd_65x39_caseless_mag"],
	//[3]
	//]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Object
	</ReturnValue>

</NextListItem>

	<Keyword>
		enableWeaponDisassembly
	</Keyword>
	<Description>
		Enables or disables disassembly of static weapons. Could be applied to local player, to another unit or to static weapon directly.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/enableWeaponDisassembly
	</WikiPage>
	<Syntax>
		enableWeaponDisassembly Boolean
	</NextSyntax>
		Object enableWeaponDisassembly Boolean
	</Syntax>
	<RawSyntax>
		enableWeaponDisassembly enable
	</NextRawSyntax>
		entity enableWeaponDisassembly enable
	</RawSyntax>
	<Example>
		$Code$enableWeaponDisassembly false ;$/Code$
	</NextExample>
		$Code$soldier1 enableWeaponDisassembly false ;$/Code$
	</NextExample>
		$Code$mortar1 enableWeaponDisassembly false ;$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		commander
	</Keyword>
	<Description>
		In OFP it returns the commander of a vehicle. Since ArmA and VBS2 it returns the primary observer. The commander of a vehicle can be found with effectiveCommander.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/commander
	</WikiPage>
	<Syntax>
		commander Object
	</Syntax>
	<RawSyntax>
		commander vehicleName
	</RawSyntax>
	<Example>
		$Code$moveOut commander _tank;$/Code$
	</NextExample>
		$Code$// Detect if player is in commander turret of a vehicle:
	_isVehicleCommander = player isEqualTo commander objectParent player ;$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(August 3, 2006)
	Notes from before the conversion:
	It is also possible to find the commander of a vehicle by placing a C after the name of the vehicle so Tank1C and commander Tank1 both refer to the same unit, providing the original commander has not got out of the tank.
	The difference between the two is Tank1C is always the unit that was commander of the tank when the mission started, whilst commander Tank1 is the commander which is now there.
	</NextNote>
		(August 3, 2006)
	WARNING about Hardrock note:
	Take very care about this : if you give a vehiculeVarName to one crew, so his referent will not be Tank1x anymore ! Also, if in the mission editor, you put something in the name field, when this soldier will getin a vehicle, it will not be a Tank1x too. So do not take consideration about Hardrock note, if you don't want to have bad surprise. It Is better to force names by using setVehicleVarName command.
	$Code$(( crew tank) select 0) setVehicleVarName "Tankcrew0"$/Code$
	</Note>
	<ReturnValue>
		Object
	</ReturnValue>

</NextListItem>

	<Keyword>
		taskAlwaysVisible
	</Keyword>
	<Description>
		Returns true if the task is flagged to be always visible or false if not.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/taskAlwaysVisible
	</WikiPage>
	<Syntax>
		taskAlwaysVisible Task
	</Syntax>
	<RawSyntax>
		taskAlwaysVisible task
	</RawSyntax>
	<Example>
		$Code$_isAlwaysVisible = taskAlwaysVisible ( currentTask player );$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		triggerTimeout
	</Keyword>
	<Description>
		Returns trigger timeout in the form [min, mid, max, interruptable].
	Note: The trigger could be local or remote but the result returned by this command will be for the trigger condition set up locally on the client that executed the command. See createTrigger for more info.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/triggerTimeout
	</WikiPage>
	<Syntax>
		triggerTimeout Object
	</Syntax>
	<RawSyntax>
		triggerTimeout trigger
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		getFSMVariable
	</Keyword>
	<Description>
		Return the value of variable in the variable space of given FSM. The FSM handle is the number returned by the execFSM command.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getFSMVariable
	</WikiPage>
	<Syntax>
		Number getFSMVariable String
	</NextSyntax>
		Number getFSMVariable Array
	</Syntax>
	<RawSyntax>
		FSMhandle getFSMVariable name
	</NextRawSyntax>
		FSMhandle getFSMVariable [name, defaultValue]
	</RawSyntax>
	<Example>
		$Code$_handle getFSMVariable "_foo";$/Code$
	</NextExample>
		$Code$_handle getFSMVariable ["_foo", 123];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Anything - Anything
	</ReturnValue>

</NextListItem>

	<Keyword>
		group
	</Keyword>
	<Description>
		Returns the group a unit is assigned to.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/group
	</WikiPage>
	<Syntax>
		group Object
	</Syntax>
	<RawSyntax>
		group object
	</RawSyntax>
	<Example>
		$Code$_playerGrp = group player$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(August 19, 2006)
	Few rules about group in OFP:R.
	1) When last man in group die or is moved to other group, group will be destroyed, and it can't be used anymore.
	2) 1st man joined to empty group will be group leader.
	</Note>
	<ReturnValue>
		Group
	</ReturnValue>

</NextListItem>

	<Keyword>
		deleteMarker
	</Keyword>
	<Description>
		Destroys the given marker.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/deleteMarker
	</WikiPage>
	<Syntax>
		deleteMarker String
	</Syntax>
	<RawSyntax>
		deleteMarker name
	</RawSyntax>
	<Example>
		$Code$deleteMarker "Marker1"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		addWeaponPool
	</Keyword>
	<Description>
		Add weapons to the weapon pool, of which the player may choose in the following mission. Available in campaigns only.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/addWeaponPool
	</WikiPage>
	<Syntax>
		addWeaponPool Array
	</Syntax>
	<RawSyntax>
		addWeaponPool [weaponName, count]
	</RawSyntax>
	<Example>
		$Code$addWeaponPool ["M16",5];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		getAllHitPointsDamage
	</Keyword>
	<Description>
		Returns 3 arrays for easy cross reference: 1st - array of hit point names, 2nd - array of hit selection names, 3rd - array of damage values. All values in all arrays are ordered accordingly to hit part index for convenience and for use in setHitIndex and getHitIndex. Levels of damage are:
	0: no damage
	1: full damage
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getAllHitPointsDamage
	</WikiPage>
	<Syntax>
		getAllHitPointsDamage Object
	</Syntax>
	<RawSyntax>
		getAllHitPointsDamage entity
	</RawSyntax>
	<Example>
		$Code$getAllHitPointsDamage player ;
	//[
	//["HitFace","HitNeck","HitHead","HitPelvis","HitAbdomen","HitDiaphragm","HitChest","HitBody","HitArms","HitHands","HitLegs"],
	//["","neck","head","pelvis","spine1","spine2","spine3","body","","hands","legs"],
	//[0,0.0939002,0.0319932,0.0858595,0.174491,1,1,0.168495,1,0.5,0.195907]
	//]$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		enableGunLights
	</Keyword>
	<Description>
		Force the AI to use gun lights
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/enableGunLights
	</WikiPage>
	<Syntax>
		Object/Group enableGunLights Boolean
	</Syntax>
	<RawSyntax>
		thing enableGunLights value
	</RawSyntax>
	<Example>
		$Code$_grp enableGunLights true$/Code$
	</NextExample>
		$Code$_unit enableGunLights true$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		(27 July, 2011)
	This command can be used to force lights on, but not to force lights off. ( Source )
	</NextNote>
		(17 April, 2013)
	In order for this command to work in ARMA 3 you should use groupname enableGunLights "AUTO" or soldierOne enableGunLights "AUTO". Other options are "forceOn" or "forceOff". ( Source )
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		initAmbientLife
	</Keyword>
	<Description>
		Initialize the ambient life.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/initAmbientLife
	</WikiPage>
	<Syntax>
		initAmbientLife
	</Syntax>
	<RawSyntax>
		initAmbientLife
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		format
	</Keyword>
	<Description>
		Composes a string containing other variables or other variable types. Converts any variable type to a string. If you want to convert a string back to a number, use parseNumber. NOTE that output of this command is limited to ~8Kb. joinString on the other hand doesn't have such limit.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/format
	</WikiPage>
	<Syntax>
		format Array
	</Syntax>
	<RawSyntax>
		format [formatString, var1, var2]
	</RawSyntax>
	<Example>
		$Code$format ["Player:%1, player's side:%2", player, side player ];
	// returns "Player:WEST 1-1-A:1 (Username), player's side:WEST"$/Code$
	</NextExample>
		$Code$player addEventHandler ["HandleDamage", {
	hint format ["You just sustained %1%2 damage!", ceil (( _this select 2) * 100), "%"];
	}];
	// hints "You just sustained 20% damage!"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		The maximum number of characters returned by the format command seems to depend on the total byte count. For plain ASCII strings the limit is 2048 characters.
	</NextNote>
		In Arma 3 the max length of String returned by format command seems to be 8191 characters. formatText doesn't seem to have this limitation.
	</NextNote>
		(March 28, 2015)
	In addition to the note above, formatTexted strings are Structured Text, hence cannot be used like formatted strings (with most scripting commands). A workaround to get strings of type String with more than 8191 characters is: $Code$ str formatText ["%1", _string]$/Code$
	</NextNote>
		(January 2, 2016)
	In addition to the note above, you may consider using joinString instead of format or formatText workaround. joinString is a fraction faster than format and it has no limit on the length of the string (apart from global String limit obviously)
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		editObject
	</Keyword>
	<Description>
		Show the edit object dialog for the given object.
	i
	Some Old Editor Command
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/editObject
	</WikiPage>
	<Syntax>
		Control editObject String
	</Syntax>
	<RawSyntax>
		map editObject object
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Any_Value
	</ReturnValue>

</NextListItem>

	<Keyword>
		addBackpack
	</Keyword>
	<Description>
		Adds a backpack for a unit. If a unit already has a backpack, the old backpack will be placed on the ground under the unit.
	Classname list of available backpacks :
	Arma 2 OA backpacks
	Arma 3 backpacks - objects starting with "B_", starts with " B_AssaultPack_khk "
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/addBackpack
	</WikiPage>
	<Syntax>
		Object addBackpack String
	</Syntax>
	<RawSyntax>
		unit addBackpack packClassName
	</RawSyntax>
	<Example>
		$Code$this addBackpack "TK_RPG_Backpack_EP1";$/Code$
	</NextExample>
		$Code$_mySoldierDude addBackpack "US_Patrol_Pack_EP1";$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		playMusic
	</Keyword>
	<Description>
		Plays music defined in Description.ext#CfgMusic or config.cpp. To stop the music execute playMusic "" or give the start time which is beyond the music duration playMusic ["SomeMusic", 1000];
	For Arma 3 music, see Arma 3 CfgMusic. Since Arma 3 v1.67 one can use Jukebox Utility to preview in-game music.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/playMusic
	</WikiPage>
	<Syntax>
		playMusic String
	</NextSyntax>
		playMusic Array
	</Syntax>
	<RawSyntax>
		playMusic name
	</NextRawSyntax>
		playMusic [name, start]
	</RawSyntax>
	<Example>
		$Code$playMusic "RadioAmbient1";$/Code$
	</NextExample>
		$Code$playMusic ["RadioAmbient3", 3]; //start from 00:00:03$/Code$
	</NextExample>
		$Code$// Play from 00:00:01 to 00:00:05
	0 = [] spawn {
	playMusic ["RadioAmbient5", 1];
	sleep 4;
	playMusic "";
	};$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
		You can get all Music Types from Arma:_cfgMusic
	http://community.bistudio.com/wiki/Arma_2:_Music#top
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setWaypointPosition
	</Keyword>
	<Description>
		Moves the waypoint to a random position in a circle with the given center and radius.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setWaypointPosition
	</WikiPage>
	<Syntax>
		Array setWaypointPosition Array
	</Syntax>
	<RawSyntax>
		waypoint setWaypointPosition [center, radius]
	</RawSyntax>
	<Example>
		$Code$[_grp, 2] setWaypointPosition [ position player, 0];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		actionName
	</Keyword>
	<Description>
		Returns localized name of action.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/actionName
	</WikiPage>
	<Syntax>
		actionName String
	</Syntax>
	<RawSyntax>
		actionName action
	</RawSyntax>
	<Example>
		$Code$actionName "ReloadMagazine"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctSetData
	</Keyword>
	<Description>
		Associates metadata (string) with the row determined by the index. Returns Nothing.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctSetData
	</WikiPage>
	<Syntax>
		Control ctSetData Array
	</Syntax>
	<RawSyntax>
		ctrl ctSetData [index, data]
	</RawSyntax>
	<Example>
		$Code$_control ctSetData [0, "Test"];$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		hideBody
	</Keyword>
	<Description>
		Hides dead body of the given unit. After a short delay, the body slowly sinks into the ground. After awhile, when group of the unit becomes grpNull, the body gets deleted and becomes objNull. If applied to alive unit, nothing happens until unit dies, then the unit's body gets hidden. If a dead unit is human player, the body is hidden but not deleted until player respawns.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/hideBody
	</WikiPage>
	<Syntax>
		hideBody Object
	</Syntax>
	<RawSyntax>
		hideBody unit
	</RawSyntax>
	<Example>
		$Code$hideBody player1;$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		rainbow
	</Keyword>
	<Description>
		Returns the current rainbow intensity.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/rainbow
	</WikiPage>
	<Syntax>
		rainbow
	</Syntax>
	<RawSyntax>
		rainbow
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		setName
	</Keyword>
	<Description>
		Sets the name of a location or a person. In Arma 3 this can be used to set name of a person but only in single player.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setName
	</WikiPage>
	<Syntax>
		Object setName String
	</NextSyntax>
		Object setName Array
	</NextSyntax>
		Location setName String
	</Syntax>
	<RawSyntax>
		object setName name
	</NextRawSyntax>
		unit setName [name, firstName, lastName]
	</NextRawSyntax>
		location setName name
	</RawSyntax>
	<Example>
		$Code$myLocation setName "My Location Name";$/Code$
	</NextExample>
		$Code$player setName "New Name";$/Code$
	</NextExample>
		$Code$player setName ["Ben Kerry","Ben","Kerry"];$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
		(July 9, 2010‎)
	Appears to be only for the 3d editor.
	</NextNote>
		(September 19, 2013‎)
	Support of a person as the first parameter from Arma 3 v. 1.02.
	</NextNote>
		(April 12, 2014)
	Seems to have no effect on players in Multiplayer. (ArmA 3 v1.00)
	</NextNote>
		(August 18, 2014)
	Only last name will appear in command bar i.e. this setname _mynameArray will display _mynameArray select 2. If setname is used with a string : this setname "blah", nothing occurs in command bar and default randomized name is displayed.
	Dealing with the units' names in a script, _x (in a foreach units group, for example) will return the "object" as B ALFA 4-1:2 or the name written in ai unit name field in editor (if exists). This context is rather a "variable name" for each object (ai) than an "identity name" as given via setname function.
	</Note>
	<ReturnValue>
		Nothing - Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setDirection
	</Keyword>
	<Description>
		Set's the orientation of a location. It's area and map icon (if it's type uses an icon) will be rotated to this orientation.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setDirection
	</WikiPage>
	<Syntax>
		Location setDirection Number
	</Syntax>
	<RawSyntax>
		location setDirection direction
	</RawSyntax>
	<Example>
		$Code$location1 = createLocation ["VegetationPalm", getPos player, 200, 200];
	location1 setText "Benargee's Palm Tree";
	location1 setDirection 45;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		deleteTeam
	</Keyword>
	<Description>
		Destroy given team.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/deleteTeam
	</WikiPage>
	<Syntax>
		deleteTeam Team_Member
	</Syntax>
	<RawSyntax>
		deleteTeam team
	</RawSyntax>
	<Example>
		$Code$deleteTeam _team;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		exportJIPMessages
	</Keyword>
	<Description>
		Export list of JIP to a file. Special: BattlEye's RCON variant of this command is #exportJIPqueue (see also Multiplayer_Server_Commands )
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/exportJIPMessages
	</WikiPage>
	<Syntax>
		exportJIPMessages String
	</Syntax>
	<RawSyntax>
		exportJIPMessages fileName
	</RawSyntax>
	<Example>
		$Code$exportJIPMessages "myFileNameWithoutExtension";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		showGPS
	</Keyword>
	<Description>
		Shows or hides the GPS receiver on the map screen, if enabled for the mission and you possess the item. (default false )
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/showGPS
	</WikiPage>
	<Syntax>
		showGPS Boolean
	</Syntax>
	<RawSyntax>
		showGPS show
	</RawSyntax>
	<Example>
		$Code$showGPS true ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(16 Aug, 2009)
	In Arma 2, the GPS is now an inventory item. Class path is CfgWeapons- ItemGPS. Use the commands addWeapon and removeWeapon to add or remove it from a unit's inventory. (example: player addweapon "ItemGPS")
	</NextNote>
		(14 Jun, 2010)
	In Arma 2 GPS is also an item, so will not be removed by removeAllWeapons, even though it can be removed by removeWeapon and added by addWeapon. To remove all items use the removeAllItems command (though this will also remove basic items such as map and compass).
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlSetTooltipColorBox
	</Keyword>
	<Description>
		Sets tooltip border color of given control. Color is in format Color.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlSetTooltipColorBox
	</WikiPage>
	<Syntax>
		Control ctrlSetTooltipColorBox Array
	</Syntax>
	<RawSyntax>
		control ctrlSetTooltipColorBox color
	</RawSyntax>
	<Example>
		$Code$_control ctrlSetTooltipColorBox [1, 0, 0, 1];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		dateToNumber
	</Keyword>
	<Description>
		Convert a date to a float number, based on Jan 1st 00:00:00 = 0 and Dec 31st 23:59:59 = 1. The same day and time in leap year will be different after 28th of February and 23:59 on 31st of December will be 1.00274
	This is how this command works. The 365 days of the year are presented in range 0...1. So each day will be:
	1 / 365 = 0.00273973
	In a leap year there are 366 days, so the range will increase by 1 day:
	1 / 365 * 366 = 1.00274
	In short, in a normal year the command returns in range 0...1 in a leap year it will return in range 0...1.00274
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/dateToNumber
	</WikiPage>
	<Syntax>
		dateToNumber Array
	</Syntax>
	<RawSyntax>
		dateToNumber date
	</RawSyntax>
	<Example>
		$Code$_float = dateToNumber [2035,7,6,12,0]; //0.510959$/Code$
	</NextExample>
		$Code$dateToNumber date ; //will return float number for the current date.$/Code$
	</NextExample>
		$Code$// Calculate days from 1/1/1970:
	fnc_daysFromEpoc =
	{
	private _year = param [0];
	private _days = 0;
	for "_i" from 1970 to _year - 1 do
	{
	_days = _days + round linearConversion [0, 1, dateToNumber [_i, 12, 31, 23, 59], 0, 365, false ];
	};
	_days + linearConversion [0, 1, dateToNumber _this, 0, 365, false ];
	};
	hint str ( date call fnc_daysFromEpoc);$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		setPylonsPriority
	</Keyword>
	<Description>
		Overrides default pylons priorities
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setPylonsPriority
	</WikiPage>
	<Syntax>
		Object setPylonsPriority Array
	</Syntax>
	<RawSyntax>
		vehicle setPylonsPriority [priority pylon1, priority pylon2,]
	</RawSyntax>
	<Example>
		$Code$( vehicle player ) setPylonsPriority [0,1,2,3,4,5,5,4,3,2,1,0];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		getSoundController
	</Keyword>
	<Description>
		Returns value of the given sound controller.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getSoundController
	</WikiPage>
	<Syntax>
		Object getSoundController String
	</Syntax>
	<RawSyntax>
		vehicle getSoundController controller
	</RawSyntax>
	<Example>
		$Code$vehicle player getSoundController "rpm"; //600$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		allowCuratorLogicIgnoreAreas
	</Keyword>
	<Description>
		Allows curator placing and working with modules outside of edit areas.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/allowCuratorLogicIgnoreAreas
	</WikiPage>
	<Syntax>
		Object allowCuratorLogicIgnoreAreas Boolean
	</Syntax>
	<RawSyntax>
		curatorObj allowCuratorLogicIgnoreAreas allow
	</RawSyntax>
	<Example>
		$Code$curatorModule allowCuratorLogicIgnoreAreas true$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		lineIntersectsObjs
	</Keyword>
	<Description>
		Returns list of objects intersected by given line from begPos to endPos.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lineIntersectsObjs
	</WikiPage>
	<Syntax>
		lineIntersectsObjs Array
	</Syntax>
	<RawSyntax>
		lineIntersectsObjs [begPos, endPos, withObj, ignoreObj, sortByDistance, flags]
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(Mar 27, 2014)
	Example (in ArmA3 ver 1.14) display objects' array in the middle of the screen sorted by 6 flags:
	$Code$
	Sto = [];
	Fn = {
	{
	Sto set [_foreachindex, lineIntersectsObjs [( eyePos player ),( ATLtoASL screenToWorld [0.5,0.5]), objNull, objNull, false,_x]];
	} forEach [1,2,4,8,16,32];
	hintSilent format ["
	ONLY_WATER: %1,
	NEAREST_CONTACT: %2,
	ONLY_STATIC: %3,
	ONLY_DYNAMIC: %4,
	FIRST_CONTACT: %5,
	ALL_OBJECTS: %6",
	Sto select 0,Sto select 1,Sto select 2,Sto select 3,Sto select 4,Sto select 5];
	};
	["sample_id","onEachFrame","Fn"] call BIS_fnc_addStackedEventHandler ;
	$/Code$
	</NextNote>
		(March 29, 2016)
	Distance sorting is relative to object model center, and not intersect position.
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		deleteAt
	</Keyword>
	<Description>
		Removes array element at the given index and returns removed element (modifies the original array, just like resize or set ). Will not issue error when -1 index is passed making it ideal for using with find command (see Example 2)
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/deleteAt
	</WikiPage>
	<Syntax>
		Array deleteAt Number
	</Syntax>
	<RawSyntax>
		array deleteAt index
	</RawSyntax>
	<Example>
		$Code$_arr = [1,2,3];
	_rem = _arr deleteAt 1;
	hint str [_rem, _arr]; //[2,[1,3]]$/Code$
	</NextExample>
		$Code$_arr = [1,2,3];
	_arr deleteAt (_arr find 0); // non existent item
	hint str _arr; // [1,2,3]
	_arr deleteAt (_arr find 2); // existent item
	hint str _arr; // [1,3]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(October 15, 2014)
	$Code$_array deleteAt 0$/Code$ is almost 60x faster than $Code$_array = _array - [_array select 0]$/Code$ (Tested with an array of 10.000 strings, iterating through it using a for-from-to-do loop)
	</NextNote>
		(March 4, 2016)
	Deleting from an array with foreach and _foreachIndex variable is tricky. The array is being altered, the _foreachIndex won't keep up and other elements in the array will be skipped and in worst case not being deleted.
	If you delete elements from an array in descending order (using while or for) it will work.
	</NextNote>
		(February 9, 2017)
	To expand on Highheads comment above - this is because forEach implements iterators to traverse a collection, which are read only by definition.
	The variable _x is an iterator that points to the current item in the collection. Trying to alter _x will have no effect.
	$Code$ARRAY = [1,2,3,4,5,6,7,8];
	{ _x = 2; } forEach ARRAY
	// ARRAY is still [1,2,3,4,5,6,7,8]$/Code$
	When trying to use deleteAt inside forEach, the behaviour would be undefined as you are invalidating the iterator reference, and it will not know how to traverse to the next element.
	In short, only use forEach when reading data from an array.
	For more info about iterators, see C++ Iterators.
	</Note>
	<ReturnValue>
		Anything
	</ReturnValue>

</NextListItem>

	<Keyword>
		moveInGunner
	</Keyword>
	<Description>
		Move soldier into vehicle gunner position (Immediate, no animation).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/moveInGunner
	</WikiPage>
	<Syntax>
		Object moveInGunner Object
	</Syntax>
	<RawSyntax>
		unitName moveInGunner vehicle
	</RawSyntax>
	<Example>
		$Code$soldierOne moveInGunner tankOne$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		(August 4, 2006)
	Notes from before the conversion:
	MP Note Functions MoveInGunner can only be called for local soldiers. They will be ignored for remote soldiers. (see Locality in Multiplayer )
	</NextNote>
		In OFP v1.96, the moveIn commands will not trigger an associated getIn event. To ensure the getIn event is fired, use the "getIn Gunner" action command.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		lineIntersectsSurfaces
	</Keyword>
	<Description>
		Returns list of intersections with surfaces from begPosASL to endPosASL. If there is ground intersection, it is also included. Works on units. Works underwater. Doesn't return intersection with sea surface. Hardcoded max distance: 5000m. By default, for speed purposes, command will return only 1st intersection with unique objects. Since Arma 3 v1.69.140138, this could be tweaked with an optional param. NOTE: if begPosASL is under the ground and endPosASL is above it, the command will only return intersection with the ground, this is engine limitation and none of the intersectXXX commands will work when initiated from under the ground.
	Since Arma v1.51.131920 it is possible to indicate primary and secondary LOD to look for intersection. Available options are:
	"FIRE"
	"VIEW"
	"GEOM"
	"IFIRE" - ("I" stands for Indirect, almost the same as FIRE)
	"NONE"
	Default LODs are "VIEW" and "FIRE"
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lineIntersectsSurfaces
	</WikiPage>
	<Syntax>
		lineIntersectsSurfaces Array
	</Syntax>
	<RawSyntax>
		lineIntersectsSurfaces [begPosASL, endPosASL, ignoreObj1, ignoreObj2, sortMode, maxResults, LOD1, LOD2, returnUnique]
	</RawSyntax>
	<Example>
		$Code$_intersections = lineIntersectsSurfaces [ eyePos player, aimPos chopper, player, chopper, true, -1];$/Code$
	</NextExample>
		$Code$arrow = "Sign_Arrow_F" createVehicle [0,0,0];
	onEachFrame {
	_ins = lineIntersectsSurfaces [
	AGLToASL positionCameraToWorld [0,0,0],
	AGLToASL positionCameraToWorld [0,0,1000],
	player
	];
	if ( count _ins == 0) exitWith {arrow setPosASL [0,0,0]};
	arrow setPosASL (_ins select 0 select 0);
	arrow setVectorUp (_ins select 0 select 1);
	hintSilent str _ins;
	};$/Code$
	</NextExample>
		$Code$// This should detect glass windows and wire fences (since Arma v1.51.131920):
	wirefence = "Land_New_WiredFence_5m_F" createVehicle position player ;
	arrow = "Sign_Arrow_F" createVehicle [0,0,0];
	onEachFrame {
	_ins = lineIntersectsSurfaces [
	AGLToASL positionCameraToWorld [0,0,0],
	AGLToASL positionCameraToWorld [0,0,1000],
	player,
	objNull,
	true,
	1,
	"GEOM",
	"NONE"
	];
	if ( count _ins == 0) exitWith {arrow setPosASL [0,0,0]};
	arrow setPosASL (_ins select 0 select 0);
	arrow setVectorUp (_ins select 0 select 1);
	hintSilent str _ins;
	};$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(August 27, 2015)
	Fast check if object is in a house: $Code$KK_fnc_inHouse = {
	lineIntersectsSurfaces [
	getPosWorld _this,
	getPosWorld _this vectorAdd [0, 0, 50],
	_this, objNull, true, 1, "GEOM", "NONE"
	] select 0 params ["","","","_house"];
	if (_house isKindOf "House") exitWith { true };
	false
	};
	onEachFrame { hintSilent str ( player call KK_fnc_inHouse)};$/Code$
	</NextNote>
		(January 30, 2016)
	This command is useful to place weaponholder (and then spawned weapons) on floor of houses, correcting the spawn position (can_collide) to intersect with floor:
	$Code$
	MGI_fnc_setPosAGLS = {
	params ["_obj", "_pos"];
	_wh_pos = getPosASL _obj;
	_pos set [2, ( ATLtoASL _pos select 2)-10];
	_ins = lineIntersectsSurfaces [_wh_pos, _pos,_obj, objNull, true,1,"VIEW","FIRE"];
	_surface_distance = if ( count _ins 0) then [{(_ins select 0 select 0) distance _wh_pos},{0}];
	_wh_pos set [2, ( getPosASL _obj select 2) - (_surface_distance)];
	_weaponholder setPosASL _wh_pos;
	};
	$/Code$
	After the position (_pos) obtained in BIS_fnc_buidingPositions array:
	$Code$
	_weaponholder = createVehicle ["groundWeaponHolder", _pos, [], 0, "CAN_COLLIDE"];
	[_weaponholder,_pos] call MGI_fnc_setPosAGLS;
	Then fill your weapon holder.
	$/Code$
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		setCamShakeParams
	</Keyword>
	<Description>
		Set camera shake parameters.
	Will not have any effect until shake is started via addCamShake.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setCamShakeParams
	</WikiPage>
	<Syntax>
		setCamShakeParams Array
	</Syntax>
	<RawSyntax>
		setCamShakeParams [posCoef, vertCoef, horzCoef, bankCoef, interpolation]
	</RawSyntax>
	<Example>
		$Code$setCamShakeParams [0.1, 1, 1, 1, true];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		remoteExec
	</Keyword>
	<Description>
		Asks server to execute given scripted function or script command on given target PC. The environment chosen for the execution is as follows:
	Scripted function - scheduled environment ( suspension is allowed, i.e. spawn, execVM ).
	Script command - unscheduled environment ( suspension is NOT allowed).
	remoteExec can also be used in SP (the same restrictions apply both to SP and MP). For more information about the usage, security features and advanced jip techniques check the remote execution dedicated section.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/remoteExec
	</WikiPage>
	<Syntax>
		Anything remoteExec Array
	</NextSyntax>
		remoteExec Array
	</Syntax>
	<RawSyntax>
		params remoteExec [functionName, targets, JIP]
	</NextRawSyntax>
		remoteExec [functionName, targets, JIP]
	</RawSyntax>
	<Example>
		$Code$// runs hint "hello" on each connected client
	"hello" remoteExec [" hint "];$/Code$
	</NextExample>
		$Code$// runs hint "hello" on first connected client
	"hello" remoteExec [" hint ", 3];$/Code$
	</NextExample>
		$Code$// runs hint "hello" everywhere but server
	"hello" remoteExec [" hint ", -2];$/Code$
	</NextExample>
		$Code$// runs hint "hello" everywhere but server, JIPs the message
	// and returns e.g. "3_1" as a unique JIP id
	myJipID = "hello" remoteExec [" hint ", -2, true ];$/Code$
	</NextExample>
		$Code$// runs hint "hello" everywhere but server, JIPs the message under ID "some_JIP_ID"
	// replacing any previous message with this ID in the JIP queue.
	"hello" remoteExec [" hint ", -2, "some_JIP_ID"];$/Code$
	</NextExample>
		$Code$// runs "someFuncWithNoArgs" on each connected client
	remoteExec ["someFuncWithNoArgs"];$/Code$
	</NextExample>
		$Code$// removes a message identified by "IamUnique" from the JIP queue
	remoteExec ["", "IamUnique"];$/Code$
	</NextExample>
		$Code$// all clients will have their ammo set to 1 for their current weapon
	{ player setAmmo [ primaryWeapon player, 1];} remoteExec [" bis_fnc_call ", 0];$/Code$
	</NextExample>
		$Code$// Object obj will have its ammo set to 1 where it is local
	[obj,[ primaryWeapon obj, 1]] remoteExec [" setAmmo ", obj];$/Code$
	</NextExample>
		$Code$myJipID = "hello" remoteExec ["", 0];
	if ( isNil "myJipID") then { hint "empty function name is not allowed"; };$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(June 30, 2015)
	While it is true that this function executes the desired scripted command/function by calling it, it does not mean remoteExecCall itself will be executed right away. Therefore, calling remoteExecCall is by no means a replacement for calling scripted commands/functions directly.
	Example:
	remoteExecCall ["func1"]; call func2; // func2 can be executed sooner than func1
	call func1; call func2; // func2 will always execute after func1.
	</NextNote>
		(December 29, 2015)
	remoteExec and remoteExecCall are currently filtered by BattlEye's remoteexec.txt, the string analyzed by BE is formatted the same way as the following example's output:
	$Code$ format ["%1 %2", functionName, str params]$/Code$
	If CfgRemoteExec class Functions is set to mode = 1;, the following remoteexec.txt exclusion can be used to safely allow all whitelisted *_fnc_* functions taking an array as parameter to go through:
	$Code$!="\w+?_fnc_\w+? \[.*\]"$/Code$
	Any attempt to exploit this exclusion using other RE methods like createUnit will run into "Error Missing ;" without any malicious code being executed. Mod makers should refrain from remote-executing raw commands from clients, as they require individual exclusions, and instead use *_fnc_* functions taking an array as parameter, which are covered by the above exclusion.
	</NextNote>
		(January 15, 2016)
	Executing commands/functions via remoteExec is more faster than using BIS_fnc_MP. Tested with BIS_fnc_codePerformance in ArmA 3 1.52.
	$Code$['"string" remoteExec ["hint",player];',[],100] call BIS_fnc_codePerformance ; //Result ~0.1ms$/Code$
	$Code$['["string","hint", player ] call BIS_fnc_MP ;',[],100] call BIS_fnc_codePerformance ; //Result ~0.6ms$/Code$
	</NextNote>
		(March 24, 2016)
	The INCORRECT way to call reveal command on a certain object for every player:
	$Code$[ player, _desired_object] remoteExec ["reveal", 0];$/Code$
	In this case player object will be the object obtained on the computer where remoteExec is initiated. If it is dedicated server, player will be objNull, if it is client, player would be player object on this client. In any case this will not reveal _desired_object for all connected players.
	The CORRECT way:
	$Code$[_desired_object, { player reveal _this}] remoteExec ["call", 0];$/Code$
	The _desired_object will be identical on every client, this is what we want, but player will refer to individual player on each client, so _desired_object will be revealed to all connected players.
	</NextNote>
		(May 25, 2016)
	When adapting mission from dedicated server for SP, if target used in remoteExec is -2 (execute on every client but not server), in SP this will not execute since client is server in SP. To work around, the target could be set using isMultiplayer condition like this:
	$Code$"123" remoteExec ["hint", [0, -2] select isMultiplayer ];$/Code$
	This will execute hint on every client in MP on dedicated server (target -2) and will also execute it in SP (target 0).
	</NextNote>
		(May 28, 2016)
	While KK's solution works fine in sp missions and on dedicated servers, it will not work properly for hosted missions.
	Solution:
	$Code$[0,0.5] remoteExec [' fadeRadio ',[0,-2] select isDedicated, true ];$/Code$
	Singleplayer: isDedicated returns false - code is executed everywhere (0)
	Hosted: isDedicated returns false - code is executed everywhere including host (0)
	Dedicated: isDedicated returns true - code is executed everywhere excluding server (-2)
	</NextNote>
		(Jan 30, 2017)
	$Code$[some params] remoteExec ['some command',2,true];$/Code$
	will fail, as you can't use JIP and remoteExec on server only
	$Code$[some params] remoteExec ['some command',2]; // works$/Code$
	</NextNote>
		(May 10, 2017)
	To remoteExec :
	$Code$ titleText ["Test Message", "PLAIN", 1];$/Code$
	Use
	$Code$[["Test Message", "PLAIN", 1]] remoteExec ["titleText"];$/Code$
	</Note>
	<ReturnValue>
		Anything - Anything
	</ReturnValue>

</NextListItem>

	<Keyword>
		east
	</Keyword>
	<Description>
		Pre-defined variable for the eastern side.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/east
	</WikiPage>
	<Syntax>
		east
	</Syntax>
	<RawSyntax>
		east
	</RawSyntax>
	<Example>
		$Code$// SQS:
	?((side _unit) == east ) : hint "This is a eastern unit!"$/Code$
	</NextExample>
		$Code$// SQF:
	if (( side _unit) == east ) then {
	hint "This is a eastern unit!";
	};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(April 17, 2007)
	In ArmA terms OPFOR, BLUFOR, Independents and Civilians are used in the front end UI.
	</Note>
	<ReturnValue>
		Side
	</ReturnValue>

</NextListItem>

	<Keyword>
		loadGame
	</Keyword>
	<Description>
		Load a game from the autosave. If failed, restart the mission.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/loadGame
	</WikiPage>
	<Syntax>
		loadGame
	</Syntax>
	<RawSyntax>
		loadGame
	</RawSyntax>
	<Example>
		$Code$loadGame ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		getRelDir
	</Keyword>
	<Description>
		Returns direction, which is relative to object's current direction, from given object to another object or position in the range from 0 to 360, the equivalent of BIS_fnc_relativeDirTo.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getRelDir
	</WikiPage>
	<Syntax>
		Object getRelDir Object/Position2D/Position3D
	</Syntax>
	<RawSyntax>
		object getRelDir position
	</RawSyntax>
	<Example>
		$Code$_reldir = player getRelDir tank;$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		distance2D
	</Keyword>
	<Description>
		Returns a 2D distance ( distance projected to X,Y plane) in meters between two Objects or two Positions or Object and Position.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/distance2D
	</WikiPage>
	<Syntax>
		Object/Array distance2D Object/Array
	</Syntax>
	<RawSyntax>
		param1 distance2D param2
	</RawSyntax>
	<Example>
		$Code$_meters = player distance2D heli;$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		removeAllMissionEventHandlers
	</Keyword>
	<Description>
		Removes all mission event handlers of the given type which were added by addMissionEventHandler.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/removeAllMissionEventHandlers
	</WikiPage>
	<Syntax>
		removeAllMissionEventHandlers String
	</Syntax>
	<RawSyntax>
		removeAllMissionEventHandlers type
	</RawSyntax>
	<Example>
		$Code$removeAllMissionEventHandlers "Loaded";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		addItemToVest
	</Keyword>
	<Description>
		Create new item and store it to soldier's vest. The item can also be a weapon or a magazine.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/addItemToVest
	</WikiPage>
	<Syntax>
		Object addItemToVest String
	</Syntax>
	<RawSyntax>
		unit addItemToVest item
	</RawSyntax>
	<Example>
		$Code$player addItemToVest "itemGPS";$/Code$
	</NextExample>
		$Code$player addItemToVest "hgun_Rook40_F";$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		synchronizeObjectsAdd
	</Keyword>
	<Description>
		Add given objects to the unit's list of synchronized objects.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/synchronizeObjectsAdd
	</WikiPage>
	<Syntax>
		Object synchronizeObjectsAdd Array
	</Syntax>
	<RawSyntax>
		unit synchronizeObjectsAdd [objects]
	</RawSyntax>
	<Example>
		$Code$_acm = _groupLogic createUnit ["AmbientCombatManager",position player,[],0,"NONE"];
	_acm synchronizeObjectsAdd [player];$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setFlagSide
	</Keyword>
	<Description>
		Sets flag Side. A flag may be taken by any unit that is enemy to the side that owns the flag. Just like with setFlagTexture, if the command executed where unit is local effect of the command will be global and JIP compatible.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setFlagSide
	</WikiPage>
	<Syntax>
		Object setFlagSide Side
	</Syntax>
	<RawSyntax>
		flag setFlagSide side
	</RawSyntax>
	<Example>
		$Code$_flag1 setFlagSide east ;$/Code$
	</NextExample>
		$Code$// Capturable OPFOR flag:
	private _flag = "FlagPole_F" createVehicle position player ;
	_flag setFlagTexture "\A3\Data_F\Flags\Flag_CSAT_CO.paa";
	_flag setFlagSide east ;$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		kbAddTopic
	</Keyword>
	<Description>
		Register conversation topic to given person. See Conversations for more details.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/kbAddTopic
	</WikiPage>
	<Syntax>
		Object kbAddTopic Array
	</Syntax>
	<RawSyntax>
		person kbAddTopic [topicName, conversationFile, fsmFile, eventHandler]
	</RawSyntax>
	<Example>
		$Code$player kbAddTopic ["myTest", "myTest.bikb", "myTest.fsm", compile preprocessFileLineNumbers "myTest.sqf"];$/Code$
	</NextExample>
		$Code$player kbAddTopic ["itsGettingWarm", "weatherTalk.bikb"];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		curatorPoints
	</Keyword>
	<Description>
		Returns number of points that curator have. Points can be only in range from 0 to 1.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/curatorPoints
	</WikiPage>
	<Syntax>
		curatorPoints Object
	</Syntax>
	<RawSyntax>
		curatorPoints curatorObj
	</RawSyntax>
	<Example>
		$Code$_points = curatorPoints myCurator;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		objNull
	</Keyword>
	<Description>
		A non-existent Object. To compare non-existent objects use isNull or isEqualTo :
	objNull == objNull ; // false
	isNull objNull ; // true
	objNull isEqualTo objNull ; // true
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/objNull
	</WikiPage>
	<Syntax>
		objNull
	</Syntax>
	<RawSyntax>
		objNull
	</RawSyntax>
	<Example>
		$Code$player == player ; // false if player is null$/Code$
	</NextExample>
		$Code$isNull player ; // true if player is null$/Code$
	</NextExample>
		$Code$str objNull // NULL-object$/Code$
	</NextExample>
		$Code$position objNull // [0,0,0]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Object
	</ReturnValue>

</NextListItem>

	<Keyword>
		setViewDistance
	</Keyword>
	<Description>
		Set rendering distance, in metres. Default is 900m (in OFP) or 1,200m (in ArmA), accepted range is 500m to 5,000m (in OFP) or 10,000m (in ArmA). Setting view distance to = 0 resets the value to the one set in Options- Video- General- Visibility- Overall
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setViewDistance
	</WikiPage>
	<Syntax>
		setViewDistance Number
	</Syntax>
	<RawSyntax>
		setViewDistance distance
	</RawSyntax>
	<Example>
		$Code$setViewDistance 2250;$/Code$
	</NextExample>
		$Code$//reset view distance in Arma 3
	setViewDistance -1;$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
		In OFP v1.96, view distance also defines the maximum distance between a unit and any other unit they can know about. Higher view distance will involve more AI simulation cycles for every unit, which causes low performance.
	</NextNote>
		I tested the above and it seems to apply in Arma 2 as well. AI at a bit above 500m would stop engaging when I lowered the view distance down to 500m and re-engaged when I increased it back.
	</NextNote>
		In ArmA 2 viewDistance can be set up to 15 km with this command ( while from interface only 10 km )
	</NextNote>
		(October 15, 2014)
	In Arma 3, Values below 200 have no visible effect.
	</NextNote>
		(November 20, 2014)
	To clarify Bernagee's post, values under 200 have no effect. Tested by setViewDistance below 200, then hint viewDistance. It will not go below 200. Also, as object view distance can only be, at a maximum, the view distance, object view distance will also be reset to 200.
	</NextNote>
		(June 8, 2015)
	Client-side max view distance is limited by the server's view distance.
	Tested in Arma 3.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		createSite
	</Keyword>
	<Description>
		Create a new site.
	This command is considered deprecated and is no longer supported
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/createSite
	</WikiPage>
	<Syntax>
		String createSite Position
	</Syntax>
	<RawSyntax>
		type createSite pos
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(February 18, 2014)
	"CreateSite is an obsolete command from the time in development when Sites were handled separately from other modules. Now they use the modules framework.
	If you want a specific Site to be activated during the mission, place it in the editor and use the Condition line in its parameters (the last one)." - Jezuro [1]
	</Note>
	<ReturnValue>
		Object
	</ReturnValue>

</NextListItem>

	<Keyword>
		curatorSelected
	</Keyword>
	<Description>
		Returns list of all curator selected items.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/curatorSelected
	</WikiPage>
	<Syntax>
		curatorSelected
	</Syntax>
	<RawSyntax>
		curatorSelected
	</RawSyntax>
	<Example>
		$Code$selectedItems = curatorSelected ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		incapacitatedState
	</Keyword>
	<Description>
		Returns the incapacitated state of the given unit.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/incapacitatedState
	</WikiPage>
	<Syntax>
		incapacitatedState Object
	</Syntax>
	<RawSyntax>
		incapacitatedState person
	</RawSyntax>
	<Example>
		$Code$_result = incapacitatedState player;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		velocity
	</Keyword>
	<Description>
		Return velocity (speed vector) of Unit as an array with format [x, y, z]. Units are in metres per second.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/velocity
	</WikiPage>
	<Syntax>
		velocity Object
	</Syntax>
	<RawSyntax>
		velocity vehicleName
	</RawSyntax>
	<Example>
		$Code$_vector = velocity jeep;$/Code$
	</NextExample>
		$Code$if ( velocity _plane1 select 2 50) then { hint "Aircraft is climbing up too fast!"};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlPosition
	</Keyword>
	<Description>
		Returns the current position of 2D control as [x, y, w, h] array. For 3D control it returns relative [x,y,z].
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlPosition
	</WikiPage>
	<Syntax>
		ctrlPosition Control
	</Syntax>
	<RawSyntax>
		ctrlPosition controlName
	</RawSyntax>
	<Example>
		$Code$_pos = ctrlPosition _control;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(May 22, 2017)
	If the ctrl is part of a CtrlGroup the returned position is relative to the ctrlGroups position.
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		show3DIcons
	</Keyword>
	<Description>
		Toggle the drawing of 3D icons.
	i
	Some Old Editor Command
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/show3DIcons
	</WikiPage>
	<Syntax>
		Control show3DIcons Boolean
	</Syntax>
	<RawSyntax>
		map show3DIcons bool
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setGroupIconsSelectable
	</Keyword>
	<Description>
		Sets if group icons raises onclick and onover events.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setGroupIconsSelectable
	</WikiPage>
	<Syntax>
		setGroupIconsSelectable Boolean
	</Syntax>
	<RawSyntax>
		setGroupIconsSelectable bool
	</RawSyntax>
	<Example>
		$Code$setGroupIconsSelectable true ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Object
	</ReturnValue>

</NextListItem>

	<Keyword>
		unassignVehicle
	</Keyword>
	<Description>
		Unassigns individual unit from a vehicle, i.e removes assignedVehicleRole of the unit. If the unit is currently in that vehicle, the group leader will issue an order to disembark.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/unassignVehicle
	</WikiPage>
	<Syntax>
		unassignVehicle Object
	</Syntax>
	<RawSyntax>
		unassignVehicle unitName
	</RawSyntax>
	<Example>
		$Code$unassignVehicle player ;$/Code$
	</NextExample>
		$Code${ unassignVehicle _x } forEach crew _vehiclename;
	// Will make all the occupants of a vehicle disembark$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		(August 4, 2006)
	Notes from before the conversion:
	Even though:
	{unassignVehicle _x} forEach crew vehiclename
	will make all the occupants of a vehicle disembark, if they are the original crew of the vehicle then they will just get back in again.
	To prevent this happening also use allowGetIn as in the example below:
	{unassignVehicle _x} forEach crew vehiclename; crew vehiclename allowGetIn false
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setAccTime
	</Keyword>
	<Description>
		Set time acceleration coefficient. May be also used to slow time in cutscenes. This command does NOT work in multiplayer. accFactor is clamped to [1/128; 4].
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setAccTime
	</WikiPage>
	<Syntax>
		setAccTime Number
	</Syntax>
	<RawSyntax>
		setAccTime accFactor
	</RawSyntax>
	<Example>
		$Code$setAccTime 0.1$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(August 4, 2006)
	Notes from before the conversion:
	A good habit to get into is setting the accTime to 1 at the start of all cutscenes, in case the player is running at 4x speed when the scene starts.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		toArray
	</Keyword>
	<Description>
		Converts the supplied String into an Array of Numbers.
	The numbers in the created array are the decimal Unicode representations of characters.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/toArray
	</WikiPage>
	<Syntax>
		toArray String
	</Syntax>
	<RawSyntax>
		toArray string
	</RawSyntax>
	<Example>
		$Code$hint format["%1",toArray("AaŒ")]
	// returns "[65,97,338]"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		lnbPicture
	</Keyword>
	<Description>
		Returns the picture name or path of the item with the given position of the 2D listbox.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lnbPicture
	</WikiPage>
	<Syntax>
		lnbPicture Array
	</NextSyntax>
		Control lnbPicture Array
	</Syntax>
	<RawSyntax>
		lnbPicture [IDC, [row, column]]
	</NextRawSyntax>
		control lnbPicture [row, column]
	</RawSyntax>
	<Example>
		$Code$lnbPicture [200, [1, 1]];$/Code$
	</NextExample>
		$Code$_control lnbPicture [1, 1]; //"a3\ui_f\data\gui\cfg\ranks\corporal_gs.paa"$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String - String
	</ReturnValue>

</NextListItem>

	<Keyword>
		setTimeMultiplier
	</Keyword>
	<Description>
		Sets a time multiplier for in-game time. The command range is now capped at 0.1 - 120 to avoid performance problems.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setTimeMultiplier
	</WikiPage>
	<Syntax>
		setTimeMultiplier Number
	</Syntax>
	<RawSyntax>
		setTimeMultiplier value
	</RawSyntax>
	<Example>
		$Code$setTimeMultiplier 60;$/Code$
	</NextExample>
		$Code$setTimeMultiplier 0.5;$/Code$
	</Example>
	<Locality>
		undefined / global
	</Locality>
	<Note>
		This scripting command must be executed on the server to work properly in multiplayer
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		dynamicSimulationDistance
	</Keyword>
	<Description>
		A getter for setDynamicSimulationDistance
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/dynamicSimulationDistance
	</WikiPage>
	<Syntax>
		dynamicSimulationDistance String
	</Syntax>
	<RawSyntax>
		dynamicSimulationDistance category
	</RawSyntax>
	<Example>
		$Code$hint str dynamicSimulationDistance "Prop";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		triggerDynamicSimulation
	</Keyword>
	<Description>
		Controls ability of given unit to activate entities with disabled Arma_3_Dynamic_Simulation. If false dynamically disabled entities will not be activated by unit presence
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/triggerDynamicSimulation
	</WikiPage>
	<Syntax>
		Object triggerDynamicSimulation Boolean
	</Syntax>
	<RawSyntax>
		unit triggerDynamicSimulation trigger
	</RawSyntax>
	<Example>
		$Code$player triggerDynamicSimulation false ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		hmd
	</Keyword>
	<Description>
		Returns class name of currently used Head Mounted Display. Returns an empty string if the slot is empty.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/hmd
	</WikiPage>
	<Syntax>
		hmd Object
	</Syntax>
	<RawSyntax>
		hmd unit
	</RawSyntax>
	<Example>
		$Code$_nvgs = hmd player ; //NVGoggles$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		set3DENMissionAttributes
	</Keyword>
	<Description>
		Set scenario attributes.
	An attribute is identified by its property ( data when it's engine-drive attribute) value in config. For the list of all attributes with their properties, see Setting Attributes.
	!
	Attributes are available only within the Eden Editor workspace. You cannot access them in scenario preview or exported scenario!
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/set3DENMissionAttributes
	</WikiPage>
	<Syntax>
		set3DENMissionAttributes Array
	</Syntax>
	<RawSyntax>
		set3DENMissionAttributes [[ section, class1, value1 ],, [ section, classN, valueN ]]
	</RawSyntax>
	<Example>
		$Code$set3DENMissionAttributes [["Multiplayer","respawn",3],["Multiplayer","respawnDelay",10]];
	// Set respawn type to 3 and respawn delay to 10 seconds$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		isNull
	</Keyword>
	<Description>
		Checks whether the tested item is Null.
	Which null type the item has to be equal to depends on the type of game entity tested:
	Objects - objNull
	Controls - controlNull
	Displays - displayNull
	Groups - grpNull
	Locations - locationNull (since ARMA 2)
	Tasks - taskNull (since ARMA 2)
	Scripts - scriptNull (since Arma 3 1.29.127075)
	Configs - configNull (since Arma 3 1.53.133130)
	Note: A test via == does not work, because, for example, objNull is not equal to anything, not even to itself. Use isEqualTo.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isNull
	</WikiPage>
	<Syntax>
		isNull Object/Control/Display/Group
	</Syntax>
	<RawSyntax>
		isNull entity
	</RawSyntax>
	<Example>
		$Code$if ( isNull obj) then { hint "doesn't exist";};$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(December 9, 2015)
	isNull does not work with the TEAM_MEMBER type.
	Use this instead:
	$Code$_tmember isEqualTo teamMemberNull$/Code$
	</NextNote>
		(December 9, 2015)
	The note in the description does not apply to the CONFIG type, probably due to backwards compatibility.
	$Code$configNull == configNull
	- true
	$/Code$
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		attachObject
	</Keyword>
	<Description>
		Attaches a location to the specified object. To detach a location, attach it to objNull.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/attachObject
	</WikiPage>
	<Syntax>
		Location attachObject Object
	</Syntax>
	<RawSyntax>
		location attachObject object
	</RawSyntax>
	<Example>
		$Code$myLocation attachObject player ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		deg
	</Keyword>
	<Description>
		Convert a number from Radians to Degrees.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/deg
	</WikiPage>
	<Syntax>
		deg Number
	</Syntax>
	<RawSyntax>
		deg x
	</RawSyntax>
	<Example>
		$Code$_degrees= deg 1
	returns 57.295$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		ammoOnPylon
	</Keyword>
	<Description>
		Returns ammo count on given pylon.
	Returns false ( Bool ) on failure.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ammoOnPylon
	</WikiPage>
	<Syntax>
		Object ammoOnPylon String/Number
	</Syntax>
	<RawSyntax>
		vehicle ammoOnPylon pylon
	</RawSyntax>
	<Example>
		$Code$_ammoCount = ( vehicle player ) ammoOnPylon "pylon1";$/Code$
	</NextExample>
		$Code$hint str (( vehicle player ) ammoOnPylon "pylonCenter");$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(August 18, 2017)
	The pylon indices start at 1 and not at 0.
	</Note>
	<ReturnValue>
		Number/Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		flyInHeight
	</Keyword>
	<Description>
		Sets the flying altitude for aircraft relatively to the ground surface. Avoid too low altitudes, as helicopters and planes won't evade trees and obstacles on the ground. The default flying altitude is 100 meters.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/flyInHeight
	</WikiPage>
	<Syntax>
		Object flyInHeight Number
	</Syntax>
	<RawSyntax>
		aircraft flyInHeight altitude
	</RawSyntax>
	<Example>
		$Code$_helicopter flyInHeight 40$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		(August 4, 2006)
	Notes from before the conversion:
	From version 1.80+ - flyInHeight now affects not only helicopters, but also planes.
	</NextNote>
		(August 4, 2006)
	A planes flyInHeight, is restricted to a minimum of 20 meters.
	</NextNote>
		(December 15, 2008)
	A flyInHeight of 0 will keep the chopper pinned to the ground, even when the engines have been started.
	</NextNote>
		(00:53, 11 April 2009 (CEST))
	If a helo has no waypoints, it will assume a low hover without regard to this setting.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		vestMagazines
	</Keyword>
	<Description>
		Get array with all magazines from vest of the given unit.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/vestMagazines
	</WikiPage>
	<Syntax>
		vestMagazines Object
	</Syntax>
	<RawSyntax>
		vestMagazines unit
	</RawSyntax>
	<Example>
		$Code$vestMagazines player ;[
	"6.5mm 30Rnd STANAG Mag(30/30)[id/cr:4/0](2x)",
	"9mm 16Rnd Mag(16/16)[id/cr:7/0](2x)",
	"RGO Frag Grenade(1/1)[id/cr:10/0](2x)",
	"Smoke Grenade (White)(1/1)[id/cr:12/0](1x)",
	"Smoke Grenade (Green)(1/1)[id/cr:13/0](1x)",
	"Chemlight (Green)(1/1)[id/cr:14/0](2x)"
	]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		setMass
	</Keyword>
	<Description>
		Changes the mass of an object smoothly during the given time (in seconds). A time of zero (or using the alternative syntax) means an immediate change.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setMass
	</WikiPage>
	<Syntax>
		Object setMass Array
	</NextSyntax>
		Object setMass Number
	</Syntax>
	<RawSyntax>
		myObject setMass [mass, time]
	</NextRawSyntax>
		myObject setMass mass
	</RawSyntax>
	<Example>
		$Code$myObject setMass [10,0.5];$/Code$
	</NextExample>
		$Code$myObject setMass 10;$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		(20 Jun, 2014)
	(ArmA3 1.22) A quick reference:
	category
	setMass
	setCenterOfMass
	unit
	The larger the mass is, the easier a unit will physically fatigued
	N/A
	aircraft
	The larger the mass is, the more sensitive an aircraft will react to joystick, vice versa (Except when AFM is enabled).
	Aircraft slant due to center change accordingly, and the position of the camera view will be altered relatively at the same time. (3rd person view)
	vehicle
	The larger the mass is, the slower a vehicle drives (Ships will sink), vice versa. (Land vehicle performs like a bouncing ball while ships accelerated pretty speedy.)
	Vehicle slant due to center change accordingly.
	</NextNote>
		(March 26, 2015)
	If you intend to use setMass in conjunction with ropeCreate in MP i highly recommend to first ropeCreate then setMass (on clientside).
	RopeCreate in MP will set the mass of the attached object to the server value upon execution.
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		diag_captureSlowFrame
	</Keyword>
	<Description>
		Opens "capture frame" dialog if current frame exceeds set threshold in seconds. One can indicate to either capture duration of a specific profiling selection or the total duration of the frame. The selection names can be obtained by expanding the profiling tree. Clicking on a tree item will highlight the item on the graph and vice versa. The GUI also provides method of copying of the displayed data to clipboard. Some of the selections:
	Render
	- bgD3D
	Main Thread
	- total
	- memAl
	Visualize
	- visul
	Mjob
	- Mjob
	Note : Only available in specific builds. See Performance Profiling for details.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/diag_captureSlowFrame
	</WikiPage>
	<Syntax>
		diag_captureSlowFrame Array
	</Syntax>
	<RawSyntax>
		diag_captureSlowFrame [section, threshold]
	</RawSyntax>
	<Example>
		$Code$diag_captureSlowFrame ['total',0.003];$/Code$
	</NextExample>
		$Code$diag_captureSlowFrame ['memAl', 0.0001];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		uiNamespace
	</Keyword>
	<Description>
		Returns the global namespace attached to user interface.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/uiNamespace
	</WikiPage>
	<Syntax>
		uiNamespace
	</Syntax>
	<RawSyntax>
		uiNamespace
	</RawSyntax>
	<Example>
		$Code$uiNamespace setVariable ["LIB_interruptDisplay", _display];$/Code$
	</NextExample>
		$Code$uiNamespace setVariable ["myVar", 46];
	with uiNamespace do {
	hint str myVar; //46
	};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		variables in uiNamespace are not lost between mission changes, they are carried over. Also take note that the server can make use of uiNamespace.
	</NextNote>
		(29 September, 2014)
	^The same can be said with parsingNamespace.
	</Note>
	<ReturnValue>
		Namespace
	</ReturnValue>

</NextListItem>

	<Keyword>
		ppEffectAdjust
	</Keyword>
	<Description>
		Set post process effect parameters. NOTE: The two syntaxes differ in what format of the params they accept. The syntax with PP name expects colors to be packed into arrays within main array, while the syntax with PP handle can handle both flat and packed array. Therefore it is recommended to use the universal packed format, such as shown in the examples.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ppEffectAdjust
	</WikiPage>
	<Syntax>
		String ppEffectAdjust Array
	</NextSyntax>
		Number ppEffectAdjust Array
	</Syntax>
	<RawSyntax>
		effect ppEffectAdjust settings
	</NextRawSyntax>
		effect ppEffectAdjust settings
	</RawSyntax>
	<Example>
		$Code$"colorCorrections" ppEffectAdjust [1, 1, -0.01, [0, 0, 0, 0], [1.5, 1, 1.2, 0.6], [0.199, 0.587, 0.114, 0]];$/Code$
	</NextExample>
		$Code$// Black&White:
	_colorCorrectionsEffHandle ppEffectAdjust [1, 0.4, 0, [0, 0, 0, 0], [1, 1, 1, 0], [1, 1, 1, 0]];$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		forceWalk
	</Keyword>
	<Description>
		Forces unit to walk even if run or sprint is selected.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/forceWalk
	</WikiPage>
	<Syntax>
		Object forceWalk Boolean
	</Syntax>
	<RawSyntax>
		unit forceWalk value
	</RawSyntax>
	<Example>
		$Code$player forceWalk true ;$/Code$
	</Example>
	<Locality>
		local / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		nearTargets
	</Keyword>
	<Description>
		Returns a list of targets within the defined range. "Targets" are not restricted to enemy units.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/nearTargets
	</WikiPage>
	<Syntax>
		Object nearTargets Number
	</Syntax>
	<RawSyntax>
		unit nearTargets range
	</RawSyntax>
	<Example>
		$Code$player nearTargets 100;
	// could return something like this:
	//[[[2555.33,2535.33,1.32708],"SoldierEB",EAST,214222,EAST 1-1-A:1],[[2550.39,2482.5,1.32696],"SoldierWB",WEST,0,WEST 1-1-A:2]]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(Febuary 17, 2011)
	A subjective cost greater than 0 does not necessarily mean the target is an enemy unit. Any unit, that have yet to be identified by the unit, have a small positive cost in the range 0 to 1.
	</NextNote>
		(January 15, 2012)
	The quality/detail level of the info depends on the knowsAbout value of the sourceUnit about the targetUnit:
	For infantry:
	] 0, 1.5 [ - side unknown, some position offset, identified as SoldierWB
	[ 1.5, 1.6 [ - side identified, subjective cost set
	[ 1.6, 2 [ - type identified better (USMC_Soldier_Base)
	[ 2, 3.6 [ - type identified precisely (USMC_Soldier)
	[ 3.6, 4 ] - position identified precisely
	The values seems closely linked to the accuracy value of the given targetUnit class and its parents up in the config tree:
	0class CAManBase: Man
	1.6class SoldierWB: CAManBase
	2class USMC_Soldier_Base: SoldierWB
	3.9class USMC_Soldier: USMC_Soldier_Base
	For tanks:
	] 0, 0.03 [ - side unknown, some position offset, identified as LandVehicle
	[ 0.03, 0.13 [ - type identified better (Tank)
	[ 0.13, 0.3 [ - type identified better (M1A1)
	[ 0.3, 1.5 [ - side identified, subjective cost set
	[ 1.5, 3.6 [ - side identified precisely (CIV), subjective cost adjusted
	[ 3.6, 4 ] - position identified precisely
	The values seems closely linked to the accuracy value of the given targetUnit class and its parents up in the config tree:
	0class All
	class AllVehicles: All
	0.0005class Land: AllVehicles
	0.02class LandVehicle: Land
	0.12class Tank: LandVehicle
	0.25class M1A1: Tank
	</NextNote>
		(January 17, 2012)
	When an unit dies, it's nearTargets array gets emptied after some seconds.
	When an unit dies, its reference will get removed from other units nearTargets' arrays immediately.
	A target will be removed from the array after about 360 seconds without contact.
	</NextNote>
		(January 21, 2012)
	Position accuracy seems to be a radius in meters from the perceived position.
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctData
	</Keyword>
	<Description>
		Returns metadata (string) associated with a particular row of RscControlsTable.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctData
	</WikiPage>
	<Syntax>
		Control ctData Number
	</Syntax>
	<RawSyntax>
		ctrl ctData row
	</RawSyntax>
	<Example>
		$Code$ctData _control;$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		difficultyOption
	</Keyword>
	<Description>
		Checks specific difficulty settings of the current user. Difficulty flag names can be found in the CfgDifficultyPresets config class or in
	ArmA profile file under class DifficultyPresets/xxx/Options (xxx being Recruit, Regular or Veteran).
	This command replaces difficultyEnabled.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/difficultyOption
	</WikiPage>
	<Syntax>
		difficultyOption String
	</Syntax>
	<RawSyntax>
		difficultyOption optionName
	</RawSyntax>
	<Example>
		$Code$hint str ( difficultyOption "friendlyTags");$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(March 23, 2016)
	Arma 3 options:
	reducedDamage
	groupIndicators
	friendlyTags
	enemyTags
	detectedMines
	commands
	waypoints
	weaponInfo
	stanceIndicator
	staminaBar
	weaponCrosshair
	visionAid
	thirdPersonView
	cameraShake
	scoreTable
	deathMessages
	vonID
	mapContent
	autoReport
	multipleSaves
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		lbSetPictureRight
	</Keyword>
	<Description>
		Sets the second (right aligned) picture in the item with the given index of the listbox or combobox with id idc of the topmost user dialog. Name is the picture name. The picture is searched for in the mission directory, the dtaExt subdirectory of the campaign directory and the dtaExt directory and the data bank (or directory).
	In Arma 3 it might be necessary to set the color of the picture as well with lbSetPictureRightColor as default [0,0,0,0] color makes picture invisible.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lbSetPictureRight
	</WikiPage>
	<Syntax>
		lbSetPictureRight Array
	</NextSyntax>
		Control lbSetPictureRight Array
	</Syntax>
	<RawSyntax>
		lbSetPictureRight [idc, index, name]
	</NextRawSyntax>
		control lbSetPictureRight [index, name]
	</RawSyntax>
	<Example>
		$Code$lbSetPictureRight [101, 0, "iskoda"];$/Code$
	</NextExample>
		$Code$_control lbSetPictureRight [0, "iskoda"];$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
		More information on the LB command family can be found here
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		execVM
	</Keyword>
	<Description>
		Compiles and adds SQF Script to the scheduler queue and returns script handle. The script is first searched for in the mission folder, then in the campaign scripts folder and finally in the global scripts folder. The script does not execute immediately upon running execVM command, but with some delay. How much delay is unknown as it largely depends on how many other scripts there are in the queue and how busy is VM. The optional argument is passed to the script in private variable _this. In Arma 3 the script handle is also passed to the script in _thisScript variable.
	In order to understand execVM consider the following comparison:
	$Code$ private _handle = _args execVM "someFile.sqf";
	// is practically identical to
	private _handle = _args spawn compile preprocessFileLineNumbers "someFile.sqf";$/Code$
	So if you need multiple execution of the same file, you might want to store it in a function ( Functions Library ), otherwise, for a single execution, execVM is a good choice.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/execVM
	</WikiPage>
	<Syntax>
		Anything execVM String
	</NextSyntax>
		execVM String
	</Syntax>
	<RawSyntax>
		arguments execVM filename
	</NextRawSyntax>
		execVM filename
	</RawSyntax>
	<Example>
		$Code$_handle = execVM "test.sqf";$/Code$
	</NextExample>
		$Code$_handle = player execVM "test.sqf";
	waitUntil { scriptDone _handle};$/Code$
	</NextExample>
		$Code$// In Arma 3 this is also possible:
	_handle = execVM "123.sqf";
	waitUntil { isNull _handle};$/Code$
	</NextExample>
		$Code$[4] execVM "showDamage.sqf";
	// showDamage.sqf
	_damage = _this select 0;
	hint format ["%1", _damage];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(November 23, 2010)
	Passing variables to the script file
	To pass multiple variables to the script file, use an array e.g:
	null = [myunit,1234] execVM "test.sqf";
	Now within test.sqf to access the elements, use the following:
	_myunit = _this select 0;
	_myvar = _this select 1;
	</Note>
	<ReturnValue>
		Script_Handle - Script_Handle
	</ReturnValue>

</NextListItem>

	<Keyword>
		allDead
	</Keyword>
	<Description>
		Return a list of all dead units including agents and destroyed vehicles. Dead units may be in vehicles.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/allDead
	</WikiPage>
	<Syntax>
		allDead
	</Syntax>
	<RawSyntax>
		allDead
	</RawSyntax>
	<Example>
		$Code${ deleteVehicle _x } forEach allDead ;$/Code$
	</NextExample>
		$Code$// allAlive:
	_all = allUnits + vehicles ;
	{
	_all pushBack agent _x;
	} forEach ( agents - [ teamMemberNull ]);
	allAlive = _all - allDead ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(April 6, 2017)
	This also returns bodies hidden with hideBody until they are deleted. Tested in A2OA 1.63.131129
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		setUnitRecoilCoefficient
	</Keyword>
	<Description>
		Proportionaly increase/decrease unit's recoil. Drives muzzle up with every shot when supplied positive number and down when negative. 0 cancels recoil.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setUnitRecoilCoefficient
	</WikiPage>
	<Syntax>
		Object setUnitRecoilCoefficient Number
	</Syntax>
	<RawSyntax>
		unitName setUnitRecoilCoefficient coefficient
	</RawSyntax>
	<Example>
		$Code$player setUnitRecoilCoefficient 10$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(March 28, 2015)
	Doesnt seem to work on AI or remote controlled units. Setting the value too high, positive or negative produces some interesting recoil animations.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		detectedMines
	</Keyword>
	<Description>
		Returns an array of all mines detected by a given side
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/detectedMines
	</WikiPage>
	<Syntax>
		detectedMines Side
	</Syntax>
	<RawSyntax>
		detectedMines side
	</RawSyntax>
	<Example>
		$Code$detectedMines west ;$/Code$
	</NextExample>
		$Code$detectedMines side player ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlSetModelScale
	</Keyword>
	<Description>
		Sets 3D control model scale
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlSetModelScale
	</WikiPage>
	<Syntax>
		Control ctrlSetModelScale Number
	</Syntax>
	<RawSyntax>
		control ctrlSetModelScale scale
	</RawSyntax>
	<Example>
		$Code$_ctrl3D ctrlSetModelScale 1.5;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		!=
	</Keyword>
	<Description>
		Returns whether one value is not equal to another. Both values have need be of the same type.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/a_!%3D_b
	</WikiPage>
	<Syntax>
		Anything != Anything
	</Syntax>
	<RawSyntax>
		</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		unassignItem
	</Keyword>
	<Description>
		Unassigns existing item and tries to put it into inventory. If there is no space in inventory the item simply disappears.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/unassignItem
	</WikiPage>
	<Syntax>
		Object unassignItem String
	</Syntax>
	<RawSyntax>
		unit unassignItem item
	</RawSyntax>
	<Example>
		$Code$bluforUnit unassignItem "NVGoggles";
	bluforUnit removeItem "NVGoggles";
	opforUnit unassignItem "NVGoggles_OPFOR";
	opforUnit removeItem "NVGoggles_OPFOR";
	independentUnit unassignItem "NVGoggles_INDEP";
	independentUnit removeItem "NVGoggles_INDEP";$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		tvAdd
	</Keyword>
	<Description>
		Adds an item with given text to Tree View control. The position on Tree View where to add the item and the actual path to this item once added are different. If item is added to existing item, then parent item path is used. If no parent exists, empty array [] is used. See Tree View Path for more information.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/tvAdd
	</WikiPage>
	<Syntax>
		tvAdd Array
	</NextSyntax>
		Control tvAdd Array
	</Syntax>
	<RawSyntax>
		tvAdd [idc, pathParent, text]
	</NextRawSyntax>
		control tvAdd [pathParent, text]
	</RawSyntax>
	<Example>
		$Code$_index = _ctrl tvAdd [[], "Parent Item"];$/Code$
	</NextExample>
		$Code$_index = tvAdd [101, [0], "First item"];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(Sep 11 2014)
	(A3 1.28)tv command family overview
	$Code$
	//tv command family available for CT_TREE (type 12)
	private ["_count","_current","_data","_text","_value","_pic"];
	_CT_TREE tvAdd [ [],"Parent_A"];
	_CT_TREE tvAdd [ [0],"Child_A"];
	_CT_TREE tvAdd [ [0,0],"Grandchild_A"];
	_CT_TREE tvAdd [ [],"Parent_B"];
	_CT_TREE tvAdd [ [1],"Child_B"];
	_count = _CT_TREE tvCount []; //return 2
	_CT_TREE tvSetCurSel [0,0,0]; //select grandchild_A
	_current = tvCurSel _CT_TREE; //return [0,0,0]
	_CT_TREE tvSetData [_current,"I'm grandchild_A"];
	_data = _CT_TREE tvData _current; // "I'm grandchild_A"
	_text = _CT_TREE tvText _current; //"Grandchild_A"
	_CT_TREE tvSetValue [_current,14];
	_value = _CT_TREE tvValue _current; // 14
	_CT_TREE tvSetPicture [_current, getText ( configFile "CfgWeapons" "optic_NVS" "picture")];
	_pic = _CT_TREE tvPicture _current;
	_CT_TREE tvExpand [1];
	_CT_TREE tvSort [[], false ];
	_CT_TREE tvSortByValue [[], false ];
	_CT_TREE tvDelete [0,0]; //remove child_b
	tvClear 12;
	_CT_TREE tvCollapse [];
	$/Code$
	</Note>
	<ReturnValue>
		Number - Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		secondaryWeaponMagazine
	</Keyword>
	<Description>
		Returns either single element array, containing class name of currently loaded in the secondary weapon magazine, or an empty array if unit has no secondary weapon or secondary weapon is not loaded. This command is used for infantry weapons only.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/secondaryWeaponMagazine
	</WikiPage>
	<Syntax>
		secondaryWeaponMagazine Object
	</Syntax>
	<RawSyntax>
		secondaryWeaponMagazine unit
	</RawSyntax>
	<Example>
		$Code$hint secondaryWeaponMagazine player ; //["NLAW_F"]$/Code$
	</NextExample>
		$Code$_array = secondaryWeaponMagazine player ;
	if ( count _array 0) then {
	hint ("Secondary weapon is loaded with " + (_array select 0) + "!");
	} else {
	if ( secondaryWeapon player != "") then {
	hint "Secondary weapon is not loaded!";
	} else {
	hint "Player doesn't have a secondary weapon!";
	};
	};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		vectorUpVisual
	</Keyword>
	<Description>
		Return object's up vector in world Position coordinates ( [x, y, z] ) in render time scope.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/vectorUpVisual
	</WikiPage>
	<Syntax>
		vectorUpVisual Object
	</Syntax>
	<RawSyntax>
		vectorUpVisual objectName
	</RawSyntax>
	<Example>
		$Code$_vUp = vectorUpVisual vehicle player ;$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		lockTurret
	</Keyword>
	<Description>
		Lock the gunner position of the vehicle turret. This command must be executed where vehicle is local.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lockTurret
	</WikiPage>
	<Syntax>
		Object lockTurret Array
	</Syntax>
	<RawSyntax>
		vehicle lockTurret [turret path,lock]
	</RawSyntax>
	<Example>
		$Code$vehicleName lockTurret [[0,0], true ];$/Code$
	</NextExample>
		$Code$vehicle player lockTurret [[0], true ];$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		curatorMouseOver
	</Keyword>
	<Description>
		Returns Curator Editable Object under curator mouse pointer in form of array:
	[] - when not in curator mode
	[""] - if no curator editable object under the pointer in curator mode
	[ typeName, Curator Editable Object ] - if there is curator editable object under the pointer in curator mode
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/curatorMouseOver
	</WikiPage>
	<Syntax>
		curatorMouseOver
	</Syntax>
	<RawSyntax>
		curatorMouseOver
	</RawSyntax>
	<Example>
		$Code$_mouseOver = curatorMouseOver ;
	// possible return value:[
	"OBJECT",
	3594ab00# 164218: apc_wheeled_01_cannon_f.p3d
	]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		isUAVConnectable
	</Keyword>
	<Description>
		Returns true if UAV is connectable by AV terminal(s).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isUAVConnectable
	</WikiPage>
	<Syntax>
		Object isUAVConnectable Array
	</Syntax>
	<RawSyntax>
		object isUAVConnectable [uav, checkAllItems]
	</RawSyntax>
	<Example>
		$Code$connectable = unit isUAVConnectable [uav,true];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		getElevationOffset
	</Keyword>
	<Description>
		Returns the map elevation offset from [map]/config.cpp.
	Returns 0 if there's no elevationOffset defined in the config of the current world.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getElevationOffset
	</WikiPage>
	<Syntax>
		getElevationOffset
	</Syntax>
	<RawSyntax>
		getElevationOffset
	</RawSyntax>
	<Example>
		$Code$_offset = getElevationOffset ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		openYoutubeVideo
	</Keyword>
	<Description>
		Opens Steam overlay with given YT video. Video URL is the end part of the YT URL, starting with watch?v=.... If the user has Steam overlay disabled, the command will display appropriate message to the user and return false.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/openYoutubeVideo
	</WikiPage>
	<Syntax>
		openYoutubeVideo String
	</Syntax>
	<RawSyntax>
		openYoutubeVideo youTubeUrl
	</RawSyntax>
	<Example>
		$Code$//Open http://www.youtube.com/watch?v=UBIAbm7Rt78
	_isOpened = openYoutubeVideo "watch?v=UBIAbm7Rt78";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		inRangeOfArtillery
	</Keyword>
	<Description>
		Returns true if all given units are able to fire at given position with given magazineType.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/inRangeOfArtillery
	</WikiPage>
	<Syntax>
		Position inRangeOfArtillery Array
	</Syntax>
	<RawSyntax>
		pos inRangeOfArtillery [[unit], magazineType]
	</RawSyntax>
	<Example>
		$Code$_isInRange = getMarkerPos "myTarget" inRangeOfArtillery [[myArty], "32Rnd_155mm_Mo_shells"]$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(July 10, 2015)
	Using an empty artillery vehicle will return false.
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		set3DENIconsVisible
	</Keyword>
	<Description>
		Toggle visibility of Eden Editor icons.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/set3DENIconsVisible
	</WikiPage>
	<Syntax>
		set3DENIconsVisible Array
	</Syntax>
	<RawSyntax>
		set3DENIconsVisible [showMap, showScene]
	</RawSyntax>
	<Example>
		$Code$set3DENIconsVisible [ false, false ];
	// Hide all icons$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		removeMenuItem
	</Keyword>
	<Description>
		Removes a previously added menu item.
	i
	Some Old Editor Command
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/removeMenuItem
	</WikiPage>
	<Syntax>
		Control removeMenuItem Number
	</Syntax>
	<RawSyntax>
		map removeMenuItem index
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		debriefingText
	</Keyword>
	<Description>
		Returns debriefing text.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/debriefingText
	</WikiPage>
	<Syntax>
		debriefingText String
	</Syntax>
	<RawSyntax>
		debriefingText end
	</RawSyntax>
	<Example>
		$Code$_deathText = debriefingText "endDeath";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		gearSlotAmmoCount
	</Keyword>
	<Description>
		Returns ammo count of assigned magazine.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/gearSlotAmmoCount
	</WikiPage>
	<Syntax>
		gearSlotAmmoCount Control
	</Syntax>
	<RawSyntax>
		gearSlotAmmoCount control
	</RawSyntax>
	<Example>
		$Code$ammo = gearSlotAmmoCount _control;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		preloadCamera
	</Keyword>
	<Description>
		Preload all textures and models around given Position to avoid visual artifacts after camera is moved.
	Should be used before any abrupt camera change/cut.
	Returns true once all data is ready.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/preloadCamera
	</WikiPage>
	<Syntax>
		preloadCamera Array
	</Syntax>
	<RawSyntax>
		preloadCamera position
	</RawSyntax>
	<Example>
		$Code$waitUntil { preloadCamera markerPos "cam_location_2"};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		isInstructorFigureEnabled
	</Keyword>
	<Description>
		Returns the status of INSTRUCTOR FIGURE setting in UI (OPTIONS GAME GENERAL INSTRUCTOR FIGURE).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isInstructorFigureEnabled
	</WikiPage>
	<Syntax>
		isInstructorFigureEnabled
	</Syntax>
	<RawSyntax>
		isInstructorFigureEnabled
	</RawSyntax>
	<Example>
		$Code$hint str isInstructorFigureEnabled ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		missionName
	</Keyword>
	<Description>
		Return currently loaded mission file (path to mission.pbo, relative to game exe).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/missionName
	</WikiPage>
	<Syntax>
		missionName
	</Syntax>
	<RawSyntax>
		missionName
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(2nd August, 2010)
	Only works in SP and on the MP Host/DS. It returns the mission pboprefix if available, otherwise the pboname. For clients it returns '__cur_mp'.
	</NextNote>
		(September 25, 2014)
	In OFP (up to v1.96) it returns the mission filename. In CWA (since v1.99), it returns the briefing name instead when in multiplayer. The string displayed is that set in the Intel section of the mission editor.
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		camPrepareRelPos
	</Keyword>
	<Description>
		Prepares the camera position relative to the current position of the currect target (see camPrepareTarget ).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/camPrepareRelPos
	</WikiPage>
	<Syntax>
		Object camPrepareRelPos Array
	</Syntax>
	<RawSyntax>
		camera camPrepareRelPos position
	</RawSyntax>
	<Example>
		$Code$_camera camPrepareRelPos [10,5,-2]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		findEditorObject
	</Keyword>
	<Description>
		Return object that matches the provided reference.
	i
	Some Old Editor Command
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/findEditorObject
	</WikiPage>
	<Syntax>
		Control findEditorObject Any_Value
	</Syntax>
	<RawSyntax>
		map findEditorObject value
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlScale
	</Keyword>
	<Description>
		Returns the current scale of the control.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlScale
	</WikiPage>
	<Syntax>
		ctrlScale Control
	</Syntax>
	<RawSyntax>
		ctrlScale controlName
	</RawSyntax>
	<Example>
		$Code$_scale = ctrlScale _control$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		visibleCompass
	</Keyword>
	<Description>
		Checks if the player has compass opened and visible
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/visibleCompass
	</WikiPage>
	<Syntax>
		visibleCompass
	</Syntax>
	<RawSyntax>
		visibleCompass
	</RawSyntax>
	<Example>
		$Code$if ( visibleCompass ) then { hint "Compass is visible"};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		enableRopeAttach
	</Keyword>
	<Description>
		Enable/disable ability to attach or be attached to ropes for given vehicle
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/enableRopeAttach
	</WikiPage>
	<Syntax>
		Object enableRopeAttach Boolean
	</Syntax>
	<RawSyntax>
		vehicle enableRopeAttach enable
	</RawSyntax>
	<Example>
		$Code$( vehicle player ) enableRopeAttach false ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(05 April, 2014)
	Attachable nearby vehicles may not update on Sling Load Assistant until re-opened.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		removeWeaponTurret
	</Keyword>
	<Description>
		Removes weapon from the turret. Use turret path [-1] for driver's turret.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/removeWeaponTurret
	</WikiPage>
	<Syntax>
		Object removeWeaponTurret Array
	</Syntax>
	<RawSyntax>
		vehicle removeWeaponTurret [weaponName, turretPath]
	</RawSyntax>
	<Example>
		$Code$_tank removeWeaponTurret ["LMG_M200",[0,0]];$/Code$
	</NextExample>
		$Code$vehicle player removeWeaponTurret ["SportCarHorn",[-1]];$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		sideEmpty
	</Keyword>
	<Description>
		Returns empty side, for example static buildings in Eden Editor.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/sideEmpty
	</WikiPage>
	<Syntax>
		sideEmpty
	</Syntax>
	<RawSyntax>
		sideEmpty
	</RawSyntax>
	<Example>
		$Code$_sideEmpty = sideEmpty ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Side
	</ReturnValue>

</NextListItem>

	<Keyword>
		addWaypoint
	</Keyword>
	<Description>
		Adds (or inserts when index is given) a new waypoint to a group.
	The waypoint is placed randomly within a circle with the given center and radius.
	The function returns a waypoint with format [group, index].
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/addWaypoint
	</WikiPage>
	<Syntax>
		Group addWaypoint Array
	</Syntax>
	<RawSyntax>
		groupName addWaypoint [center, radius, index, name]
	</RawSyntax>
	<Example>
		$Code$_wp =_grp addWaypoint [ position player, 0];$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
		(November 26, 2009)
	In game versions prior to Arma 3 v1.22:
	If you add a waypoint to your group and then want them to start moving to that waypoint, make sure to call setWaypointType "MOVE" on your waypoint.
	</NextNote>
		(18:23, 28 April 2011 (CEST))
	In VBS2 1.30, the randomization of addWaypoint doesn't seem to work correctly all of the time.
	The alternative syntax of addWaypoint with a specified index doesn't seem to work correctly.
	</NextNote>
		(June 21, 2014)
	if you want to create a waypoint of type "MOVE" and set it as actual waypoint, you can use the move command that does everything for you with only one line of code ! Be aware that move command intercepts multiple waypoints and it will not line up in waypoints queue. In other word it is a quick solution if you want your group to get only one waypoint, but for several waypoints you'll have to use addwaypoint and all setwaypointXXXXXX commands around. see move command.
	</NextNote>
		(August 4, 2014)
	The waypoint may not be created exactly at the center position even if radius is zero. The position will be moved away if there are e.g. rocks at the center position or if it is placed at the edge of water on a shore.
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		leaderboardGetRows
	</Keyword>
	<Description>
		Returns an array with values for the given leaderboard, the array is in format: [[player1Name, score, rank], [player2Name, score, rank], [player3Name, score, rank]... ]; This can be called after the one of the row request function has been called and successfully finished!
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/leaderboardGetRows
	</WikiPage>
	<Syntax>
		leaderboardGetRows String
	</Syntax>
	<RawSyntax>
		leaderboardGetRows boardName
	</RawSyntax>
	<Example>
		$Code$leaderboardGetRows "TT01"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		visibleMap
	</Keyword>
	<Description>
		Return true if the main map is shown (active).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/visibleMap
	</WikiPage>
	<Syntax>
		visibleMap
	</Syntax>
	<RawSyntax>
		visibleMap
	</RawSyntax>
	<Example>
		$Code$if (visibleMap) then {hint "You're showing the map !"}$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(13 November 2017)
	visibleMap does not work in all cases where a map might be part of a dialog like in a uav terminal or in a artillery computer dialog. Some of these cases can be covered with an addMissionEventHandler of type "Map". Just use the two magic variables 'mapIsOpened' and 'mapIsForced'. Skeleton might look something like
	// update marker as long as map is open (works for uav stations as well)
	J_myGPSEH = addMissionEventHandler ["Map", {
	params ["_mapIsOpened", "_mapIsForced"];
	if (_mapIsOpened) then {
	systemChat "GPS aktiv";
	J_var_GPSOn = true;
	// no sheduled environment - create one
	/* Triggered when map is opened or closed either by user action or script command openMap. */
	[] spawn {
	waitUntil{
	... // do something as long as map is open;
	not J_var_GPSOn
	};
	};
	} else {
	J_var_GPSOn = false;
	systemChat "GPS inaktiv";
	};
	}];
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		allowFileOperations
	</Keyword>
	<Description>
		Allow/dissallow file ops (load/save etc).
	i
	Some Old Editor Command
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/allowFileOperations
	</WikiPage>
	<Syntax>
		Control allowFileOperations Boolean
	</Syntax>
	<RawSyntax>
		map allowFileOperations bool
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		assignToAirport
	</Keyword>
	<Description>
		Not correctly implemented yet, currently it does the same as landAt. As the implementation may get fixed sometime, please do not use this command until then.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/assignToAirport
	</WikiPage>
	<Syntax>
		Object assignToAirport Number
	</NextSyntax>
		Object assignToAirport Object
	</Syntax>
	<RawSyntax>
		plane assignToAirport id
	</NextRawSyntax>
		plane assignToAirport target
	</RawSyntax>
	<Example>
		$Code$plane1 assignToAirport 0$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setSimpleTaskAlwaysVisible
	</Keyword>
	<Description>
		Makes the given task allways visible or not.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setSimpleTaskAlwaysVisible
	</WikiPage>
	<Syntax>
		Task setSimpleTaskAlwaysVisible Boolean
	</Syntax>
	<RawSyntax>
		taskID setSimpleTaskAlwaysVisible state
	</RawSyntax>
	<Example>
		$Code$getWarka setSimpleTaskAlwaysVisible true ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		enginesRpmRTD
	</Keyword>
	<Description>
		Returns all engines RPM
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/enginesRpmRTD
	</WikiPage>
	<Syntax>
		enginesRpmRTD Object
	</Syntax>
	<RawSyntax>
		enginesRpmRTD RTD_helicopter
	</RawSyntax>
	<Example>
		$Code$_UH80_E1 = ( enginesRpmRTD _UH80) select 0;//engine 1 RPM
	_UH80_E2 = ( enginesRpmRTD _UH80) select 1;//engine 2 RPM$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		isRemoteExecutedJIP
	</Keyword>
	<Description>
		Returns true if the code context is being remote executed from the JIP queue by remoteExec or remoteExecCall (when JIP param was set). It is a subset of isRemoteExecuted :
	Normal remote execution:
	isRemoteExecuted - true
	isRemoteExecutedJIP - false
	Remote execution from JIP queue:
	isRemoteExecuted - true
	isRemoteExecutedJIP - true
	In SP always returns false.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isRemoteExecutedJIP
	</WikiPage>
	<Syntax>
		isRemoteExecutedJIP
	</Syntax>
	<RawSyntax>
		isRemoteExecutedJIP
	</RawSyntax>
	<Example>
		$Code$_remoteExecutedJIP = isRemoteExecutedJIP ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		createSimpleTask
	</Keyword>
	<Description>
		Creates a new Task. The task effect is local, it will only exist on PC it was added.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/createSimpleTask
	</WikiPage>
	<Syntax>
		Object createSimpleTask Array
	</Syntax>
	<RawSyntax>
		person createSimpleTask [name, parentTask ]
	</RawSyntax>
	<Example>
		$Code$_currentTask = player createSimpleTask ["NewTask"];$/Code$
	</NextExample>
		$Code$_childTask = player createSimpleTask ["ChildTask", _currentTask];$/Code$
	</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
		(July 02, 2011)
	Creating child will position the new task just under the parent task.
	Creating another "normal" (parent) task will create a new line above the others. Think of it if you want ordered objectives.
	Succeeding parent task will automatically succeed childs, whatever their taskState was set to. (I.E. If a task is set as a child to another, it will be completed when its parent is complete.. no matter if the child task really was or not).
	This command has to be executed again for it to be applied for JIP players - no server sync
	Full step by step code from beginning to end:
	Step 1: create a new simpleTask
	$Code$
	A_SIMPLE_TASK = player createSimpleTask [( localize "STR_aSimpleTask")];
	$/Code$
	You may create a task at any given point in time. You just need to be aware of the fact, that you've created the task for a single unit (the player). So if you make use of teamSwitch, respawn or similiar, you need to think about how to manage this, so all of these units will have up to date tasks assigned to them.
	Second, it's a good practice to use a stringtable, even if you do not plan (yet) to offer translations.
	Step 2: task destination
	$Code$
	A_SIMPLE_TASK setSimpleTaskDestination _destination;
	$/Code$
	variable/pointer-to-your-task setSimpleTaskDestination some-position. That's it.
	Step 3: task description
	$Code$
	A_SIMPLE_TASK setSimpleTaskDescription [
	( localize "STR_aSimpleTaskLongText"),
	( localize "STR_aSimpleTask"),
	( localize "STR_aSimpleTaskWaypointLabel")
	];
	$/Code$
	Again, no magic involved here. You take your task, the command setSimpleTaskDescription an pass an array with three strings in it. The first string is the long description text, the second is the name/title of the task and the last one will show up on-screen on the waypoint in cadet mode.
	Step 4: set and update task states
	$Code$
	A_SIMPLE_TASK setTaskState "CREATED";
	$/Code$
	And that's it. Here a minimal working example:
	$Code$
	A_SIMPLE_TASK = player createSimpleTask ["simple task title"];
	A_SIMPLE_TASK setSimpleTaskDestination ( position player );
	A_SIMPLE_TASK setSimpleTaskDescription [
	"simple task long description",
	"simple task title",
	"simple task waypoint label"
	];
	A_SIMPLE_TASK setTaskState "CREATED";
	$/Code$
	And then later in the mission:
	$Code$
	A_SIMPLE_TASK setTaskState "SUCCEEDED";
	$/Code$
	If you want to keep the player in the loop about the status of tasks, you may always do this:
	$Code$
	[ objNull, objNull, A_SIMPLE_TASK, "SUCCEEDED"] execVM "CA\Modules\MP\data\scriptCommands\taskHint.sqf";
	$/Code$
	</Note>
	<ReturnValue>
		Task
	</ReturnValue>

</NextListItem>

	<Keyword>
		getDirVisual
	</Keyword>
	<Description>
		Returns object's heading in the range from 0 to 360 in render time scope.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getDirVisual
	</WikiPage>
	<Syntax>
		getDirVisual Object
	</Syntax>
	<RawSyntax>
		getDirVisual object
	</RawSyntax>
	<Example>
		$Code$_dir = getDirVisual player ;$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		joinString
	</Keyword>
	<Description>
		Joins array into String with provided separator. Array can be of mixed types, all elements will be converted to String prior to joining, but the fastest operation is on the array of Strings.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/joinString
	</WikiPage>
	<Syntax>
		Array joinString String
	</Syntax>
	<RawSyntax>
		array joinString separator
	</RawSyntax>
	<Example>
		$Code$_str = "- This, is a sample string." splitString "-,. "; // ["This","is","a","sample","string"]
	_str joinString " "; // "This is a sample string"$/Code$
	</NextExample>
		$Code$["This","is","sparta"] joinString " ~ "; // "This ~ is ~ sparta"$/Code$
	</NextExample>
		$Code$["1",2, text "3"] joinString ""; // "123"$/Code$
	</NextExample>
		$Code$["test","test"] joinString toString [12345] splitString toString [12345]; // ["test","test"]$/Code$
	</NextExample>
		$Code$"Japa is the best!" splitString "" joinString " "; // "J a p a i s t h e b e s t !"$/Code$
	</NextExample>
		$Code$// Remove all \r\n from file:
	loadFile "somefile.txt" splitString toString [13,10] joinString " "$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		setLightDayLight
	</Keyword>
	<Description>
		Sets if light can be used during the day.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setLightDayLight
	</WikiPage>
	<Syntax>
		Object setLightDayLight Boolean
	</Syntax>
	<RawSyntax>
		light setLightDayLight bool
	</RawSyntax>
	<Example>
		$Code$myLight setLightDayLight true;$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		vectorDirVisual
	</Keyword>
	<Description>
		Return object's normalized direction vector in world space ( [x,y,z] ) in render time scope.
	A unit facing North would return [0,1,0]
	A unit facing East would return [1,0,0]
	A unit facing South would return [0,-1,0]
	A unit facing West would return [-1,0,0]
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/vectorDirVisual
	</WikiPage>
	<Syntax>
		vectorDirVisual Object
	</Syntax>
	<RawSyntax>
		vectorDirVisual objectName
	</RawSyntax>
	<Example>
		$Code$_dirVector = vectorDirVisual _unit;$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		setAirportSide
	</Keyword>
	<Description>
		Set owning side of the airport. ID is the number to identify which airport on the island you want to check.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setAirportSide
	</WikiPage>
	<Syntax>
		Number setAirportSide Side
	</NextSyntax>
		Object setAirportSide Side
	</Syntax>
	<RawSyntax>
		id setAirportSide side
	</NextRawSyntax>
		target setAirportSide side
	</RawSyntax>
	<Example>
		$Code$0 setAirportSide east$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		isPlayer
	</Keyword>
	<Description>
		Checks if given person is player. Returns true for headless clients as well.
	In some cases, the identity of certain player units might fail to propagate to other clients and the server, which causes isPlayer and getPlayerUID to incorrectly return false and "", respectively, where the affected units are not local. [1] Therefore, beware of false negatives.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isPlayer
	</WikiPage>
	<Syntax>
		isPlayer Object
	</Syntax>
	<RawSyntax>
		isPlayer person
	</RawSyntax>
	<Example>
		$Code$if ( isPlayer _Soldier1) then {
	_Soldier1 setDamage 1;
	};$/Code$
	</NextExample>
		$Code$_playerCount = { isPlayer _x} count playableUnits ;$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(1 August, 2006)
	This is not the same as testing object == player, because in MP it tests for any player, not only for the local one. If object is a vehicle, the test is done for the vehicle commander.
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		linearConversion
	</Keyword>
	<Description>
		Converts given value from given "from" range to wanted "to" range. If clipping is set to true, the resulting value is guaranteed to be within "to" range no matter what. Say given range is 0 to 1 and wanted range is 0 to 100 (percent calculation). Given value 0.55 then will be linearConversion [0,1,0.55,0,100]; //55 but if given value is 1.1 linearConversion [0,1,1.1,0,100, false ]; //110 or if clipping is true linearConversion [0,1,1.1,0,100, true ]; //100
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/linearConversion
	</WikiPage>
	<Syntax>
		linearConversion Array
	</Syntax>
	<RawSyntax>
		linearConversion [minFrom, maxFrom, value, minTo, maxTo, clip]
	</RawSyntax>
	<Example>
		$Code$linearConversion [4, 8, 5, 0, 1, false ];$/Code$
	</NextExample>
		$Code$// Calculate days from 1/1/1970:
	fnc_daysFromEpoc =
	{
	private _year = param [0];
	private _days = 0;
	for "_i" from 1970 to _year - 1 do
	{
	_days = _days + round linearConversion [0, 1, dateToNumber [_i, 12, 31, 23, 59], 0, 365, false ];
	};
	_days + linearConversion [0, 1, dateToNumber _this, 0, 365, false ];
	};
	hint str ( date call fnc_daysFromEpoc);$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(Mar 29, 2014)
	(A3 0.50) It is recommended to use linearConversion instead of BIS_fnc_linearConversion :
	$Code$ linearConversion [0,100,50,0,50, true ]; //same as [[0,100],50,[0,50]] call BIS_fnc_linearConversion $/Code$
	As for clamp, true will disable new value out of its range while false won't:
	$Code$ linearConversion [0,100,150,0,50, true ]; //return 50
	linearConversion [0,100,150,0,50, false ]; //return 75
	$/Code$
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		setLightUseFlare
	</Keyword>
	<Description>
		Sets if light has flare.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setLightUseFlare
	</WikiPage>
	<Syntax>
		Object setLightUseFlare Boolean
	</Syntax>
	<RawSyntax>
		light setLightUseFlare bool
	</RawSyntax>
	<Example>
		$Code$myLight setLightUseFlare true ;$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
		(Mar 25, 2014)
	1. In ArmA3 ver 1.14 flare color can be changed via setLightColor.
	2. Flare won't have visual presentation in daytime.
	3. setLightUseFlare needs to be used together with setLightFlareSize and setLightFlareMaxDistance so that a flare can be seen.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		lineBreak
	</Keyword>
	<Description>
		Creates a structured text containing a line break.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lineBreak
	</WikiPage>
	<Syntax>
		lineBreak
	</Syntax>
	<RawSyntax>
		lineBreak
	</RawSyntax>
	<Example>
		$Code$_txt = composeText ["First line", lineBreak, "Second line"];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Structured_Text
	</ReturnValue>

</NextListItem>

	<Keyword>
		addUniform
	</Keyword>
	<Description>
		Create a new uniform and try to link it into uniform slot (given uniform has to be supported by allowedUniforms list of target soldier). To check if uniform is allowed use isUniformAllowed and to force add incompatible uniform use forceAddUniform
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/addUniform
	</WikiPage>
	<Syntax>
		Object addUniform String
	</Syntax>
	<RawSyntax>
		unit addUniform type
	</RawSyntax>
	<Example>
		$Code$_unit addUniform "U_B_CombatUniform_mcam";$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlSetFade
	</Keyword>
	<Description>
		Sets wanted transparency for control animation. Requires ctrlCommit to commit changes.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlSetFade
	</WikiPage>
	<Syntax>
		Control ctrlSetFade Number
	</Syntax>
	<RawSyntax>
		controlName ctrlSetFade fade
	</RawSyntax>
	<Example>
		$Code$_control ctrlSetFade 1;
	_control ctrlCommit 5;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(March 10, 2015)
	This command sets the amount of fade. For example:
	$Code$
	_ctrl ctrlSetFade 1; // hides the control
	_ctrl ctrlSetFade 0.5; // control is 50% visible
	_ctrl ctrlSetFade 0; // control is fully visible
	$/Code$
	</NextNote>
		(August 28, 2017)
	The resulting fade speed seems like is not exactly what ctrlCommit commands it to be, as is dependant on your current framerate. Example:
	$Code$_ctrl ctrlSetFade 0.5;
	_ctrl ctrlCommit 1;
	$/Code$
	Will actually result in:
	$Code$ [60 FPS and higher] = ~1.0 seconds
	[30 FPS and around] = ~1.2 seconds
	[10 FPS and anything lower] = ~5-10 seconds
	$/Code$
	This phenomenon probably occurs because of engine time simulation disruption caused by performance damage.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		tvCount
	</Keyword>
	<Description>
		Returns childrens count of item on given path. IDC means id of parent Tree View.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/tvCount
	</WikiPage>
	<Syntax>
		tvCount Array
	</NextSyntax>
		Control tvCount Array
	</Syntax>
	<RawSyntax>
		tvCount [idc, [path]]
	</NextRawSyntax>
		_ctrl tvCount [path]
	</RawSyntax>
	<Example>
		$Code$tvCount [101, [0]];$/Code$
	</NextExample>
		$Code$_ctrl tvCount [1,0];$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
		(Sep 11 2014)
	(A3 1.28)tv command family overview
	$Code$
	//tv command family available for CT_TREE (type 12)
	private ["_count","_current","_data","_text","_value","_pic"];
	_CT_TREE tvAdd [ [],"Parent_A"];
	_CT_TREE tvAdd [ [0],"Child_A"];
	_CT_TREE tvAdd [ [0,0],"Grandchild_A"];
	_CT_TREE tvAdd [ [],"Parent_B"];
	_CT_TREE tvAdd [ [1],"Child_B"];
	_count = _CT_TREE tvCount []; //return 2
	_CT_TREE tvSetCurSel [0,0,0]; //select grandchild_A
	_current = tvCurSel _CT_TREE; //return [0,0,0]
	_CT_TREE tvSetData [_current,"I'm grandchild_A"];
	_data = _CT_TREE tvData _current; // "I'm grandchild_A"
	_text = _CT_TREE tvText _current; //"Grandchild_A"
	_CT_TREE tvSetValue [_current,14];
	_value = _CT_TREE tvValue _current; // 14
	_CT_TREE tvSetPicture [_current, getText ( configFile "CfgWeapons" "optic_NVS" "picture")];
	_pic = _CT_TREE tvPicture _current;
	_CT_TREE tvExpand [1];
	_CT_TREE tvSort [[], false ];
	_CT_TREE tvSortByValue [[], false ];
	_CT_TREE tvDelete [0,0]; //remove child_b
	tvClear 12;
	_CT_TREE tvCollapse [];
	$/Code$
	</Note>
	<ReturnValue>
		Number - Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		get3DENAttribute
	</Keyword>
	<Description>
		Returns value of a given entity's attribute in Eden Editor.
	An attribute is identified by its property ( data when it's engine-drive attribute) value in config. For the list of all attributes with their properties, see Setting Attributes.
	!
	Attributes are available only within the Eden Editor workspace. You cannot access them in scenario preview or exported scenario!
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/get3DENAttribute
	</WikiPage>
	<Syntax>
		EdenEntity get3DENAttribute String
	</Syntax>
	<RawSyntax>
		entity get3DENAttribute attribute
	</RawSyntax>
	<Example>
		$Code$systemChat str (( get3DENMouseOver select 1) get3DENAttribute "name");
	// returns variable name of object under cursor$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		getMissionLayerEntities
	</Keyword>
	<Description>
		Returns all entities within specific Eden Editor layer. To be used when the scenario is running, not in the editor workspace.
	Useful for disabling / enabling whole parts of the scenario which you add to specific layer while editing.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getMissionLayerEntities
	</WikiPage>
	<Syntax>
		getMissionLayerEntities String
	</Syntax>
	<RawSyntax>
		getMissionLayerEntities layerName
	</RawSyntax>
	<Example>
		$Code$_base = getMissionLayerEntities "Base";$/Code$
	</NextExample>
		$Code$waitUntil {( player distance _someObject) 800};
	{
	deleteVehicle _x ;
	} forEach (( getMissionLayerEntities "Simple Objects") select 0);//Deletes all objects within that layer after the player is over 800m away from _someObject$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(October 26, 2016)
	After an object was deleted from a layer, getMissionLayerEntities will return NULL-object for the deleted object.
	Version: 1.65
	Build: 139010
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		unassignCurator
	</Keyword>
	<Description>
		Unassign curator (will destroy both sides of connection).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/unassignCurator
	</WikiPage>
	<Syntax>
		unassignCurator Object
	</Syntax>
	<RawSyntax>
		unassignCurator curatorObj
	</RawSyntax>
	<Example>
		$Code$unassignCurator myCurator;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		This scripting command must be executed on the server to work properly in multiplayer
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		tvCurSel
	</Keyword>
	<Description>
		Returns path to currently selected item. IDC means id of parent Tree View.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/tvCurSel
	</WikiPage>
	<Syntax>
		tvCurSel Number
	</NextSyntax>
		tvCurSel Control
	</Syntax>
	<RawSyntax>
		tvCurSel idc
	</NextRawSyntax>
		tvCurSel control
	</RawSyntax>
	<Example>
		$Code$tvCurSel 101;$/Code$
	</NextExample>
		$Code$tvCurSel _ctrl;$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
		(Sep 11 2014)
	(A3 1.28)tv command fmily overview
	$Code$
	//tv command family available for CT_TREE (type 12)
	private ["_count","_current","_data","_text","_value","_pic"];
	_CT_TREE tvAdd [ [],"Parent_A"];
	_CT_TREE tvAdd [ [0],"Child_A"];
	_CT_TREE tvAdd [ [0,0],"Grandchild_A"];
	_CT_TREE tvAdd [ [],"Parent_B"];
	_CT_TREE tvAdd [ [1],"Child_B"];
	_count = _CT_TREE tvCount []; //return 2
	_CT_TREE tvSetCurSel [0,0,0]; //select grandchild_A
	_current = tvCurSel _CT_TREE; //return [0,0,0]
	_CT_TREE tvSetData [_current,"I'm grandchild_A"];
	_data = _CT_TREE tvData _current; // "I'm grandchild_A"
	_text = _CT_TREE tvText _current; //"Grandchild_A"
	_CT_TREE tvSetValue [_current,14];
	_value = _CT_TREE tvValue _current; // 14
	_CT_TREE tvSetPicture [_current, getText ( configFile "CfgWeapons" "optic_NVS" "picture")];
	_pic = _CT_TREE tvPicture _current;
	_CT_TREE tvExpand [1];
	_CT_TREE tvSort [[], false ];
	_CT_TREE tvSortByValue [[], false ];
	_CT_TREE tvDelete [0,0]; //remove child_b
	tvClear 12;
	_CT_TREE tvCollapse [];
	$/Code$
	</Note>
	<ReturnValue>
		Array - Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlVisible
	</Keyword>
	<Description>
		Returns if a control of the currently active user dialog is shown or not. Read Dialog Control for more information about user dialogs and controls.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlVisible
	</WikiPage>
	<Syntax>
		ctrlVisible Number
	</Syntax>
	<RawSyntax>
		ctrlVisible idc
	</RawSyntax>
	<Example>
		$Code$_bool = ctrlVisible 100;$/Code$
	</Example>
	<Locality>
		local / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		turretLocal
	</Keyword>
	<Description>
		Checks if a turret is local.
	Some info on turrets: A vehicle turret will change locality when player gunner gets in it, just like vehicle changes locality when player driver gets in it. Many commands for turrets work only where turret is local. When gunner leaves turret it is supposed to change locality to the locality of the vehicle.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/turretLocal
	</WikiPage>
	<Syntax>
		Object turretLocal Array
	</Syntax>
	<RawSyntax>
		vehicle turretLocal turretPath
	</RawSyntax>
	<Example>
		$Code$_isLocal = vehicle player turretLocal [0];$/Code$
	</NextExample>
		$Code$if (heli turretLocal [1]) then {heli setVehicleAmmo 1};$/Code$
	</NextExample>
		$Code$if ( isNil {heli turretLocal [5]}) then { hint "Turret 5 is non-existent"};$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean/Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		eyeDirection
	</Keyword>
	<Description>
		Returns the direction object is watching (eyes, or a vehicle primary observer).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/eyeDirection
	</WikiPage>
	<Syntax>
		eyeDirection Object
	</Syntax>
	<RawSyntax>
		eyeDirection unit
	</RawSyntax>
	<Example>
		$Code$can = "Land_Can_V3_F" createVehicle position player ;
	onEachFrame {
	can setPosASL [
	( eyePos player select 0) + ( eyeDirection player select 0),
	( eyePos player select 1) + ( eyeDirection player select 1),
	( eyePos player select 2) + ( eyeDirection player select 2)
	]
	}$/Code$
	</NextExample>
		$Code$// Draw AI eye direction (green) and weapon direction (red) in 3D:
	bob = createGroup east createUnit ["O_Soldier_F", [0,0,0], [], 0, "NONE"];
	bob setVehiclePosition [ player modelToWorld [0,100,0], [], 0, "NONE"];
	onEachFrame
	{
	_beg = ASLToAGL eyePos bob;
	_endE = (_beg vectorAdd ( eyeDirection bob vectorMultiply 100));
	drawLine3D [ _beg, _endE, [0,1,0,1]];
	_endW = (_beg vectorAdd (bob weaponDirection currentWeapon bob vectorMultiply 100));
	drawLine3D [_beg, _endW, [1,0,0,1]];
	};$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(May 26, 2014)
	This command should have really been named headDirection instead of eyeDirection as one could mistakenly think that eyes direction of your avatar correspond to the direction of the centre of your screen. Play with the script in example 1 to find out limitations. If you need centre of screen direction, use positionCameraToWorld instead.
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		objectParent
	</Keyword>
	<Description>
		Returns parent of an object if the object is proxy, otherwise objNull. In case of backpack, the parent is a weaponholder or a cargo space of a vehicle or the unit carrying it. Unit in a vehicle will return the vehicle as parent.
	Another good use of objectParent is when a static weapon is known and one needs to check if it is assembled or not. objectParent _staticWeapon will return objNull if weapon is unpacked, or backpack object if packed.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/objectParent
	</WikiPage>
	<Syntax>
		objectParent Object
	</Syntax>
	<RawSyntax>
		objectParent object
	</RawSyntax>
	<Example>
		$Code$_weaponholder = objectParent _mybackpack;$/Code$
	</NextExample>
		$Code$// Create and place created backpack in front of player:
	_backpackContainer = "B_TacticalPack_rgr" createVehicle [0,0,0];
	_weaponHolder = objectParent _backpackContainer;
	_weaponHolder setPos ( player modelToWorld [0,5,0]);$/Code$
	</NextExample>
		$Code$// Check if player is on foot:
	_isOnFoot = isNull objectParent player ;$/Code$
	</NextExample>
		$Code$// Detect if player is in commander turret of a vehicle:
	_isVehicleCommander = player isEqualTo commander objectParent player ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Object
	</ReturnValue>

</NextListItem>

	<Keyword>
		count
	</Keyword>
	<Description>
		Can be used to count:
	the number of elements in array
	the number of elements in array with condition
	the number of sub-entries in a config object
	the number of characters in a string (since ["Arma 3","Arma3",127,126674,"Development"])
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/count
	</WikiPage>
	<Syntax>
		count Array
	</NextSyntax>
		Code count Array
	</NextSyntax>
		count Config
	</NextSyntax>
		count String
	</Syntax>
	<RawSyntax>
		count array
	</NextRawSyntax>
		condition count array
	</NextRawSyntax>
		count configname
	</NextRawSyntax>
		count string
	</RawSyntax>
	<Example>
		$Code$_cnt = count [0,0,1,2]; // returns 4
	_cnt = count units group player ; // returns number of units in player group$/Code$
	</NextExample>
		$Code$_cnt = { _x == 4} count [1,9,8,3,4,4,4,5,6]; // returns 3
	_cnt = { alive _x } count allUnits ; // returns the number of alive units$/Code$
	</NextExample>
		$Code$_cnt = count ( configFile "CfgVehicles");$/Code$
	</NextExample>
		$Code$hint str count "japa is the man!"; //16$/Code$
	</Example>
	<Locality>
		local / undefined
	</Locality>
	<Note>
		(April 28, 2007)
	This conditional count command only works if all the elements in the tested array are of the same type as the tested element.
	For example, the following code will created an error, since the elements are of different types (object, number, string):
	$Code$_arr = [ player,100,"one"]; {_x == "one"} count _arr;$/Code$
	Alternatively, to avoid the error use isEqualTo instead of ==. --KK
	This one, on the other hand, where all elements are strings, just like the tested element, will return the correct result of 1:
	$Code$_arr = ["one","two","three"]; {_x == "one"} count _arr;$/Code$
	</NextNote>
		(August 3, 2006)
	Notes from before the conversion:
	Use this to calculate how many "M16" mags a soldier has left.
	$Code${_x == "M16"} count magazines soldier1;$/Code$
	Take care when using count to determine how many units are left alive in a group: count units group player or count units groupname Will return the number of units the leader of the group thinks are alive. If some units have been killed out of sight of other members of the group then it may take sometime for this to be the actual numbers in the group. To determine exactly how many units are really alive in a group use:
	$Code${ alive _x} count units group player ;$/Code$
	or
	$Code${ alive _x} count units groupname;$/Code$
	</NextNote>
		(December 15, 2014)
	count can be (ab)used for a very fast and simple check if at least one element in an array fulfills a certain condition:
	$Code$if({if( _x fulfills condition ) exitWith {1}; false} count _array isEqualTo 1) then
	{
	//do whatever here
	};$/Code$
	This code will exit the count loop as soon as it finds an element fulfilling the condition, leaving the count with the value of 1, hence make the larger if-condition be true.
	If no array element fulfills the condition, the count will be 0 and the if-condition will be false.
	</NextNote>
		(December 29, 2014)
	Quit loop at first fulfilled condition (same as above but faster):
	$Code$0 = { if (_x == 4) exitWith {
	//do something when we reach 4
	}} count [1,2,3,4,5,6];$/Code$
	</NextNote>
		(January 2, 2015)
	Using exitWith inside a count loop will overwrite the default functionality and make count return whatever the exitWith returns:
	$Code$_result = {
	if(_x isEqualTo 3) exitWith {"Hello"}
	} count [1,2,3,4,5];
	//_result = "Hello"$/Code$
	</NextNote>
		(August 22, 2016)
	With the alternative syntax each iteration should result in an interior return of bool or nothing. Example:
	$Code$createDialog "RscFunctionsViewer";
	{ lbAdd [292901,_x]; } count ["first","second","third"];$/Code$
	lbAdd returns a number, so this throws "Error Type Number, expected Bool". Tested in A2OA 1.63.131129
	</Note>
	<ReturnValue>
		Number - Number - Number - Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		buildingExit
	</Keyword>
	<Description>
		Returns the given indexed exit in a building. The returned value is in format Position.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/buildingExit
	</WikiPage>
	<Syntax>
		Object buildingExit Number
	</Syntax>
	<RawSyntax>
		building buildingExit index
	</RawSyntax>
	<Example>
		$Code$_building buildingExit 0$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		updateMenuItem
	</Keyword>
	<Description>
		Sets the text and command for the menu item. index is index as returned from addMenuItem command. command is optional.
	i
	Some Old Editor Command
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/updateMenuItem
	</WikiPage>
	<Syntax>
		Control updateMenuItem Array
	</Syntax>
	<RawSyntax>
		map updateMenuItem [menu item index,text,command]
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		currentWeaponMode
	</Keyword>
	<Description>
		Returns current weapon mode of unit's weapon. Result can be: "Single", "Burst", "FullAuto", "manual", "player"
	This command will return 0 Number if given object is a vehicle instead of a person.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/currentWeaponMode
	</WikiPage>
	<Syntax>
		currentWeaponMode Object
	</Syntax>
	<RawSyntax>
		currentWeaponMode gunner
	</RawSyntax>
	<Example>
		$Code$_weaponMode = currentWeaponMode player ;$/Code$
	</NextExample>
		$Code$_weaponMode = currentWeaponMode gunner vehicle player ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(September 27, 2014)
	- Be careful using this in script. This function returns these strings but also:
	- 0 if unit is in a vehicle (pax),
	- absolutely nothing if AH-99 helo driver or all weapons removed,
	- "truckhorn2" if Hunter driver...
	Absolutely nothing means: if you use a hint to display the returned value, you obtain absolutely no text,no black box, no error! Hint isn't displayed and there is no error in rpt file with compile preprocessFileLineNumbers.
	On the other hand, returned value 0 when unit is pax of a vehicle, could lead to a variable error type if your script is waiting for a string.
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		enableAimPrecision
	</Keyword>
	<Description>
		Set whether animation's aim precision affects weapon sway.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/enableAimPrecision
	</WikiPage>
	<Syntax>
		Object enableAimPrecision Boolean
	</Syntax>
	<RawSyntax>
		unit enableAimPrecision enable
	</RawSyntax>
	<Example>
		$Code$player enableAimPrecision false ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		hideObject
	</Keyword>
	<Description>
		Hide entity. Can be used on soldiers and vehicles, also on static objects.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/hideObject
	</WikiPage>
	<Syntax>
		hideObject Object
	</NextSyntax>
		Object hideObject Boolean
	</Syntax>
	<RawSyntax>
		hideObject object
	</NextRawSyntax>
		object hideObject hidden
	</RawSyntax>
	<Example>
		$Code$hideObject unitName;$/Code$
	</NextExample>
		$Code$objectName hideObject true;$/Code$
	</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
		(July 15, 2010)
	This command will hide a unit, but he will still shoot enemies. Unit will be invisible, but weapon muzzle are visible.
	</NextNote>
		Use MP framework to activate this comand on all players from server or any other maschine
	$Code$_nic = [nil, mantohide, "per", rHideObject, true ] call RE; //In A3 use hideObjectGlobal instead.$/Code$
	</NextNote>
		you can use code as in example 2, where true = ON and false = OFF, if using it like in example 1, you can only turn it ON
	</NextNote>
		using this locally causes the player/object disappear only locally; has to be executed serverside if used in MP. Hidden Vehicles still emit smoke/rotor blade dust and (probably) still emit engine sounds. Usefull for creating objects the map-creator doesn't want to be seen, like Units that protect a certain Area (like a safe-zone) against teamkillers or enemy units.
	</NextNote>
		The above comment is partially incorrect, if the effects of the command are local then it must be executed in every machine so it has global effect. If it is run only on the server machine, it will only be hidden on the server, while clients still see it.
	</NextNote>
		(March 5, 2014)
	As of today this now finally has a Global counterpart, just released on the Stable branch. Added it's link under See also.
	</NextNote>
		(October 30, 2014)
	When used on player, it only has an effect on third person mode. First person LOD is still visible. (A3 Dev 1.33)
	</NextNote>
		(June 27, 2015)
	hideObject and hideObjectGlobal disable object collision in addition to rendering. A3 1.45.131175
	(tested by hiding buildings and running through, driving through, flying through, and shooting through where the building used to be)
	</NextNote>
		(January 26, 2016)
	Sometimes it´s easier to teleport the object about 100m under the ground (also JiP Support):
	$Code$_obj setPosATL [getPosATL _obj select 0, getPosATL _obj select 1, (getPosATL _obj select 2)-100];$/Code$
	And to unhide:
	$Code$_obj setPosATL [getPosATL _obj select 0, getPosATL _obj select 1, (getPosATL _obj select 2)+100];$/Code$
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		displayAddEventHandler
	</Keyword>
	<Description>
		Adds an event handler to the given display. Returns the ID of the event handler, or -1 when failed.
	Returning true in EH code will override default engine handling for keyboard events.
	See User Interface Event Handlers for the full list of event names.
	If applicable, see DIK_KeyCodes for a list of key code constants, which are relevant to key related user interface events like: KeyDown & KeyUp.
	NOTE: Display EHs are processed in reversed order, i.e. last added: first, first added: last. So if you have an override it should be set up in the 1st added EH.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/displayAddEventHandler
	</WikiPage>
	<Syntax>
		Display displayAddEventHandler Array
	</Syntax>
	<RawSyntax>
		display displayAddEventHandler [eventName, code]
	</RawSyntax>
	<Example>
		$Code$moduleName_keyDownEHId = ( findDisplay 46) displayAddEventHandler ["KeyDown", " hint str _this;"];$/Code$
	</NextExample>
		$Code$moduleName_keyDownEHId = findDisplay 46 displayAddEventHandler ["KeyDown", { hint str _this}];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(October 30, 2013)
	As of Arma 3 v1.05.111658 ctrlAddEventHandler and displayAddEventHandler support script Code in addition to String [1]
	</NextNote>
		(March 10, 2014)
	From within an Addon, you must assign the events from a spawned script. eg $Code$[] spawn { (findDisplay 46) displayAddEventHandler["KeyDown","_this call my_KeyDownFunctionhandler"]; };$/Code$
	</NextNote>
		(January 22, 2016)
	Be sure to wait until the main display is initialized before using this command by using: $Code$waituntil {!isnull (finddisplay 46)};$/Code$
	</NextNote>
		(May 28, 2017)
	use #define if you want the displayEventHandler to use data that is defined in the same file in which the command is executed.
	However, that does not work if you use STRING as 'code'. In case of STRING, use the format command around it.
	</NextNote>
		(August 7, 2017)
	Using KeyUp you can't override default engine action by returning true ( A3 1.72.142342 )
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		setDynamicSimulationDistance
	</Keyword>
	<Description>
		Sets activation distance of Arma_3_Dynamic_Simulation for given category
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setDynamicSimulationDistance
	</WikiPage>
	<Syntax>
		String setDynamicSimulationDistance Number
	</Syntax>
	<RawSyntax>
		category setDynamicSimulationDistance distance
	</RawSyntax>
	<Example>
		$Code$"Group" setDynamicSimulationDistance 1000;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(March 19, 2017)
	Desired distances for "Group" and "Vehicle" must be based on viewDistance and fog to exclude any rendering problems with frequently moving objects. Example:
	$Code$"Group" setDynamicSimulationDistance (( viewDistance * 0.8) - ( viewDistance * fog))
	// 80% of maximum rendering and fog distance$/Code$
	But that might impair objects simulations if you are using long-scope optics, so there's a even better solution using cameraView with it:
	$Code$[] spawn {
	while { true } do {
	if ( cameraView isEqualTo "GUNNER") then {
	"Group" setDynamicSimulationDistance ( viewDistance - ( viewDistance * fog ));
	// Scoped
	} else {
	"Group" setDynamicSimulationDistance (( viewDistance * 0.8) - ( viewDistance * fog ));
	// Not scoped
	};
	uiSleep 0.25;
	};
	};
	$/Code$
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		unitPos
	</Keyword>
	<Description>
		Return the unit position rules.
	The return value is always "Auto" unless the unit has gotten a setUnitPos command. In that case the value is the last stance the unit was ordered to.
	Available modes are listed at setUnitPos.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/unitPos
	</WikiPage>
	<Syntax>
		unitPos Object
	</Syntax>
	<RawSyntax>
		unitPos unit
	</RawSyntax>
	<Example>
		$Code$hint str unitPos _unit;$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		enableSatNormalOnDetail
	</Keyword>
	<Description>
		Enables/Disables satellite normal map od detail maps.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/enableSatNormalOnDetail
	</WikiPage>
	<Syntax>
		enableSatNormalOnDetail Boolean
	</Syntax>
	<RawSyntax>
		enableSatNormalOnDetail state
	</RawSyntax>
	<Example>
		$Code$enableSatNormalOnDetail true;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		&&
	</Keyword>
	<Description>
		Returns true only if both conditions are true. In case of the alternative syntax (code as right argument), lazy evaluation is used (if left operand is false, evaluation of the right side is skipped completely). Identical to: a and b
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/a_%26%26_b
	</WikiPage>
	<Syntax>
		Boolean && Boolean/Code
	</Syntax>
	<RawSyntax>
		</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		profileNameSteam
	</Keyword>
	<Description>
		Returns name of the current Steam profile.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/profileNameSteam
	</WikiPage>
	<Syntax>
		profileNameSteam
	</Syntax>
	<RawSyntax>
		profileNameSteam
	</RawSyntax>
	<Example>
		$Code$_mySteamProfileName = profileNameSteam ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlSetModelDirAndUp
	</Keyword>
	<Description>
		Sets orientation of 3D control model. It is similar to setVectorDirAndUp command for an object.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlSetModelDirAndUp
	</WikiPage>
	<Syntax>
		Control ctrlSetModelDirAndUp Array
	</Syntax>
	<RawSyntax>
		control ctrlSetModelDirAndUp [dir, up]
	</RawSyntax>
	<Example>
		$Code$_ctrl3D ctrlSetModelDirAndUp [[0,1,0],[0,0,1]]; //default orientation$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		teamMemberNull
	</Keyword>
	<Description>
		A non-existent Team Member. To compare non-existent team members use isNull or isEqualTo :
	teamMemberNull == teamMemberNull ; // false
	isNull teamMemberNull ; // true
	teamMemberNull isEqualTo teamMemberNull ; // true
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/teamMemberNull
	</WikiPage>
	<Syntax>
		teamMemberNull
	</Syntax>
	<RawSyntax>
		teamMemberNull
	</RawSyntax>
	<Example>
		$Code$! isNull teamMemberNull ; // false$/Code$
	</NextExample>
		$Code$str teamMemberNull ; // NULL - team member$/Code$
	</NextExample>
		$Code$if (_teamMember isEqualTo teamMemberNull ) then {
	hint "is null member";
	};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Team_Member
	</ReturnValue>

</NextListItem>

	<Keyword>
		importance
	</Keyword>
	<Description>
		Returns a location's importance value.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/importance
	</WikiPage>
	<Syntax>
		importance Location
	</Syntax>
	<RawSyntax>
		importance location
	</RawSyntax>
	<Example>
		$Code$_locationImportance = importance myLocation$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		removeCuratorAddons
	</Keyword>
	<Description>
		Restrict curator use of given addons.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/removeCuratorAddons
	</WikiPage>
	<Syntax>
		Object removeCuratorAddons Array
	</Syntax>
	<RawSyntax>
		curatorObj removeCuratorAddons addons
	</RawSyntax>
	<Example>
		$Code$curatorModule removeCuratorAddons [addon1,addon2]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		This scripting command must be executed on the server to work properly in multiplayer
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		tvExpand
	</Keyword>
	<Description>
		Expands tree item pointed to by the path. IDC means id of parent Tree View.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/tvExpand
	</WikiPage>
	<Syntax>
		tvExpand Array
	</NextSyntax>
		Control tvExpand Array
	</Syntax>
	<RawSyntax>
		tvExpand [idc, path]
	</NextRawSyntax>
		control tvExpand path
	</RawSyntax>
	<Example>
		$Code$tvExpand [101, [0]];$/Code$
	</NextExample>
		$Code$_ctrl tvExpand [1];$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
		(Sep 11 2014)
	(A3 1.28)tv command family overview
	$Code$
	//tv command family available for CT_TREE (type 12)
	private ["_count","_current","_data","_text","_value","_pic"];
	_CT_TREE tvAdd [ [],"Parent_A"];
	_CT_TREE tvAdd [ [0],"Child_A"];
	_CT_TREE tvAdd [ [0,0],"Grandchild_A"];
	_CT_TREE tvAdd [ [],"Parent_B"];
	_CT_TREE tvAdd [ [1],"Child_B"];
	_count = _CT_TREE tvCount []; //return 2
	_CT_TREE tvSetCurSel [0,0,0]; //select grandchild_A
	_current = tvCurSel _CT_TREE; //return [0,0,0]
	_CT_TREE tvSetData [_current,"I'm grandchild_A"];
	_data = _CT_TREE tvData _current; // "I'm grandchild_A"
	_text = _CT_TREE tvText _current; //"Grandchild_A"
	_CT_TREE tvSetValue [_current,14];
	_value = _CT_TREE tvValue _current; // 14
	_CT_TREE tvSetPicture [_current, getText ( configFile "CfgWeapons" "optic_NVS" "picture")];
	_pic = _CT_TREE tvPicture _current;
	_CT_TREE tvExpand [1];
	_CT_TREE tvSort [[], false ];
	_CT_TREE tvSortByValue [[], false ];
	_CT_TREE tvDelete [0,0]; //remove child_b
	tvClear 12;
	_CT_TREE tvCollapse [];
	$/Code$
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		animationNames
	</Keyword>
	<Description>
		Returns Array of Strings where elements are the names of model animations, which should theoretically be available for use with animate command. However in practice this depends on whether animation is also made available for use in scripts via config.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/animationNames
	</WikiPage>
	<Syntax>
		animationNames Object
	</Syntax>
	<RawSyntax>
		animationNames object
	</RawSyntax>
	<Example>
		$Code$_names = animationNames static_AT;
	// Returns: ["MainTurret", "MainGun", "MainTurret_destructX", "MainTurret_destructY", "MainTurret_destructZ", "MainGun_destructX", "MainGun_destructY", "MainGun_destructZ", "magazine_destruct", "ammo_belt_destruct", "bolt_destruct", "charging_handle_destruct", "damagehideVez_destruct", "damagehideHlaven_destruct", "damagehideRecoil_destruct", "Turret_shake", "Turret_shake_aside", "Magazine_hide", "Ammo_belt_hide", "muzzleFlash", "AddAutonomous_unhide", "bullet001_reload_hide", "bullet002_reload_hide", "bullet003_reload_hide", "bullet004_reload_hide", "bullet005_reload_hide", "bullet006_reload_hide", "bullet007_reload_hide", "bullet008_reload_hide"]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		getDammage
	</Keyword>
	<Description>
		Returns the object damage in the range from 0 to 1. Alias of damage.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getDammage
	</WikiPage>
	<Syntax>
		getDammage Object
	</Syntax>
	<RawSyntax>
		getDammage object
	</RawSyntax>
	<Example>
		$Code$_damage = getDammage player ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(, May 9, 2011)
	getDammage and damage works fine when used on damaged vehicles after a repair from a repairtruck when used in A2 CO patch 1.59.
	</NextNote>
		Vehicles repaired in game with the Repair trucks e.t.c never get completely repaired. After being repaired, rather than returning 0 when the damage command is called. They return a value equal to or less than 0.09.
	Consequently any vehicle flagged as immobile (as indicated by the canMove command), remains so. At least as far as the AI are concerned. The AI will refuse to board an immobile vehicle or eject straight after boarding. Players remain unaffected and can drive the vehicle as normal. To circumvent this, use setDamage 0 on the vehicle in question, to allow the AI to board.
	</NextNote>
		In OFP 1.96, it is possible for a unit to be dead and still return a getDammage value well below 1. Use ! alive to check if a unit is dead.
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		setCuratorCoef
	</Keyword>
	<Description>
		Sets coef for some action (coef have to be bigger than -1 000 000, anything lower is considered as disabled action).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setCuratorCoef
	</WikiPage>
	<Syntax>
		Object setCuratorCoef Array
	</Syntax>
	<RawSyntax>
		curatorObj setCuratorCoef [action,coef]
	</RawSyntax>
	<Example>
		$Code$curatorModule setCuratorCoef ["Place", 1]$/Code$
	</NextExample>
		$Code$curatorModule setCuratorCoef ["Delete", -1e10]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		This scripting command must be executed on the server to work properly in multiplayer
	</NextNote>
		(March 25, 2015)
	Possible actions are:
	place
	edit
	delete
	destroy
	group
	synchronize
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		surfaceNormal
	</Keyword>
	<Description>
		Returns surface normal on given position.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/surfaceNormal
	</WikiPage>
	<Syntax>
		surfaceNormal Array
	</Syntax>
	<RawSyntax>
		surfaceNormal position
	</RawSyntax>
	<Example>
		$Code$_normal = surfaceNormal [300, 500];$/Code$
	</NextExample>
		$Code$_normal = surfaceNormal position player ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		load
	</Keyword>
	<Description>
		Returns current sum of mass from items stored in all unit's containers. Load is calculated by the following formula:
	$Code$_loadPlayer = loadAbs player / getNumber ( configFile "CfgInventoryGlobalVariable" "maxSoldierLoad");$/Code$
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/load
	</WikiPage>
	<Syntax>
		load Object
	</Syntax>
	<RawSyntax>
		load unit
	</RawSyntax>
	<Example>
		$Code$load player ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		drawLocation
	</Keyword>
	<Description>
		Unknown effect.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/drawLocation
	</WikiPage>
	<Syntax>
		Control drawLocation Location
	</Syntax>
	<RawSyntax>
		control drawLocation location
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Unknown
	</ReturnValue>

</NextListItem>

	<Keyword>
		closeOverlay
	</Keyword>
	<Description>
		Closes the current overlay without committing.
	i
	Some Old Editor Command
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/closeOverlay
	</WikiPage>
	<Syntax>
		closeOverlay Control
	</Syntax>
	<RawSyntax>
		closeOverlay map
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setObjectMaterial
	</Keyword>
	<Description>
		Sets material of object selection. The selection number is defined through the hiddenselection []={} array in the vehicle's config (starting with 0).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setObjectMaterial
	</WikiPage>
	<Syntax>
		Object setObjectMaterial Array
	</Syntax>
	<RawSyntax>
		obj setObjectMaterial [selectionNumber, material]
	</RawSyntax>
	<Example>
		$Code$car setObjectMaterial [0,"A3\Structures_F\Data\Windows\window_set.rvmat"];
	car setObjectMaterial [1,"A3\Structures_F\Data\Windows\window_set.rvmat"];$/Code$
	</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		waypointForceBehaviour
	</Keyword>
	<Description>
		Returns true if the waypoint behavior is forced.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/waypointForceBehaviour
	</WikiPage>
	<Syntax>
		waypointForceBehaviour Waypoint
	</Syntax>
	<RawSyntax>
		waypointForceBehaviour waypoint
	</RawSyntax>
	<Example>
		$Code$_isForced = waypointForceBehaviour [groupOne, 1];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		htmlLoad
	</Keyword>
	<Description>
		Load HTML-Files from file or Uri using given control.
	File path is relative to current mission dir or an absolute path (with drive letter etc.).
	The command is subject to restrictions, imposed by CfgCommands class.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/htmlLoad
	</WikiPage>
	<Syntax>
		Control htmlLoad String
	</Syntax>
	<RawSyntax>
		control htmlLoad filename
	</RawSyntax>
	<Example>
		$Code$_control htmlLoad "briefing.html";$/Code$
	</NextExample>
		$Code$_control htmlLoad "http://www.bistudio.com/newsfeed/arma3_news.php?build=main // [1]$/Code$
	</NextExample>
		$Code$// Display news item:
	0 = 0 spawn {
	disableSerialization ;
	_html = findDisplay 46 createDisplay "RscCredits" ctrlCreate ["RscHTML", -1];
	_html ctrlSetBackgroundColor [0,0,0,0.8];
	_html ctrlSetPosition [ safeZoneX, safeZoneY, safeZoneW, safeZoneH ];
	_html ctrlCommit 0;
	_html htmlLoad "http://www.bistudio.com/newsfeed/arma3_news.php?build=main
	};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(September 7, 2014)
	htmlLoad works with URL's as well as html files.
	</NextNote>
		(September 7, 2014)
	While surprisingly htmlLoad does work with URLs as pointed above, the operation is blocking, meaning the whole game will freeze until the operation is complete. Therefore it is not recommended to use this command in such way.
	</NextNote>
		(April 21, 2015)
	Example use of URL can be found in BIS_fnc_GUInewsfeed with the function browser.
	</NextNote>
		(October 7, 2015)
	(Arma 3) In order to use URLs, they must be included in CfgCommands - allowedHTMLLoadURIs. In order to use URIs with params a wildcard * character is supported
	Script Example :
	$Code$_newsOnline = "http://alivemod.com/alive_news.php?map=" + _map + "&mission=" + _mission + "&player=" + _player;
	_ctrlHTML htmlLoad _newsOnline;$/Code$
	Config Example:
	$Code$class CfgCommands {
	allowedHTMLLoadURIs[] += {
	"http://alivemod.com/alive_news.php*"
	};
	};$/Code$
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		isText
	</Keyword>
	<Description>
		Check if config entry represents text.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isText
	</WikiPage>
	<Syntax>
		isText Config
	</Syntax>
	<RawSyntax>
		isText config
	</RawSyntax>
	<Example>
		$Code$_ok = isText (configFile "CfgVehicles") 
	// Result is false$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		onPlayerDisconnected
	</Keyword>
	<Description>
		This command will execute attached code whenever a player is leaving an MP session. The code will receive a number of special variables:
	_id : Number - is the unique DirectPlay ID. Quite useless as the number is too big for in-built string representation and gets rounded. It is also the same id used for user placed markers.
	_uid : String - is getPlayerUID of the leaving player. In Arma 3 it is also the same as Steam ID.
	_name : String - is profileName of the leaving player.
	_jip : ( since Arma 3 v1.49 ) Boolean - is a flag that indicated whether or not the player joined after the mission has started ( J oined I n P rogress). true - if the player was JIP, otherwise false.
	_owner : ( since Arma 3 v1.49 ) Number - is owner id of the leaving player. Can be used for kick or ban purposes or just for publicVariableClient.
	i
	Since Arma 3 v1.57 a stackable version of this EH is available: PlayerDisconnected
	In order to keep compatibility between official and community content the functions BIS_fnc_addStackedEventHandler and BIS_fnc_removeStackedEventHandler should be used instead.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/onPlayerDisconnected
	</WikiPage>
	<Syntax>
		onPlayerDisconnected String/Code
	</Syntax>
	<RawSyntax>
		onPlayerDisconnected code
	</RawSyntax>
	<Example>
		$Code$onPlayerDisconnected " diag_log [_id, _uid, _name]";$/Code$
	</NextExample>
		$Code$onPlayerDisconnected {
	if ( count allPlayers == 0) then {
	endMission "END1";
	};
	};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		This scripting command must be executed on the server to work properly in multiplayer
	</NextNote>
		(January 14, 2015)
	For Arma 3 v1.32 and onward, one might want to consider using instead the HandleDisconnect mission event handler for greater flexibility.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		owner
	</Keyword>
	<Description>
		On server machine, returns the ID of the client where the object is local. Otherwise returns 0. For use on clients clientOwner command is available. To find out the owner of a Group, use groupOwner.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/owner
	</WikiPage>
	<Syntax>
		owner Object
	</Syntax>
	<RawSyntax>
		owner object
	</RawSyntax>
	<Example>
		$Code$_clientID = owner _someobject;$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		This scripting command must be executed on the server to work properly in multiplayer
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		cutObj
	</Keyword>
	<Description>
		Displays an object defined in the global config in CfgTitles.
	For greater efficiency and ease of modability it is recommended to use named layers available with alternative syntax since Arma 3 v1.57.134673
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/cutObj
	</WikiPage>
	<Syntax>
		cutObj Array
	</NextSyntax>
		Number cutObj Array
	</NextSyntax>
		String cutObj Array
	</Syntax>
	<RawSyntax>
		cutObj [class, type, speed, showInMap]
	</NextRawSyntax>
		layer cutObj [class, type, speed, showInMap]
	</NextRawSyntax>
		layerName cutObj [class, type, speed, showInMap]
	</RawSyntax>
	<Example>
		$Code$cutObj ["TVSet", "PLAIN"];
	cutObj ["TVSet", "PLAIN", 2]$/Code$
	</NextExample>
		$Code$2 cutObj ["Sphere", "PLAIN"];$/Code$
	</NextExample>
		$Code$_layer = "layer1" cutObj ["BISLogo", "PLAIN"];$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing - Nothing - Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		setVariable
	</Keyword>
	<Description>
		Set variable to given value in the variable space of given element.
	To remove a variable, set it to nil (e.g. player setVariable ["varname", nil ];$/Code$ ).
	When variable is set on Task, it is not actually set on task itself, but on FSM attached to the task. So if there is no FSM setVariable will not work.
	All available variable spaces which support setVariable :
	Namespace setVariable Array
	Object setVariable Array
	Group setVariable Array
	Team_Member setVariable Array
	Task setVariable Array
	Location setVariable Array
	Control setVariable Array (since Arma 3 v1.55.133553)
	Display setVariable Array (since Arma 3 v1.55.133553)
	In Arma 3 it is possible to broadcast nil value
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setVariable
	</WikiPage>
	<Syntax>
		Namespace/Object/Group/Team_Member/Task/Location/Control/Display setVariable Array
	</NextSyntax>
		Namespace/Object/Group setVariable Array
	</Syntax>
	<RawSyntax>
		varspace setVariable [name, value]
	</NextRawSyntax>
		varspace setVariable [name, value, public]
	</RawSyntax>
	<Example>
		$Code$_myTruck setVariable ["myPublicVariable", 123, true ];$/Code$
	</NextExample>
		$Code$_myTruck setVariable ["myLocalVariable", ["321", _var], false ];$/Code$
	</NextExample>
		$Code$missionNamespace setVariable ["myName", "KK"];
	hint myName; //KK$/Code$
	</NextExample>
		$Code$// Get current value of a variable and if it is undefined, define it and get the defined value:
	private _var = missionNamespace getVariable "varName";
	if ( isNil "_var") then
	{
	missionNamespace setVariable ["varName", 123];
	_var = 123;
	};
	// _var here will contain current value of the variable varName$/Code$
	</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
		(December 9, 2015)
	This command does not work with CfgAmmo or CfgNonAIVehicles objects, like bullets, mines or butterflies (probably because they are local objects Killzone Kid ( talk ) 11:25, 9 July 2017 (CEST)).
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		tvSetPictureRightColorDisabled
	</Keyword>
	<Description>
		Sets the color of the right picture of a tree item defined by path when item is disabled
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/tvSetPictureRightColorDisabled
	</WikiPage>
	<Syntax>
		Control tvSetPictureRightColorDisabled Array
	</Syntax>
	<RawSyntax>
		control tvSetPictureRightColorDisabled [path, color]
	</RawSyntax>
	<Example>
		$Code$_control tvSetPictureRightColorDisabled [[0], [1,0,1,1]]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		getPosATLVisual
	</Keyword>
	<Description>
		Returns an object's rendered 3D position ATL (z value above ground) in render time scope.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getPosATLVisual
	</WikiPage>
	<Syntax>
		getPosATLVisual Object
	</Syntax>
	<RawSyntax>
		getPosATLVisual object
	</RawSyntax>
	<Example>
		$Code$_playerRenderedPosATL = getPosATLVisual player ;$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		getModelInfo
	</Keyword>
	<Description>
		Returns object's model info in format [modelName, modelPath, hasSkeleton]. Model path is suitable for use with createSimpleObject command.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getModelInfo
	</WikiPage>
	<Syntax>
		getModelInfo Object
	</Syntax>
	<RawSyntax>
		getModelInfo object
	</RawSyntax>
	<Example>
		$Code$_modelInfo = getModelInfo player ;$/Code$
	</NextExample>
		$Code$_modelInfo = getModelInfo cursorObject ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		vectorMultiply
	</Keyword>
	<Description>
		Multiplies 3D vector by a scalar.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/vectorMultiply
	</WikiPage>
	<Syntax>
		Array vectorMultiply Number
	</Syntax>
	<RawSyntax>
		vector vectorMultiply scalar
	</RawSyntax>
	<Example>
		$Code$_newVector = [1,2,3] vectorMultiply 3; //[3,6,9]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(28 Jun, 2014)
	(ArmA3 1.22)Algorithm:
	$Code$
	Vector = [x,y,z]; scalar = a;
	Result = [(x * a),(y * a),(z * a)];
	$/Code$
	It is recommended to use vectorMultiply instead of BIS_fnc_vectorMultiply. This is a very useful function, as it can be used with the velocity command to move an object from one position to another. (ie vector1 to vector2 ) - ensure both positions are found using getPosASL.
	$Code$
	_obj setVelocity ((( getPosASL _target) vectorDiff ( getPosASL _obj)) vectorMultiply 2);
	$/Code$
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		createTeam
	</Keyword>
	<Description>
		Create a team and name it.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/createTeam
	</WikiPage>
	<Syntax>
		createTeam Array
	</Syntax>
	<RawSyntax>
		createTeam [type, name]
	</RawSyntax>
	<Example>
		$Code$_team = createTeam ["USMC_Team", "Fire Team Red"];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Team_Member
	</ReturnValue>

</NextListItem>

	<Keyword>
		faction
	</Keyword>
	<Description>
		Gets unit faction. Factions are defined under CfgFactionClasses. If the given faction is not defined, the command returns empty string. Standard Factions include:
	West: "USMC", "CDF"
	East: "RU", "INS"
	Guer: "GUE"
	Civ: "CIV", "CIV_RU"
	West: "BIS_US", "BIS_CZ", "BIS_GER"
	East: "BIS_TK", "BIS_TK_INS"
	Guer: "BIS_TK_GUE", "BIS_UN"
	Civ: "BIS_TK_CIV", "BIS_CIV_special"
	British Armed Forces DLC
	West: "BIS_BAF"
	Private Military Company DLC
	Guer: "PMC_BAF"
	West: "BLU_F" (NATO), "BLU_G_F" (FIA)
	East: "OPF_F" (CSAT), "OPF_G_F" (FIA)
	Guer: "IND_F" (AAF), "IND_G_F" (FIA)
	Civ: "CIV_F" (Civilians)
	Arma 3 - APEX
	West: "BLU_T_F" (Pacific NATO), "BLU_CTRG_F" (Pacific CTRG), "BLU_GEN_F" (Gendarmerie)
	East: "OPF_T_F"
	Guer: "IND_C_F" (Syndikat)
	"CIV_IDAP_F"
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/faction
	</WikiPage>
	<Syntax>
		faction Object
	</Syntax>
	<RawSyntax>
		faction unitName
	</RawSyntax>
	<Example>
		$Code$_playersFaction = faction player ;$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		Faction behaves slightly differently to side. Side can refer to the pilot or commander of a vehicle, but faction never changes. It always returns the 'country of manufacture'.
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		fogParams
	</Keyword>
	<Description>
		A getter for setFog (Alt Syntax). Returns extended params for the fog
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/fogParams
	</WikiPage>
	<Syntax>
		fogParams
	</Syntax>
	<RawSyntax>
		fogParams
	</RawSyntax>
	<Example>
		$Code$_fog = fogParams$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		resize
	</Keyword>
	<Description>
		Changes the size of the given array. The command does not return new array, it resizes the source array to the desired number of elements. If the new size is bigger than the current size, the new places are filled with nils.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/resize
	</WikiPage>
	<Syntax>
		Array resize Number
	</Syntax>
	<RawSyntax>
		array resize count
	</RawSyntax>
	<Example>
		$Code$_arrayNum = [0,1,2,3,4];
	_arrayNum resize 2; // _arrayNum is now [0,1]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(November 13, 2014)
	Use this number to resize the array to the number of elements desired, not the desired index of the final element.
	resize cannot be used to create a new array.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		asin
	</Keyword>
	<Description>
		Arcsine of a number, result in Degrees.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/asin
	</WikiPage>
	<Syntax>
		asin Number
	</Syntax>
	<RawSyntax>
		asin x
	</RawSyntax>
	<Example>
		$Code$_degrees=asin 0.5
	returns 30$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		isIRLaserOn
	</Keyword>
	<Description>
		Returns true if there is a linked and enabled IR on the given weapon.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isIRLaserOn
	</WikiPage>
	<Syntax>
		Object isIRLaserOn String
	</Syntax>
	<RawSyntax>
		unit isIRLaserOn weapon
	</RawSyntax>
	<Example>
		$Code$player isIRLaserOn currentWeapon player ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		addPublicVariableEventHandler
	</Keyword>
	<Description>
		This event handler will detect if a missionNamespace variable (it is attached to) has been broadcast over network with publicVariable, publicVariableClient or publicVariableServer commands and will execute EH code upon detection. Arguments passed to the code in _this array are:
	_this select 0: String - broadcast variable name (same variable name EH is attached to)
	_this select 1: Anything - broadcast variable value
	_this select 2: Object, Group - target the variable got set on with setVariable (see: alternative syntax)
	Please note:
	* EH works only in Multiplayer environment.
	* EH will not fire on the machine that executed broadcast command, only on the machines that receive the broadcast.
	* The value of broadcast variable can be exactly the same, it is the actual broadcast that triggers EH not the change in variable.
	Alt syntax of this command doesn't work as intended
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/addPublicVariableEventHandler
	</WikiPage>
	<Syntax>
		String addPublicVariableEventHandler Code
	</NextSyntax>
		String addPublicVariableEventHandler Array
	</Syntax>
	<RawSyntax>
		varName addPublicVariableEventHandler code
	</NextRawSyntax>
		varName addPublicVariableEventHandler [target, code]
	</RawSyntax>
	<Example>
		$Code$"publicThis" addPublicVariableEventHandler {
	hint format [
	"%1 has been updated to: %2",
	_this select 0,
	_this select 1
	]
	};$/Code$
	</NextExample>
		$Code$// Client:
	"'^:)123BURP,+=lol" addPublicVariableEventHandler { hint ("NUTS are " + (_this select 1))};
	// Server: missionNamespace setVariable ["'^:)123BURP,+=lol", "craZZZZy"];
	publicVariable "'^:)123BURP,+=lol";$/Code$
	</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
		(22 Dec, 2007)
	Please note that varName indicates which variable you want to monitor with this eventhandler.
	As a result, the example eventhandler on this page will only fire when the variable publicThis has been changed,
	but not if any other variable was changed by any other client via the publicVariable command.
	</NextNote>
		(27 Feb, 2014 00:57)
	Note on using addPublicVariableEventHandler during initialization: If you need a function to call addPublicVariableEventHandler during initialization, you must use postInit. addPublicVariableEventHandler does not work during preInit.
	</NextNote>
		(27 Feb, 2014 08:40)
	MulleDK13 note above needs some clarification. You don't "must" use postInit and you absolutely can use preInit function to initialise addPublicVariableEventHandler if you start scheduled script from it.
	$Code$//script with preInit = 1; in CfgFunctions
	0 = 0 spawn {
	"someVar" addPublicVariableEventHandler {
	//yourcode
	};
	};$/Code$
	</NextNote>
		(November 23, 2015)
	While it is true that the event handler will only fire on the machine receiving the broadcast value. Please note that this machine can actually be the same machine broadcasting it in the cases of publicVariableClient and publicVariableServer.
	Examples: $Code$if ( isServer ) then {
	"OnServer" addPublicVariableEventHandler { hint "This event handler still fired!"; };
	publicVariableServer "OnServer";
	};$/Code$
	$Code$// This example assumes the client knows their own client ID
	// It does also work on the server (when the server ID is used) irrespective of the command name
	"OnClient" addPublicVariableEventHandler { hint "This event handler still fired!"; };
	client ID publicVariableClient "OnClient";
	$/Code$
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		append
	</Keyword>
	<Description>
		Appends array2 to the back of array1 modifying array1.
	NOTE: append does not return array, it modifies existing array. If you need to return a copy, use "+":
	$Code$array3 = array1 + array2;$/Code$
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/append
	</WikiPage>
	<Syntax>
		Array append Array
	</Syntax>
	<RawSyntax>
		array1 append array2
	</RawSyntax>
	<Example>
		$Code$_arr = [1,2,3];
	_arr append [4,5,6];
	hint str _arr; //[1,2,3,4,5,6]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(March 9, 2015)
	$Code$_array1 append _array2$/Code$ is roughly 1.2x faster (depending on array size) than $Code$_array1 = _array1 + _array2$/Code$ (Averaged over 10.000 iterations with two identical arrays containing the numbers 0 through 9)
	The larger the arrays to append, the faster append is as it does not create a new array, which happens with array addition.
	</NextNote>
		(May 21, 2015)
	Array "unshift" implementation using append, a faster alternative to BIS_fnc_arrayUnShift :
	$Code$KK_fnc_unshift = {
	private ["_arr", "_tmp"];
	_arr = _this select 0;
	_tmp = [_this select 1];
	_tmp append _arr;
	_arr resize 0;
	_arr append _tmp;
	_arr
	};
	// Example
	arr = [1,2,3];
	[arr, 0] call KK_fnc_unshift; //both arr and return of function are [0,1,2,3]
	$/Code$
	</NextNote>
		(May 21, 2015)
	Array "insert" implementation using append, much faster alternative to BIS_fnc_arrayInsert :
	$Code$KK_fnc_insert = {
	private ["_arr", "_i", "_res"];
	_arr = _this select 0;
	_i = _this select 2;
	_res = [];
	_res append (_arr select [0, _i]);
	_res append (_this select 1);
	_res append (_arr select [_i, count _arr - _i]);
	_res
	};
	// Example
	arr = [1,2,3,4];
	[arr, ["a","b"], 2] call KK_fnc_insert; //[1,2,"a","b",3,4]$/Code$
	</NextNote>
		(May 21, 2015)
	A faster alternative to BIS_fnc_arrayPushStack using append :
	$Code$KK_fnc_pushStack = {
	_this select 0 append (_this select 1);
	_this select 0
	};
	// Example
	arr = [1,2,3];
	[arr,[4,5,6]] call KK_fnc_pushStack; //both arr and function return are [1,2,3,4,5,6]$/Code$
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		getCompatiblePylonMagazines
	</Keyword>
	<Description>
		Get array of compatible pylon magazines
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getCompatiblePylonMagazines
	</WikiPage>
	<Syntax>
		Object getCompatiblePylonMagazines Number
	</NextSyntax>
		String getCompatiblePylonMagazines Number
	</Syntax>
	<RawSyntax>
		vehicle getCompatiblePylonMagazines pylon
	</NextRawSyntax>
		vehicleClass getCompatiblePylonMagazines pylon
	</RawSyntax>
	<Example>
		$Code$vehicle player getCompatiblePylonMagazines 0; // returns array of arrays containing all compatible magazines$/Code$
	</NextExample>
		$Code$"Plane_Fighter_01_Base_F" getCompatiblePylonMagazines 3; // returns array of compatible magazines for the 3rd pylon$/Code$
	</NextExample>
		$Code$jet1 getCompatiblePylonMagazines "pylon1"; // returns array of compatible magazines for the 1st pylon$/Code$
	</NextExample>
		$Code$// Get all pylon names for "Plane_Fighter_01_Base_F"
	private _allPylons = "true" configClasses (
	configFile
	
	"CfgVehicles"
	
	"Plane_Fighter_01_Base_F"
	
	"Components"
	
	"TransportPylonsComponent"
	
	"pylons"
	) apply { configName _x};
	hint str _allPylons;
	/* return:
	[
	"pylon1",
	"pylon2",
	"pylon3",
	"pylon4",
	"pylonBayRight1",
	"pylonBayLeft1",
	"pylonBayCenter1",
	"pylonBayCenter2",
	"pylonBayCenter3",
	"pylonBayCenter4",
	"pylonBayCenter5",
	"pylonBayCenter6"
	]*/$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array - Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		markerType
	</Keyword>
	<Description>
		Get type of marker. Note: This function is identical to getMarkerType. See cfgMarkers for a list of standard markers.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/markerType
	</WikiPage>
	<Syntax>
		markerType String
	</Syntax>
	<RawSyntax>
		markerType markerName
	</RawSyntax>
	<Example>
		$Code$if ( markerType "Marker1" == "Empty") then { hint "Marker1 is not an icon!"}$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(March 17, 2014)
	Using markerType is a good method to determine if a string is a valid marker name, unless the marker type isn't set. $Code$if (markerType "mark1" != "") then {hint "valid marker"}$/Code$
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		lockedTurret
	</Keyword>
	<Description>
		Check whether gunner position of the vehicle turret is locked.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lockedTurret
	</WikiPage>
	<Syntax>
		Object lockedTurret Array
	</Syntax>
	<RawSyntax>
		vehicle lockedTurret turretPath
	</RawSyntax>
	<Example>
		$Code$_locked = tank lockedTurret [0];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		createGuardedPoint
	</Keyword>
	<Description>
		Adds a point guarded by the given side (scripted way of adding equivalent of "GUARDED BY" trigger in Editor ). A closest AI group in the given side with assigned "GUARD" waypoint will attempt to secure this guard point. The actual guarded position is determined via the following rules:
	Given "position" is always considered. It could be Object, Group, Position2D or Position3D. In every case, z coordinate will be ignored and point will be placed on nearest surface.
	If "objectMapID" is not negative, the position of the object with the given ID is used (Overrides "position"). -1 to ignore this argument. z of the object position will be intact.
	If the given "vehicle" is valid, the position of the vehicle is extracted and guarded (Overrides both "position" and "objectMapID"). objNull to ignore. z of the vehicle position will be intact.
	For use with "GUARD" waypoint. How does "GUARD" waypoint work: Waypoint:Guard
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/createGuardedPoint
	</WikiPage>
	<Syntax>
		createGuardedPoint Array
	</Syntax>
	<RawSyntax>
		createGuardedPoint [side, position, objectMapID, vehicle]
	</RawSyntax>
	<Example>
		$Code$createGuardedPoint [ east, [0,0], -1, vehicle player ];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		set3DENLinesVisible
	</Keyword>
	<Description>
		Toggle visibility of Eden Editor lines.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/set3DENLinesVisible
	</WikiPage>
	<Syntax>
		set3DENLinesVisible Array
	</Syntax>
	<RawSyntax>
		set3DENLinesVisible [showMap, showScene]
	</RawSyntax>
	<Example>
		$Code$set3DENLinesVisible [ false, false ];
	// Hide all lines$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		waypointSpeed
	</Keyword>
	<Description>
		Gets the waypoint speed.
	Possible values are:
	"UNCHANGED"
	"LIMITED"
	"NORMAL"
	"FULL"
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/waypointSpeed
	</WikiPage>
	<Syntax>
		waypointSpeed Array
	</Syntax>
	<RawSyntax>
		waypointSpeed waypoint
	</RawSyntax>
	<Example>
		$Code$_speed = waypointSpeed [groupOne,1];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		setTriggerText
	</Keyword>
	<Description>
		Sets the text label attached to the trigger object. This is used for example as a radio slot label for radio activated triggers.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setTriggerText
	</WikiPage>
	<Syntax>
		Object setTriggerText String
	</Syntax>
	<RawSyntax>
		trigger setTriggerText text
	</RawSyntax>
	<Example>
		$Code$trigger setTriggerText "Call for support"$/Code$
	</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		editorSetEventHandler
	</Keyword>
	<Description>
		Sets given event handler of given editor.
	i
	Some Old Editor Command
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/editorSetEventHandler
	</WikiPage>
	<Syntax>
		Control editorSetEventHandler Array
	</Syntax>
	<RawSyntax>
		map editorSetEventHandler [handler name,function]
	</RawSyntax>
	<Example>
		$Code$_map editorSetEventHandler ["SelectObject",""]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		scriptNull
	</Keyword>
	<Description>
		A non-existing Script or script that has finished ( scriptDone ). To compare non-existent scripts use isNull or isEqualTo :
	scriptNull == scriptNull ; // ERROR! == cannot be used with script object
	isNull scriptNull ; // true
	scriptNull isEqualTo scriptNull ; // true
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/scriptNull
	</WikiPage>
	<Syntax>
		scriptNull
	</Syntax>
	<RawSyntax>
		scriptNull
	</RawSyntax>
	<Example>
		$Code$// Wait until previous script is finished before starting a new one:
	[] spawn
	{
	_script = scriptNull ;
	for "_i" from 1 to 10 do {
	waitUntil { isNull _script};
	_script = _i spawn {
	hint format ["script %1 started", _this];
	sleep 1;
	hint format ["script %1 finished", _this];
	sleep 0.2;
	};
	};
	};$/Code$
	</NextExample>
		$Code$if ( scriptDone (_obj getVariable ["objScript", scriptNull ])) then {
	_obj setVariable ["objScript", _obj spawn {
	waitUntil { damage _this 0.9};
	hint "Critical Damage!";
	}];
	};$/Code$
	</NextExample>
		$Code$str scriptNull ; // NULL-script$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Script_Handle
	</ReturnValue>

</NextListItem>

	<Keyword>
		saveIdentity
	</Keyword>
	<Description>
		Saves person's identity to Objects.sav file in campaign directory as entry name.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/saveIdentity
	</WikiPage>
	<Syntax>
		Object saveIdentity String
	</Syntax>
	<RawSyntax>
		unitName saveIdentity name
	</RawSyntax>
	<Example>
		$Code$player saveIdentity "playerid"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(August 12, 2006)
	Can be also used in singleplayer missions to save player status before cutscenes and load it to player's double.
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		orderGetIn
	</Keyword>
	<Description>
		Force all units in the array to get in or out of their assigned vehicles. Units must be assigned to a vehicle before this command will do anything.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/orderGetIn
	</WikiPage>
	<Syntax>
		Array orderGetIn Boolean
	</Syntax>
	<RawSyntax>
		unitArray orderGetIn order
	</RawSyntax>
	<Example>
		$Code$[_unitOne, _unitTwo] orderGetIn true$/Code$
	</NextExample>
		$Code$[_unitOne, _unitTwo] orderGetIn false$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		(8 May, 2014)
	(ArmA3 ver 1.18), here's a quick reference to unit's embarkation and disembarkation.
	Command
	Remote Control
	Behavior
	Role Unassigning
	orderGetIn
	false
	orderGetIn won't take effect on player controlled AI units, and which needs to be used together with assaignAs command family. Generally speaking, orderGetIn is a Role Excuator.
	When orderGetIn was disabled it won't automatically unassign unit's vehicle role but will force the unit get out of the vehicle and stop him re-entering until it was enabled again. orderGetIn false won't stop a unit when he is embarking a vehicle in the half way but unassignVehicle will do. orderGetIn false will wait to fire until the unit enter a vehicle.
	allowGetIn
	false
	allowGetIn won't take effect on player controlled AI units. Different from orderGetIn, this command is a Role Holder, it can control the unit's movement in the half way set by orderGetIn but not by setWaypointType, unit will be forced to get out from a vehicle by allowGetIn false and won't automatically re-enter the vehicle until allowGetIn true
	allowGetIn won't do anything with unit's vehicle role
	doGetOut
	true
	Works on player controlled ai silently, unit will automatically get back to the vehicle after disembarkation. (Unit won't get out until vehicle is stopped or landed)
	false
	commandGetOut
	true
	Same as doGetOut with radio message. (Unit won't get out until vehicle is stopped or landed)
	false
	leaveVehicle
	false
	leaveVehicle can't force a player controlled AI disembark
	true
	action ["GetOut",_veh]
	true
	Eject immediately without parachute
	false
	action ["Eject",_veh]
	true
	Eject immediately with parachute if needed
	false
	setWaypointType "GETIN"
	false
	Waypoint won't be affected by orderGetIn false or allowGetIn false until the unit is on the vehicle.
	N/A
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		sendUDPMessage
	</Keyword>
	<Description>
		Send message to given address using UDP protocol. Returns false if the message has not been delivered
	Note: Not implemented (see talk page for more info).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/sendUDPMessage
	</WikiPage>
	<Syntax>
		sendUDPMessage Array
	</Syntax>
	<RawSyntax>
		sendUDPMessage [ip, port, message]
	</RawSyntax>
	<Example>
		$Code$_bool = sendUDPMessage ["192.168.0.1", 2302, "Here goes you message..."];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		action
	</Keyword>
	<Description>
		Make a unit to perform an action. Use the List of Actions for reference about the available actions and their syntax.
	NOTES:
	While this command should be executed where unit is local, it is not always the case. Actions such as "Eject", "GetOut", "GetInXXXX", "MoveToXXXX", etc can be executed on remote units.
	In SP, when user Alt+Tabs the simulation is paused and so the action will also halt until user returns to the game. For example, player action ["GetInDriver", car] executed while user is Alt+Tabbed will result in user seeing the action happening when he returns to the game screen. This doesn't happen in MP.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/action
	</WikiPage>
	<Syntax>
		Object action Array
	</Syntax>
	<RawSyntax>
		unit action actionArray
	</RawSyntax>
	<Example>
		$Code$player action ["SitDown", player ];$/Code$
	</NextExample>
		$Code$_soldier action ["Eject", vehicle _soldier];$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		(28 Aug, 2009)
	In ArmA 2, you can place a unique unit (for example a boat, far of all combats) and use it for all command lines with action.
	</NextNote>
		(March 27, 2015)
	This command has no effect when a dead unit is used as input.
	</NextNote>
		(June 27, 2017)
	$Code$player action ["SWITCHWEAPON",player,player,-1]$/Code$
	Switching weapon to the back.
	</NextNote>
		(July 20, 2017)
	Some of the actions (such as "DropWeapon") do not always execute, and there should be a set of conditions for them to run.
	The unit must be able to perform the dropping animation in order for the action to properly execute.
	So, if for example we spawn a unit at [0,0,0] and make it perform a "DropWeapon" action - it won't work if [0,0,0] is water (which it is, if the current map is an island) because the unit will be swimming.
	Also, you cannot stack up actions right after the other. If you run a "DropWeapon" action when the current action animation is still going - it will not perform.
	There are a few more conditions for an action to perform, but relying on a hundred percent success of the action is not a good practice.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		lock
	</Keyword>
	<Description>
		Lock vehicle (disable mounting / dismounting) for player. Similar to setVehicleLock when number is used as param.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lock
	</WikiPage>
	<Syntax>
		Object lock Boolean
	</NextSyntax>
		Object lock Number
	</Syntax>
	<RawSyntax>
		vehicleName lock locked
	</NextRawSyntax>
		vehicleName lock lockstate
	</RawSyntax>
	<Example>
		$Code$_jeepOne lock true ;$/Code$
	</NextExample>
		$Code$heli lock true ;
	locked heli; //2
	heli lock false ;
	locked heli; //0
	heli lock 1;
	locked heli; //1$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		(January 9, 2010)
	Lock prevents AI persons mounting or dismounting vehicles when ordered to do so and players are prevented from doing both too, but AI will dismount when a vehicle is damaged.
	</NextNote>
		(September 22, 2010)
	If an AI group (eg Mechanized Infantry) has its vehicule locked with its crew in it, it will mount or dismount it anyway. But a player in this group won't be able to enter the vehicle.
	</NextNote>
		(April 2, 2013)
	From Arma 3 version 0.50 can be used Number as lock parameter :
	0 - Unlocked
	1 - Default
	2 - Locked
	3 - Locked for player
	</NextNote>
		(March 4, 2015)
	1 - is DEFAULT lock for vehicle placed in editor. Player that is not the leader in a group of AIs will not be able to enter this vehicle.
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		pitch
	</Keyword>
	<Description>
		Returns the pitch of a persons voice.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/pitch
	</WikiPage>
	<Syntax>
		pitch Object
	</Syntax>
	<RawSyntax>
		pitch person
	</RawSyntax>
	<Example>
		$Code$pitch player$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		text
	</Keyword>
	<Description>
		Creates a structured text containing the given plain text if argument is String or returns location's text value if argument is Location (see Alt Syntax)
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/text
	</WikiPage>
	<Syntax>
		text String
	</NextSyntax>
		text Location
	</Syntax>
	<RawSyntax>
		text string
	</NextRawSyntax>
		text location
	</RawSyntax>
	<Example>
		$Code$_stxt2 = text "Hello world.";$/Code$
	</NextExample>
		$Code$_townName = text myTownLocation;$/Code$
	</NextExample>
		$Code$_loc = text nearestLocation [ position player, "NameMarine"]; //"Marina Bay"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Structured_Text - String
	</ReturnValue>

</NextListItem>

	<Keyword>
		say2D
	</Keyword>
	<Description>
		Plays given sound in 2D
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/say2D
	</WikiPage>
	<Syntax>
		Object say2D String
	</NextSyntax>
		Object say2D Array
	</NextSyntax>
		Array say2D String
	</NextSyntax>
		Array say2D Array
	</Syntax>
	<RawSyntax>
		from say2D sound
	</NextRawSyntax>
		from say2D [sound, maxTitlesDistance, speed]
	</NextRawSyntax>
		[from, to] say2D sound
	</NextRawSyntax>
		[from, to] say2D [sound, maxTitlesDistance, speed]
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing - Nothing - Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		assignedDriver
	</Keyword>
	<Description>
		Returns the soldier assigned to the given vehicle as a driver.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/assignedDriver
	</WikiPage>
	<Syntax>
		assignedDriver Object
	</Syntax>
	<RawSyntax>
		assignedDriver vehicle
	</RawSyntax>
	<Example>
		$Code$_driver= assignedDriver vehicleName$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Object
	</ReturnValue>

</NextListItem>

	<Keyword>
		getAllOwnedMines
	</Keyword>
	<Description>
		Gets all mine objects this unit has ownership over.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getAllOwnedMines
	</WikiPage>
	<Syntax>
		getAllOwnedMines Object
	</Syntax>
	<RawSyntax>
		getAllOwnedMines unit
	</RawSyntax>
	<Example>
		$Code$_mines = getAllOwnedMines player ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		cutText
	</Keyword>
	<Description>
		Displays a text message in the center of the screen. The text can be displayed on multiple lines by using "\n" new line characters: cutText ["line1\nline2\nline3", "PLAIN"];. Since Arma 3 v1.73.142260 this command supports Structured Text formatting.
	For greater efficiency and ease of modability it is recommended to use named layers available with alternative syntax since Arma 3 v1.57.134673
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/cutText
	</WikiPage>
	<Syntax>
		cutText Array
	</NextSyntax>
		Number cutText Array
	</NextSyntax>
		String cutText Array
	</Syntax>
	<RawSyntax>
		cutText [text, type, speed, showInMap, isStructuredText]
	</NextRawSyntax>
		layer cutText [text, type, speed, showInMap, isStructuredText]
	</NextRawSyntax>
		layerName cutText [text, type, speed, showInMap, isStructuredText]
	</RawSyntax>
	<Example>
		$Code$cutText ["","BLACK OUT"];
	cutText ["Hello World!","PLAIN",2];$/Code$
	</NextExample>
		$Code$2 cutText ["Hello World!","PLAIN",2];$/Code$
	</NextExample>
		$Code$_layer1 = "normal" cutText ["In The Centre","PLAIN"];
	_layer2 = "down" cutText ["At The Bottom","PLAIN DOWN"];$/Code$
	</NextExample>
		$Code$// Since Arma 3 v1.73.142260:
	cutText [" t color='#ff0000' size='5' RED ALERT! /t br/ ***********", "PLAIN", -1, true, true ];$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
		(September 20, 2013)
	In Arma 3 "PLAIN" param will display your text where the crosshair is, "PLAIN DOWN" will push the text further down, closer to the bottom of the screen.
	</NextNote>
		(July 6, 2016)
	The value for speed has to be greater 0. If 0 is used as speed the default value (1) will be used.
	If you want to create an "instant" effect you can use a really small value (e.g. 0.001)
	</Note>
	<ReturnValue>
		Nothing - Nothing - Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		forceMap
	</Keyword>
	<Description>
		Opens non-interactive main map in background that overrides user screen. The user is able to fire but cannot see the world just the map. To force open interactive map use openMap command.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/forceMap
	</WikiPage>
	<Syntax>
		forceMap Boolean
	</Syntax>
	<RawSyntax>
		forceMap show
	</RawSyntax>
	<Example>
		$Code$forceMap true$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
		In OFP v1.96, the mapAnim series of commands, together with forceMap can only be used in the intro and mission, as it is not possible to access the map from the outro. (not checked, sourced from an old copy of the OFPEC comref)
	</NextNote>
		Manually opening the map afterwards won't close the map. Actually it will open the "real" map on top of the forced map, and closing the (top) map with the m -key again will still show the forcefully opened map. (ArmA 1.05)
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		mineDetectedBy
	</Keyword>
	<Description>
		Returns true if mine has been detected by a given side
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/mineDetectedBy
	</WikiPage>
	<Syntax>
		Object mineDetectedBy Side
	</Syntax>
	<RawSyntax>
		mine mineDetectedBy faction
	</RawSyntax>
	<Example>
		$Code$( allMines select 0) mineDetectedBy west ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		lbSetText
	</Keyword>
	<Description>
		Sets the text on the left side of the item with the given index of the listbox or combobox with id idc of the topmost user dialog.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lbSetText
	</WikiPage>
	<Syntax>
		lbSetText Array
	</NextSyntax>
		Control lbSetText Array
	</Syntax>
	<RawSyntax>
		lbSetText [idc, index, name]
	</NextRawSyntax>
		control lbSetText [index, name]
	</RawSyntax>
	<Example>
		$Code$lbSetText [101, 0, "iskoda"];$/Code$
	</NextExample>
		$Code$_control lbSetText [0, "iskoda"];$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
		More information on the LB command family can be found here
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		camSetDive
	</Keyword>
	<Description>
		Sets camera dive angle. Does not commit changes.
	This command is non-functional !
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/camSetDive
	</WikiPage>
	<Syntax>
		Object camSetDive Number
	</Syntax>
	<RawSyntax>
		camera camSetDive dive
	</RawSyntax>
	<Example>
		$Code$_camera camSetDive -0.1$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(Apr 15, 2010)
	Command is non-functional. Instead, use fn vbs setPitchBank in VBS2, or setVectorUp or this user function in Arma.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		createDiaryRecord
	</Keyword>
	<Description>
		creates a diary entry.
	Supported tags and their parameters:
	All
	image : String - path to image. When present, any element with it will be displayed as image.
	width : Number - image width in pixels.
	height : Number - image height in pixels.
	font
	color : String - HTML color in format #aarrggbb or #rrggbb
	size : Number - font height in pixels.
	face : String - font type (class from CfgFontFamilies)
	br
	marker
	name : String - marker name
	execute
	expression : String - executed code
	executeClose
	expression : String - executed code, diary is closed afterwards
	log
	subject : String - subject name.
	record : String - record name (e.g. "Record6" or "Unit1059524")
	gear
	unit : Number - unit ID
	teamSwitch
	unit : Number - unit ID
	kick
	id : Number - player ID
	ban
	id : Number - player ID
	mute
	id : Number - player ID
	currentTask
	id : Number - task ID
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/createDiaryRecord
	</WikiPage>
	<Syntax>
		Object createDiaryRecord Array
	</Syntax>
	<RawSyntax>
		unitName createDiaryRecord [subject, text, task, state]
	</NextRawSyntax>
		unitName createDiaryRecord [subject, [title, text], task, state]
	</RawSyntax>
	<Example>
		$Code$player createDiaryRecord ["Diary", ["Intel", "Enemy base is on grid marker name='enemyBase' 161170 /marker "]]$/Code$
	</NextExample>
		$Code$player createDiaryRecord ["Diary", "Information gathered. br / img image='wellDone_ca.paa' / "]$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
		(14:54, 15 January 2011‎)
	To insert a link into a diary record that executes code instead of jumping to a marker, use the tag
	execute expression=" Code to execute " Text /execute
	</NextNote>
		(March 24, 2017)
	When adding multiple diary records, be aware that they appear in reverse order. ie the first one you add will appear last and the last one you add will be first.
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		addBackpackGlobal
	</Keyword>
	<Description>
		Adds a backpack to a unit (even non-local)
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/addBackpackGlobal
	</WikiPage>
	<Syntax>
		Object addBackpackGlobal String
	</Syntax>
	<RawSyntax>
		unit addBackpackGlobal backpack
	</RawSyntax>
	<Example>
		$Code$player addBackpackGlobal "B_AssaultPack_khk";$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		cancelSimpleTaskDestination
	</Keyword>
	<Description>
		Cancels a simple task destination.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/cancelSimpleTaskDestination
	</WikiPage>
	<Syntax>
		cancelSimpleTaskDestination Task
	</Syntax>
	<RawSyntax>
		cancelSimpleTaskDestination task
	</RawSyntax>
	<Example>
		$Code$cancelSimpleTaskDestination myTask;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		needReload
	</Keyword>
	<Description>
		Return how much vehicle wants to reload its weapons.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/needReload
	</WikiPage>
	<Syntax>
		needReload Object
	</Syntax>
	<RawSyntax>
		needReload vehicle
	</RawSyntax>
	<Example>
		$Code$_seriousness = needReload _vehicle;$/Code$
	</NextExample>
		$Code$if ( needReload player == 1) then { reload player };$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlHTMLLoaded
	</Keyword>
	<Description>
		Returns true when HTML content was successfully loaded.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlHTMLLoaded
	</WikiPage>
	<Syntax>
		ctrlHTMLLoaded Control
	</Syntax>
	<RawSyntax>
		ctrlHTMLLoaded control
	</RawSyntax>
	<Example>
		$Code$_control htmlLoad "test.html";
	if (! ctrlHTMLLoaded _control) then {
	hint "Loading test.html failed!";
	};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlEnabled
	</Keyword>
	<Description>
		Returns if a control on the currently active user dialog is enabled. Disabled controls cannot be focused.
	Read Dialog Control for more information about user dialogs and controls.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlEnabled
	</WikiPage>
	<Syntax>
		ctrlEnabled Number
	</NextSyntax>
		ctrlEnabled Control
	</Syntax>
	<RawSyntax>
		ctrlEnabled idc
	</NextRawSyntax>
		ctrlEnabled controlName
	</RawSyntax>
	<Example>
		$Code$if (!(ctrlEnabled 100)) then
	{
	ctrlEnable [100, true]
	};$/Code$
	</NextExample>
		$Code$_enabled = ctrlEnabled _control$/Code$
	</Example>
	<Locality>
		local / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean - Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		showLegend
	</Keyword>
	<Description>
		Show/hide map legend.
	i
	Some Old Editor Command
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/showLegend
	</WikiPage>
	<Syntax>
		Control showLegend Boolean
	</Syntax>
	<RawSyntax>
		map showLegend bool
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		canTriggerDynamicSimulation
	</Keyword>
	<Description>
		A getter for triggerDynamicSimulation
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/canTriggerDynamicSimulation
	</WikiPage>
	<Syntax>
		canTriggerDynamicSimulation Object
	</Syntax>
	<RawSyntax>
		canTriggerDynamicSimulation unit
	</RawSyntax>
	<Example>
		$Code$hint str canTriggerDynamicSimulation player ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		addSwitchableUnit
	</Keyword>
	<Description>
		Adds a unit into the list of units available for Team Switch. Units marked as playable in editor are automatically switchable. This command allows to add non-playable unit into array of switchableUnits and make them available for teamSwitch. SP only.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/addSwitchableUnit
	</WikiPage>
	<Syntax>
		addSwitchableUnit Object
	</Syntax>
	<RawSyntax>
		addSwitchableUnit unitName
	</RawSyntax>
	<Example>
		$Code$addSwitchableUnit bob$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		say3D
	</Keyword>
	<Description>
		Unit or object will say given sound in 3D Space. This allows broadcasting of positional music or sound from a source, without having to script a fade sound or music command. Compare this with say2D which will always play a sound at the location of the player after he has been in the vicinity of a broadcasting sound. Sound is defined in "CfgSounds" of the Description.ext or main config.
	NOTE : You can stop say3D sound currently playing in 2 ways: delete the source of the sound (from) with deleteVehicle or kill the source with setDamage for example.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/say3D
	</WikiPage>
	<Syntax>
		Object say3D String
	</NextSyntax>
		Object say3D Array
	</NextSyntax>
		Array say3D String
	</NextSyntax>
		Array say3D Array
	</Syntax>
	<RawSyntax>
		from say3D sound
	</NextRawSyntax>
		from say3D [sound, maxDistance, pitch]
	</NextRawSyntax>
		[from, to] say3D sound
	</NextRawSyntax>
		[from, to] say3D [sound, maxDistance, pitch]
	</RawSyntax>
	<Example>
		$Code$helicopter1 say3D "Fortunateson"$/Code$
	</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
		(7 March 2013)
	The only difference with this command and say is during cutscenes (when some camera effect is active). In cutscenes, say3D is 3D, say is not.
	</NextNote>
		(July 19, 2015)
	In Arma 2 1.63, the object this command is assigned to must be alive for the sound to broadcast. If the object is killed while the sound is still playing, the sound will stop immediately.
	Here is a link to the forum to get around this issue: [1]
	I have not tested this in Arma 3 yet.
	</NextNote>
		(October 13, 2016)
	This command is local.
	</NextNote>
		(March 11, 2017)
	This command creates sound object "#soundonvehicle" which can be detected with allMissionObjects :
	$Code$ onEachFrame { hintSilent str allMissionObjects "#soundonvehicle"};
	[] spawn { sleep 1; player say3D "Alarm"};$/Code$
	</Note>
	<ReturnValue>
		Nothing - Nothing - Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		diag_enabled
	</Keyword>
	<Description>
		Checks whether specific diagnostic mode is activated.
	Only available in the Arma 3 Diagnostic exe
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/diag_enabled
	</WikiPage>
	<Syntax>
		diag_enabled String
	</Syntax>
	<RawSyntax>
		diag_enabled diag_mode
	</RawSyntax>
	<Example>
		$Code$"Animation" diag_enable true ;
	diag_enabled "Animation";//returns true$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		set3DENModelsVisible
	</Keyword>
	<Description>
		Enables or disables lines visibility in 3DEN
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/set3DENModelsVisible
	</WikiPage>
	<Syntax>
		set3DENModelsVisible Array
	</Syntax>
	<RawSyntax>
		set3DENModelsVisible [map, scene]
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		forEachMemberTeam
	</Keyword>
	<Description>
		Executes the given command recursively for each team that is a member of the given team. For just agents use forEachMemberAgent. For both teams and agents use forEachMember.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/forEachMemberTeam
	</WikiPage>
	<Syntax>
		Code forEachMemberTeam Team_Member
	</Syntax>
	<RawSyntax>
		command forEachMemberTeam team
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		netId
	</Keyword>
	<Description>
		Unique ID of object or group. As this command is MP only, you can use BIS_fnc_netId, which extends the use to SP as well. See also: BIS_fnc_objectVar
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/netId
	</WikiPage>
	<Syntax>
		netId Object/Group
	</Syntax>
	<RawSyntax>
		netId var
	</RawSyntax>
	<Example>
		$Code$_playerNetId = netId player ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		supportInfo
	</Keyword>
	<Description>
		Creates a list of supported operators and type. Each field of array has the format: "x:name" Where x can be:
	't' - type
	'n' - null operator
	'u' - unary operator
	'b' - binary operator.
	'name' is the operator or type name (in case operator, type of input operands is included).
	mask parameter can be an empty string, or one of field. In this case, function returns empty array, if operator is not included in the list. Limited wildcard support is available. Type x may be replaced with *, meaning all types. For the mask partial match may be used, like abc*, meaning any operators starting with 'abc' are reported, for example: *:name, t:*, t:name* or *:*.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/supportInfo
	</WikiPage>
	<Syntax>
		supportInfo String
	</Syntax>
	<RawSyntax>
		supportInfo mask
	</RawSyntax>
	<Example>
		$Code$supportInfo "b:select*"; //Returns ["b:ARRAY select SCALAR","b:ARRAY select BOOL","b:CONFIG select SCALAR"]$/Code$
	</NextExample>
		$Code$// Return all available commands:
	_commands = supportInfo "";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(July 22nd, 2012)
	With CBA one can create a list of all available SQF commands in the RPT
	[supportInfo ""] call cba_fnc_debug;
	One can get CBA here.
	</NextNote>
		(September 24, 2014)
	To get the list of all supported commands in Arma 3 one can simply:
	$Code${ diag_log _x} forEach supportInfo "";$/Code$
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		targets
	</Keyword>
	<Description>
		Retrives list of given unit targets matching specified filter. If the filter is not specified, all targets are returned.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/targets
	</WikiPage>
	<Syntax>
		Object targets Array
	</Syntax>
	<RawSyntax>
		unit targets [enemyOnly, maxDistance, sides, maxAge, alternateCenter]
	</RawSyntax>
	<Example>
		$Code$_targets = _unit targets [false, 300, [east,sideEnemy]]; //all targets of east or renegade side in 300m$/Code$
	</NextExample>
		$Code$_targets = _unit targets [true, 300]; //enemy targets in 300m$/Code$
	</NextExample>
		$Code$_targets = _unit targets []; //all targets$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		diag_lightNewLoad
	</Keyword>
	<Description>
		Allows loading of lightning config during the gameplay (effectively changing the current scene lightning). Filename path can be either absolute or relative. The file must contain only the class LightningNew, which should contain lightning configuration.
	Command is only available when using Arma 3 Diagnostics Exe on Dev-Branch.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/diag_lightNewLoad
	</WikiPage>
	<Syntax>
		diag_lightNewLoad String
	</Syntax>
	<RawSyntax>
		diag_lightNewLoad path
	</RawSyntax>
	<Example>
		$Code$diag_lightNewLoad "o:\lighting.txt"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		getGroupIconParams
	</Keyword>
	<Description>
		Returns group icons params used for command bar drawing such as color, text, scale, visibility, waypoint visibility, waypoint color.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getGroupIconParams
	</WikiPage>
	<Syntax>
		getGroupIconParams Group
	</Syntax>
	<RawSyntax>
		getGroupIconParams group
	</RawSyntax>
	<Example>
		$Code$_iconParams = getGroupIconParams group player ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		setLightFlareSize
	</Keyword>
	<Description>
		Sets relative size of the flare for the light.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setLightFlareSize
	</WikiPage>
	<Syntax>
		Object setLightFlareSize Number
	</Syntax>
	<RawSyntax>
		light setLightFlareSize size
	</RawSyntax>
	<Example>
		$Code$myLight setLightFlareSize 5;$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		scopeName
	</Keyword>
	<Description>
		Defines name of current scope. Name is visible in debugger, and name is also used as reference in some commands like breakOut and breakTo. Scope name should be defined only once per scope. Trying to set a different name on the scope that has already defined scope name will result in error.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/scopeName
	</WikiPage>
	<Syntax>
		scopeName String
	</Syntax>
	<RawSyntax>
		scopeName name
	</RawSyntax>
	<Example>
		$Code$scopeName "main";
	while {true} do {
	scopeName "loop1";
	while {true} do {
	scopeName "loop2";
	...
	};
	};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		removeMagazineTurret
	</Keyword>
	<Description>
		Removes the magazine from the turret. Use turret path [-1] for driver's turret.
	Note: you may create invalid combinations by using this function. When doing so, application behaviour is undefined.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/removeMagazineTurret
	</WikiPage>
	<Syntax>
		Object removeMagazineTurret Array
	</Syntax>
	<RawSyntax>
		vehicle removeMagazineTurret [magazineName, turretPath]
	</RawSyntax>
	<Example>
		$Code$vehicle player removeMagazineTurret ["60rnd_cmflaremagazine",[-1]]$/Code$
	</NextExample>
		$Code$_tank removeMagazineTurret ["20Rnd_120mmSABOT_M1A2",[0]]$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		enableTeamSwitch
	</Keyword>
	<Description>
		Enable / disable Team Switch. The default setting is enabled.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/enableTeamSwitch
	</WikiPage>
	<Syntax>
		enableTeamSwitch Boolean
	</Syntax>
	<RawSyntax>
		enableTeamSwitch enable
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		terrainIntersectAtASL
	</Keyword>
	<Description>
		Checks for intersection of terrain between two ASL positions. Same as terrainIntersectASL, only returns intersect position instead of Boolean
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/terrainIntersectAtASL
	</WikiPage>
	<Syntax>
		terrainIntersectAtASL Array
	</Syntax>
	<RawSyntax>
		terrainIntersectAtASL [pos1, pos2]
	</RawSyntax>
	<Example>
		$Code$_posASL = terrainIntersectAtASL [ eyePos player, getPosASL chopper];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		setHUDMovementLevels
	</Keyword>
	<Description>
		Set min/max movement borders displayed in HUD gauges. Use -1 to skip some value.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setHUDMovementLevels
	</WikiPage>
	<Syntax>
		setHUDMovementLevels Array
	</Syntax>
	<RawSyntax>
		setHUDMovementLevels [minSpeed, maxSpeed, minAlt, maxAlt, minDir, maxDir, targetOrPosition]
	</RawSyntax>
	<Example>
		$Code$setHUDMovementLevels [20,30,-1,-1,0.23,2.1,[0,0,0]]$/Code$
	</NextExample>
		$Code$setHUDMovementLevels [20,30,-1,-1,0.23,2.1,player]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		addWeaponCargo
	</Keyword>
	<Description>
		Add weapons to the cargo space of vehicles, which can be taken out by infantry units. Ignores available cargo space.
	In Arma 3, arguments for this command must be local ( ). For global variant see addWeaponCargoGlobal
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/addWeaponCargo
	</WikiPage>
	<Syntax>
		Object addWeaponCargo Array
	</Syntax>
	<RawSyntax>
		vehicleName addWeaponCargo [weaponName, count]
	</RawSyntax>
	<Example>
		$Code$_truck addWeaponCargo ["M16",5]$/Code$
	</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
		(October 24, 2009)
	Only works on clients.
	</NextNote>
		(July 10, 2010)
	When players add/remove gear directly via the gear menu that gear is synchronized across the network. Since this command is local only, using it during a mission can cause all sorts of weird issues. To get proper synchronization use this command in the object's init line or in a script called from its init line with a call compile preprocessFile command (and not execVM ).
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		getPilotCameraPosition
	</Keyword>
	<Description>
		Returns model space coordinates of the object airplane or helicopter pilotCamera.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getPilotCameraPosition
	</WikiPage>
	<Syntax>
		getPilotCameraPosition Object
	</Syntax>
	<RawSyntax>
		getPilotCameraPosition object
	</RawSyntax>
	<Example>
		$Code$_pilotCamPos = getPilotCameraPosition vehicle player$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		doFSM
	</Keyword>
	<Description>
		Orders a unit to process command defined by FSM file (silently).
	Unlike with execFSM where _this is passed to the FSM, the following parameters are passed when using doFSM/commandFSM:
	_leader
	leader of subgroup with this command
	_destination
	command destination/position
	_target
	command target
	_units
	list of all persons in subgroup
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/doFSM
	</WikiPage>
	<Syntax>
		Object/Array doFSM Array
	</Syntax>
	<RawSyntax>
		unit doFSM [fsmName, position, target]
	</RawSyntax>
	<Example>
		$Code$_soldierOne doFSM ["move.fsm", position player, player ];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(August 4, 2010)
	Do not doStop a unit in a FSM called with doFSM or commandFSM. Doing so nevertheless will halt your FSM, since no links are followed anymore (doing so in an end state should be fine though). Also this may crash your game in certain mysterious circumstances.
	You may design your FSM so that they may be called with doFSM/commandFSM and execFSM likewise by checking if _units or _this is nil and then init the variables accordingly. Just remember that you should use the low level moveTo (together with moveToCompleted, moveToFailed ) if do-/commandFSM'd, and doMove or commandMove (together with unitReady ) if execFSM'd. A moveTo in an FSM started with execFSM won't do anything, likewise doMove in a FSM started with doFSM or commandFSM wont work either. Think about it for a minute and you will see why. (hint: a unit running a FSM called with doFSM or commandFSM will _never_ return true for (unitReady _unit) )
	Anyway, if you want to be able to call your FSM either way, a "ready" condition might look light this: (moveToCompleted _unit) || (moveToFailed _unit) || (unitReady _unit), assuming you have a moveTo or a doMove (depending on how the fsm is called) in the prior state.
	</NextNote>
		(February 14, 2015)
	Adding to Rübe's note, doFSM can be checked if it has finished by unitReady as of 2015 and it will return true when your FSM has completed.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		sideUnknown
	</Keyword>
	<Description>
		The unknown side.
	Used when the side of a unit is unknown, e.g. for spotted targets with insufficient information.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/sideUnknown
	</WikiPage>
	<Syntax>
		sideUnknown
	</Syntax>
	<RawSyntax>
		sideUnknown
	</RawSyntax>
	<Example>
		$Code$//soldier1 and soldier2 of different sides and out of sight
	soldier1 reveal soldier2;
	hint str (soldier1 nearTargets 1000);
	//returns: [[[1557.96,5047.4,1.32402],"SoldierWB",UNKNOWN,0.0155183,soldier2,5]]
	soldier1 reveal [soldier2,1.5];
	//returns: [[[1556.52,5050.08,1.32402],"SoldierWB",WEST,0.0211193,soldier2,5]]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Side
	</ReturnValue>

</NextListItem>

	<Keyword>
		isHidden
	</Keyword>
	<Description>
		Return whether the person is hidden (reached the hiding position). For command that tests general visibility of an object use isObjectHidden
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isHidden
	</WikiPage>
	<Syntax>
		isHidden Object
	</Syntax>
	<RawSyntax>
		isHidden person
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(January 1, 2017)
	Tested in 1.67 DEV, seems to always return false
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		magazinesAmmoFull
	</Keyword>
	<Description>
		Returns array of arrays of all vehicle's magazines with extended information about them.
	Output format :
	[[magazine1],[magazine2],[magazine3]...[magazineN]]
	Magazine format :
	0: Magazine class name
	1: Magazine current ammo count
	2: Magazine state (true - loaded, false - not loaded)
	3: Magazine type (-1 - n/a, 0 - grenade, 1 - primary weapon mag, 2 - handgun mag, 4 - secondary weapon mag, 65536 - vehicle mag)
	4: Magazine location ("Vest", "Uniform", "Backpack", "") or corresponding currentMuzzle
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/magazinesAmmoFull
	</WikiPage>
	<Syntax>
		magazinesAmmoFull Object
	</Syntax>
	<RawSyntax>
		magazinesAmmoFull vehicle
	</RawSyntax>
	<Example>
		$Code$_magazinesAmmoFull = magazinesAmmoFull player ;
	/*
	[
	["30Rnd_65x39_caseless_mag",30,false,-1,"Uniform"],
	["30Rnd_65x39_caseless_mag",30,false,-1,"Vest"],
	["16Rnd_9x21_Mag",16,false,-1,"Vest"],
	["SmokeShellGreen",1,true,0,"SmokeShellGreenMuzzle"],
	["Chemlight_green",1,true,0,"ChemlightGreenMuzzle"],
	["HandGrenade",1,true,0,"HandGrenadeMuzzle"],
	["30Rnd_65x39_caseless_mag",30,true,1,"arifle_MX_ACO_pointer_F"],
	["16Rnd_9x21_Mag",16,true,2,"hgun_P07_F"]
	]
	*/$/Code$
	</NextExample>
		$Code$_magazinesAmmoFull = magazinesAmmoFull Mi_48;
	/*
	[
	["250Rnd_30mm_APDS_shells",250,false,-1,""],
	["250Rnd_30mm_HE_shells",250,true,65536,"gatling_30mm"],
	["8Rnd_LG_scalpel",8,true,65536,"missiles_SCALPEL"],
	["38Rnd_80mm_rockets",38,true,65536,"rockets_Skyfire"]
	]
	*/$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(December 20, 2014)
	When used on vehicles this will only return all magazines associated with a single turretPath (which one depends on the actual armament of the vehicle, usually the first armed turretPath or alternatively turretPath [-1]).
	If you want to get all turrets' magazines, use allTurrets and magazinesTurret.
	-- Actium ( talk ) 15:40, 20 December 2014 (CET)
	</NextNote>
		(February 10, 2015)
	As Actium said, this function seems to extract data from:
	configfile "CfgVehicles" _the_vehicle_you_want "Turrets" "MainTurret" "magazines".
	Some vehicles return an empty field {} because magazines are in straight in:
	configfile "CfgVehicles" _the_vehicle_you_want "magazines" (often dedicated to flares only).
	This is the case of WY-55 Hellcat. This function returns an empty array.
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		max
	</Keyword>
	<Description>
		The greater of a,b
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/max
	</WikiPage>
	<Syntax>
		Number max Number
	</Syntax>
	<RawSyntax>
		a max b
	</RawSyntax>
	<Example>
		$Code$3 max 2
	// Result is 3$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		assignAsGunner
	</Keyword>
	<Description>
		Assign a unit as gunner of a vehicle. Used together with orderGetIn to order subordinate units to get in as gunner of a specific vehicle. Before usage of this command a subordinate unit hasn't got the option to get into the gunner place of the vehicle.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/assignAsGunner
	</WikiPage>
	<Syntax>
		Object assignAsGunner Object
	</Syntax>
	<RawSyntax>
		unitName assignAsGunner vehicleName
	</RawSyntax>
	<Example>
		$Code$_soldier1 assignAsGunner _tank
	[_soldier1] orderGetIn true$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		lineIntersects
	</Keyword>
	<Description>
		Checks for object intersection with a virtual line between two positions. Returns true if intersects with an object.
	NOTE: Doesn't work under water. Max harcoded distance is 1000m.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lineIntersects
	</WikiPage>
	<Syntax>
		lineIntersects Array
	</Syntax>
	<RawSyntax>
		lineIntersects [begPos, endPos, objIgnore1, objIgnore2]
	</RawSyntax>
	<Example>
		$Code$lineIntersects [ eyePos player, aimPos chopper, player, chopper]$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(may 31, 2012)
	Please note the difference :
	terrainIntersect
	terrainIntersectASL
	lineIntersects
	lineIntersectsWith
	lineIntersectsObjs
	intersect
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		unitAddons
	</Keyword>
	<Description>
		Returns list with addons the unit belongs to.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/unitAddons
	</WikiPage>
	<Syntax>
		unitAddons String
	</Syntax>
	<RawSyntax>
		unitAddons className
	</RawSyntax>
	<Example>
		$Code$hint str unitAddons typeOf player ; //["A3_Characters_F_BLUFOR"]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(Mar 31, 2014)
	1. (A3 1.14) Old BIS function BIS_fnc_unitAddon has been deprecated, please always use unitAddons instead.
	$Code$ hint str ([player] call BIS_fnc_unitAddon ) // same as unitAddons ( typeOf player )$/Code$
	2. To return the addon that a weapon belongs to, use BIS_fnc_weaponAddon instead. E.g.
	$Code$
	(( primaryWeapon player ) call BIS_fnc_weaponAddon ); //return: "A3_Weapons_F_Rifles_Khaybar"
	$/Code$
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlCommit
	</Keyword>
	<Description>
		Commit control animation.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlCommit
	</WikiPage>
	<Syntax>
		Control ctrlCommit Number
	</Syntax>
	<RawSyntax>
		controlName ctrlCommit time
	</RawSyntax>
	<Example>
		$Code$_control ctrlCommit 2$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(April 11, 2015)
	Use this command if you want to for example change the position or size of a control.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		commandMove
	</Keyword>
	<Description>
		Order the given unit(s) to move to the given location (via the radio). Exactly the same as doMove, except this command displays a radio message.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/commandMove
	</WikiPage>
	<Syntax>
		Object/Array commandMove Array
	</Syntax>
	<RawSyntax>
		unitName commandMove position
	</RawSyntax>
	<Example>
		$Code$_soldier1 commandMove ( getMarkerPos "Marker1")$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		agents
	</Keyword>
	<Description>
		Return a list of agents in the current mission.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/agents
	</WikiPage>
	<Syntax>
		agents
	</Syntax>
	<RawSyntax>
		agents
	</RawSyntax>
	<Example>
		$Code${ agent _x moveTo position player } forEach agents ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(April 4, 2012)
	Note that agents returns a reference to the agent itself, not the object. For example: {alive _x} count agents; would return an error. But you can assign the agent a reference using setVariable, and then reference it, for example: {alive (_x getVariable ["agentObject",objNull]) count agents; would return the number of agents still alive - BUT you would need to define "agentObject" after you create the agent, for example:
	_agent = createAgent [_type, _position, [], _radius, "NONE"];_agent setVariable["agentObject",_agent,true];
	</NextNote>
		(August 1, 2013)
	Alternatively, to get object from agent reference use agent command.
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		hasWeapon
	</Keyword>
	<Description>
		Checks if a unit has the given weapon.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/hasWeapon
	</WikiPage>
	<Syntax>
		Object hasWeapon String
	</Syntax>
	<RawSyntax>
		unitName hasWeapon weaponName
	</RawSyntax>
	<Example>
		$Code$?!( player hasWeapon "M16") : player addWeapon "M16"$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(September 11, 2014)
	This command doesn't work for Items in Arma 3, use this instead.
	$Code$" ItemGPS " in ( items player + assignedItems player ) OR ' ItemGPS ' in ( items player + assignedItems player ) $/Code$
	Returns true if unit has gps in inventory, assigned or not.
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		menuDelete
	</Keyword>
	<Description>
		Deletes menu entry on given path.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/menuDelete
	</WikiPage>
	<Syntax>
		menuDelete Array
	</Syntax>
	<RawSyntax>
		menuDelete [idc, path, text]
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		distanceSqr
	</Keyword>
	<Description>
		Computes the squared distance between two objects or positions.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/distanceSqr
	</WikiPage>
	<Syntax>
		Object/Position distanceSqr Object/Position
	</Syntax>
	<RawSyntax>
		var1 distanceSqr var2
	</RawSyntax>
	<Example>
		$Code$player distanceSqr ( leader player )$/Code$
	</NextExample>
		$Code$_distance = sqrt ((x2 - x1) ^ 2 + (y2 - y1) ^ 2 + (z2 - z1) ^ 2);
	_distanceSqr = (x2 - x1) ^ 2 + (y2 - y1) ^ 2 + (z2 - z1) ^ 2;
	_distance = [x1, y1, z1] distance [x2, y2, z2];
	_distanceSqr = [x1, y1, z1] distanceSqr [x2, y2, z2];
	_distance = sqrt ([x1, y1, z1] distanceSqr [x2, y2, z2]);
	_distanceSqr = ([x1, y1, z1] distance [x2, y2, z2]) ^ 2;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		breakOut
	</Keyword>
	<Description>
		Breaks the code execution out of scope {} named name. nil is returned. Scope name can be assigned using scopeName command.
	Since Arma 3 v1.47, breakOut can be used to return a value. It is the closest SQF comes to having "return" like operation.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/breakOut
	</WikiPage>
	<Syntax>
		breakOut String
	</NextSyntax>
		Anything breakOut String
	</Syntax>
	<RawSyntax>
		breakOut name
	</NextRawSyntax>
		value breakOut name
	</RawSyntax>
	<Example>
		$Code$scopeName "main";
	while { true } do {
	scopeName "loop1";
	while { true } do {
	scopeName "loop2";
	if (condition1) then { breakTo "main"}; // Breaks all scopes and return to "main"
	if (condition2) then { breakOut "loop2"}; // Breaks scope named "loop2"
	sleep 1;
	};
	sleep 1;
	};$/Code$
	</NextExample>
		$Code$call {
	scopeName "main";
	call {
	123 breakOut "main"
	};
	345
	}; // call returns 123$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(19 Aug, 2008)
	When "name" is nil, the command is ignored.
	When "name" is an undefined scope name or "", the script quits current scope.
	$Code$if (true) then {
	hint "1";
	breakOut nil;
	hint "2";
	}; //result "2"
	if (true) then {
	hint "1";
	breakOut "";
	hint "2";
	}; //result "1"
	if (true) then {
	hint "1";
	breakOut "dskfhdsklfh";
	hint "2";
	}; //result "1"
	$/Code$
	</NextNote>
		(August 27, 2015)
	breakOut can still be used if multiple scopes share identical names. It will simply break out of the nearest scope that matches the name parameter you've used. For example:
	$Code$call {
	scopeName "Main"; //Parent Main
	call {
	scopeName "Main"; //Child Main
	"String" breakOut "Main"; //Will break out of child main and return "String" to parent main
	};
	};
	$/Code$
	Therefore you are able to consistently reuse scope names such as "Main", "Child", "Primary", "Secondary", etc throughout functions without worrying about having to ensure you create unique names for each scope.
	</Note>
	<ReturnValue>
		Nothing - Anything
	</ReturnValue>

</NextListItem>

	<Keyword>
		entities
	</Keyword>
	<Description>
		Returns a list of all alive and dead entities of the given type or deriving from the given type. Units in vehicles are ignored. When empty string "" is passed for the type, all entity types are returned.
	Alternative syntax introduced in Arma 3 v1.65.138685 allows to filter entities by type and alive status as well as to return entities currently in vehicles. Optimisation tip : Keep number of types in both includeTypes and excludeTypes arrays to a minimum by possibly using parent/base classes. If you have to use several types, arrange them in order so that the more common types go at the beginning of the array.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/entities
	</WikiPage>
	<Syntax>
		entities String
	</NextSyntax>
		entities Array
	</Syntax>
	<RawSyntax>
		entities type
	</NextRawSyntax>
		entities [typesInclude, typesExclude, includeCrews, excludeDead]
	</RawSyntax>
	<Example>
		$Code$_allcars = entities "Car";$/Code$
	</NextExample>
		$Code$// Return all alive entities on the map:
	_allalive = entities [[], [], true, true ];$/Code$
	</NextExample>
		$Code$// Return dead and alive entities but logic:
	_notlogic = entities [[], ["Logic"], true ];$/Code$
	</NextExample>
		$Code$// Return all alive west soldiers on foot:
	_footsoldiers = entities [["SoldierWB"], [], false, true ];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(Mar 27, 2014)
	In ArmA3 ver 1.14 type (string) can be any children class under configfile "CfgVehicles". e.g. $Code$ entities "All"; //or entities "CAManBase"; etc.$/Code$
	</NextNote>
		(July 12, 2016)
	In A3 1.62 $Code$entities "CAManBase"$/Code$ does not include entities inside vehicles (crew).
	</Note>
	<ReturnValue>
		Array - Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		resetSubgroupDirection
	</Keyword>
	<Description>
		Resets direction of subgroup.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/resetSubgroupDirection
	</WikiPage>
	<Syntax>
		resetSubgroupDirection Object
	</Syntax>
	<RawSyntax>
		resetSubgroupDirection unit
	</RawSyntax>
	<Example>
		$Code$resetSubgroupDirection myUnit;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setFlagTexture
	</Keyword>
	<Description>
		Sets flag texture.
	If texture is "", flag is not drawn.
	Custom texture can be used, as long as it is in *.jpg format, and has dimensions of 200px*200px.
	The page Flag Textures shows which textures are available in each game.
	NOTE : In MP this command has to be executed where Flag Pole is local. If you add Flag Pole in the editor, it will be local to the server, so executing setFlagTexture on the server will change flag texture on all clients. The command is also persistent and is synchronised for JIP clients.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setFlagTexture
	</WikiPage>
	<Syntax>
		Object setFlagTexture String
	</Syntax>
	<RawSyntax>
		flag setFlagTexture texture
	</RawSyntax>
	<Example>
		$Code$_flagE setFlagTexture "\ca\misc\data\sever_vlajka.paa";$/Code$
	</NextExample>
		$Code$_flagW setFlagTexture "\ca\misc\data\usa_vlajka.paa";$/Code$
	</NextExample>
		$Code$flag1 setFlagTexture "\A3\Data_F\Flags\Flag_red_CO.paa";$/Code$
	</NextExample>
		$Code$flagARMA3 setFlagTexture "\a3\ui_f\data\Logos\arma3_expansion_ca.paa";$/Code$
	</NextExample>
		$Code$// Capturable OPFOR flag:
	private _flag = "FlagPole_F" createVehicle position player ;
	_flag setFlagTexture "\A3\Data_F\Flags\Flag_CSAT_CO.paa";
	_flag setFlagSide east ;$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		enableSentences
	</Keyword>
	<Description>
		Enables radio transmissions to be heard and seen on screen. It does not affect KBTell conversations.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/enableSentences
	</WikiPage>
	<Syntax>
		enableSentences Boolean
	</Syntax>
	<RawSyntax>
		enableSentences enable
	</RawSyntax>
	<Example>
		$Code$enableSentences false;$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		hcRemoveGroup
	</Keyword>
	<Description>
		Removes group from unit's high command bar.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/hcRemoveGroup
	</WikiPage>
	<Syntax>
		Object hcRemoveGroup Group
	</Syntax>
	<RawSyntax>
		unit hcRemoveGroup group
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		add3DENLayer
	</Keyword>
	<Description>
		Add an editing layer in Eden Editor.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/add3DENLayer
	</WikiPage>
	<Syntax>
		Number add3DENLayer String
	</Syntax>
	<RawSyntax>
		parentLayerID add3DENLayer name
	</RawSyntax>
	<Example>
		$Code$_myLayer = -1 add3DENLayer "Enemy Base";
	_myLayerFort = _myLayer add3DENLayer "Fortifications";
	_myLayerPatrol = _myLayer add3DENLayer "Patrols";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		hcShowBar
	</Keyword>
	<Description>
		Shows or hides high command bar.
	There must be some groups under HC command to show HC bar.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/hcShowBar
	</WikiPage>
	<Syntax>
		hcShowBar Boolean
	</Syntax>
	<RawSyntax>
		hcShowBar bool
	</RawSyntax>
	<Example>
		$Code$hcShowBar true ;$/Code$
	</NextExample>
		$Code$hcShowBar false ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setParticleRandom
	</Keyword>
	<Description>
		Sets randomization of particle source parameters. Correspondence between CfgCloudlets class param names and command array of params:
	$Code$particleSource setParticleRandom
	[
	lifeTimeVar,
	positionVar,
	moveVelocityVar,
	rotationVelocityVar,
	sizeVar,
	colorVar,
	randomDirectionPeriodVar,
	randomDirectionIntensityVar,
	angleVar,
	bounceOnSurfaceVar
	];$/Code$
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setParticleRandom
	</WikiPage>
	<Syntax>
		Object setParticleRandom Array
	</Syntax>
	<RawSyntax>
		particleSource setParticleRandom [lifeTime, position, moveVelocity, rotationVelocity, size, color, randomDirectionPeriod, randomDirectionIntensity, angle, bounceOnSurface]
	</RawSyntax>
	<Example>
		$Code$_PS setParticleRandom [0, [0.1, 0.1, 0.1], [0, 0, 0.5], 0, 0.1, [0, 0, 0, 0], 0, 0];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(July 03, 2013)
	Support of parameter bounceOnSurface ( Number - 0-1) is in the game since Arma 3 version 0.74. It's variability in speed's loosing in collision with ground. Requires collisions with ground enabled by script command setParticleParams.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		worldToModel
	</Keyword>
	<Description>
		Converts position from world space to object model space.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/worldToModel
	</WikiPage>
	<Syntax>
		Object worldToModel Array
	</Syntax>
	<RawSyntax>
		model worldToModel position
	</RawSyntax>
	<Example>
		$Code$_relPos = myObject worldToModel [0,0,0];$/Code$
	</NextExample>
		$Code$_relPos = player worldToModel position car;$/Code$
	</NextExample>
		$Code$_relPos = car worldToModel [12000,5000];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		waypointStatements
	</Keyword>
	<Description>
		Gets the waypoint statements.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/waypointStatements
	</WikiPage>
	<Syntax>
		waypointStatements Array
	</Syntax>
	<RawSyntax>
		waypointStatements waypoint
	</RawSyntax>
	<Example>
		$Code$waypointStatements [groupOne,1]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		simpleTasks
	</Keyword>
	<Description>
		Return all simple tasks assigned to given person.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/simpleTasks
	</WikiPage>
	<Syntax>
		simpleTasks Object
	</Syntax>
	<RawSyntax>
		simpleTasks person
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlAngle
	</Keyword>
	<Description>
		Gets rotation info of an ST_PICTURE control.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlAngle
	</WikiPage>
	<Syntax>
		ctrlAngle Control
	</Syntax>
	<RawSyntax>
		ctrlAngle control
	</RawSyntax>
	<Example>
		$Code$ctrlAngle _control;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		find
	</Keyword>
	<Description>
		Searches for an array element within array or a string within a string. Returns the 0 based index on success or -1 if not found. Search is cASe-seNsItiVE
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/find
	</WikiPage>
	<Syntax>
		Array find Anything
	</NextSyntax>
		String find String
	</Syntax>
	<RawSyntax>
		array find x
	</NextRawSyntax>
		string find x
	</RawSyntax>
	<Example>
		$Code$["Apples","Oranges","Pears"] find "Oranges"; //result is 1
	[1,[2],[[3]]] find [[3]]; //result is 2$/Code$
	</NextExample>
		$Code$if ( magazines player find "Strela" = 0) then { hint "You've got Strela!"};$/Code$
	</NextExample>
		$Code$hint str ("japa is the man!" find "the man!"); //8$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(January 4, 2015)
	Using nil on either side of find will make the whole statement return Nothing :
	$Code$_array = [1,2, nil,4,5];
	_result = _array find nil;
	hintSilent str ( isNil "_result"); //true
	_result = nil find 1;
	hintSilent str ( isNil "_result"); //true$/Code$
	</NextNote>
		(April 10, 2015)
	Find doesn't work with multidimensional arrays in OFP/CWA. It will always returns -1.
	</NextNote>
		(May 17, 2016)
	This command is unreliable/broken when it comes to some non-ASCII characters (as of Arma 3 1.58):
	$Code$"abcßdef" find "c"
	- 2
	"abcßdef" find "ß"
	- 3
	"abcßdef" find "d"
	- 5$/Code$
	</NextNote>
		(July 7, 2016 10:56 (UTC))
	Not quite unreliable, just unexpected! Strings are tracked in terms of bytes rather than in actual character positions; all strings are stored in UTF-8 format. In other words, the eszett character is in Unicode, which takes up two bytes rather than one as it is within the 128-255 range of Unicode. (Similar results would be expected for the division symbol, the umlaut, accented e's, etc.) Symbols that are particularly high in the Unicode range may take up three bytes, or even four for the truly exceptional characters, although Arma 3's default fonts are unlikely to render them. This definitely complicates any script which assumes any printable character is a single byte, however, and unfortunately I'm not skilled enough with internationalisation to recommend any robust fix.
	</Note>
	<ReturnValue>
		Number - Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		sliderSetPosition
	</Keyword>
	<Description>
		Set current thumb position of slider idc of topmost user dialog.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/sliderSetPosition
	</WikiPage>
	<Syntax>
		sliderSetPosition Array
	</NextSyntax>
		Control sliderSetPosition Number
	</Syntax>
	<RawSyntax>
		sliderSetPosition [idc, pos]
	</NextRawSyntax>
		control sliderSetPosition pos
	</RawSyntax>
	<Example>
		$Code$sliderSetPosition [101, 50];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctRowControls
	</Keyword>
	<Description>
		Returns array of controls on the row with the given index.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctRowControls
	</WikiPage>
	<Syntax>
		Control ctRowControls Number
	</Syntax>
	<RawSyntax>
		Control ctRowControls Number
	</RawSyntax>
	<Example>
		$Code$_array = _control ctRowControls 0;$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		setUnitTrait
	</Keyword>
	<Description>
		Enables or disables a trait or alters a trait of the given unit. Custom trait can only be a bool.
	Default traits are:
	audibleCoef (scalar)
	camouflageCoef (scalar)
	engineer (bool) - Ability to repair vehicles and defuse mines using toolkit
	explosiveSpecialist (bool) - Ability to defuse mines using toolkit
	loadCoef (scalar) - Equipment weight multiplier affecting fatigue and stamina
	medic (bool) - Ability to use medikit on self and others
	UAVHacker (bool)
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setUnitTrait
	</WikiPage>
	<Syntax>
		Object setUnitTrait Array
	</Syntax>
	<RawSyntax>
		unit setUnitTrait [skill_name, value, isCustom]
	</RawSyntax>
	<Example>
		$Code$player setUnitTrait ["Medic", true ];$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		(April 27, 2016)
	The higher the value for the loadCoef the less stamina a unit has. Negative values will dramatically increase the stamina actually to a point where it extends the stamina bar.
	</NextNote>
		(October 20, 2017)
	explosive specialists can defuse mines (ie satchel charges), whilst engineers cannot.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		clearBackpackCargo
	</Keyword>
	<Description>
		Removes all backpacks from ammo box (or any general weapon holder container).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/clearBackpackCargo
	</WikiPage>
	<Syntax>
		clearBackpackCargo Object
	</Syntax>
	<RawSyntax>
		clearBackpackCargo box
	</RawSyntax>
	<Example>
		$Code$clearBackpackCargo myBox;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(July 6, 2017)
	This will remove not only backpacks, but vests and uniforms as well.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setWaypointLoiterRadius
	</Keyword>
	<Description>
		Assignes loiter radius to waypoint
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setWaypointLoiterRadius
	</WikiPage>
	<Syntax>
		Waypoint setWaypointLoiterRadius Number
	</Syntax>
	<RawSyntax>
		waypoint setWaypointLoiterRadius radius
	</RawSyntax>
	<Example>
		$Code$[_grp, 2] setWaypointLoiterRadius 200;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		sort
	</Keyword>
	<Description>
		Attempts to sort given array either in ascending ( true ) or descending ( false ) order. All array elements should be one of the following types:
	String - array of strings (["a","b","c"...])
	Number - array of numbers ([1,2,3...])
	Array - array of subarrays ([["a",1,2],["b",3,4],["c",5,6]...]). Subarrays should be of the same structure. Subarray elements other than String or Number will be ignored during sorting.
	Mixed arrays (["a",1,[true]...]) are not supported and results are undefined.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/sort
	</WikiPage>
	<Syntax>
		Array sort Boolean
	</Syntax>
	<RawSyntax>
		array sort order
	</RawSyntax>
	<Example>
		$Code$_arr = [5.21725,1.30859,4,5.03028,1];
	_arr sort true ;
	hint str _arr; //[1,1.30859,4,5.03028,5.21725]$/Code$
	</NextExample>
		$Code$_dev = ["ja","pa","pa","tram","tara"];
	_dev sort false ;
	hint str _dev; //["tram","tara","pa","pa","ja"]$/Code$
	</NextExample>
		$Code$#define ASC true
	#define DESC false
	_scores = [[123,"bob",15],[123,"bill",20],[200,"dave",21],[200,"steve",11]];
	_scores sort DESC;
	hint str _scores; //[[200,"steve",11],[200,"dave",21],[123,"bob",15],[123,"bill",20]]$/Code$
	</NextExample>
		$Code$// Sort buildings by distance and return position of the most distant building:
	_buildings = player nearObjects ["Land_Cargo_Patrol_V1_F", 500];
	_buildings = _buildings apply { [_x distance player, _x] };
	_buildings sort false ;
	hint format [
	"Most distant building is at %1, distance %2 m",
	getPos (_buildings select 0 select 1),
	round (_buildings select 0 select 0)
	];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(April 16, 2015)
	The algorithm for sorting subarrays: compare 1st element, if equal compare 2nd, if equal compare 3rd...etc.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		enableChannel
	</Keyword>
	<Description>
		Enables/disables UI functionality which is responsible for sending text or voice chat to the given chat channel. If the channel was disabled in description.ext, it can be enabled with this command, however the UI functionality changes will be local to the PC executing this command. What this command cannot do:
	It cannot disable incoming text or voice
	It cannot interrupt own client's transmission in progress
	It cannot affect any Custom Radio channels, only channels 0-5
	It cannot persist, so if user is logged out, the changes are reset
	It has no effect on chat related scripting commands, such as vehicleChat, globalChat, globalRadio, sideRadio, etc.
	So in short, just like with getPlayerChannel, this command provides a nice ability to hack into chat UI with some limitations. And the reason why it is possible to disable entire channels (except Group) in description.ext, is because no one can talk or text, therefore no transmission is happening. NOTE: Group channel cannot be disabled, neither with enableChannel, nor with description.ext param. Channel / Number correspondence:
	0 = Global
	1 = Side
	2 = Command
	3 = Group
	4 = Vehicle
	5 = Direct
	6-15 = Custom Radio (Is not supported by enableChannel )
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/enableChannel
	</WikiPage>
	<Syntax>
		Number enableChannel Boolean
	</NextSyntax>
		Number enableChannel Array
	</Syntax>
	<RawSyntax>
		channel enableChannel enable
	</NextRawSyntax>
		channel enableChannel [chat, VoN]
	</RawSyntax>
	<Example>
		$Code$0 enableChannel false ; // Disable user ability to send voice and text on global channel$/Code$
	</NextExample>
		$Code$0 enableChannel [ true, false ]; // Enable user ability to send text but disable voice on global channel$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
		(June 17, 2016)
	If the user is admin, global channel is fully enabled, regardless of this command.
	</NextNote>
		(July 30, 2016)
	Alternative Syntax supports Custom Radio Channels
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		lineIntersectsWith
	</Keyword>
	<Description>
		Returns objects intersecting with the virtual line from begPos to endPos. By default resulting array of intersecting objects is unsorted. To sort by distance set sortByDistance param to true. NOTE: Doesn't work under water. Max hardcoded distance is 1000m.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lineIntersectsWith
	</WikiPage>
	<Syntax>
		lineIntersectsWith Array
	</Syntax>
	<RawSyntax>
		lineIntersectsWith [begPos, endPos, objIgnore1, objIgnore2, sortByDistance]
	</RawSyntax>
	<Example>
		$Code$_objects = lineIntersectsWith [ eyePos player, AGLtoASL screenToWorld [0.5,0.5]];$/Code$
	</NextExample>
		$Code$// Sort by distance:
	_objects = lineIntersectsWith [ eyePos player, AGLtoASL screenToWorld [0.5,0.5], objNull, objNull, true ];$/Code$
	</NextExample>
		$Code$// Ignore objects:
	_objects = lineIntersectsWith [ eyePos player, aimPos chopper, player, chopper];$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(may 31, 2012)
	Please note the difference :
	terrainIntersect
	terrainIntersectASL
	lineIntersect s
	lineIntersect s With
	lineIntersect s Objs
	intersect
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		lbColor
	</Keyword>
	<Description>
		Returns the text color of the item with the given index of the listbox or combobox with id idc of the topmost user dialog.
	The color is returned in format Color.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lbColor
	</WikiPage>
	<Syntax>
		lbColor Array
	</NextSyntax>
		Control lbColor Number
	</Syntax>
	<RawSyntax>
		lbColor [idc, index]
	</NextRawSyntax>
		control lbColor index
	</RawSyntax>
	<Example>
		$Code$_colour = lbColor [101, 0];$/Code$
	</NextExample>
		$Code$_color = _control lbColor 0;$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
		More information on the LB command family can be found here
	</Note>
	<ReturnValue>
		Array - Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		allDeadMen
	</Keyword>
	<Description>
		Return a list of dead units including agents. Dead unit might be inside vehicle.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/allDeadMen
	</WikiPage>
	<Syntax>
		allDeadMen
	</Syntax>
	<RawSyntax>
		allDeadMen
	</RawSyntax>
	<Example>
		$Code${ deleteVehicle _x } forEach allDeadMen;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(17 Oct, 2009)
	As dead men are civilian side, don't try to count them with {side _x isEqualTo EAST} count allDeadMen; result will always be 0.
	Use the configfile "side" instead:
	0 = [] spawn {while {true} do {sleep 0.1; _westScore = {getNumber (configfile "CfgVehicles" typeOf _x "side") == 0} count allDeadMen; hintSilent format ["East killed: %1",_westScore]};};
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		doFire
	</Keyword>
	<Description>
		Order the given unit(s) to fire on the given target (without radio messages).
	The target is set with doTarget or commandTarget.
	The target can be a unit or a vehicle, but not an object.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/doFire
	</WikiPage>
	<Syntax>
		Object/Array doFire Object
	</Syntax>
	<RawSyntax>
		unitName doFire target
	</RawSyntax>
	<Example>
		$Code$_ESoldier1 doFire _WSoldier1;$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		(August 3, 2006)
	Notes from before the conversion:
	It is often helpful to use doTarget first.
	</NextNote>
		(March 25, 2007)
	A unit will not execute this command when his behaviour is set to "careless".
	</NextNote>
		(Feb 18, 2012)
	Board dofire not working in arma2 1.11. an entity he throws he shoots not only.
	</NextNote>
		(June 7, 2012)
	Unitname dofire objnull does not work like it does in commandfire. Target var has to be real (Arma2 AO) might be different in other versions.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		markerSize
	</Keyword>
	<Description>
		Returns marker size. This command is identical to getMarkerSize.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/markerSize
	</WikiPage>
	<Syntax>
		markerSize String
	</Syntax>
	<RawSyntax>
		markerSize markerName
	</RawSyntax>
	<Example>
		$Code$_mSize = markerSize "Marker1";$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlChecked
	</Keyword>
	<Description>
		Returns the current state of given checkbox in checkboxes control (CT_CHECKBOXES, type = 7; ). Since Arma 3 v1.71.141591 it is possible to query multiple checkboxes by providing checkbox index. For more information see DialogControls-CheckBoxes.
	Note: The "onCheckBoxesSelChanged" control EH returns the control, index of changed checkbox and its current checked state. The checked state however is not a Boolean but Number 0 or 1. To convert ctrlChecked command output into number as well, use parseNumber command.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlChecked
	</WikiPage>
	<Syntax>
		ctrlChecked Control
	</NextSyntax>
		Control ctrlChecked Number
	</Syntax>
	<RawSyntax>
		ctrlChecked control
	</NextRawSyntax>
		control ctrlChecked index
	</RawSyntax>
	<Example>
		$Code$ctrlChecked _control;$/Code$
	</NextExample>
		$Code$_control ctrlChecked 3;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean - Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		dynamicSimulationDistanceCoef
	</Keyword>
	<Description>
		A getter for setDynamicSimulationDistanceCoef
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/dynamicSimulationDistanceCoef
	</WikiPage>
	<Syntax>
		dynamicSimulationDistanceCoef String
	</Syntax>
	<RawSyntax>
		dynamicSimulationDistanceCoef class
	</RawSyntax>
	<Example>
		$Code$hint str dynamicSimulationDistanceCoef "IsMoving";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		isTurnedOut
	</Keyword>
	<Description>
		Returns true if given unit is turned out, otherwise false. The output changes to true after unit finished turning out, however will change to false almost immediately after unit is ordered to turn in.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isTurnedOut
	</WikiPage>
	<Syntax>
		isTurnedOut Object
	</Syntax>
	<RawSyntax>
		isTurnedOut unit
	</RawSyntax>
	<Example>
		$Code$_commanderOut = isTurnedOut (tank turretUnit [0,0]);$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		true
	</Keyword>
	<Description>
		Always true
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/true
	</WikiPage>
	<Syntax>
		true
	</Syntax>
	<RawSyntax>
		true
	</RawSyntax>
	<Example>
		$Code$_var = true ;
	systemChat str _var; //true$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		weaponLowered
	</Keyword>
	<Description>
		True if given soldier's weapon is lowered.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/weaponLowered
	</WikiPage>
	<Syntax>
		weaponLowered Object
	</Syntax>
	<RawSyntax>
		weaponLowered unit
	</RawSyntax>
	<Example>
		$Code$isWeaponLowered = weaponLowered player;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(November 11, 2016)
	This command seems to work for player only, not for AI.
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		position
	</Keyword>
	<Description>
		Synonym for getPos.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/position
	</WikiPage>
	<Syntax>
		position Object/Location
	</Syntax>
	<RawSyntax>
		position object
	</RawSyntax>
	<Example>
		$Code$_pos = position player ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		setWaypointSpeed
	</Keyword>
	<Description>
		Switches the group speed mode when the waypoint becomes active.
	Possible values are:
	"UNCHANGED"
	"LIMITED"
	"NORMAL"
	"FULL"
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setWaypointSpeed
	</WikiPage>
	<Syntax>
		Array setWaypointSpeed String
	</Syntax>
	<RawSyntax>
		waypoint setWaypointSpeed mode
	</RawSyntax>
	<Example>
		$Code$[_grp, 2] setWaypointSpeed "FULL";$/Code$
	</Example>
	<Locality>
		undefined / global
	</Locality>
	<Note>
		This scripting command must be executed on the server to work properly in multiplayer
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		waypointLoiterType
	</Keyword>
	<Description>
		Gets the waypoint loiter type. Waypoint uses format Waypoint.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/waypointLoiterType
	</WikiPage>
	<Syntax>
		waypointLoiterType Waypoint
	</Syntax>
	<RawSyntax>
		waypointLoiterType Waypoint
	</RawSyntax>
	<Example>
		$Code$_type = waypointLoiterType [groupOne, 1]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		cadetMode
	</Keyword>
	<Description>
		Returns if the player is currently playing in cadet or veteran mode.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/cadetMode
	</WikiPage>
	<Syntax>
		cadetMode
	</Syntax>
	<RawSyntax>
		cadetMode
	</RawSyntax>
	<Example>
		$Code$? ( cadetMode ) : _AIsoldier setSkill 0.1 //sqs$/Code$
	</NextExample>
		$Code$if ( cadetMode ) then {_AIsoldier setSkill 0.1}; //sqf$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(December 1, 2009)
	In ArmA II, this command will return true if the difficulty level is set to "Recruit" or "Regular". It returns false for the "Veteran" and "Expert" difficulty levels.
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		diag_activeScripts
	</Keyword>
	<Description>
		Returns 4 element array with numbers of currently running scripts in format: [ spawn -ed, execVM -ed, exec -ed, execFSM -ed]
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/diag_activeScripts
	</WikiPage>
	<Syntax>
		diag_activeScripts
	</Syntax>
	<RawSyntax>
		diag_activeScripts
	</RawSyntax>
	<Example>
		$Code$hint str diag_activeScripts ; //[0,0,0,1]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		removeMPEventHandler
	</Keyword>
	<Description>
		Removes MP event handler added by addMPEventHandler. Format of handler is [type,index]. Index is returned by addMPEventHandler. When any handler is removed, all handler indices highter than the deleted one should decremented
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/removeMPEventHandler
	</WikiPage>
	<Syntax>
		Object removeMPEventHandler Array
	</Syntax>
	<RawSyntax>
		unitName removeMPEventHandler [event, index]
	</RawSyntax>
	<Example>
		$Code$player removeMPEventHandler ["killed", 0];$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
		(25 July, 2011)
	At least for MPKilled it needs to be executed where the target unit is local. The effect (the removal) is global.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setTitleEffect
	</Keyword>
	<Description>
		Defines the title effect via [Type, Effect, Text] where
	'Type' can be
	"NONE",
	"OBJECT",
	'Text' defines the shown object, a subclass of CfgTitles.
	"RES"
	'Text' defines a resource class, a subclass of RscTitles.
	"TEXT"
	The 'Text' is shown as text itself. 'Effect' defines a subtype: "PLAIN", "PLAIN DOWN", "BLACK", "BLACK FADED", "BLACK OUT", "BLACK IN", "WHITE OUT" or "WHITE IN".
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setTitleEffect
	</WikiPage>
	<Syntax>
		Object setTitleEffect Array
	</NextSyntax>
		Array setTitleEffect Array
	</Syntax>
	<RawSyntax>
		trigger setTitleEffect [type, effect, text]
	</NextRawSyntax>
		waypoint setTitleEffect [type, effect, text]
	</RawSyntax>
	<Example>
		$Code$_trigger setTitleEffect ["TEXT", "PLAIN DOWN", "Hello world."]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlMapScreenToWorld
	</Keyword>
	<Description>
		Convert screen coordinates in map to world coordinates.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlMapScreenToWorld
	</WikiPage>
	<Syntax>
		Control ctrlMapScreenToWorld Array
	</Syntax>
	<RawSyntax>
		map ctrlMapScreenToWorld [x, y]
	</RawSyntax>
	<Example>
		$Code$_WorldCoord = _Control ctrlMapScreenToWorld _ScreenCoord$/Code$
	</NextExample>
		$Code$_WorldCoord = _Control ctrlMapScreenToWorld [_x,_y]$/Code$
	</NextExample>
		$Code$_WorldCoord = (findDisplay 12 displayCtrl 51) ctrlMapScreenToWorld [_x,_y]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(April 6, 2007)
	Notes:
	You can get the screen coordinates by the UI Event Handlers onMouseButtonDown, onMouseButtonUp, onMouseButtonClick, onMouseButtonDblClick.
	The return Array is in 2-D, you can use it with all set-position commands.
	_x = returnArray select 0;
	_y = returnArray select 1;
	</NextNote>
		(December 2, 2009)
	Notes:
	In VBS2 1.23 this command does not seem to work properly. Therefore when defining UI Event Handlers onMouseButtonClick and onMouseButtonDblClick the functions onMapSingleClick and onDoubleClick (VBS2) can be used instead, these already provide access to the world coordinates of the click event.
	</NextNote>
		The command parameters are screen position coordinates, which may not equate to to the map control's coordinates. A map control's screen coordinates and size can be found use the ctrlPosition command. This is an issue when using the Arma 3 in-game map, which is not fullscreen (all previous titles used full screen map controls, so map control coords did equate to screen coords).
	</NextNote>
		(August 28, 2017)
	This example creates a RscMapControl and hints you the [x,y] position where you clicked.
	$Code$0 spawn {
	disableSerialization;
	_map = findDisplay 46 createDisplay "RscCredits" ctrlCreate ["RscMapControl", -1];
	_map ctrlSetPosition [0,0,1,1];
	_map ctrlCommit 0;
	_map ctrlAddEventHandler ["mouseButtonDown", {
	_ctrl = _this select 0;
	_x = _this select 2;
	_y = _this select 3;
	_pos = _ctrl ctrlMapScreenToWorld [_x, _y];
	hint format ["pos: %1", _pos];
	}];
	};$/Code$
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		isEqualTypeArray
	</Keyword>
	<Description>
		Compares types of all elements of one array to types of all elements of another array.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isEqualTypeArray
	</WikiPage>
	<Syntax>
		Array isEqualTypeArray Array
	</Syntax>
	<RawSyntax>
		arr1 isEqualTypeArray arr2
	</RawSyntax>
	<Example>
		$Code$_arr = [1,true,"three"];
	_arr isEqualTypeArray [0,objNull,""]; // false
	_arr isEqualTypeArray [0,false,""]; // true$/Code$
	</NextExample>
		$Code$_arr = [1,2];
	_arr isEqualTypeArray [0]; // false
	_arr isEqualTypeArray [0,0]; // true
	_arr isEqualTypeArray [0,0,0]; // false$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		isRemoteExecuted
	</Keyword>
	<Description>
		Returns true if the code context is being remote executed by remoteExec or remoteExecCall. In SP always returns false. See also isRemoteExecutedJIP
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isRemoteExecuted
	</WikiPage>
	<Syntax>
		isRemoteExecuted
	</Syntax>
	<RawSyntax>
		isRemoteExecuted
	</RawSyntax>
	<Example>
		$Code$_remoteExecuted = isRemoteExecuted ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(September 11, 2017)
	NOTE : When remoteExec / remoteExecCall is called from a headless client to client, this will always return as false.
	This effect also occurs with remoteExecutedOwner - it will return always return 0 from a headless client..
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		everyContainer
	</Keyword>
	<Description>
		Returns array of all containers (uniforms, vests, backpacks) stored in given crate or vehicle. Used for accessing containers content stored in ammo box or ground holder.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/everyContainer
	</WikiPage>
	<Syntax>
		everyContainer Object
	</Syntax>
	<RawSyntax>
		everyContainer box
	</RawSyntax>
	<Example>
		$Code$everyContainer cursorTarget ;
	// [
	//["V_PlateCarrier1_rgr",2bc06b00# 163955: dummyweapon.p3d],
	//["U_B_CombatUniform_mcam",2bc07900# 163954: dummyweapon.p3d]
	//]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(July 20, 2017)
	The returned array is in the following format:
	$Code$[
	[containerClassname1, containerObject1],
	[containerClassname2, containerObject2],
	....
	[containerClassnameN, containerObjectN]
	]
	$/Code$
	Please do note that typeOf containerObjectN does not return containerClassnameN but rather the containerClass configured in config (usually "supplyN")
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		forEach
	</Keyword>
	<Description>
		Executes the given command(s) on every item of an array.
	The array items are represented by the magic variable _x. The array indices are represented by _forEachIndex.
	In ArmA2 & VBS2, the variable _x is always local to the forEach block so it is safe to nest them.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/forEach
	</WikiPage>
	<Syntax>
		String/Code forEach Array
	</Syntax>
	<RawSyntax>
		script forEach array
	</RawSyntax>
	<Example>
		$Code${ _x setDammage 1; } forEach units group player ;$/Code$
	</NextExample>
		$Code$// This command can also easily be used to execute a single command multiple times without respect to the array items.
	{ player addMagazine "M16"; } forEach [1, 2, 3, 4];$/Code$
	</NextExample>
		$Code$// You can also use multiple commands in the same block.
	{
	_x setCaptive true ;
	removeAllWeapons _x ;
	doStop _x ;
	} forEach units group this ;$/Code$
	</NextExample>
		$Code$// To get the index of a forEach loop, use _forEachIndex.
	{ systemChat format ["%1", _forEachIndex];} forEach [1,2,3];
	// Will return: "0", "1", "2" in systemChat messages.$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(July 20, 2010)
	If arrays are used in forEach loops, _x uses them by reference, so any changes to _x will be applied to the original:
	$Code$_arr1 = [1,2,3];
	_arr2 = [6,7,8];
	{_x set [1,"x"]} forEach [_arr1,_arr2];$/Code$
	will change _arr1 to [1,"x",3], and _arr2 to [6,"x",8].
	</NextNote>
		(August 29, 2014)
	forEach returns any (the last passed value will be the return value or just Nothing, depends on the function called).
	$Code$
	_var = {_x} forEach [ nil,"s", objNull, configFile ]; // return bin\config.bin
	_var = {_x setCaptive true } forEach allUnits ; // return nothing
	$/Code$
	</NextNote>
		(September 20, 2014)
	Using the foreach loop, since there are no variable for the index like say the for-do loop, there is a variable that you can use to check the index of the foreach loop.
	$Code${
	if ( _forEachIndex == 1) then {
	// Copilot
	_x addUniform "U_B_Soldier_VR";
	} else {
	// Adams
	[_x, "B_Soldier_TL_F"] call BIS_fnc_loadInventory ;
	_x addUniform "U_B_Soldier_VR";
	_x setIdentity "Bootcamp_B_Adams";
	};
	} forEach _crew;
	$/Code$
	So when the array is past from _crew to the loop, index 1 (which is the second element) is the copilot of the "B_Heli_Light_01_F" and he will get "U_B_Soldier_VR" as a uniform. While the pilot which is index 0 (first element), will get the same uniform but will get the loadout of "B_Soldier_TL_F" and the identity of "Bootcamp_B_Adams".
	</NextNote>
		(January 2, 2015)
	Using exitWith inside a forEach loop will make forEach actually return something, namely whatever the exitWith returns:
	$Code$_result = {
	if(_x isEqualTo 3) exitWith {"Hello"}
	} forEach [1,2,3,4,5];
	//_result = "Hello"$/Code$
	</NextNote>
		(November 28, 2017)
	Be careful when deleting ( deleteAt ) elements from an Array while you iterate over it.
	_forEachIndex will not move to reflect your change.
	The forEach code is doing the same as
	$Code$
	_forEachIndex = 0;
	while {_forEachIndex count _array} do {
	(_array select _forEachIndex) call code;
	_forEachIndex = _forEachIndex + 1;
	}
	$/Code$
	So if you delete your current element from the array the other elements will shift forward. Meaning you skip one element.
	Example:
	$Code$_array = [1,2,3,4,5,6];
	{_array deleteAt _forEachIndex} forEach _array;
	$/Code$
	After the first iteration your Array will be [2,3,4,5,6] and the _forEachIndex will be 1.
	So on next iteration you get the element at index 1 which will be 3. So you've just skipped the 2.
	So in the end you will only iterate over 1,3 and 6
	</Note>
	<ReturnValue>
		Anything
	</ReturnValue>

</NextListItem>

	<Keyword>
		menuExpand
	</Keyword>
	<Description>
		Expands given menu entry on given path and all its parents so entry is visible.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/menuExpand
	</WikiPage>
	<Syntax>
		menuExpand Array
	</Syntax>
	<RawSyntax>
		menuExpand [idc, path]
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		clearItemCargo
	</Keyword>
	<Description>
		Removes all items from ammo box (or any general weapon holder container).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/clearItemCargo
	</WikiPage>
	<Syntax>
		clearItemCargo Object
	</Syntax>
	<RawSyntax>
		clearItemCargo box
	</RawSyntax>
	<Example>
		$Code$clearItemCargo myBox;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		magazinesTurret
	</Keyword>
	<Description>
		Returns all magazines of given turret. Use turret path [-1] for driver's turret. Alternatively, use magazinesAllTurrets
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/magazinesTurret
	</WikiPage>
	<Syntax>
		Object magazinesTurret Array
	</Syntax>
	<RawSyntax>
		vehicle magazinesTurret turretPath
	</RawSyntax>
	<Example>
		$Code$_mags = vehicle player magazinesTurret [0, 0];$/Code$
	</NextExample>
		$Code$_mags = _tank magazinesTurret [0];$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		setDriveOnPath
	</Keyword>
	<Description>
		Sets the path to follow for AI driver
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setDriveOnPath
	</WikiPage>
	<Syntax>
		Object setDriveOnPath Array
	</Syntax>
	<RawSyntax>
		vehicleName setDriveOnPath [points]
	</RawSyntax>
	<Example>
		$Code$myVehicle setDriveOnPath [[1000,10,1000],[1100,10,1000]]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		lbIsSelected
	</Keyword>
	<Description>
		Check whether given row of the given listbox is selected.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lbIsSelected
	</WikiPage>
	<Syntax>
		Control lbIsSelected Number
	</Syntax>
	<RawSyntax>
		control lbIsSelected index
	</RawSyntax>
	<Example>
		$Code$_selected = _control lbIsSelected 0;$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
		More information on the LB command family can be found here
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		magazines
	</Keyword>
	<Description>
		Returns array of type names of all vehicle's magazines.
	When applied to a unit (soldier), the command behaves differently and will omit magazines already loaded into unit's weapons. Use currentMagazine to get this information for a currently loaded magazine.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/magazines
	</WikiPage>
	<Syntax>
		magazines Object
	</Syntax>
	<RawSyntax>
		magazines vehicle
	</RawSyntax>
	<Example>
		$Code$_mags = magazines player$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		In OFP v1.96, if a weapon is loaded with an empty magazine, that magazine will still be counted by this command. The ammo command can be used to check if a unit has any ammunition into it's last magazine.
	</NextNote>
		(25 November 2011)
	This command does not include non-turret weapon magazines, such as smoke, flare or chaff magazines which are usually declared in the root of the vehicle's class, rather than in the Turrets hierarchy.
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		triggerAttachVehicle
	</Keyword>
	<Description>
		Specifies the entity which will activate the selected trigger.
	If [] is given, the trigger is decoupled from the assigned vehicle (example 2).
	If the activation source is "VEHICLE", "GROUP", "LEADER" or "MEMBER", it's changed to "NONE".
	If [vehicle] is given, the trigger is coupled to the vehicle or its group.
	When the source is "GROUP", "LEADER" or "MEMBER", it's coupled to the group, otherwise it's coupled to the vehicle and the source is changed to "VEHICLE".
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/triggerAttachVehicle
	</WikiPage>
	<Syntax>
		Object triggerAttachVehicle Array
	</Syntax>
	<RawSyntax>
		triggerName triggerAttachVehicle objects
	</RawSyntax>
	<Example>
		$Code$trigger triggerAttachVehicle [ player ];$/Code$
	</NextExample>
		$Code$trigger triggerAttachVehicle [];$/Code$
	</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		loadAbs
	</Keyword>
	<Description>
		Returns current sum of mass from items stored in all unit's containers, linked items and weapons.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/loadAbs
	</WikiPage>
	<Syntax>
		loadAbs Object
	</Syntax>
	<RawSyntax>
		loadAbs unit
	</RawSyntax>
	<Example>
		$Code$// Player weight:
	_weight = loadAbs player;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		setAutonomous
	</Keyword>
	<Description>
		Sets UAV autonomous mode.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setAutonomous
	</WikiPage>
	<Syntax>
		Object setAutonomous Boolean
	</Syntax>
	<RawSyntax>
		uav setAutonomous bool
	</RawSyntax>
	<Example>
		$Code$uav setAutonomous true ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		camSetRelPos
	</Keyword>
	<Description>
		Sets the position of the given camera relative to its target, set with camSetTarget. Needs a call to camCommit to be conducted. Note, that since it sets relative position to the target, the camSetTarget command should be executed already, before camSetRelPos.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/camSetRelPos
	</WikiPage>
	<Syntax>
		Object camSetRelPos Array
	</Syntax>
	<RawSyntax>
		camera camSetRelPos position
	</RawSyntax>
	<Example>
		$Code$_cam camSetTarget _car;
	_cam camSetRelPos [0,10,8];$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
		The location of the camera will depend on the direction the target object is facing.
	The camera does not bank with the target (bug?).
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		armoryPoints
	</Keyword>
	<Description>
		Returns, stored in [USERNAME].ArmaXProfile, value of armoryPoints entry. If the entry doesn't exist, it returns 0.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/armoryPoints
	</WikiPage>
	<Syntax>
		armoryPoints
	</Syntax>
	<RawSyntax>
		armoryPoints
	</RawSyntax>
	<Example>
		$Code$_points = armoryPoints ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		tvSetPictureRightColorSelected
	</Keyword>
	<Description>
		Sets the color of the right picture of a tree item defined by path when item is selected
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/tvSetPictureRightColorSelected
	</WikiPage>
	<Syntax>
		Control tvSetPictureRightColorSelected Array
	</Syntax>
	<RawSyntax>
		control tvSetPictureRightColorSelected [path, color]
	</RawSyntax>
	<Example>
		$Code$_control tvSetPictureRightColorSelected [[0], [1,0,1,1]]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setVehiclePosition
	</Keyword>
	<Description>
		Moves the object to a given position (same as createVehicle placement algorithm). Uses either the position that's defined by the position param, or one of the marker positions from the markers array. The object is placed inside a circle with position as its center and placement as its radius. The type of placement could also be controlled with special.
	If position is in water and vehicle can float, it is placed on water surface, otherwise it is placed on the ground, even if ground is under water. If roof surfaces support walking, units will be placed on roofs if such position is given.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setVehiclePosition
	</WikiPage>
	<Syntax>
		Object setVehiclePosition Array
	</Syntax>
	<RawSyntax>
		object setVehiclePosition [position, markers, placement, special]
	</RawSyntax>
	<Example>
		$Code$player setVehiclePosition [[1000,2000], ["Pos1","Pos2","Pos3"], 0, "CAN_COLLIDE"];
	// Will place the player at either [1000,2000], or one of the three markers positions.$/Code$
	</NextExample>
		$Code$heli setVehiclePosition [ player, [], 0, "FLY"];$/Code$
	</NextExample>
		$Code$_cam = "camera" camCreate [0,0,0];
	_cam setDir random 360;
	_cam setVehiclePosition [[5000,5000], [], 1000, "NONE"];
	_cam setPosWorld ( getPosWorld _cam vectorAdd [0,0,1.8]);
	_cam cameraEffect ["Internal", "Back"];$/Code$
	</NextExample>
		$Code$private _tablePos = player getRelPos [3, 0];
	private _table = "Land_CampingTable_F" createVehicle [0,0,0];
	private _laptop = "Land_Laptop_unfolded_F" createVehicle [0,0,0];
	_table setPos _tablePos;
	_laptop setVehiclePosition [_tablePos vectorAdd [0.5, 0.2, 10], [], 0, "CAN_COLLIDE"];
	_laptop attachTo [_table];$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
		(June 24, 2015)
	If you need to set direction as well, set it before using setVehiclePosition. The command will use existing dir of the object for its calculations.
	$Code$ player setDir random 360;
	player setVehiclePosition [ player, [], 100, "none"];$/Code$
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		removeCuratorCameraArea
	</Keyword>
	<Description>
		Removes curator camera area.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/removeCuratorCameraArea
	</WikiPage>
	<Syntax>
		Object removeCuratorCameraArea Number
	</Syntax>
	<RawSyntax>
		curatorObj removeCuratorCameraArea cameraAreaID
	</RawSyntax>
	<Example>
		$Code$myCurator removeCuratorCameraArea 3;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		modelToWorldWorld
	</Keyword>
	<Description>
		Converts position from object model space to world space (usable by setPosWorld for example).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/modelToWorldWorld
	</WikiPage>
	<Syntax>
		Object modelToWorldWorld Array
	</Syntax>
	<RawSyntax>
		obj modelToWorldWorld modelPos
	</RawSyntax>
	<Example>
		$Code$( getPos player ) modelToWorldWorld [0,1,0]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(May 28, 2017)
	This command produces identical result to modelToWorld command used in conjunction with AGLToASL
	$Code$obj modelToWorldWorld [1,2,3] isEqualTo AGLToASL (obj modelToWorld [1,2,3]); // true$/Code$
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		ropeAttachTo
	</Keyword>
	<Description>
		Attach vehicle to rope with optional offset
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ropeAttachTo
	</WikiPage>
	<Syntax>
		Array ropeAttachTo Object
	</Syntax>
	<RawSyntax>
		[veh, toPoint, ropeEndDownDir] ropeAttachTo rope
	</RawSyntax>
	<Example>
		$Code$[veh1,[0,0,0],[0,0,-1]] ropeAttachTo ( ropes heli1 select 0);$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		saveJoysticks
	</Keyword>
	<Description>
		Saves joysticks key mappings into the joysticks.cfg file. Engine add these joysticks to the Joystick Scheme mapping dialog in options controls section.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/saveJoysticks
	</WikiPage>
	<Syntax>
		saveJoysticks
	</Syntax>
	<RawSyntax>
		saveJoysticks
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		lbSort
	</Keyword>
	<Description>
		Sorts listbox entries alphabetically ascending by their lbText
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lbSort
	</WikiPage>
	<Syntax>
		lbSort Control
	</NextSyntax>
		lbSort Array
	</NextSyntax>
		lbSort Number
	</Syntax>
	<RawSyntax>
		lbSort control
	</NextRawSyntax>
		lbSort [control, sortOrder]
	</NextRawSyntax>
		lbSort idc
	</NextRawSyntax>
		lbSort [idc, sortOrder]
	</RawSyntax>
	<Example>
		$Code$lbSort _myControl;$/Code$
	</NextExample>
		$Code$lbSort [_myControl, "DESC"];$/Code$
	</NextExample>
		$Code$lbSort 101;$/Code$
	</NextExample>
		$Code$lbSort [101, "DESC"];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		More information on the LB command family can be found here
	</Note>
	<ReturnValue>
		Nothing - Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		spawn
	</Keyword>
	<Description>
		Adds given code to the scheduler. Exactly when the code will be executed is unknown, it depends on how busy is the engine and how filled up is the scheduler. Therefore spawn does not wait for the supplied code to finish, instead, spawn returns a Script handle to the scheduler task. scriptDone command can be used to check the code completion. Additional arguments are passed to the code in local variable _this. Since Arma 3 v1.55 the script handle also exists inside the code in _thisScript variable.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/spawn
	</WikiPage>
	<Syntax>
		Any_Value spawn Code
	</Syntax>
	<RawSyntax>
		arguments spawn code
	</RawSyntax>
	<Example>
		$Code$_handle = [] spawn { player globalChat "Hello world!"};$/Code$
	</NextExample>
		$Code$// There is no guarantee that spawned scripts will be executed in the same order they spawned:
	for "_i" from 0 to 100 do
	{
	_null = _i spawn
	{
	diag_log _this;
	};
	};
	// // Result: 51,1,2...49,50,0,52,53...100$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(5 March, 2009)
	spawn cannot call other local functions on the same scope as itself.
	It can, however, call other global functions:
	$Code$_addOne = {TST=TST+1};
	TST_addOne = {TST=TST+1};
	_add = {
	TST=TST+1;
	player sideChat format ["added: %1",TST];
	[] call _addOne;
	player sideChat format ["called local: %1",TST];
	[] call TST_addOne;
	player sideChat format ["called global: %1",TST];
	};
	TST=0;
	[] call _add;
	[] spawn _add;$/Code$
	The call of _addOne from the spawned function does not do anything.
	</NextNote>
		(October 21, 2014)
	spawn requires a script handle when used in the 2D editor. (A3)
	In scripts and in the debug console, it is not required, but very useful for keeping track of running scripts. Having a script handle also makes it easy to terminate scripts at any time.
	Since spawn creates a new scheduled environment, having an excess of open threads can make the scheduler queue extremely long, significantly increasing the execution time of each thread. (it takes an extremely large amount of threads, though)
	</NextNote>
		(August 25, 2015)
	If you want to call a local function which has NOT been created inside a spawned function, then do this:
	$Code$_fncOne = { systemChat"This is _fncOne" }; _fncTwo = { call (_this select 0) }; [_fncOne] spawn _fncTwo;$/Code$
	</Note>
	<ReturnValue>
		Script_Handle
	</ReturnValue>

</NextListItem>

	<Keyword>
		groupChat
	</Keyword>
	<Description>
		Types text to the group radio channel. Must have assigned "ItemRadio" to see or transmit the messages. The text will be visible only on the PC where command was executed. If you need the message to show on all computers, you have to execute it globally (see remoteExec )
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/groupChat
	</WikiPage>
	<Syntax>
		Object groupChat String
	</Syntax>
	<RawSyntax>
		unitName groupChat chatText
	</RawSyntax>
	<Example>
		$Code$_soldierOne groupChat "Show this text";$/Code$
	</NextExample>
		$Code$driver vehicle player sideChat "sideChat";
	driver vehicle player globalChat "globalChat";
	driver vehicle player groupChat "groupChat";
	vehicle player vehicleChat "vehicleChat";
	driver vehicle player commandChat "commandChat";
	driver vehicle player customChat [1, "customChat"];
	systemChat "systemChat";$/Code$
	</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		boundingBoxReal
	</Keyword>
	<Description>
		Returns a bounding box of given object in model coordinates space. This command is similar to boundingBox but gives more precise measurements.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/boundingBoxReal
	</WikiPage>
	<Syntax>
		boundingBoxReal Object
	</Syntax>
	<RawSyntax>
		boundingBoxReal obj
	</RawSyntax>
	<Example>
		$Code$_bbr = boundingBoxReal vehicle player ;
	_p1 = _bbr select 0;
	_p2 = _bbr select 1;
	_maxWidth = abs ((_p2 select 0) - (_p1 select 0));
	_maxLength = abs ((_p2 select 1) - (_p1 select 1));
	_maxHeight = abs ((_p2 select 2) - (_p1 select 2));$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		diag_frameNo
	</Keyword>
	<Description>
		Returns number of frame currently displayed.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/diag_frameNo
	</WikiPage>
	<Syntax>
		diag_frameNo
	</Syntax>
	<RawSyntax>
		diag_frameNo
	</RawSyntax>
	<Example>
		$Code$_currFrameNo = diag_frameNo ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(November 19, 2014)
	Avoid using hard-coded frame-specific events, the total amount of drawn frames is persistent across all missions. It does not get reset until the game is closed.
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		backpack
	</Keyword>
	<Description>
		Returns a class of a backpack.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/backpack
	</WikiPage>
	<Syntax>
		backpack Object
	</Syntax>
	<RawSyntax>
		backpack unit
	</RawSyntax>
	<Example>
		$Code$_classname = backpack player ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		addScore
	</Keyword>
	<Description>
		Add a number to the score of a unit. This score is shown in multiplayer in the "I" ("P" in Arma 3) screen. Negative values will remove from the score. Server execution only.
	See also: Arma_3:_Event_Handlers#HandleScore
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/addScore
	</WikiPage>
	<Syntax>
		Object addScore Number
	</Syntax>
	<RawSyntax>
		unit addScore score
	</RawSyntax>
	<Example>
		$Code$unit addScore 10;$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
		This scripting command must be executed on the server to work properly in multiplayer
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		expectedDestination
	</Keyword>
	<Description>
		Return expected destination of unit as an array with format: [ Position, planningMode, forceReplan].
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/expectedDestination
	</WikiPage>
	<Syntax>
		expectedDestination Object
	</Syntax>
	<RawSyntax>
		expectedDestination person
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		local / undefined
	</Locality>
	<Note>
		(16:24, 3 March 2007 (CET))
	For AI units I have found the following values: planningMode is "LEADER PLANNED" when the unit is ordered by the group leader to go somewhere or if the unit is the group leader and it follows a waypoint. Otherwise planningMode it is "DoNotPlan". Units moving in formation have "DoNotPlan" as long as they don't receive orders by the group leader. Units also have "DoNotPlan" when they don't move. Units executing special formation tasks like engaging or return to formation have "FORMATION PLANNED" as long they haven't fulfilled the task.
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		drawLine
	</Keyword>
	<Description>
		Draw a line on the map.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/drawLine
	</WikiPage>
	<Syntax>
		Control drawLine Array
	</Syntax>
	<RawSyntax>
		map drawLine [position1, position2, color]
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(March 22, 2014)
	Map example: $Code$( findDisplay 12 displayCtrl 51) ctrlAddEventHandler ["Draw","
	( _this select 0) drawLine [
	getPos player,
	[0,0,0],
	[0,0,1,1]
	];
	"];$/Code$
	Be careful when using this command. Unlike map markers, the draw commands can decrease your framerate.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		addTorque
	</Keyword>
	<Description>
		Applies torque (rotation momentum) to the center of mass of the given object. Torque force is defined as vector [x, y, z] applied in world space. If you need to define torque in model space, convert the torque vector first by vectorModelToWorld or vectorModelToWorldVisual command. The torque applied as impulse. Diagram below explain which way the object would rotate. For more information see NVIDIA docs
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/addTorque
	</WikiPage>
	<Syntax>
		Object addTorque Array
	</Syntax>
	<RawSyntax>
		object addTorque torque
	</RawSyntax>
	<Example>
		$Code$// Apply torque [1000,0,0] to object not factoring object positioning:
	_wheel addTorque [1000,0,0];$/Code$
	</NextExample>
		$Code$// Apply torque [1000,0,0] relative to object:
	_wheel addTorque (_wheel vectorModelToWorld [1000,0,0]);$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		drawLink
	</Keyword>
	<Description>
		The editor will draw a line between the two specified editor objects. Line type can be LINE or ARROW.
	i
	Some Old Editor Command
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/drawLink
	</WikiPage>
	<Syntax>
		Control drawLink Array
	</Syntax>
	<RawSyntax>
		map drawLink [from,to,param type,line type,color]
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setCameraInterest
	</Keyword>
	<Description>
		Set camera interest for given entity. Camera interest is by default 0. Any unit which is speaking has its camera interest raised to 50. Camera interest is used to focus camera to control depth of field in cutscenes. Combination of camera interest, unit position of the screen, unit movement, unit type, and some other properties is used to determine which unit to focus at. Higher camera interest increases the chance of the unit being focused.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setCameraInterest
	</WikiPage>
	<Syntax>
		Object setCameraInterest Number
	</Syntax>
	<RawSyntax>
		entity setCameraInterest interest
	</RawSyntax>
	<Example>
		$Code$_soldier setCameraInterest 50;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		selectionPosition
	</Keyword>
	<Description>
		Search for selection in the object model (first in the memory level, then in geometry LODs).
	Returns position in model space. In A1 it returns the initial position of the selection, in A2/3 position of the selection (e.g. when it is animated) in render time scope. If a selection does not exist [0,0,0] is returned.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/selectionPosition
	</WikiPage>
	<Syntax>
		Object selectionPosition String
	</NextSyntax>
		Object selectionPosition Array
	</Syntax>
	<RawSyntax>
		object selectionPosition selectionName
	</NextRawSyntax>
		object selectionPosition [selectionName, LODName]
	</RawSyntax>
	<Example>
		$Code$_inModelPosition = player selectionPosition "head_hit";$/Code$
	</NextExample>
		$Code$_inModelPosition = player selectionPosition "pelvis";$/Code$
	</NextExample>
		$Code$_inModelPosition = player selectionPosition "head";$/Code$
	</NextExample>
		$Code$_inModelPosition = player selectionPosition "camera";$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(January 5, 2007)
	To know more selections simply create an eventHandler damage on an object.
	</NextNote>
		(July 29, 2015)
	Since 1.49.131660, you can use an alternative syntax:
	object selectionPosition [selectionName, lodName]
	lodName: "Memory", "Geometry", "FireGeometry", "LandContact", "HitPoints"
	If the given selectionName is not found in the given lod, [0,0,0] is returned.
	</NextNote>
		(June 25, 2017)
	Do use the filter that comes with Alt Syntax to suit your needs. For example player has 3 selections called "head" and their selectionPositions are quite different from each other:
	$Code$ player selectionPosition ["head", "Memory"]; // [0.173798,0.330415,1.37783]
	player selectionPosition ["head", "FireGeometry"]; // [0.14375,0.206039,1.44689]
	player selectionPosition ["head", "HitPoints"]; // [0.144257,0.306769,1.53471]$/Code$
	</Note>
	<ReturnValue>
		Array - Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		joinAsSilent
	</Keyword>
	<Description>
		Joins the unit to the given group, if position id is available, this one is used. Avoid any radio communication related to joining.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/joinAsSilent
	</WikiPage>
	<Syntax>
		Object joinAsSilent Array
	</Syntax>
	<RawSyntax>
		unit joinAsSilent [group, id]
	</RawSyntax>
	<Example>
		$Code$player joinAsSilent [_group, 4];$/Code$
	</NextExample>
		$Code$// To get the position id:
	getUnitPositionId = {
	private ["_vvn", "_str"];
	_vvn = vehicleVarName _this;
	_this setVehicleVarName "";
	_str = str _this;
	_this setVehicleVarName _vvn;
	parseNumber (_str select [(_str find ":") + 1])
	};
	player joinAsSilent [ createGroup west, 5];
	_id = player call getUnitPositionId;
	hint str _id; //5$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
		I haven't done a thorough test but this function doesn't seem to work for Civilians, use joinSilent instead.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		showMap
	</Keyword>
	<Description>
		Enable Map (default true )
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/showMap
	</WikiPage>
	<Syntax>
		showMap Boolean
	</Syntax>
	<RawSyntax>
		showMap show
	</RawSyntax>
	<Example>
		$Code$showMap false$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		In ArmA 2 - This command no longer works. The map is now an inventory item. It is kept under the weapon class name "itemmap".
	Example: $Code$unitname removeweapon "itemmap"$/Code$ To add again use $Code$unitname addweapon "itemmap"$/Code$.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		allUnits
	</Keyword>
	<Description>
		Return a list of all units (all persons except agents) created on the following sides east, west, resistance / independent and civilian only. Does not contain units of sideLogic. Dead units and units awaiting for respawn are also excluded.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/allUnits
	</WikiPage>
	<Syntax>
		allUnits
	</Syntax>
	<RawSyntax>
		allUnits
	</RawSyntax>
	<Example>
		$Code${_x setDamage 0.5; _x groupChat "Braaains"} forEach allUnits ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(July 15, 2011)
	It returns infantry outside and inside vehicles.
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		parseNumber
	</Keyword>
	<Description>
		An SQF equivalent of C++ atof function. Parses the string, interpreting its content as a floating point number.
	The command first discards as many whitespace characters as necessary until the first non-whitespace character is found. Then, starting from this character, takes as many characters as possible that are valid following a syntax resembling that of floating point literals, and interprets them as a numerical value. The rest of the string after the last valid character is ignored and has no effect on the behavior of this command.
	If the first sequence of non-whitespace characters in string does not form a valid floating-point number, or if no such sequence exists because either string is empty or contains only whitespace characters, no conversion is performed and the command returns 0.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/parseNumber
	</WikiPage>
	<Syntax>
		parseNumber String
	</NextSyntax>
		parseNumber Boolean
	</Syntax>
	<RawSyntax>
		parseNumber string
	</NextRawSyntax>
		parseNumber boolean
	</RawSyntax>
	<Example>
		$Code$_number = parseNumber "0.125"; //0.125$/Code$
	</NextExample>
		$Code$_number = parseNumber "2 abc"; //2$/Code$
	</NextExample>
		$Code$_number = parseNumber true ; //1$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(Aug 28, 2014)
	(A3 1.26)It only detects the first occurrence of a number in the string, return 0 by default.
	$Code$ parseNumber "2s4f"; // 2
	parseNumber "s2f4"; // 0$/Code$
	parse config or code, currently BIS_fnc_parseNumber, occurrence is only limited with number, return -1 by default.
	$Code${s3s4f} call BIS_fnc_parseNumber ; // -1$/Code$
	</Note>
	<ReturnValue>
		Number - Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		createVehicleLocal
	</Keyword>
	<Description>
		Creates an object of the given type. Created object is not transferred through network in MP games. netId of such vehicle in multiplayer will be "0:0". To disable local vehicle creation, use CfgDisabledCommands to blacklist this command
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/createVehicleLocal
	</WikiPage>
	<Syntax>
		String createVehicleLocal Position
	</Syntax>
	<RawSyntax>
		type createVehicleLocal position
	</RawSyntax>
	<Example>
		$Code$_lightsource = "#lightpoint" createVehicleLocal _pos;$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
		(07:18, 5 June 2008 (CEST))
	If the object that is created is of the type ammo, then it will created on all clients ( tested only on VBS2 ).
	</NextNote>
		(18:04, 5 September 2013 (CEST))
	Indeed the type of Ammo is transfered to ALL clients, but apparently also the muzzle effects (firing sound, light, etc.); this includes muzzles from Horns (Truck or Car Horn, Bicycle bells, etc.) as well as any other weapon. Tested on Arma 1 - Arma 2 OA (latest patch).
	</Note>
	<ReturnValue>
		Object
	</ReturnValue>

</NextListItem>

	<Keyword>
		captiveNum
	</Keyword>
	<Description>
		Checks whether the unit is a captive. If the unit is a vehicle, its commander is checked instead.
	If a unit's captivity level was set as a Boolean, then the returned number is either 0 (for false ) or 1 (for true ).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/captiveNum
	</WikiPage>
	<Syntax>
		captiveNum Object
	</Syntax>
	<RawSyntax>
		captiveNum unit
	</RawSyntax>
	<Example>
		$Code$_captivity = captiveNum _unit;$/Code$
	</NextExample>
		$Code$_unit setCaptive 1024;
	hint str captive _unit; //true
	hint str captiveNum _unit; //1024$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		onBriefingNotes
	</Keyword>
	<Description>
		Select a sound declared in the Description.ext of the mission to be played the first time the Notes tab is selected in the briefing.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/onBriefingNotes
	</WikiPage>
	<Syntax>
		onBriefingNotes String
	</Syntax>
	<RawSyntax>
		onBriefingNotes soundName
	</RawSyntax>
	<Example>
		$Code$onBriefingNotes "NotesVoiceOver";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(8 Feb, 2007)
	In OFP it works only with the sound files defined in the mission's description.ext
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		fire
	</Keyword>
	<Description>
		Forces a unit to fire the given weapon.
	NOTE: Just like with forceWeaponFire it is possible to pass remote unit as argument, but this could be unreliable. Considering this command might need to be used in combination with selectWeapon, which takes only local arguments, it would make sense to execute fire command where unit is also local. See also: BIS_fnc_fire
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/fire
	</WikiPage>
	<Syntax>
		Object fire String
	</NextSyntax>
		Object fire Array
	</Syntax>
	<RawSyntax>
		unit fire muzzle
	</NextRawSyntax>
		unit fire [muzzle, mode, magazine]
	</RawSyntax>
	<Example>
		$Code$_soldier fire "M16";$/Code$
	</NextExample>
		$Code$_soldier fire "SmokeShellMuzzle";$/Code$
	</NextExample>
		$Code$_soldier fire ["SmokeShellMuzzle","SmokeShellMuzzle","SmokeShell"];$/Code$
	</NextExample>
		$Code$player playActionNow "PutDown";
	player selectWeapon "DemoChargeMuzzle";
	player fire ["DemoChargeMuzzle", "DemoChargeMuzzle", "DemoCharge_Remote_Mag"];
	player setWeaponReloadingTime [ player, "DemoChargeMuzzle", 0];$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		(August 17, 2006)
	Sometimes AI won't shoot when you use this command. It can be fixed by placing selectWeapon command before it.
	</NextNote>
		(February 2, 2007)
	In OFP v1.96, when a man class unit is given this command, he will aim up in the air before firing his weapon. This makes it rather useless if you want to make him shoot a target. It does work with vehicles, when the vehicle is first given a doWatch or doTarget command.
	</NextNote>
		(January 20, 2007)
	In ArmA v1.02, this command is not working with weapons in the secondary turrets (like "DSHKM" in t72)
	</NextNote>
		(Jan 15, 2008)
	To place a satchel (pipebomb) the syntax is:
	OFP : unitname Fire ["put", "pipebomb"]
	ArmA : unitname Fire ["pipebombmuzzle", "pipebombmuzzle", "pipebomb"];
	The triggering is done via a " TOUCHOFF " action.
	</NextNote>
		(March 18, 2010)
	In Arma2 AI will automatically shoot straight up. Command seems to be broken.
	</NextNote>
		(November 24, 2010)
	Command is broken - confirmed. Use action "USEWEAPON" instead.
	Place a game logic in the editor. Name it MyGameLogic.
	Use this code to make unit1 fire his primaryweapon:
	MyGameLogic action ["useWeapon",primaryWeapon unit1,unit1,0];
	</NextNote>
		(Feburary 25, 2011)
	Command works just fine in A2/OA. Make sure to execute it on local AI.
	</NextNote>
		(April 06, 2012)
	If it did work at one time, it does no longer. The AI (or player) is forced to look upwards or reacts to a massive recoil force before getting his shot off.
	</NextNote>
		(Feburary 16, 2013)
	Command did not work with ACR 1.62. Used fireAtTarget instead.
	</NextNote>
		(June 4, 2014)
	In Arma 3 in order for AI to place Claymore, for example, it is necessary to execute 3 statements - an animation, weapon select and the actual fire command. Animation is most likely for forcing unit to leave rest state, weapon select and fire kinda both go together anyway: $Code$_unit playActionNow "PutDown";
	_unit selectWeapon "DirectionalMineRemoteMuzzle";
	_unit fire [
	"DirectionalMineRemoteMuzzle",
	"DirectionalMineRemoteMuzzle",
	"ClaymoreDirectionalMine_Remote_Mag"
	];$/Code$
	</NextNote>
		(November 25th, 2017)
	In ArmA 3, as of version 1.76, examples 2 and 3 in the section above for smoke grenades are no longer working. As a workaround (throwing green smoke grenades for example), you can use: $Code$[_soldier, "SmokeShellGreenMuzzle"] call BIS_fnc_fire;$/Code$
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		moonIntensity
	</Keyword>
	<Description>
		Returns the intensity of the moon's brightness in range 0...1.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/moonIntensity
	</WikiPage>
	<Syntax>
		moonIntensity
	</Syntax>
	<RawSyntax>
		moonIntensity
	</RawSyntax>
	<Example>
		$Code$_intensity = moonIntensity ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlModel
	</Keyword>
	<Description>
		Returns model used in 3D Dialog Control.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlModel
	</WikiPage>
	<Syntax>
		ctrlModel Control
	</Syntax>
	<RawSyntax>
		ctrlModel control
	</RawSyntax>
	<Example>
		$Code$_model = ctrlModel _control3D;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		doSuppressiveFire
	</Keyword>
	<Description>
		Order the given unit to suppress a given position or target (without radio messages).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/doSuppressiveFire
	</WikiPage>
	<Syntax>
		Object/Array doSuppressiveFire Object/Array
	</Syntax>
	<RawSyntax>
		unitName doSuppressiveFire target
	</RawSyntax>
	<Example>
		$Code$_soldier doSuppressiveFire [1869.508,5760.962,0.000]$/Code$
	</NextExample>
		$Code$_soldier doSuppressiveFire cursorTarget$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
		(October 8, 2016)
	Command expects position as second argument in format ASL in A3 1.64.138497.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		getAssignedCuratorUnit
	</Keyword>
	<Description>
		Returns unit assigned to curator logic.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getAssignedCuratorUnit
	</WikiPage>
	<Syntax>
		getAssignedCuratorUnit Object
	</Syntax>
	<RawSyntax>
		getAssignedCuratorUnit curatorObj
	</RawSyntax>
	<Example>
		$Code$_curatorUnit = getAssignedCuratorUnit ( allCurators select 0);
	_curatorUnit joinAs [ createGroup civilian, 0];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(August 17, 2014)
	This command will return objNull if used immediately after the curator unit is assigned to the logic in question (this includes at mission time 0). To avoid problems use the following beforehand: $Code$ waitUntil {! isNull ( getAssignedCuratorUnit logic)};$/Code$
	</Note>
	<ReturnValue>
		Object
	</ReturnValue>

</NextListItem>

	<Keyword>
		onGroupIconOverEnter
	</Keyword>
	<Description>
		Defines an action performed when player moves pointer over group marker (3D or in a map). The code will execute continuously while pointer is over icon.
	i
	Since Arma 3 v1.57 a stackable version of this EH is available: GroupIconOverEnter
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/onGroupIconOverEnter
	</WikiPage>
	<Syntax>
		onGroupIconOverEnter String/Code
	</Syntax>
	<RawSyntax>
		onGroupIconOverEnter command
	</RawSyntax>
	<Example>
		$Code$onGroupIconOverEnter
	{
	// Passed values for _this are:
	_is3D = _this select 0;
	_group = _this select 1;
	_wpID = _this select 2;
	_posx = _this select 3;
	_posy = _this select 4;
	_shift = _this select 5;
	_ctrl = _this select 6;
	_alt = _this select 7;
	_message = format ["____ Info ____"];
	{_message = _message + format ["\n %1",_x]} forEach _this;
	hint _message;
	}$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		configFile
	</Keyword>
	<Description>
		Return root of config entries hierarchy.
	See AllInOne Config for a full config extract as example.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/configFile
	</WikiPage>
	<Syntax>
		configFile
	</Syntax>
	<RawSyntax>
		configFile
	</RawSyntax>
	<Example>
		$Code$_isMyClassActive = isClass ( configFile / "CfgPatches" / "MyClass");$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(Jul 19, 2014)
	(ArmA3 1.24) It is recommended to use configClasses instead of BIS_fnc_getCfgSubClasses and BIS_fnc_uniqueClasses on subclasses collection or conditional selection.
	$Code$
	_faces = " true " configClasses ( configFile "Cfgfaces");
	//same as: _faces = (configfile "CfgFaces") call BIS_fnc_getCfgSubClasses ;
	$/Code$
	$Code$
	//Extract all animals:
	animals = "(( configName _x) isKindOf 'animal')" configClasses ( configFile "CfgVehicles");
	/*same as:
	aniamls = [];
	[( configFile "CfgVehicles"),{
	if (( configName _this) isKindOf “animal”) then {
	animals set [ count animals, _this]
	}
	}
	] call BIS_fnc_uniqueClasses ;*/
	$/Code$
	Return nested subclasses, currently still BIS_fnc_returnChildren
	$Code$
	//Return all nested config classes.
	[( configFile "CfgFaces"),1, true, true ] call BIS_fnc_returnChildren ;
	$/Code$
	</Note>
	<ReturnValue>
		Config
	</ReturnValue>

</NextListItem>

	<Keyword>
		setWaypointForceBehaviour
	</Keyword>
	<Description>
		Forces the behavior of waypoint, disables AUTOCOMBAT.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setWaypointForceBehaviour
	</WikiPage>
	<Syntax>
		Waypoint setWaypointForceBehaviour Boolean
	</Syntax>
	<RawSyntax>
		waypoint setWaypointForceBehaviour state
	</RawSyntax>
	<Example>
		$Code$[grp, 2] setWaypointForceBehaviour true ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		shownCompass
	</Keyword>
	<Description>
		Checks if client has Compass enabled in description.ext ( showCompass param) or force enabled with showCompass command.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/shownCompass
	</WikiPage>
	<Syntax>
		shownCompass
	</Syntax>
	<RawSyntax>
		shownCompass
	</RawSyntax>
	<Example>
		$Code$if ( shownCompass ) then { hint "You have Compass enabled"};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		configSourceModList
	</Keyword>
	<Description>
		Returns an array of mods (CfgMods) in which the given config class is defined.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/configSourceModList
	</WikiPage>
	<Syntax>
		configSourceModList Config
	</Syntax>
	<RawSyntax>
		configSourceModList config
	</RawSyntax>
	<Example>
		$Code$_mods = configSourceModList ( configFile "CfgVehicles" "Man");
	hint str _mods; // ["A3","curator","heli"]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlSetAutoScrollSpeed
	</Keyword>
	<Description>
		Sets number of second required to scroll to next line. If speed 0, auto-scroll is disabled. Setter for ctrlAutoScrollSpeed.
	Autorscroll is available for CT_LISTBOX and CT_CONTROLS_GROUP types of controls only. Autoscroll will wait ctrlAutoScrollDelay seconds (must be 0) and then will scroll the scroll bar down to the bottom. ctrlAutoScrollSpeed defines the speed with which scrollbar is scrolled. If ctrlAutoScrollRewind is true, the control will fade out, immediately rewind to the top, then fade in, wait ctrlAutoScrollDelay seconds and then repeat the scrolling in a loop. If user focuses on the control, autoscrolling is interrupted.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlSetAutoScrollSpeed
	</WikiPage>
	<Syntax>
		Control ctrlSetAutoScrollSpeed Number
	</Syntax>
	<RawSyntax>
		control ctrlSetAutoScrollSpeed speed
	</RawSyntax>
	<Example>
		$Code$_ctrlGroup ctrlSetAutoScrollSpeed 0.1;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		allMapMarkers
	</Keyword>
	<Description>
		Return all markers in map including user placed markers (_USER_DEFINED #).
	Since Arma 3 v1.57.134377 User defined markers have the following name format: _USER_DEFINED # PlayerID / MarkerID / ChannelID where:
	PlayerID - unique network id of the player (same as _id in onPlayerConnected )
	MarkerID - a marker counter id
	ChannelID - id of the chat channel on which marker was placed (see currentChannel )
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/allMapMarkers
	</WikiPage>
	<Syntax>
		allMapMarkers
	</Syntax>
	<RawSyntax>
		allMapMarkers
	</RawSyntax>
	<Example>
		$Code$_markers = allMapMarkers ;
	// returns: ["marker1","_USER_DEFINED #2/0"]$/Code$
	</NextExample>
		$Code${
	private "_a";
	_a = toArray _x;
	_a resize 15;
	if ( toString _a == "_USER_DEFINED #") then {
	deleteMarker _x;
	}
	} forEach allMapMarkers ;$/Code$
	</NextExample>
		$Code$if (_someString in allMapMarkers ) then {
	hint (_someString + " is a valid marker name");
	};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(March 17, 2014)
	A3 1.12 : Markers placed in editor will be in the array as a string of their name. Markers placed by the player will begin with "_USER_DEFINED #."
	</NextNote>
		(March 17, 2014)
	To expand on the comment above. In Multiplayer, user created marker will appear in allMapMarkers as _USER_DEFINED #ID/Number, where ID is unique id related to _id param from onPlayerConnected and Number is sequential integer incremented by 1 with each marker placement by the IDed user.
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		currentZeroing
	</Keyword>
	<Description>
		Returns zeroing of unit's weapon.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/currentZeroing
	</WikiPage>
	<Syntax>
		currentZeroing Object
	</Syntax>
	<RawSyntax>
		currentZeroing gunner
	</RawSyntax>
	<Example>
		$Code$_zeroing = currentZeroing player ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		clearGroupIcons
	</Keyword>
	<Description>
		Removes all icon from group.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/clearGroupIcons
	</WikiPage>
	<Syntax>
		clearGroupIcons Group
	</Syntax>
	<RawSyntax>
		clearGroupIcons group
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		lbSetColorRight
	</Keyword>
	<Description>
		Sets the color of the item (right) with the given index of the listbox or combobox with id idc of the topmost user dialog to color.
	Colour is in format Color.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lbSetColorRight
	</WikiPage>
	<Syntax>
		lbSetColorRight Array
	</NextSyntax>
		Control lbSetColorRight Array
	</Syntax>
	<RawSyntax>
		lbSetColorRight [idc, index, color]
	</NextRawSyntax>
		control lbSetColorRight [index, color]
	</RawSyntax>
	<Example>
		$Code$lbSetColorRight [101, 0, [0, 1, 0, 0.5]];$/Code$
	</NextExample>
		$Code$_control lbSetColorRight [0, [0, 1, 0, 0.5]];$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
		More information on the LB command family can be found here
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setRandomLip
	</Keyword>
	<Description>
		Enables/Disables random lip. When enabled, the unit continuously moves its lips as if it's talking.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setRandomLip
	</WikiPage>
	<Syntax>
		Object setRandomLip Boolean
	</Syntax>
	<RawSyntax>
		unit setRandomLip bool
	</RawSyntax>
	<Example>
		$Code$player setRandomLip true ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctCurSel
	</Keyword>
	<Description>
		Returns index of the selected row. Will take only rows, but not headers into account.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctCurSel
	</WikiPage>
	<Syntax>
		ctCurSel Control
	</Syntax>
	<RawSyntax>
		ctCurSel ctrl
	</RawSyntax>
	<Example>
		$Code$_curSel = ctCurSel _control;$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		gunner
	</Keyword>
	<Description>
		Returns the gunner of a vehicle.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/gunner
	</WikiPage>
	<Syntax>
		gunner Object
	</Syntax>
	<RawSyntax>
		gunner vehicle
	</RawSyntax>
	<Example>
		$Code$(gunner _tank1) action ["getout",_tank1]$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(2 January, 2007)
	The gunner command will only return a single gunner. If the vehicle has occupied, multiple turrets. See this discussion on the official forums, for an alternative:
	Need an array with a vehicle's cargo units
	</Note>
	<ReturnValue>
		Object
	</ReturnValue>

</NextListItem>

	<Keyword>
		reloadEnabled
	</Keyword>
	<Description>
		Check whether magazine is reloaded whenever emptied.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/reloadEnabled
	</WikiPage>
	<Syntax>
		reloadEnabled Object
	</Syntax>
	<RawSyntax>
		reloadEnabled unitName
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		lnbAddRow
	</Keyword>
	<Description>
		Adds a row of strings.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lnbAddRow
	</WikiPage>
	<Syntax>
		lnbAddRow Array
	</NextSyntax>
		Control lnbAddRow Array
	</Syntax>
	<RawSyntax>
		lnbAddRow [IDC,[ String, String ]]
	</NextRawSyntax>
		_ctrl lnbAddRow [ String, String ]
	</RawSyntax>
	<Example>
		$Code$lnbAddRow [1,["COL1","COL2"]];$/Code$
	</NextExample>
		$Code$_ctrl lnbAddRow ["COL1","COL2"];$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
		(Sep 9 2014)
	(A3 1.28)As for invisible data processing, lnbAddArray, lnbAddColumn, lnbData, lnbGetColumnsPosition, lnbSetColumnsPos, lnbSetData, lnbSetText, lnbSetValue, lnbText and lnbValue store data types into exact position of the listNbox with different spaces. Accessing data with coordinate command at nearly the same syntax:
	$Code$
	//Set same value to one position of a Control
	_ctrl lnbSetData [ [0,0],"#1"];
	lnbSetColumnsPos [102, [0,1], 1];
	_ctrl lnbSetText [ [0,1], "#1"];
	_ctrl lnbSetValue [ [0,0],1];
	//Accessing the value disregard affecting one another.
	_ctrl lnbData [0,0]; //"#1"
	lnbGetColumnsPosition _ctrl //[1];
	_ctrl lnbText [0,0];//"#1"
	_ctrl lnbValue [0,0];//1
	$/Code$
	For a direct visible control over CT_LISTNBOX:
	$Code$
	0 = [_CT_LISTNBOX] spawn {
	private ["_CT_LISTNBOX","_color","_current","_pic"];
	disableSerialization ;
	_CT_LISTNBOX = _this select 0;
	{
	_CT_LISTNBOX lnbAddRow [ getText (_x "displayNameShort"), getText (_x "displayName")];
	_CT_LISTNBOX lnbSetPicture [ [_foreachIndex,0], getText (_x "texture")];
	} forEach (" isClass _x" configClasses ( configFile "CfgRanks"));
	_CT_LISTNBOX lnbSetCurSelRow 0;
	_current = lnbCurSelRow _CT_LISTNBOX;
	_color = _CT_LISTNBOX lnbColor [_current,0];
	_CT_LISTNBOX lnbSetColor [ [_current,1], [(_color select 0)/2,0,0,1] ];
	_CT_LISTNBOX lnbDeleteColumn 0;
	_CT_LISTNBOX lnbDeleteRow 1;
	sleep 1;
	lnbClear _CT_LISTNBOX;//Clear all items but control still remains just invisible.
	};
	$/Code$
	A combined use of both invisible and visible data processing commands alive the Control.
	</Note>
	<ReturnValue>
		Number - Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		unitReady
	</Keyword>
	<Description>
		Check if the unit is ready. Unit is busy when it is given some command like move, until the command is finished.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/unitReady
	</WikiPage>
	<Syntax>
		unitReady Object
	</Syntax>
	<RawSyntax>
		unitReady unitName
	</RawSyntax>
	<Example>
		$Code$_it = unitReady _soldierOne;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(August 26, 2010)
	Keep in mind that a) dead units are unitReady and b) that it takes a while until it get's known to group members that a unit is not alive anymore, which leads to c) the current leader of a group might be actually dead (until another group member takes command).
	Why this is important? I'll give you an example: if you're using unitReady as a condition inside one of your fsm to advance whatever the fsm/group is doing, you really might wanna check that this unit is actually still alive. Otherwise you might end up with really fast and nasty loops in your fsm, eventually accompanied by a stream of radio commands that will last until finally a living leader is in command again.. and that could take a while... nasty, I tell you :)
	</NextNote>
		Regarding vehicles, there is only one single unit (from the vehicle crew) whose unitReady-status is affected by giving that vehicle (or that unit) commands. While it's the driver unit for a truck, it is the gunner unit for a mg-jeep or the commander for a tank. Generally it's always the unit "in control" of the vehicle. (because it's only that unit, that is seen as "full unit" to the "outside world". Only he can be adressed with commands.)
	In consequence you can't just send vehicles around and check if they've arrived with something like:
	waitUntil{(unitReady (driver _vehicle))}; // don't do this!
	Because it's not guaranteed, that the driver is in command of the vehicle and only that unit will have it's unitReady status affected.
	So in conclusion, if you need to check if a vehicle is ready, try something like this: _vehicleReady = {
	private ["_veh", "_ready"];
	_veh = _this;
	_ready = true;
	{
	if (!(isNull _x)) then
	{
	_ready = _ready && (unitReady _x);
	};
	} forEach [
	(commander _veh),
	(gunner _veh),
	(driver _veh)
	];
	_ready
	};
	</NextNote>
		(November 21, 2015)
	To check readiness of a vehicle, don't check it's crew, driver, gunner, commander, etc., but the vehicle itself, e.g.:
	$Code$unitReady (vehicle driver _YourVehicle);$/Code$
	Only tested 11/21/2015 by me with A2 1.63.131129 and A3 1.52.132676 but possibly true since 1964. :P
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		playableUnits
	</Keyword>
	<Description>
		Returns a list of playable units in a multiplayer game (occupied by both AI or players), created on the following sides east, west, resistance / independent and civilian only. Does not contain units of sideLogic. This does not include dead players awaiting for respawn.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/playableUnits
	</WikiPage>
	<Syntax>
		playableUnits
	</Syntax>
	<RawSyntax>
		playableUnits
	</RawSyntax>
	<Example>
		$Code${_x groupChat "I'm a playable unit.";} forEach playableUnits ;$/Code$
	</NextExample>
		$Code$// All playable units in a group:
	_playableInGroup = units group player arrayIntersect playableUnits ;$/Code$
	</NextExample>
		$Code$// All non-playable units in a group:
	_playableInGroup = units group player - playableUnits ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(July 13, 2009)
	In single-player missions, this command will return an empty array.
	</NextNote>
		(December 23, 2014)
	To get a list of all player-controlled units:
	$Code$_allPlayers = [];
	{
	if ( isPlayer _x) then
	{
	_allPlayers pushBack _x;
	};
	} forEach playableUnits ;$/Code$
	</NextNote>
		(April 15, 2015)
	Quote: $Code$ Killswitch
	In single-player missions, this command will return an empty array.$/Code$
	Use the switchableUnits command instead
	</NextNote>
		(August 16, 2015)
	playableUnits will not return dead players, use allPlayers instead.
	</NextNote>
		(February 14, 2017)
	Using the Editor (multiplayer attributes) for unchecking "enable AI", or disabling AI(s) in lobby, will make playableUnits as a public variable, updated by each JIP on disabled slot. So, if all slots are diabled AI, playableunits is same as allPlayers
	Furthermore, in this case, non-played slot (playable and disabled AI) units simply don't exist! i.e. If you name 8 playable units: u1..to u8, then 2 players in game: u3 & u6
	playableUnits will return [u3,u6], and true for isNil "u1", isNil "u2"... until another player takes the slot.
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		enableUAVConnectability
	</Keyword>
	<Description>
		Enables unit's AV terminal(s) connecting to UAV.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/enableUAVConnectability
	</WikiPage>
	<Syntax>
		Object enableUAVConnectability Array
	</Syntax>
	<RawSyntax>
		object enableUAVConnectability [uav, checkAllItems]
	</RawSyntax>
	<Example>
		$Code$unit enableUAVConnectability [uav,true];$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		endMission
	</Keyword>
	<Description>
		Finish the mission.
	The end type can be:
	"CONTINUE"
	"KILLED"
	"LOSER"
	"END1"
	"END2"
	"END3"
	"END4"
	"END5"
	"END6"
	Mission saves are deleted. Use failMission if they should not.
	To maintain Arma 3 visual style, it's recommended to use BIS_fnc_endMission instead.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/endMission
	</WikiPage>
	<Syntax>
		endMission String
	</Syntax>
	<RawSyntax>
		endMission endType
	</RawSyntax>
	<Example>
		$Code$endMission "END1";$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		markerDir
	</Keyword>
	<Description>
		Get marker direction.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/markerDir
	</WikiPage>
	<Syntax>
		markerDir String
	</Syntax>
	<RawSyntax>
		markerDir markerName
	</RawSyntax>
	<Example>
		$Code$_mPos = markerDir "markerOne"$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(April 18, 2010)
	The direction of the marker is the same as displayed in the editor, so it can both be negative, and be 360 degrees or greater.
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		assignAsCargo
	</Keyword>
	<Description>
		Assign a unit as cargo of a vehicle. Used together with orderGetIn to order a unit to get in as cargo into a specific vehicle. Before usage of this command a subordinate unit hasn't got the option to get into the cargo space of the vehicle.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/assignAsCargo
	</WikiPage>
	<Syntax>
		Object assignAsCargo Object
	</Syntax>
	<RawSyntax>
		unitName assignAsCargo vehicleName
	</RawSyntax>
	<Example>
		$Code$_soldier1 assignAsCargo _truck
	[_soldier1] orderGetIn true$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setEffectCondition
	</Keyword>
	<Description>
		The statement is executed when the trigger or waypoint is activated and the effects are launched depending on the result.
	If the result is a boolean and true, the effect is launched.
	If the result is an object, the effect is launched if the result is the player or the player vehicle.
	If the result is an array, the effect is launched if the result contains the player or the player vehicle.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setEffectCondition
	</WikiPage>
	<Syntax>
		Object setEffectCondition String
	</NextSyntax>
		Waypoint setEffectCondition String
	</Syntax>
	<RawSyntax>
		trigger setEffectCondition statement
	</NextRawSyntax>
		waypoint setEffectCondition statement
	</RawSyntax>
	<Example>
		$Code$_triggerObj setEffectCondition "thisList";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		nearSupplies
	</Keyword>
	<Description>
		Find supplies (weapon holders, ammo crates, fuel feeds, other units) in the sphere with given radius.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/nearSupplies
	</WikiPage>
	<Syntax>
		Object/Array nearSupplies Number
	</Syntax>
	<RawSyntax>
		origin nearSupplies radius
	</RawSyntax>
	<Example>
		$Code$_list = player nearSupplies 50;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		firstBackpack
	</Keyword>
	<Description>
		Returns the first stored backpack.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/firstBackpack
	</WikiPage>
	<Syntax>
		firstBackpack Object
	</Syntax>
	<RawSyntax>
		firstBackpack box
	</RawSyntax>
	<Example>
		$Code$myVariable = firstBackpack myBox;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Object
	</ReturnValue>

</NextListItem>

	<Keyword>
		configNull
	</Keyword>
	<Description>
		A non-existing Config.
	configNull == configNull ; // true
	isNull configNull ; // true
	configNull isEqualTo configNull ; // true
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/configNull
	</WikiPage>
	<Syntax>
		configNull
	</Syntax>
	<RawSyntax>
		configNull
	</RawSyntax>
	<Example>
		$Code$_config = missionNamespace getVariable ["myConfig", configNull ];$/Code$
	</NextExample>
		$Code$str configNull ; // ""$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Config
	</ReturnValue>

</NextListItem>

	<Keyword>
		getPlateNumber
	</Keyword>
	<Description>
		Get the license plates from any vehicle which has plates configured.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getPlateNumber
	</WikiPage>
	<Syntax>
		getPlateNumber Object
	</Syntax>
	<RawSyntax>
		getPlateNumber vehicle
	</RawSyntax>
	<Example>
		$Code$getPlateNumber vehicle player$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		moveInDriver
	</Keyword>
	<Description>
		Move soldier into vehicle driver position (Immediate, no animation).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/moveInDriver
	</WikiPage>
	<Syntax>
		Object moveInDriver Object
	</Syntax>
	<RawSyntax>
		unitName moveInDriver vehicle
	</RawSyntax>
	<Example>
		$Code$_soldierOne moveInDriver _tankOne$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		(August 4, 2006)
	Notes from before the conversion:
	MP Note Functions MoveInDriver can only be called for local soldiers. They will be ignored for remote soldiers. (see Locality in Multiplayer )
	</NextNote>
		In OFP v1.96, the moveIn commands will not trigger an associated getIn event. To ensure the getIn event is fired, use the "getIn Driver" action command.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setVehicleReportOwnPosition
	</Keyword>
	<Description>
		Sets that the vehicle will share its own position via datalink to the Side center.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setVehicleReportOwnPosition
	</WikiPage>
	<Syntax>
		Object setVehicleReportOwnPosition Boolean
	</Syntax>
	<RawSyntax>
		vehicle setVehicleReportOwnPosition report
	</RawSyntax>
	<Example>
		$Code$( vehicle player ) setVehicleReportOwnPosition true;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		toFixed
	</Keyword>
	<Description>
		Converts a number into a string, keeping the specified number of decimals. If the desired number of decimals is higher than the actual number, nulls are added to create the desired decimal length. This command is almost identical in behaviour to JavaScript toFixed()
	NOTE: Converted number is never presented in scientific notation unlike with other number to string commands. Also Arma's default string conversion limits numbers to 6 significant figures, whereas with this command it is possible to preserve some extra precision.
	$Code$ str ( pi /100000); //"3.14159e-005" - scientific notation
	( pi /100000) toFixed 10; //"0.0000314159" - no scientific notation
	str pi ; //"3.14159" - 6 significant figures (default)
	pi toFixed 6; //"3.141593" - forced to 7 significant figures
	pi toFixed 7; //"3.1415927" - forced to 8 significant figures$/Code$
	Since Arma 3 v1.71.141859 an alternative syntax is added, which takes no number and returns Nothing. Instead it acts as keyword and switches engine Number to String global conversion into desired format, from the moment it is applied until the end of script. To reset output back to default at any time, use toFixed -1. For example:
	$Code$ systemChat str position player ;
	call
	{
	toFixed 6;
	systemChat str position player ;
	};
	systemChat str position player ;
	toFixed -1;
	systemChat str position player ;$/Code$
	The result is:
	[11580.3,11797.7,0.00146675]
	[11580.341797,11797.737305,0.001467]
	[11580.341797,11797.737305,0.001467]
	[11580.3,11797.7,0.00146675]
	Ideal to be used when saving data to a database when more precise positioning is required.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/toFixed
	</WikiPage>
	<Syntax>
		Number toFixed Number
	</NextSyntax>
		toFixed Number
	</Syntax>
	<RawSyntax>
		number toFixed decimals
	</NextRawSyntax>
		toFixed decimals
	</RawSyntax>
	<Example>
		$Code$123 toFixed 2; //"123.00"$/Code$
	</NextExample>
		$Code$2.34 toFixed 1; //"2.3"
	2.35 toFixed 1; //"2.4"$/Code$
	</NextExample>
		$Code$// Convert position to string preserving position precision:
	fn_posToString =
	{
	format [
	"[%1,%2,%3]",
	_this select 0 toFixed 8,
	_this select 1 toFixed 8,
	_this select 2 toFixed 8
	]
	};
	str getPos player ; // "[3231.05,171.802,0.00143862]"
	getPos player call fn_posToString; // "[3231.04882813,171.80192566,0.00143862]"$/Code$
	</NextExample>
		$Code$// Same as Example 3 only using new alternative syntax:
	str getPos player ; // "[3231.05,171.802,0.00143862]"
	toFixed 8;
	str getPos player ; // "[3231.04882813,171.80192566,0.00143862]"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(September 2, 2016)
	parseNumber (3.56346 toFixed 4); //0.0026 ms (10000 cycles)
	[3.5634,4] call BIS_fnc_cutDecimals ; //0.0111 ms (10000 cycles)
	</Note>
	<ReturnValue>
		String - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		createCenter
	</Keyword>
	<Description>
		In a nutshell, this command creates game Side. Without side it is not possible to create Groups. So if center for particular side is undefined, no groups can be created for this side. A Unit needs a group to be able to spawn in. So if no center for particular side exists, no groups for this side can be created and therefore no units for this side can be spawned. In Arma 3, the centers for all sides are created for you. An attempt to create center for existing side is ignored. Center can only be created for: east, west, resistance, civilian and sideLogic. These are the only sides groups can be created for.
	Old description : Creates a new AI HQ for the given side. An 'HQ ' is something each side needs to have to be able to communicate. By default, all centers for units which are present in the mission are created before the mission is started. This command can be used to initialize a side which has no units present in the Mission.sqm, so that you can spawn groups and units for it.
	For the available sides see Side.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/createCenter
	</WikiPage>
	<Syntax>
		createCenter Side
	</Syntax>
	<RawSyntax>
		createCenter side
	</RawSyntax>
	<Example>
		$Code$_SideHQ = createCenter east$/Code$
	</Example>
	<Locality>
		undefined / global
	</Locality>
	<Note>
		(17:15, 22 June 2007 (CEST))
	You need to set the new sides friendly status using the setFriend command, once you have created your Center. Otherwise the newly created AI will not engage you, if you're on the opposing side.
	</Note>
	<ReturnValue>
		Side
	</ReturnValue>

</NextListItem>

	<Keyword>
		min
	</Keyword>
	<Description>
		The smaller of a,b
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/min
	</WikiPage>
	<Syntax>
		Number min Number
	</Syntax>
	<RawSyntax>
		a min b
	</RawSyntax>
	<Example>
		$Code$3 min 2
	// Result is 2$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		rankId
	</Keyword>
	<Description>
		Return the rank of the given unit for comparison.
	Value may be :
	0 - Private
	1 - Corporal
	2 - Sergeant
	3 - Lieutenant
	4 - Captain
	5 - Major
	6 - Colonel
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/rankId
	</WikiPage>
	<Syntax>
		rankId Object
	</Syntax>
	<RawSyntax>
		rankId unit
	</RawSyntax>
	<Example>
		$Code$_myIdRank = rankId player;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		getVariable
	</Keyword>
	<Description>
		Return the value of variable in the variable space assigned to various data types. In case of Alt Syntax usage in Arma 3, the default value will be returned if:
	Requested variable is either undefined or nil
	Variable namespace is null ( objNull, grpNull, etc.)
	All available data types combinations:
	Namespace getVariable String
	Namespace getVariable Array (since Arma 2 1.60)
	Object getVariable String
	Object getVariable Array
	Group getVariable String
	Group getVariable Array
	Team_Member getVariable String
	Team_Member getVariable Array
	Task getVariable String
	Task getVariable Array (Since Arma 3 v1.67)
	Location getVariable String
	Location getVariable Array (Since Arma 3 v1.67)
	Control getVariable String (since Arma 3 v1.55.133553)
	Control getVariable Array (since Arma 3 v1.55.133553)
	Display getVariable String (since Arma 3 v1.55.133553)
	Display getVariable Array (since Arma 3 v1.55.133553)
	When variable is set on Task, it is not actually set on task itself, but on FSM attached to the task. So if there is no FSM getVariable will not work.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getVariable
	</WikiPage>
	<Syntax>
		Namespace/Object/Display/Control/Group/Location/Task/Team_Member getVariable String
	</NextSyntax>
		Namespace/Object/Display/Control/Group/Location/Task/Team_Member getVariable Array
	</Syntax>
	<RawSyntax>
		varspace getVariable name
	</NextRawSyntax>
		varspace getVariable [name, defaultValue]
	</RawSyntax>
	<Example>
		$Code$_thePublicVariable = _myTruck getVariable "myPublicVariable";$/Code$
	</NextExample>
		$Code$_aLocalVariable = _myTruck getVariable ["myLocalVariable", ["Not set", _var]] select 1;$/Code$
	</NextExample>
		$Code$for "_i" from 0 to 5 do {
	_car = missionNamespace getVariable ("car" + str _i);
	_car setDamage 0;
	};
	// Sets damage of car0, car1,..., car5 to 0.$/Code$
	</NextExample>
		$Code$myMissionVar = 2015;
	missionNamespace getVariable "myMissionVar";//Returns 2015$/Code$
	</NextExample>
		$Code$// WARNING when using dynamic default value:
	missionNamespace getVariable ["var", 123 call fnc_abc];
	/// fnc_abc is always called even when var is defined$/Code$
	</NextExample>
		$Code$// Get current value of a variable and if it is undefined, define it and get the defined value:
	private _var = missionNamespace getVariable "varName";
	if ( isNil "_var") then
	{
	missionNamespace setVariable ["varName", 123];
	_var = 123;
	};
	// _var here will contain current value of the variable varName$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(August 13, 2016)
	NOTE: Arma 2 ONLY! In Arma 3 this will return default value.
	Warning: the alternative syntax returns undefined when the varspace is an object and that object is null. Example:
	$Code$_test = objNull getVariable ["test","0"];
	systemChat _test;$/Code$
	Errors because _test is undefined. Tested in A2OA 1.63.131129
	</NextNote>
		(August 31, 2017)
	You can do typechecking using param :
	$Code$private _myVar = [player getVariable "myVar"] param [0,"",[""]];$/Code$
	and params :
	$Code$[player getVariable "myVar"] params [["_myVar","",[""]]];$/Code$
	</Note>
	<ReturnValue>
		Anything/Nothing - Anything
	</ReturnValue>

</NextListItem>

	<Keyword>
		modelToWorld
	</Keyword>
	<Description>
		Translates relative position from object model space into world position. This command will take into account vectorUp of the object when calculating relative coordinates. For ASL version see modelToWorldWorld
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/modelToWorld
	</WikiPage>
	<Syntax>
		Object modelToWorld Array
	</Syntax>
	<RawSyntax>
		model modelToWorld position
	</RawSyntax>
	<Example>
		$Code$_aboveAndBehindPlayer = player modelToWorld [0,-1,3];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(16 Feb, 2007)
	The worldPos parameter appears to be a relative offset to the position of object, so it can often simply be [0,0,0].
	Example: to position an object _obj relative to the position of another object _RelObj with on offset of _Offset, try:
	_Offset = [_x,_y,_z];
	_worldPos = _RelObj modelToWorld _Offset;
	_obj setPos _worldPos;
	</NextNote>
		(16 Feb, 2007)
	The object model space has got its Z-Axis along the object's vectorUp, its Y-Axis along the object's vectorDir, while its X-Axis goes along vectorDir x VectorUp (meaning as the X-Axis in a right-handed cartesian coordiante system ).
	</NextNote>
		(8 May, 2008)
	If your object requires a new direction, ensure you call setDir prior to setPos when using modelToWorld. Calling setDir afterwards will skew its position otherwise.
	_ladder setDir _angle;
	_ladder setPos (_building modelToWorld [_x, _y, _z]);
	</NextNote>
		(6 Feb, 2011)
	The z height returned changes dynamically with the height of waves beneath the object, if the object is located over sea. The z height returned by getPosATL and getPosASL does not change like this. This was tested by continuously retrieving the position of a static object, like the cross in the empty/corpses category, placed over sea or land.
	modelToWorld behaves similar to
	getPos _obj
	but it does not give the same result, therefore
	(_obj modelToWorld [0.0, 0.0, 0.0]) is not the same as (getPos _obj).
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		remove3DENEventHandler
	</Keyword>
	<Description>
		Removes Eden Editor event handler of given type and ID.
	See the list of all Eden Editor Event Handlers.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/remove3DENEventHandler
	</WikiPage>
	<Syntax>
		remove3DENEventHandler Array
	</Syntax>
	<RawSyntax>
		remove3DENEventHandler [type,id]
	</RawSyntax>
	<Example>
		$Code$eh = add3DENEventHandler ["onUndo",{ systemChat "Zip..."}];
	remove3DENEventHandler ["onUndo",eh];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		ropeCut
	</Keyword>
	<Description>
		Cut rope and detach rope from vehicle
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ropeCut
	</WikiPage>
	<Syntax>
		ropeCut Array
	</Syntax>
	<RawSyntax>
		ropeCut [rope, distance]
	</RawSyntax>
	<Example>
		$Code$ropeCut [ ropes heli1 select 0, 5];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		curatorCoef
	</Keyword>
	<Description>
		Returns current coeficient setting.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/curatorCoef
	</WikiPage>
	<Syntax>
		Object curatorCoef String
	</Syntax>
	<RawSyntax>
		curatorObj curatorCoef action
	</RawSyntax>
	<Example>
		$Code$curatorModule curatorCoef "Place"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		curatorEditingArea
	</Keyword>
	<Description>
		Returns all curator editing areas.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/curatorEditingArea
	</WikiPage>
	<Syntax>
		curatorEditingArea Object
	</Syntax>
	<RawSyntax>
		curatorEditingArea curatorObj
	</RawSyntax>
	<Example>
		$Code$_editingArea = curatorEditingArea myCurator;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		findEmptyPosition
	</Keyword>
	<Description>
		Searches for an empty position around specified position. The search starts looking for an empty position at a minimum distance of [minDistance] from the [center] and looks as far away as [maxDistance]. If a [vehicleType] parameter is specified, then the search will look for an empty positions that is big enough to hold that vehicle type. If an empty position isn't found, an empty array is returned.
	This command ignores moving objects present within search area.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/findEmptyPosition
	</WikiPage>
	<Syntax>
		Array findEmptyPosition Array
	</Syntax>
	<RawSyntax>
		center findEmptyPosition [minDistance, maxDistance, vehicleType]
	</RawSyntax>
	<Example>
		$Code$_position = ( getPosATL player ) findEmptyPosition [0,100];$/Code$
	</NextExample>
		$Code$_position = _center findEmptyPosition [10,100,"UH60M_EP1"];$/Code$
	</NextExample>
		$Code$// Check if exact position is empty:
	_position = _center findEmptyPosition [0,0,"B_Boat_Armed_01_minigun_F"];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(November 6, 2013)
	Keep search radius short and sweet, under 50 metres maybe. Searching big area takes long time and will result in your game stop responding until the search is over. isFlatEmpty is probably more suitable for a larger area search.
	</NextNote>
		(March 6, 2012)
	I think the radius parameter should be treated as a 'minimum distance' from the centre position. I found that the parameter name radius wasn't very clear. Also, if radius is greater than max distance then the function will always return an empty array.
	Here is an snippet of code I use to find a safe landing zone for an extraction helicopter. It may be useful for someone.
	$Code$_centre = [ getMarkerPos "marker", random 150, random 360 ] call BIS_fnc_relPos;
	_extraction_point = [];
	_max_distance = 100;
	while{ count _extraction_point 1 } do
	{
	_extraction_point = _centre findEmptyPosition[ 30, _max_distance, "UH60M_EP1" ];
	_max_distance = _max_distance + 50;
	};
	$/Code$
	In the above example, make sure that "_max_distance" is greater than 30, otherwise the while loop will go forever.
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		removeUniform
	</Keyword>
	<Description>
		Removes uniform from unit.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/removeUniform
	</WikiPage>
	<Syntax>
		removeUniform Object
	</Syntax>
	<RawSyntax>
		removeUniform unit
	</RawSyntax>
	<Example>
		$Code$removeUniform player ;$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		remoteControl
	</Keyword>
	<Description>
		Switches on remote control of the unit. Command needs to be executed locally to the player. If driver is remote it will get transferred to players PC.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/remoteControl
	</WikiPage>
	<Syntax>
		Object remoteControl Object
	</Syntax>
	<RawSyntax>
		who remoteControl whom
	</RawSyntax>
	<Example>
		$Code$// Set player remote control of driver:
	player remoteControl driver UAV;
	driver UAV switchCamera "Internal"; //switchCamera required
	//sometimes switchCamera is not needed
	player remoteControl driver UAV;$/Code$
	</NextExample>
		$Code$// Return control to player:
	objNull remoteControl driver UAV;$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		You must use switchCamera in order to remote control the unit and.
	You can only remoteControl characters, e.g. if yo want to remote control a car, you have
	to add a driver and use
	"player remoteControl driver someVehicle".
	</NextNote>
		(Jan 25, 2010)
	Arma 1.05 :
	You can remoteControl multiple units at the same time.
	It is not needed to switchCamera to the unit to be able to control it - it is needed to be able to fire with.
	The switchCamera is fixed : the player can't change internal/external/optics view.
	Do not think about it like a selectPlayer : it is used to give the control to the vehicle role the unit is in.
	SwitchCamera to the vehicle the unit is in ; the camera will go depending the role you are remoteControlling.
	The AI driver won't follow your vehicle move orders.
	If the player dies, the death screen will appear, not automatically turning back to the player.
	If you want to stop the remote control, use objNull as remote controller.
	Example :
	player remoteControl driver jeep1; // will remoteControl it, you still will have full control of the player
	jeep1 switchCamera "internal"; // fix the camera to the ''vehicle'' and not to (driver jeep1) !
	waitUntil { !(alive jeep1) || !(alive player) };
	objNull remoteControl driver jeep1; // removes the remoteControlling
	player switchCamera "internal"; // returns to the player
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		configClasses
	</Keyword>
	<Description>
		Returns an array of config entries which meet criteria in condition code. Command iterates through all available config sub classes of the given config class. Current looked at config is stored in _x variable (similar to alternative count command implementation). Condition has to return true in order for the looked at config to be added to the resulting array. Slightly faster than configProperties, but doesn't account for config properties or inherited entries.
	The condition code passed to configClasses should only be used for simple filter expressions and nothing more
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/configClasses
	</WikiPage>
	<Syntax>
		String configClasses Config
	</Syntax>
	<RawSyntax>
		condition configClasses config
	</RawSyntax>
	<Example>
		$Code$// collect all CfgVehicles configs:
	_configs = " true " configClasses ( configFile "CfgVehicles");$/Code$
	</NextExample>
		$Code$// Return all classes that can transport 10 and more soldiers:
	_transporters = " getNumber (_x 'transportSoldier') = 10" configClasses ( configFile "CfgVehicles");$/Code$
	</NextExample>
		$Code$// Return all classes that inherit from 'RscText':
	hint str (" inheritsFrom _x == ( configFile 'RscText')" configClasses configFile );$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(oct 19, 2014)
	A fantastic way to filter stuff. eg; Create an array of west vehicles and spawn then in front of the player in rows of 5
	$Code$
	private ["_cfgArray","_xPos","_yPos","_veh"];
	_cfgArray = "(
	(getNumber (_x 'scope') = 2) &&
	{getNumber (_x 'side') == 1 &&
	{getText (_x 'vehicleClass') in ['Armored', 'Car', 'Air']
	}
	}
	)" configClasses (configFile "CfgVehicles");
	_xPos = 0;
	_yPos = 0;
	{
	_yPos = _yPos + 20;
	_veh = createVehicle [ ( configName _x ), player modelToWorld [_xPos, _yPos, 0], [], 0, "None"];
	if (_yPos = 100) then {
	_yPos = 0;
	_xPos = _xPos + 20;
	};
	} forEach _cfgArray;
	$/Code$
	</NextNote>
		(May 28, 2016)
	configClasses does not account for inherited subclasses, use configProperties with isClass filter instead
	$Code$ configProperties [_config, " isClass _x", true ];$/Code$
	</NextNote>
		(May 28, 2017)
	this will get a list of ALL locations on the currently loaded world
	$Code$( "true" configClasses ( configFile "CfgWorlds" worldName "names" ) ) apply {
	// change each config entry into a location
	nearestLocation [
	getArray ( _x "position" ),
	getText ( _x "type" )
	]
	};$/Code$
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		isStaminaEnabled
	</Keyword>
	<Description>
		Check if stamina depletion is enabled
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isStaminaEnabled
	</WikiPage>
	<Syntax>
		isStaminaEnabled Object
	</Syntax>
	<RawSyntax>
		isStaminaEnabled unit
	</RawSyntax>
	<Example>
		$Code$isStaminaEnabled player;$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		tvPicture
	</Keyword>
	<Description>
		Returns name of picture from item pointed to by path. IDC means id of parent Tree View.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/tvPicture
	</WikiPage>
	<Syntax>
		tvPicture Array
	</NextSyntax>
		Control tvPicture Array
	</Syntax>
	<RawSyntax>
		tvPicture [idc, [path]]
	</NextRawSyntax>
		_ctrl tvPicture [path]
	</RawSyntax>
	<Example>
		$Code$tvPicture [101, [0]];$/Code$
	</NextExample>
		$Code$_ctrl tvPicture [0,0,0];$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
		(Sep 11 2014)
	(A3 1.28)tv command family overview
	$Code$
	//tv command family available for CT_TREE (type 12)
	private ["_count","_current","_data","_text","_value","_pic"];
	_CT_TREE tvAdd [ [],"Parent_A"];
	_CT_TREE tvAdd [ [0],"Child_A"];
	_CT_TREE tvAdd [ [0,0],"Grandchild_A"];
	_CT_TREE tvAdd [ [],"Parent_B"];
	_CT_TREE tvAdd [ [1],"Child_B"];
	_count = _CT_TREE tvCount []; //return 2
	_CT_TREE tvSetCurSel [0,0,0]; //select grandchild_A
	_current = tvCurSel _CT_TREE; //return [0,0,0]
	_CT_TREE tvSetData [_current,"I'm grandchild_A"];
	_data = _CT_TREE tvData _current; // "I'm grandchild_A"
	_text = _CT_TREE tvText _current; //"Grandchild_A"
	_CT_TREE tvSetValue [_current,14];
	_value = _CT_TREE tvValue _current; // 14
	_CT_TREE tvSetPicture [_current, getText ( configFile "CfgWeapons" "optic_NVS" "picture")];
	_pic = _CT_TREE tvPicture _current;
	_CT_TREE tvExpand [1];
	_CT_TREE tvSort [[], false ];
	_CT_TREE tvSortByValue [[], false ];
	_CT_TREE tvDelete [0,0]; //remove child_b
	tvClear 12;
	_CT_TREE tvCollapse [];
	$/Code$
	</Note>
	<ReturnValue>
		String - String
	</ReturnValue>

</NextListItem>

	<Keyword>
		setDropInterval
	</Keyword>
	<Description>
		Set interval of emitting particles from particle source. In Arma 3 hardcoded limit of how many particles can exist at the same time is 18000. Correspondence between CfgCloudlets class param name and command param:
	$Code$particleSource setDropInterval interval;$/Code$
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setDropInterval
	</WikiPage>
	<Syntax>
		Object setDropInterval Number
	</Syntax>
	<RawSyntax>
		particleSource setDropInterval interval
	</RawSyntax>
	<Example>
		$Code$_source setDropInterval 0.05;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		get3DENActionState
	</Keyword>
	<Description>
		Returns state of given action in the Eden Editor.
	See the list of all actions.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/get3DENActionState
	</WikiPage>
	<Syntax>
		get3DENActionState String
	</Syntax>
	<RawSyntax>
		get3DENActionState action
	</RawSyntax>
	<Example>
		$Code$if ( get3DENActionState "ToggleMap" == 1) then { systemChat "Editor map is open!"};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		selectDiarySubject
	</Keyword>
	<Description>
		Select the subject page in a log.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/selectDiarySubject
	</WikiPage>
	<Syntax>
		Object selectDiarySubject String
	</Syntax>
	<RawSyntax>
		person selectDiarySubject subject
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		openMap
	</Keyword>
	<Description>
		Shows in-game map. If forced, cannot be closed.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/openMap
	</WikiPage>
	<Syntax>
		openMap Boolean
	</NextSyntax>
		openMap Array
	</Syntax>
	<RawSyntax>
		openMap show
	</NextRawSyntax>
		openMap [show, forced]
	</RawSyntax>
	<Example>
		$Code$openMap true ;$/Code$
	</NextExample>
		$Code$openMap [ true, true ];$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean - Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		setPilotCameraTarget
	</Keyword>
	<Description>
		Sets an area or target to be tracked by the object airplane or helicopter pilotCamera.
	To track an object the vehicle has to have appropriate sensors ( scanners ) that can detect the given target type.
	Using objNull will unlock the camera
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setPilotCameraTarget
	</WikiPage>
	<Syntax>
		Object setPilotCameraTarget Object/Array
	</Syntax>
	<RawSyntax>
		object setPilotCameraTarget target
	</RawSyntax>
	<Example>
		$Code$_pilotCamTrack = vehicle player setPilotCameraTarget [2100,4200,4.2];$/Code$
	</NextExample>
		$Code$_pilotCamTrack = vehicle player setPilotCameraTarget BIS_Edita;$/Code$
	</Example>
	<Locality>
		local / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		selectMin
	</Keyword>
	<Description>
		Returns the array element with minimum numerical value. Engine solution to BIS_fnc_lowestNum and BIS_fnc_findExtreme. Therefore it is expected that supplied array consists of Numbers only. Booleans however are also supported and will be evaluated as Numbers : true - 1, false - 0. nil value treated as 0. Other non Number elements (not recommended) will be evaluated as 0 and Bad conversion: scalar message will be logged into. rpt.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/selectMin
	</WikiPage>
	<Syntax>
		selectMin Array
	</Syntax>
	<RawSyntax>
		selectMin array
	</RawSyntax>
	<Example>
		$Code$_min = selectMin [1,2,3,4,5]; //1$/Code$
	</NextExample>
		$Code$// Same as, for example:
	_min = _a min _b min _c min _d;
	// Only faster:
	_min = selectMin [_a,_b,_c,_d];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Anything
	</ReturnValue>

</NextListItem>

	<Keyword>
		setWaypointVisible
	</Keyword>
	<Description>
		Sets the visibility of the waypoint.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setWaypointVisible
	</WikiPage>
	<Syntax>
		Array setWaypointVisible Boolean
	</Syntax>
	<RawSyntax>
		waypoint setWaypointVisible visible
	</RawSyntax>
	<Example>
		$Code$[grp, 2] setWaypointVisible false ;$/Code$
	</NextExample>
		$Code$[ group player, currentWaypoint ( group player )] setWaypointVisible false ;$/Code$
	</Example>
	<Locality>
		undefined / global
	</Locality>
	<Note>
		(September 23, 2015)
	This does not apply to Zeus/Curator view... so this command won't hide the Waypoint lines and icons from your view as a Zeus when units are in your EditableAddons list.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		addPrimaryWeaponItem
	</Keyword>
	<Description>
		Adds weapon item to the weapon cargo space. This is used for infantry weapons.
	As of Arma 3 DEV 1.37, this command also supports weapon magazines.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/addPrimaryWeaponItem
	</WikiPage>
	<Syntax>
		Object addPrimaryWeaponItem String
	</Syntax>
	<RawSyntax>
		unit addPrimaryWeaponItem item
	</RawSyntax>
	<Example>
		$Code$player addPrimaryWeaponItem "muzzle_snds_H";$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		(June 22, 2014)
	If the item being added is not supported by the unit's weapon then the command will simply fail silently. The item is also not added to the unit's inventory in such a case.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		face
	</Keyword>
	<Description>
		Returns the face of a person.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/face
	</WikiPage>
	<Syntax>
		face Object
	</Syntax>
	<RawSyntax>
		face person
	</RawSyntax>
	<Example>
		$Code$face player$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		diag_captureFrame
	</Keyword>
	<Description>
		This command starts counting frames from the moment it is executed and when the count reaches the number passed as param, the current frame is captured and captured data UI dialog appears, similar to diag_captureSlowFrame.
	This can also be executed on a dedicated Server and because a Server has no UI it will behave like diag_captureFrameToFile.
	Special: BattlEye's RCON variant of this command is #captureFrame
	Note : Only available in specific builds. See Performance Profiling for details.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/diag_captureFrame
	</WikiPage>
	<Syntax>
		diag_captureFrame Number
	</Syntax>
	<RawSyntax>
		diag_captureFrame frame
	</RawSyntax>
	<Example>
		$Code$diag_captureFrame 1; //capture the first frame after command execution$/Code$
	</NextExample>
		$Code$diag_captureFrame 24; //capture 24th frame after command execution$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlFade
	</Keyword>
	<Description>
		Returns the current fade factor of control.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlFade
	</WikiPage>
	<Syntax>
		ctrlFade Control
	</Syntax>
	<RawSyntax>
		ctrlFade controlName
	</RawSyntax>
	<Example>
		$Code$_scale = ctrlFade _control$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctRemoveHeaders
	</Keyword>
	<Description>
		Takes array of header indices as a parameter and removes headers with those indices. Indices of remaining headers will be recomputed.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctRemoveHeaders
	</WikiPage>
	<Syntax>
		Control ctRemoveHeaders Array
	</Syntax>
	<RawSyntax>
		ctrl ctRemoveHeaders indices
	</RawSyntax>
	<Example>
		$Code$_control ctRemoveHeaders [0, 1, 2];$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlMapScale
	</Keyword>
	<Description>
		Returns the current scale of given map control.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlMapScale
	</WikiPage>
	<Syntax>
		ctrlMapScale Control
	</Syntax>
	<RawSyntax>
		ctrlMapScale ctrl
	</RawSyntax>
	<Example>
		$Code$_control = ( findDisplay 12) displayCtrl 51; //Arma 3
	_scale = ctrlMapScale _control; //returns number from 1 to 0.001$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		agent
	</Keyword>
	<Description>
		Return a person for a given agent.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/agent
	</WikiPage>
	<Syntax>
		agent Team_Member
	</Syntax>
	<RawSyntax>
		agent teamMember
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Object
	</ReturnValue>

</NextListItem>

	<Keyword>
		safeZoneWAbs
	</Keyword>
	<Description>
		Returns SafeZone width (of all monitors, in case there's more than one)
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/safeZoneWAbs
	</WikiPage>
	<Syntax>
		safeZoneWAbs
	</Syntax>
	<RawSyntax>
		safeZoneWAbs
	</RawSyntax>
	<Example>
		$Code$_szW = safeZoneWAbs;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		deActivateKey
	</Keyword>
	<Description>
		Deactivates the given keyname for the current user profile. The keys are used to unlock missions or campaigns.
	See keys, keysLimit and doneKeys in the description.ext file of the missions.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/deActivateKey
	</WikiPage>
	<Syntax>
		deActivateKey String
	</Syntax>
	<RawSyntax>
		deActivateKey keyname
	</RawSyntax>
	<Example>
		$Code$deActivateKey "Mission04Key"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		flagSide
	</Keyword>
	<Description>
		Returns Side of the local instance of the flag. A getter for setFlagSide.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/flagSide
	</WikiPage>
	<Syntax>
		flagSide Object
	</Syntax>
	<RawSyntax>
		flagSide flag
	</RawSyntax>
	<Example>
		$Code$_flagSide = flagSide flag;$/Code$
	</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Side
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlSetFocus
	</Keyword>
	<Description>
		Set the input focus on given control.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlSetFocus
	</WikiPage>
	<Syntax>
		ctrlSetFocus Control
	</Syntax>
	<RawSyntax>
		ctrlSetFocus controlName
	</RawSyntax>
	<Example>
		$Code$ctrlSetFocus _control$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(June 30, 2017)
	This command seems to only work on controls that accept any input from keyboard or mouse.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlAutoScrollSpeed
	</Keyword>
	<Description>
		Returns number of seconds to auto-scroll one line. -1 if auto-scroll is disabled. -2 if scrollbar not present.
	Autorscroll is available for CT_LISTBOX and CT_CONTROLS_GROUP types of controls only. Autoscroll will wait ctrlAutoScrollDelay seconds (must be 0) and then will scroll the scroll bar down to the bottom. ctrlAutoScrollSpeed defines the speed with which scrollbar is scrolled. If ctrlAutoScrollRewind is true, the control will fade out, immediately rewind to the top, then fade in, wait ctrlAutoScrollDelay seconds and then repeat the scrolling in a loop. If user focuses on the control, autoscrolling is interrupted.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlAutoScrollSpeed
	</WikiPage>
	<Syntax>
		ctrlAutoScrollSpeed Control
	</Syntax>
	<RawSyntax>
		ctrlAutoScrollSpeed control
	</RawSyntax>
	<Example>
		$Code$_ctrlSpeed = ctrlAutoScrollSpeed _ctrlGroup;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		lbSelection
	</Keyword>
	<Description>
		Returns Array of selected rows indices in the given listbox of style LB_MULTI (multi-selection). For single selection listbox use lbCurSel instead.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lbSelection
	</WikiPage>
	<Syntax>
		lbSelection Control
	</Syntax>
	<RawSyntax>
		lbSelection control
	</RawSyntax>
	<Example>
		$Code$_indices = lbSelection _control;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(April 10, 2016)
	This command works fine with listboxs of style LB_MULTI and should not be marked as obsolete as lbCurSel does not provide the same functionality.
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		effectiveCommander
	</Keyword>
	<Description>
		Returns the effective commander of the vehicle. Effective commander is the player whom driver AI will listen to. So if in a tank there is a gunner and a commander and AI driver, if the effectiveCommander is gunner, then gunner pressing WASD will give AI orders to move. If gunner jumps out and then enters tank again, the effectiveCommander role most likely has changed to commander that remained in tank. Also the assignment seems to work on first come first served basis.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/effectiveCommander
	</WikiPage>
	<Syntax>
		effectiveCommander Object
	</Syntax>
	<RawSyntax>
		effectiveCommander vehicle
	</RawSyntax>
	<Example>
		$Code$_commander = effectiveCommander tank;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Object
	</ReturnValue>

</NextListItem>

	<Keyword>
		setBehaviour
	</Keyword>
	<Description>
		Sets group behaviour mode. If a unit is given as argument, behaviour is set for the unit's group. Behaviour is one of:
	"CARELESS"
	"SAFE"
	"AWARE"
	"COMBAT"
	"STEALTH".
	See AIBehaviour for details of the effect of this command on AI units. For Arma 3 see Arma 3 AI Behavior.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setBehaviour
	</WikiPage>
	<Syntax>
		Group/Object setBehaviour String
	</Syntax>
	<RawSyntax>
		groupName setBehaviour behaviour
	</RawSyntax>
	<Example>
		$Code$_group1 setBehaviour "SAFE";$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		Warning! Since ArmA v.1.14 the command setBehaviour "COMBAT" do not work correctly any loger.
	Units ( Groups ) which are using this behaviour and then get a move order, will not move to the given position.
	</NextNote>
		Although setBehaviour can be called on an individual unit, the entire group will be affected.
	</NextNote>
		If setting a behaviour on an individual unit is required, it can be achieved by creating a temporary group, use joinSilent to make the individual unit belong to that group, then change his behaviour, use joinSilent into the original group, then delete the temporary group.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		formationMembers
	</Keyword>
	<Description>
		Return list of units (drivers) in the formation.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/formationMembers
	</WikiPage>
	<Syntax>
		formationMembers Object
	</Syntax>
	<RawSyntax>
		formationMembers person
	</RawSyntax>
	<Example>
		$Code$_drivers=FormationMembers _person$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		setFormationTask
	</Keyword>
	<Description>
		Set the current task of the formation member.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setFormationTask
	</WikiPage>
	<Syntax>
		Object setFormationTask String
	</Syntax>
	<RawSyntax>
		object setFormationTask task
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(16:57, 2 March 2007 (CET))
	The argument for task can be any String value. This can effectively be used to store a property in String format an retrieve it with formationTask in FSM scripts. By using it outside of FSM scripts you're risking to get it overwritten by other running FSM scripts.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		dynamicSimulationEnabled
	</Keyword>
	<Description>
		A getter for enableDynamicSimulation
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/dynamicSimulationEnabled
	</WikiPage>
	<Syntax>
		dynamicSimulationEnabled Object/Group
	</Syntax>
	<RawSyntax>
		dynamicSimulationEnabled object
	</RawSyntax>
	<Example>
		$Code$hint str dynamicSimulationEnabled _myObject;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		setWindDir
	</Keyword>
	<Description>
		Changes the wind direction smoothly during the given time (in seconds). A time of zero means there will be an immediate change.
	NOTE : Effect is global only when executed on the server. On clients wind direction will sync to server value in a while.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setWindDir
	</WikiPage>
	<Syntax>
		Number setWindDir Number
	</Syntax>
	<RawSyntax>
		time setWindDir value
	</RawSyntax>
	<Example>
		$Code$60 setWindDir 180$/Code$
	</Example>
	<Locality>
		undefined / global
	</Locality>
	<Note>
		(April 12, 2014)
	Seems to make wind [0,0] in MP. (ArmA 3 1.00)
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setMarkerTypeLocal
	</Keyword>
	<Description>
		Set marker type. See cfgMarkers for a list of standard markers.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setMarkerTypeLocal
	</WikiPage>
	<Syntax>
		String setMarkerTypeLocal String
	</Syntax>
	<RawSyntax>
		markerName setMarkerTypeLocal type
	</RawSyntax>
	<Example>
		$Code$"MarkerOne" setMarkerTypeLocal "Warning";$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		doTarget
	</Keyword>
	<Description>
		Order the given unit(s) to target the given target (without radio messages).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/doTarget
	</WikiPage>
	<Syntax>
		Object/Array doTarget Object
	</Syntax>
	<RawSyntax>
		unit doTarget target
	</RawSyntax>
	<Example>
		$Code$_ESoldier1 doTarget _WSoldier1;$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		It appears doTarget objNull can not be used to stop a unit targeting a previously assigned target. Using doWatch objNull will achieve the desired result. (ArmA v1.12Beta)
	</NextNote>
		(July 2, 2015)
	To expand on ceeeb's note, commandWatch objNull will also unassign target;
	</NextNote>
		(March 28, 2017)
	Targeting may not work as expected when trying to target a unit on the same side (friendly).
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setMarkerShapeLocal
	</Keyword>
	<Description>
		Selects the shape (type) of the marker.
	Shape can be "ICON", "RECTANGLE" or "ELLIPSE".
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setMarkerShapeLocal
	</WikiPage>
	<Syntax>
		String setMarkerShapeLocal String
	</Syntax>
	<RawSyntax>
		markerName setMarkerShapeLocal shape
	</RawSyntax>
	<Example>
		$Code$"Marker1" setMarkerShapeLocal "RECTANGLE";$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		ASLToATL
	</Keyword>
	<Description>
		Converts a position from PositionASL to PositionATL
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ASLToATL
	</WikiPage>
	<Syntax>
		ASLToATL PositionASL
	</Syntax>
	<RawSyntax>
		ASLToATL pos
	</RawSyntax>
	<Example>
		$Code$ASLToATL ( getPosASL player ) isEqualTo getPosATL player$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		PositionATL
	</ReturnValue>

</NextListItem>

	<Keyword>
		setGroupIcon
	</Keyword>
	<Description>
		Set group icons properties.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setGroupIcon
	</WikiPage>
	<Syntax>
		Group setGroupIcon Array
	</Syntax>
	<RawSyntax>
		group setGroupIcon [id, icon, offset]
	</RawSyntax>
	<Example>
		$Code$_target setGroupIcon [_icon,"hc_selectedEnemy"];
	_target setGroupIcon [_icon,"flag"];
	_grp setGroupIcon [_iconsize,_iconsizeclass,_offset];
	_grp setGroupIcon [_newid,_icon,_offset];
	_grp setGroupIcon [_icon,_iconclass];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		enableCopilot
	</Keyword>
	<Description>
		Enables copilot actions.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/enableCopilot
	</WikiPage>
	<Syntax>
		Object enableCopilot Boolean
	</Syntax>
	<RawSyntax>
		vehicle enableCopilot enable
	</RawSyntax>
	<Example>
		$Code$if (! isCopilotEnabled myHeli) then {
	myHeli enableCopilot true ;
	};$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		(February 17, 2014)
	Only enables the user actions, not who is in control - pilot can lock or unlock co-pilot controls in multiplayer while still true.
	Actions: LockVehicleControl, UnlockVehicleControl, SuspendVehicleControl and TakeVehicleControl
	You can use the Arma 3 Event Handler - ControlsShifted to detect Take and Release actions
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		pixelGridBase
	</Keyword>
	<Description>
		Returns grid size based on screen resolution.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/pixelGridBase
	</WikiPage>
	<Syntax>
		pixelGridBase
	</Syntax>
	<RawSyntax>
		pixelGridBase
	</RawSyntax>
	<Example>
		$Code$_gridBaseHeight = pixelH * pixelGridBase ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		createDialog
	</Keyword>
	<Description>
		Create a dialog which is defined either in the mission's description.ext, in the campaign's description.ext or in the global resource.cpp. The given name has to be the class name used in one of these files. If another dialog is already opened, the desired dialog is created as a child dialog of the one already opened.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/createDialog
	</WikiPage>
	<Syntax>
		createDialog String
	</Syntax>
	<RawSyntax>
		createDialog dialogName
	</RawSyntax>
	<Example>
		$Code$_ok = createDialog "RscDisplayGame";
	if (!_ok) then { hint "Dialog couldn't be opened!"};$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
		(July 29, 2017)
	A user dialog created with createDisplay over mission display ( findDisplay 46) will stop display event handlers added to mission display from firing. However if it is created with createDialog then the event handlers continue to work.
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		fadeRadio
	</Keyword>
	<Description>
		Causes a smooth change in the radio volume. The change duration is given by time, the target volume by volume. The default radio volume is 1.0.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/fadeRadio
	</WikiPage>
	<Syntax>
		Number fadeRadio Number
	</Syntax>
	<RawSyntax>
		time fadeRadio volume
	</RawSyntax>
	<Example>
		$Code$5 fadeRadio 0.1$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
		(September 11, 2008)
	Does not affect VON
	</NextNote>
		(September 13, 2016)
	Also influences audibility of the missile warning in helicopters.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setParticleCircle
	</Keyword>
	<Description>
		Updates particle source, creates particles in circle with given radius. Velocity is transformed and added to total velocity. Correspondence between CfgCloudlets class param names and command array of params:
	$Code$particleSource setParticleCircle
	[
	circleRadius,
	circleVelocity
	];$/Code$
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setParticleCircle
	</WikiPage>
	<Syntax>
		Object setParticleCircle Array
	</Syntax>
	<RawSyntax>
		particleSource setParticleCircle [radius, velocity]
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		itemsWithMagazines
	</Keyword>
	<Description>
		Returns combined array including all unit's items and all unit's magazines. Loaded magazines such as currentMagazine, primaryWeaponMagazine, secondaryWeaponMagazine, handgunMagazine as well as assignedItems are excluded.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/itemsWithMagazines
	</WikiPage>
	<Syntax>
		itemsWithMagazines Object
	</Syntax>
	<RawSyntax>
		itemsWithMagazines unit
	</RawSyntax>
	<Example>
		$Code$itemsWithMagazines player
	//is essentially the same as
	items player + magazines player [
	"FirstAidKit",//item
	"30Rnd_65x39_caseless_mag",//magazine
	"16Rnd_9x21_Mag",//magazine
	"Chemlight_green",//magazine
	"HandGrenade",//magazine
	"ToolKit",//item
	"MineDetector"//item
	]$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		goggles
	</Keyword>
	<Description>
		Returns name of currently used goggles (for NVGoggles use hmd ).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/goggles
	</WikiPage>
	<Syntax>
		goggles Object
	</Syntax>
	<RawSyntax>
		goggles unit
	</RawSyntax>
	<Example>
		$Code$_goggles = goggles assaultDiver; //G_Diving$/Code$
	</NextExample>
		$Code$_goggles = goggles reconTeamLeader; //G_Shades_Black$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		worldToModelVisual
	</Keyword>
	<Description>
		Converts position from world space to object model space in render time scope.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/worldToModelVisual
	</WikiPage>
	<Syntax>
		Object worldToModelVisual Array
	</Syntax>
	<RawSyntax>
		object worldToModelVisual worldPosition
	</RawSyntax>
	<Example>
		$Code$_relPos = myObject worldToModelVisual [0,0,0];$/Code$
	</NextExample>
		$Code$_relPos = player worldToModelVisual position car;$/Code$
	</NextExample>
		$Code$_relPos = car worldToModelVisual [12000,5000];$/Code$
	</NextExample>
		$Code$_relPos = unit worldToModelVisual position tank;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		ppEffectEnabled
	</Keyword>
	<Description>
		Checks whether given post process effect is enabled
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ppEffectEnabled
	</WikiPage>
	<Syntax>
		ppEffectEnabled Number
	</Syntax>
	<RawSyntax>
		ppEffectEnabled effect
	</RawSyntax>
	<Example>
		$Code$_enabled = ppEffectEnabled _hndl;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		useAISteeringComponent
	</Keyword>
	<Description>
		Enable the new AI driving, used to test the old and new AI driving.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/useAISteeringComponent
	</WikiPage>
	<Syntax>
		useAISteeringComponent Boolean
	</Syntax>
	<RawSyntax>
		useAISteeringComponent state
	</RawSyntax>
	<Example>
		$Code$useAISteeringComponent true$/Code$
	</Example>
	<Locality>
		undefined / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setCombatMode
	</Keyword>
	<Description>
		Set group combat mode (engagement rules).
	Mode may be one of:
	"BLUE" = Never fire
	"GREEN" = Hold fire - defend only
	"WHITE" = Hold fire, engage at will
	"YELLOW" = Fire at will
	"RED" = Fire at will, engage at will
	See Arma AI Engagement rules for more informations on combat modes.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setCombatMode
	</WikiPage>
	<Syntax>
		Object/Group setCombatMode String
	</Syntax>
	<RawSyntax>
		groupName setCombatMode mode
	</RawSyntax>
	<Example>
		$Code$_group1 setCombatMode "BLUE";$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		knowsAbout
	</Keyword>
	<Description>
		Checks if a group or a side knows about target. If who is a unit, unit's group is considered, if who is a vehicle, commander's group is considered.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/knowsAbout
	</WikiPage>
	<Syntax>
		Object/Group knowsAbout Object
	</NextSyntax>
		Side knowsAbout Object
	</Syntax>
	<RawSyntax>
		who knowsAbout target
	</NextRawSyntax>
		side knowsAbout target
	</RawSyntax>
	<Example>
		$Code$_kv = _soldierOne knowsAbout _jeepOne;$/Code$
	</NextExample>
		$Code$_kv = ( side player ) knowsAbout _target;$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(August 4, 2006)
	Notes from before the conversion:
	With Resistance (1.91) : No matter what class of unit the target is and no matter what the skill/class of the enemy AI, the magic 'knowsAbout' number is 0.105.
	With CWC (1.46) : No matter what class of unit the target is and no matter what the skill/class of the enemy AI, the magic 'knowsAbout' number is 0.7.
	What this means is, the AI will not fire on an enemy soldier until his 'knowsAbout' level of that enemy has reached the 'magic number' or higher.
	This suggests that the knowsabout level must reach the magic threshold before a unit knows if another unit is an enemy or a friendly unit.
	Triggers and knowsabout level: "Detected by xxx" triggers also follow the above rules. For a detected trigger to be set off, the knowsAbout level must reach the magic number.
	Also... As soon as An AI unit gets hit with a bullet his knowsAbout level for the unit that shot him will instantly jump to 1.5, even if the shooter is 1000m away. Vice versa is also true. If An AI soldier's knowsAbout level for an enemy is 0.7 and the soldier fires and hits the enemy, his knowsAbout level about the enemy will instantly jump to 1.5. Some editors have found, whilst using this command over the years, that the following characteristics have cropped up:
	AI enemies have a very limited amount of peripheral vision, it's not nearly as good as a human player's. A target must be in front of the unit for him to be noticed, so if you sprint right behind an enemy, this value doesn't increase.
	Depending on the units skill level, it can take a little time for the unit to notice a target. So if you run right past a unit, this value might not increase.
	Bushes between the unit and the target seem to have little effect on this value, and trees definitely have no affect. You may be in a forest, and can't see the unit, but he can see you.
	MP Note knowsAbout returns a viable result only if left-hand parameter unit is local.
	</NextNote>
		(January 15, 2007)
	In OFP v1.96, KnowsAbout return values range from 0 to 4.
	All units in a group have equal knowsAbout for any given target. All units in a group always return knowsAbout 4 about each other. This suggests groups share a single knowledge base.
	Without any contact with the target, the knowsAbout value decays at a linear rate so that it halves over 120 seconds. After this time is up knowsAbout drops instantly to 0.
	If the distance between the all of unit's group and the target exceeds the viewdistance setting, knowsAbout instantly drops to 0. This is not changed by fog or daylight.
	Note that in OFP unit see all the targets that his group members see. The data is processed between teammembers freely.
	</NextNote>
		the magic 'knowsAbout' number is 0.105. It's not that simple.Maybe true for infantry but not all vehicles. "Reveal" command sets knowsAbout to 1, but planes still won't fire at soldiers on the ground. There's only one known way to pass through this - designate target with another fake infantry unit near the target. As soon as this fake unit see the target knowsAbout lifts up to 2.5-4 and even single enemy soldiers are attacked rom the air (of course if plane has suitable munition :))
	</NextNote>
		(July 05, 2009)
	In ArmA (other not tested), KnowsAbout value will stay at its highest value during approximately 2-3 min and then reinitialized.
	</NextNote>
		(January 14, 2012)
	Notes are for OA 1.60 :
	The KnowsAbout value drops immediately back to zero, if the distance between both units is larger than the local viewDistance value.
	After 110 seconds without (visible?) contact, the KnowsAbout value drops to zero again. While it seemed to take longer the higher the KnowsAbout value is (at least for a value of 4 it took almost six minutes at one point), I was unable to reproduce/confirm that. It is 110 seconds no matter how high the KnowsAbout value it seems.
	</NextNote>
		(June 13, 2012)
	By Suma ( source ):
	All friendly units within a view distance to each unit [are revealed (to the player? or each friendly?)] on the mission start. The code is half broken, as it does not make the units known, it only sets the "accuracy" value for them. Note: This is not affecting enemy units at all.
	</NextNote>
		(March 27, 2013)
	Arma-II OA (1.62.101.480 @ACE), tests with infantry:
	It is still true, that the command returns values between 0 (lowest) and 4 (most). Freshly Spotted units will have at least 1.5, slowly decreasing when the target disappeared.
	The following Table shows my test results on a clear day at Takistan using the Vector. Please note that the returned values vary considerably depending on weather and time. Moonlight however seems to not have any considerable effect.
	12:00, sunlight, clear sky
	Distance
	knowsAbout
	1530
	1.5
	1370
	1.5
	1250
	1.5
	1135
	1.5
	1055
	1.52
	1022
	1.64
	990
	1.74
	833
	2.5
	720
	3.37
	600
	3.81
	505
	3.86
	400
	3.92
	380
	4
	365
	4
	21:00, bright half moon, clear sky
	Distance
	knowsAbout
	285
	1.5
	120
	1.5
	88
	1.89
	75
	2.3
	61
	3.9
	23:00, pitch black, clear sky, NVG on
	Distance
	knowsAbout
	600
	1.5
	487
	1.5
	390
	1.5
	289
	2.22
	278
	2.4
	</NextNote>
		(May 31, 2014)
	Can also use SIDE in place of UNIT. For example:
	$Code$EAST knowsAbout player ;$/Code$
	</Note>
	<ReturnValue>
		Number - Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		titleFadeOut
	</Keyword>
	<Description>
		Terminate the title effect and set duration of the fade out phase to the given time.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/titleFadeOut
	</WikiPage>
	<Syntax>
		titleFadeOut Number
	</Syntax>
	<RawSyntax>
		titleFadeOut duration
	</RawSyntax>
	<Example>
		$Code$titleText ["Hi", "plain"]; titleFadeOut 2$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		magazineTurretAmmo
	</Keyword>
	<Description>
		Returns ammo count of given type from given turret
	Broken when vehicle has multiple magazines of the same type
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/magazineTurretAmmo
	</WikiPage>
	<Syntax>
		Object magazineTurretAmmo Array
	</Syntax>
	<RawSyntax>
		vehicle magazineTurretAmmo [magazineClass, turretPath]
	</RawSyntax>
	<Example>
		$Code$vehicle player magazineTurretAmmo ["cls", [0]]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		actionKeysNames
	</Keyword>
	<Description>
		Returns a list of button names assigned to the given user action. You can find the action names in config class ControllerSchemes or user action names.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/actionKeysNames
	</WikiPage>
	<Syntax>
		actionKeysNames String
	</NextSyntax>
		actionKeysNames Array
	</Syntax>
	<RawSyntax>
		actionKeysNames userAction
	</NextRawSyntax>
		actionKeysNames [userAction, maxKeys]
	</NextRawSyntax>
		actionKeysNames [userAction, maxKeys, inputDevicePriority]
	</RawSyntax>
	<Example>
		$Code$_list = actionKeysNames "ReloadMagazine"; //"R"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(20:14, 20 January 2010 (CET))
	The return type is a stacked string. A string inside a string. To compare use first single and inside double quotes:
	if ((actionKeysNames "User1") == '"W"') then...
	</NextNote>
		(October 26, 2014)
	inputDevicePriority 'Controler' is not a spelling mistake in description.
	</Note>
	<ReturnValue>
		String - String
	</ReturnValue>

</NextListItem>

	<Keyword>
		admin
	</Keyword>
	<Description>
		This is dedicated server command, which queries the admin state of any client on the network by their client ( owner ) id. Possible results are:
	1 - client is admin that is voted in
	2 - client is admin that is logged in
	In all other cases it returns 0. To self check the admin state of a local client, use BIS_fnc_admin.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/admin
	</WikiPage>
	<Syntax>
		admin Number
	</Syntax>
	<RawSyntax>
		admin ownerID
	</RawSyntax>
	<Example>
		$Code$_isLoggedInAdmin = admin 3 == 2;$/Code$
	</NextExample>
		$Code$_adminState = admin owner unit1;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		This scripting command must be executed on the server to work properly in multiplayer
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		setObjectTexture
	</Keyword>
	<Description>
		Textures object selection with texture named in array.
	Array has the form [selectionNumber, "Texture"].
	The selection number is defined through the hiddenselection []={} array in the vehicle's config (starting with 0).
	NOTES :
	Not all objects could be textured this way. To find out, run getObjectTextures command on an object. Empty array [] usually indicates it cannot be textured.
	All textures must have resolution 2^x / 2^y (e.g. 16 / 16, 16 / 32, 64 / 256, 512 / 512, etc). The largest texture size commonly supported by graphics cards and RV engine is 4096x4096
	Supported formats:.pac,.paa,.jpg,.jpeg,.ogg,.ogv
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setObjectTexture
	</WikiPage>
	<Syntax>
		Object setObjectTexture Array
	</Syntax>
	<RawSyntax>
		object setObjectTexture [selectionNumber,texture]
	</RawSyntax>
	<Example>
		$Code$_objectname setObjectTexture [0, "\pboname\texture.paa"];
	_objectname setObjectTexture [1, "\pboname\texture2.paa"];$/Code$
	</NextExample>
		$Code$_obj setObjectTexture [0, "#(rgb,8,8,3)color(1,0,0,1)"];$/Code$
	</NextExample>
		$Code$_obj setObjectTexture [0, "#(argb,512,512,1)r2t(rendersurface,1.333)"];$/Code$
	</NextExample>
		$Code$// When applying custom texture in Editor on vehicles that have randomization enabled ( Arma 3 Assets ), disable randomization first:
	this setVariable ["BIS_enableRandomization", false ];
	this setObjectTexture [0,"#(rgb,8,8,3)color(1,0,0,1)"];$/Code$
	</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
		(Aug 4, 2006)
	In MP this command has only local effect. If you want to change a texture on all clients, you have to execute this command on each client (or setObjectTextureGlobal ). This command has also a bug: when a saved game is loaded the texture you have set will disappear and needs to be reset.
	</NextNote>
		(December 19, 2009)
	Instead of bitmaps, procedural textures can be used.
	The syntax for those is #(argb,8,8,3)color(R,G,B,A), where R,G,B stands for Red, Green, Blue, and A stands for Alpha, all values can be anything between 0 and 1 (including decimals). e.g.
	$Code$_obj setObjectTexture [0,'#(argb,8,8,3)color(0,1,0,1)']$/Code$
	would color myObj in flat green. See Procedural Textures for more details.
	</NextNote>
		(August 25, 2014)
	Also works with absolute path and.jpg files.
	$Code$_obj setObjectTexture [0, "C:\Folder\Folder\Texture.paa"];
	_obj setObjectTexture [0, "C:\Folder\Folder\Texture.jpg"];$/Code$
	Texture can also be blank:
	$Code$_obj setObjectTexture [2,""];$/Code$
	This will make the texture selection invisible on certain units without an error message. In some cases this is a desirable effect
	</NextNote>
		(March 18, 2015)
	It is also possible to apply texture to unit's backpack, as it also has hidden selection (unfortunately does not work for vests)
	$Code$(backpackContainer player) setObjectTexture [0,'#(argb,8,8,3)color(0,0,0,1)']$/Code$
	Also keep in mind that player's custom texture is being reset when you open BIS Arsenal (even without changing any gear)
	</NextNote>
		(May 13, 2015)
	You can also use the gameinternal skins: List of MH9 Skins $Code$_obj setObjectTexture [0, "\a3\air_f\heli_light_01\data\skins\heli_light_01_ext_digital_co.paa"];$/Code$
	</NextNote>
		(October 24, 2016)
	Sometimes it could be necessary to set default material on an object for the texture to take effect:
	$Code$_block = createVehicle ["Land_VR_Block_02_F", player getPos [20, getDir player ], [], 0, "CAN_COLLIDE"];
	_block setObjectMaterial [0, "\a3\data_f\default.rvmat"];
	_block setObjectTexture [0, "#(rgb,8,8,3)color(1,0,0,1)"];$/Code$
	Courtesy of Larrow
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlEnable
	</Keyword>
	<Description>
		Enable or disable a control of the currently active user dialog. Disabled controls cannot be clicked onto.
	Read Dialog Control for more information about user dialogs and controls.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlEnable
	</WikiPage>
	<Syntax>
		ctrlEnable Array
	</NextSyntax>
		Control ctrlEnable Boolean
	</Syntax>
	<RawSyntax>
		ctrlEnable [idc, enable]
	</NextRawSyntax>
		controlName ctrlEnable enable
	</RawSyntax>
	<Example>
		$Code$ctrlEnable [100, false]$/Code$
	</NextExample>
		$Code$_ctrl ctrlEnable false$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
		(July 20, 2017)
	Please do note that enabled controls can gain focus upon click. Therefore do not enable background controls or else they will cover any controls on top of them.
	As a general rule of thumb, enabled controls should only be already on the top of the GUI.
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		teamSwitchEnabled
	</Keyword>
	<Description>
		Check if Team Switch is currently enabled.
	Team Switch is enabled by default.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/teamSwitchEnabled
	</WikiPage>
	<Syntax>
		teamSwitchEnabled
	</Syntax>
	<RawSyntax>
		teamSwitchEnabled
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		setGroupIconParams
	</Keyword>
	<Description>
		Set group icons parameters. [color,string,float,bool]
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setGroupIconParams
	</WikiPage>
	<Syntax>
		Group setGroupIconParams Array
	</Syntax>
	<RawSyntax>
		group setGroupIconParams properties
	</RawSyntax>
	<Example>
		$Code$_grp setGroupIconParams [_color,_text,_scale,_visible];
	_grp setGroupIconParams [[0,0,0,0],"",1,false];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		tvSetPictureColorDisabled
	</Keyword>
	<Description>
		Sets the color of left picture of a tree item defined by path when item is disabled
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/tvSetPictureColorDisabled
	</WikiPage>
	<Syntax>
		Control tvSetPictureColorDisabled Array
	</Syntax>
	<RawSyntax>
		control tvSetPictureColorDisabled [path, color]
	</RawSyntax>
	<Example>
		$Code$_control tvSetPictureColorDisabled [[0], [1,0,1,1]]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		waypoints
	</Keyword>
	<Description>
		Returns an array of waypoints for the specified unit/group.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/waypoints
	</WikiPage>
	<Syntax>
		waypoints Group
	</Syntax>
	<RawSyntax>
		waypoints groupName
	</RawSyntax>
	<Example>
		$Code$waypoints player ;$/Code$
	</NextExample>
		$Code$_wPosArray = waypoints group10;
	// could return [[EAST 1-1-A,0],[EAST 1-1-A,1],[EAST 1-1-A,2]]$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		speed
	</Keyword>
	<Description>
		Object speed (in km/h). Returns relative speed of given object along Y axis. An equivalent to: 3.6 * ( velocityModelSpace _obj select 1)
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/speed
	</WikiPage>
	<Syntax>
		speed Object
	</Syntax>
	<RawSyntax>
		speed object
	</RawSyntax>
	<Example>
		$Code$if ( speed _truck1 = 100) then { hint "You're going too fast!"};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		turretOwner
	</Keyword>
	<Description>
		Returns id of the owner of the turret. Server only. Returns 0 on non-server and SP.
	Some info on turrets: A vehicle turret will change locality when player gunner gets in it, just like vehicle changes locality when player driver gets in it. Many commands for turrets work only where turret is local. When gunner leaves turret it is supposed to change locality to the locality of the vehicle. A vehicle can have one owner while turrets have different owners.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/turretOwner
	</WikiPage>
	<Syntax>
		Object turretOwner Array
	</Syntax>
	<RawSyntax>
		vehicle turretOwner turretPath
	</RawSyntax>
	<Example>
		$Code$_ownerId = vehicle player turretOwner [0];$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		This scripting command must be executed on the server to work properly in multiplayer
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		setPosASL
	</Keyword>
	<Description>
		Sets the object position above sea level. The pos array uses the PositionASL format.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setPosASL
	</WikiPage>
	<Syntax>
		Object setPosASL Array
	</Syntax>
	<RawSyntax>
		object setPosASL pos
	</RawSyntax>
	<Example>
		$Code$player setPosASL [ getPosASL player select 0, ( getPosASL player select 1) + 10, getPosASL player select 2];$/Code$
	</NextExample>
		$Code$this setPosASL [ position this select 0, position this select 1, 9]; //[ X, Y, Z]$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setText
	</Keyword>
	<Description>
		Sets the text associated with a location. This text will be displayed on the game map at the location's position.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setText
	</WikiPage>
	<Syntax>
		Location setText String
	</Syntax>
	<RawSyntax>
		location setText text
	</RawSyntax>
	<Example>
		$Code$myLocation setText "Rahmadi Village"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setVelocity
	</Keyword>
	<Description>
		Set velocity (speed vector) of a vehicle. Units are in metres per second.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setVelocity
	</WikiPage>
	<Syntax>
		Object setVelocity Array
	</Syntax>
	<RawSyntax>
		vehicleName setVelocity [x, y, z]
	</RawSyntax>
	<Example>
		$Code$_truck1 setVelocity [20, 0, 0];$/Code$
	</NextExample>
		$Code$// Advanced method used for relative acceleration:
	_vel = velocity _vehicle;
	_dir = direction _vehicle;
	_speed = 10; comment "Added speed";
	_vehicle setVelocity [
	(_vel select 0) + ( sin _dir * _speed),
	(_vel select 1) + ( cos _dir * _speed),
	(_vel select 2)
	];$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		(20 Jun, 2014)
	(ArmA3 1.22) setVelocity will be affected by setDir and setVectorDirAndUp. So use it after them.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setOwner
	</Keyword>
	<Description>
		From server machine, change the ownership of an object to a given client. Returns true if locality was changed.
	Since Arma 3 v1.40, this command should not be used to transfer ownership of units with AI ( agents are an exception to this rule).
	Using command in an unintended way will display an on-screen warning and log a message to.rpt file.
	To transfer ownership of all AI units in a group properly, use setGroupOwner instead.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setOwner
	</WikiPage>
	<Syntax>
		Object setOwner Number
	</Syntax>
	<RawSyntax>
		object setOwner clientID
	</RawSyntax>
	<Example>
		$Code$_someObject setOwner 12;$/Code$
	</NextExample>
		$Code$_someObject setOwner ( owner _playerObject);$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		This scripting command must be executed on the server to work properly in multiplayer
	</NextNote>
		(January 7, 2015)
	The ownership can only be given from server to client. For some reason the server cannot return ownership back with this command. This is fixed in Arma 3 1.40
	</NextNote>
		(August 22, 2017)
	NOTE : There are some interesting behaviour about the specific owner digits like 0 -2 and 2 :
	1. Any mission objects (generated from SQM) initially have 0 owner state, but it is not local to ANYONE (0) like it is expected to be, but actually only to a SERVER (2). You can't make any object owner to be 0 once it was changed.
	2. Trying to change ownership to any negative digit will always result in attempt to transfer ownership to SERVER (2). Once it is unit (non-agent) it will fail and revert* to initial ownership.
	3. *Changing ownership of a unit (non-agent) actually gives a result for a brief time after this action is performed. What actually happens next - ownership is getting reverted with a message to RPT of a server. This can be seen by reading results of (owner _object) in really fast cycle.
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		lnbDeleteRow
	</Keyword>
	<Description>
		Removes row with the given index from the given listbox or combobox.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lnbDeleteRow
	</WikiPage>
	<Syntax>
		Control lnbDeleteRow Number
	</Syntax>
	<RawSyntax>
		_ctrl lnbDeleteRow row
	</RawSyntax>
	<Example>
		$Code$_ctrl lnbDeleteRow 1;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(Sep 9 2014)
	(A3 1.28)As for invisible data processing, lnbAddArray, lnbAddColumn, lnbData, lnbGetColumnsPosition, lnbSetColumnsPos, lnbSetData, lnbSetText, lnbSetValue, lnbText and lnbValue store data types into exact position of the listNbox with different spaces. Accessing data with coordinate command at nearly the same syntax:
	$Code$
	//Set same value to one position of a Control
	_ctrl lnbSetData [ [0,0],"#1"];
	lnbSetColumnsPos [102, [0,1], 1];
	_ctrl lnbSetText [ [0,1], "#1"];
	_ctrl lnbSetValue [ [0,0],1];
	//Accessing the value disregard affecting one another.
	_ctrl lnbData [0,0]; //"#1"
	lnbGetColumnsPosition _ctrl //[1];
	_ctrl lnbText [0,0];//"#1"
	_ctrl lnbValue [0,0];//1
	$/Code$
	For a direct visible control over CT_LISTNBOX:
	$Code$
	0 = [_CT_LISTNBOX] spawn {
	private ["_CT_LISTNBOX","_color","_current","_pic"];
	disableSerialization ;
	_CT_LISTNBOX = _this select 0;
	{
	_CT_LISTNBOX lnbAddRow [ getText (_x "displayNameShort"), getText (_x "displayName")];
	_CT_LISTNBOX lnbSetPicture [ [_foreachIndex,0], getText (_x "texture")];
	} forEach (" isClass _x" configClasses ( configFile "CfgRanks"));
	_CT_LISTNBOX lnbSetCurSelRow 0;
	_current = lnbCurSelRow _CT_LISTNBOX;
	_color = _CT_LISTNBOX lnbColor [_current,0];
	_CT_LISTNBOX lnbSetColor [ [_current,1], [(_color select 0)/2,0,0,1] ];
	_CT_LISTNBOX lnbDeleteColumn 0;
	_CT_LISTNBOX lnbDeleteRow 1;
	sleep 1;
	lnbClear _CT_LISTNBOX;//Clear all items but control still remains just invisible.
	};
	$/Code$
	A combined use of both invisible and visible data processing commands alive the Control.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		enableAttack
	</Keyword>
	<Description>
		Set if leader can issue attack commands to the soldiers in his group.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/enableAttack
	</WikiPage>
	<Syntax>
		Object/Group enableAttack Boolean
	</Syntax>
	<RawSyntax>
		group enableAttack enable
	</RawSyntax>
	<Example>
		$Code$_group1 enableAttack true$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		soundVolume
	</Keyword>
	<Description>
		Check current sound volume (set by fadeSound ).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/soundVolume
	</WikiPage>
	<Syntax>
		soundVolume
	</Syntax>
	<RawSyntax>
		soundVolume
	</RawSyntax>
	<Example>
		$Code$_vol = soundVolume$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		showWaypoint
	</Keyword>
	<Description>
		Sets the condition determining when the waypoint is shown.
	Possible values are:
	"NEVER" - never show it
	"EASY" - show only in cadet mode
	"ALWAYS" - always show it
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/showWaypoint
	</WikiPage>
	<Syntax>
		Array showWaypoint String
	</Syntax>
	<RawSyntax>
		waypoint showWaypoint show
	</RawSyntax>
	<Example>
		$Code$[_grp, 2] showWaypoint "ALWAYS";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		getPersonUsedDLCs
	</Keyword>
	<Description>
		Returns a list of all DLCs objects the unit is currently using. For example if a unit is inside a vehicle from DLC, it will return the code of that DLC.
	This command is broken and doesnt work on dedicated server
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getPersonUsedDLCs
	</WikiPage>
	<Syntax>
		getPersonUsedDLCs Object
	</Syntax>
	<RawSyntax>
		getPersonUsedDLCs unit
	</RawSyntax>
	<Example>
		$Code$_objects = getPersonUsedDLCs player ;$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		apply
	</Keyword>
	<Description>
		Applies given code to each element of the array and returns resulting array. The value of the current array element, to which the code will be applied, is stored in variable _x.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/apply
	</WikiPage>
	<Syntax>
		Array apply Code
	</Syntax>
	<RawSyntax>
		array apply code
	</RawSyntax>
	<Example>
		$Code$_arr = [1,2,3,4,5,6,7,8,9,0] apply {[1,0] select (_x % 2 == 0)}; //[1,0,1,0,1,0,1,0,1,0]$/Code$
	</NextExample>
		$Code$_arr = [1,2,3,4,5,6,7,8,9,0] apply {_x ^ _x}; //[1,4,27,256,3125,46656,823543,16777216,387420480,1]$/Code$
	</NextExample>
		$Code$_arr1 = [];
	_arr1 resize 20;
	_arr2 = _arr1 apply {0}; //[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(February 18, 2016)
	(to anyone else wondering, I took a minute to get it): This is Array.map() is JavaScript
	</NextNote>
		(February 11, 2018)
	if performance really is an issue, apply seems to be (very) slightly faster than forEach (by more or less one percent, 0.7-1.5% in my tests to be precise).
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		addMagazineTurret
	</Keyword>
	<Description>
		Adds a magazine to the turret. Use turret path [-1] for driver's turret.
	Note: you may create invalid combinations by using this function, for example by adding 20 grenades. When doing so, application behaviour is undefined. Since Arma 3 v1.55.133817 it is possible to set custom ammo count in added magazine.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/addMagazineTurret
	</WikiPage>
	<Syntax>
		Object addMagazineTurret Array
	</Syntax>
	<RawSyntax>
		vehicle addMagazineTurret [magazineName, turretPath, ammoCount]
	</RawSyntax>
	<Example>
		$Code$_tank addMagazineTurret ["SmokeLauncherMag",[0,0]];$/Code$
	</NextExample>
		$Code$_tank addMagazineTurret ["20Rnd_120mmSABOT_M1A2",[0]];$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		addVest
	</Keyword>
	<Description>
		Create a new vest and try to link it into vest slot.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/addVest
	</WikiPage>
	<Syntax>
		Object addVest String
	</Syntax>
	<RawSyntax>
		unit addVest type
	</RawSyntax>
	<Example>
		$Code$player addVest "V_TacVest_blk_POLICE";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		createMine
	</Keyword>
	<Description>
		Creates a mine of the given type (type is the name of the subclass of CfgVehicles). If the markers array contains several marker names, the position of a random one is used, otherwise, the given position is used. The mine is placed inside a circle with this position as its center and placement as its radius.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/createMine
	</WikiPage>
	<Syntax>
		createMine Array
	</Syntax>
	<RawSyntax>
		createMine [type, position, markers, placement]
	</RawSyntax>
	<Example>
		$Code$_mine = createMine ["MineMine", position player, [], 0];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(June 5, 2017)
	Note that this command uses AGL (very similar to ASL) positions, so if you want to use the moored or seabed mine, you'll have to find the appropriate negative z value that is underwater and convert that to ASL.
	Also note that you can't adjust the positions of sea mines after they've been created. The command is either ignored or not propagated across the network to clients.
	</Note>
	<ReturnValue>
		Object
	</ReturnValue>

</NextListItem>

	<Keyword>
		showCuratorCompass
	</Keyword>
	<Description>
		Hides or shows compass in curator interface.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/showCuratorCompass
	</WikiPage>
	<Syntax>
		showCuratorCompass Boolean
	</Syntax>
	<RawSyntax>
		showCuratorCompass bool
	</RawSyntax>
	<Example>
		$Code$showCuratorCompass true;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		lbColorRight
	</Keyword>
	<Description>
		Returns the text color of the item (right) with the given index of the listbox or combobox with id idc of the topmost user dialog.
	The color is returned in format Color.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lbColorRight
	</WikiPage>
	<Syntax>
		lbColorRight Array
	</NextSyntax>
		Control lbColorRight Number
	</Syntax>
	<RawSyntax>
		lbColorRight [idc, index]
	</NextRawSyntax>
		control lbColorRight index
	</RawSyntax>
	<Example>
		$Code$_colour = lbColorRight [101, 0];$/Code$
	</NextExample>
		$Code$_color = _control lbColorRight 0;$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
		More information on the LB command family can be found here
	</Note>
	<ReturnValue>
		Array - Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		setFriend
	</Keyword>
	<Description>
		Sets how friendly side1 is with side2. For a value smaller than 0.6 it results in being enemy, otherwise it's friendly.
	Intended to be used on mission start. Changing value during mission can cause unexpected errors in AI behavior. See also Side relations.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setFriend
	</WikiPage>
	<Syntax>
		Side setFriend Array
	</Syntax>
	<RawSyntax>
		side1 setFriend [side2, value]
	</RawSyntax>
	<Example>
		$Code$west setFriend [ resistance, 0];$/Code$
	</Example>
	<Locality>
		undefined / global
	</Locality>
	<Note>
		This scripting command must be executed on the server to work properly in multiplayer
	</NextNote>
		(18:49, 28 December 2006)
	This command might be buggy in ArmA (or the description regarding enemy status is wrong). See this discussion.
	</NextNote>
		(11:25, 30 November 2007)
	Setting the civilian side to be the enemy of any other side will result in the other side attacking inanimate mission editor placed objects such as empty vehicles and static objects, since these objects belong to the civilian side.
	</NextNote>
		(15:57, 27 February 2008)
	Be aware that this command only sets the friendliness of one side. If you want to have both sides attacking each other, you have to set both: $Code$Resistance setFriend [East, 0];
	East setFriend [Resistance, 0];$/Code$
	</NextNote>
		(October 11, 2014)
	(Arma 3 1.30 stable) It is possible to make a side hostile towards itself.
	$Code$ west setFriend [ west, 0]; $/Code$
	It is only possible to do so with west / blufor, east / opfor, independent / resistance and civilian. This essentially creates a free for all deathmatch. Affects AI behaviour too.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		comment
	</Keyword>
	<Description>
		Define a comment.
	Mainly used in SQF Syntax, as you're able to introduce comment lines with semicolons in a SQS script.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/comment
	</WikiPage>
	<Syntax>
		comment String
	</Syntax>
	<RawSyntax>
		comment commentMsg
	</RawSyntax>
	<Example>
		$Code$// script.sqs
	comment "This is a commented line"$/Code$
	</NextExample>
		$Code$// function.sqf
	comment "This is a commented line";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(September 12, 2009)
	Like ArmA, you can't use brackets to make a multi-lines comment. But, in a sqf file, you can make a comment as follow :
	$Code$ comment "
	first line
	seconde line";$/Code$
	</NextNote>
		(November 4, 2016)
	If a file is loaded with preprocessFile, execVM or spawn (but not loadFile), you may also define C-like comments using //... and /*...*/.
	</NextNote>
		(November 4, 2016)
	comment can also be used to create comments inside trigger activation fields where // or */...*/ does not work.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		step
	</Keyword>
	<Description>
		Optionally can set step. If you want to count down, step must be specified, and set negative. Default value is 1.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/step
	</WikiPage>
	<Syntax>
		For_Type step Number
	</Syntax>
	<RawSyntax>
		for step stepSize
	</RawSyntax>
	<Example>
		$Code$for "_x" from 20 to 10 step -2 do {..code..}$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		For_Type
	</ReturnValue>

</NextListItem>

	<Keyword>
		setPosATL
	</Keyword>
	<Description>
		Sets the position of an object relative to the terrain.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setPosATL
	</WikiPage>
	<Syntax>
		Object setPosATL Array
	</Syntax>
	<RawSyntax>
		object setPosATL pos
	</RawSyntax>
	<Example>
		$Code$player setPosATL [ getPosATL player select 0, ( getPosATL player select 1) - 10, getPosATL player select 2];$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
		(Feb 26, 2012)
	Please Note : this command demands PositionATL format ; one does not simply give 2D position, as this function won't do anything.
	</NextNote>
		(November 11, 2014)
	If you plan on creating bases through script, setPosATL and getPosATL will be your friends. Other commands like getPos or getPosASL will return the position relative to any objects that are underneath. I wrote a base building helper script and through multiple tests, I have found that getPosATL is the absolute best way to get position for objects that are over land.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		preloadTitleObj
	</Keyword>
	<Description>
		Object title - Preload data the object can be defined in the Description.ext file.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/preloadTitleObj
	</WikiPage>
	<Syntax>
		preloadTitleObj Array
	</Syntax>
	<RawSyntax>
		preloadTitleObj [name, type]
	</NextRawSyntax>
		preloadTitleObj [name, type, speed, showInMap]
	</RawSyntax>
	<Example>
		$Code$_ok=preloadTitleObj ["BISLogo","plain"]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctSetRowTemplate
	</Keyword>
	<Description>
		Takes config path to the new row template. Clears the whole RscControlsTable and sets the new row template (Deleting all rows and headers is easier to implement than replacing the rows and filling them with new data. IDCs could overflow etc.).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctSetRowTemplate
	</WikiPage>
	<Syntax>
		Control ctSetRowTemplate Config
	</Syntax>
	<RawSyntax>
		Control ctSetRowTemplate Config
	</RawSyntax>
	<Example>
		$Code$_control ctSetRowTemplate _configPath;$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setFormDir
	</Keyword>
	<Description>
		Set group formation heading. Accepted heading range is 0 to 360. Formation is facing this direction unless enemy is seen. When group is moving, this value is overriden by movement direction.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setFormDir
	</WikiPage>
	<Syntax>
		Object/Group setFormDir Number
	</Syntax>
	<RawSyntax>
		group setFormDir heading
	</RawSyntax>
	<Example>
		$Code$_group1 setFormDir 180;$/Code$
	</NextExample>
		$Code$_unit1 setFormDir random 360;$/Code$
	</NextExample>
		$Code$//center the main turret
	( group BIS_Crew1) setFormDir ( getDir BIS_Armor);$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		(November 22, 2014)
	When applied to AI, setFormDir will set unit formation direction, which in turn will force unit to change direction to match formation direction, however unit will stop turning as soon as unit direction is +/- 30 degrees of the formation direction. To precisely match formation direction, additional setDir is required:
	$Code$_unit setFormDir 45;
	_unit setDir 45;
	hint str direction _unit; //45$/Code$
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		mod
	</Keyword>
	<Description>
		Remainder of a divided by b.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/mod
	</WikiPage>
	<Syntax>
		Number mod Number
	</Syntax>
	<RawSyntax>
		a mod b
	</RawSyntax>
	<Example>
		$Code$_rem = 3 mod 2;
	// Result is 1$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(01:34, 16 April 2006)
	Remainder is calculated in real domain.
	mod is identical to a % b
	You can use mod to round a decimal number down to the nearest whole number. For example: If you wanted to use the command random to generate a whole number between 0 and 5, you could put this in a script:
	$Code$_rand = random 6;
	_num = _rand - (_rand mod 1);
	$/Code$
	In A1, the new commands round, floor or ceil would be the easier way to round.
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		setAnimSpeedCoef
	</Keyword>
	<Description>
		Sets a coefficient for animation speed
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setAnimSpeedCoef
	</WikiPage>
	<Syntax>
		Object setAnimSpeedCoef Number
	</Syntax>
	<RawSyntax>
		unit setAnimSpeedCoef coef
	</RawSyntax>
	<Example>
		$Code$player setAnimSpeedCoef 0.75;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(November 14, 2016)
	Increasing animation speed of a unit also increases its run/walk speed (thanks to Killzone Kid )
	</NextNote>
		(November 27, 2016)
	Setting negative values with this makes animations act in reverse or make you stuck sliding in unknown directions.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		profileNamespace
	</Keyword>
	<Description>
		Returns the global namespace attached to the active user profile. Use setVariable and getVariable to save and load data to and from this Namespace. A variable can be deleted by setting its value to nil. By default the variables set in this namespace will exist while the game is running. In order to make variables save permanently, use saveProfileNamespace before the game is over.
	The variables are stored next to the user profile in a file named myUsername.vars.GAMENAME (e.g. in the My Documents\Take On Helicopters folder).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/profileNamespace
	</WikiPage>
	<Syntax>
		profileNamespace
	</Syntax>
	<RawSyntax>
		profileNamespace
	</RawSyntax>
	<Example>
		$Code$_namespace = profileNamespace ;$/Code$
	</NextExample>
		$Code$profileNamespace setVariable ["var_kills",10000];
	_playerKills = profileNamespace getVariable "var_kills";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		The variables are loaded when the user profile is loaded or changed.
	</Note>
	<ReturnValue>
		Namespace
	</ReturnValue>

</NextListItem>

	<Keyword>
		tvSetPictureColorSelected
	</Keyword>
	<Description>
		Sets the color of the left picture of a tree item defined by path when item is selected
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/tvSetPictureColorSelected
	</WikiPage>
	<Syntax>
		Control tvSetPictureColorSelected Array
	</Syntax>
	<RawSyntax>
		control tvSetPictureColorSelected [path, color]
	</RawSyntax>
	<Example>
		$Code$_control tvSetPictureColorSelected [[0], [1,0,1,1]]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		switchCamera
	</Keyword>
	<Description>
		Switch camera to given vehicle / camera. Mode is one of:
	"INTERNAL" : 1st person
	"GUNNER" : optics / sights
	"EXTERNAL" : 3rd person
	"GROUP" : group
	"CARGO" : same as "INTERNAL"
	If you switch to a unit in a vehicle, this command uses the correct turret. Control over the unit is not given to the player. Use selectPlayer or a combination of switchCamera and remoteControl to achieve this.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/switchCamera
	</WikiPage>
	<Syntax>
		Object switchCamera String
	</NextSyntax>
		switchCamera Object
	</Syntax>
	<RawSyntax>
		target switchCamera mode
	</NextRawSyntax>
		switchCamera target
	</RawSyntax>
	<Example>
		$Code$player switchCamera "Gunner";$/Code$
	</NextExample>
		$Code$vehicle player switchCamera "External";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(May 16, 2015)
	Force top down view: $Code$cam = "Land_HandyCam_F" createVehicleLocal [0,0,0];
	cam hideObject true ;
	cam attachTo [ player, [0,0,10]];
	cam setVectorUp [0,0.99,0.01];
	cam switchCamera "Internal";
	findDisplay 46 displayAddEventHandler ["MouseButtonDown", {
	if (_this select 1 == 0) then {
	player forceWeaponFire [ currentMuzzle player, currentWeaponMode player ];
	};
	false
	}];
	findDisplay 46 displayAddEventHandler ["KeyDown", {
	if (_this select 1 in actionKeys "ReloadMagazine") then {
	reload player ;
	};
	false
	}];$/Code$
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		drawLine3D
	</Keyword>
	<Description>
		Draws a line of a given color between two 3D positions. Command has to be executed each frame. Use onEachFrame or addMissionEventHandler "Draw3D".
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/drawLine3D
	</WikiPage>
	<Syntax>
		drawLine3D Array
	</Syntax>
	<RawSyntax>
		drawLine3D [start, end, color]
	</RawSyntax>
	<Example>
		$Code$onEachFrame {
	drawLine3D [ getPos player, getPos cursorTarget, [1,1,1,1]];
	};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(August 31, 2013)
	As command syntax indicates, this command expects starting and ending position in format PositionAGL meaning that over the land it expects PositionATL and over the sea PositionASLW. Use additional ASLToAGL and AGLToASL commands wherever is necessary.
	$Code$ addMissionEventHandler ["Draw3D", {
	drawLine3D [ ASLToAGL eyePos soldier1, ASLToAGL eyePos soldier2, [1,0,0,1]];
	}];$/Code$
	</NextNote>
		(February 18, 2015)
	Visible through fog and past draw distance.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlText
	</Keyword>
	<Description>
		Returns the text of a control of the currently active user dialog. This command can be used on static texts, buttons, edit lines and active texts as well as for images, where it returns the image path.
	Read Dialog Control for more information about user dialogs and controls.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlText
	</WikiPage>
	<Syntax>
		ctrlText Number
	</NextSyntax>
		ctrlText Control
	</Syntax>
	<RawSyntax>
		ctrlText idc
	</NextRawSyntax>
		ctrlText controlName
	</RawSyntax>
	<Example>
		$Code$_text = ctrlText 100$/Code$
	</NextExample>
		$Code$_text = ctrlText _control$/Code$
	</Example>
	<Locality>
		local / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String - String
	</ReturnValue>

</NextListItem>

	<Keyword>
		nearestObjects
	</Keyword>
	<Description>
		Returns a list of nearest objects of the given types to the given position or object, within the specified distance. If more than one object is found they will be ordered by proximity, the closest one will be first in the array. Alternatively, you use nearObjects command, which doesn't sort results.
	position can use the format:
	[[x,y,z], ["ClassName",...], radius]
	or
	[object, ["ClassName",...], radius]
	To use it without any ClassName filter:
	[object or position, [], radius].
	A list of ClassName types (Tanks eg) can be found in CfgVehicles
	Since Arma 3 v1.65.138818 it is possible to switch search and sorting mode between 2D and 3D
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/nearestObjects
	</WikiPage>
	<Syntax>
		nearestObjects Array
	</Syntax>
	<RawSyntax>
		nearestObjects [position, types, radius, 2Dmode]
	</RawSyntax>
	<Example>
		$Code$nearestObjects [ player, ["Car","Tank"], 200];$/Code$
	</NextExample>
		$Code$nearestObjects [ player, ["house"], 200];$/Code$
	</NextExample>
		$Code$nearestObjects [[2716,2949,0], ["Car","Truck"], 100];$/Code$
	</NextExample>
		$Code$// Return every object in 50 metres radius around player:
	nearestObjects [ player, [], 50]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(unknown)
	To get a list with alive targets for various situations use this construct:
	$Code$_nearestTargets = nearestObjects [_submunScanPos, ["VBS2_TANK","TANK"], _scanArea];
	_validNearestTargets = [];
	{ if ( alive _x) then {_validNearestTargets set [( count _validNearestTargets),_x];};} forEach _nearestTargets;
	$/Code$
	results in _validNearestTargets being filled with targets == alive.. (you could use other conditions there, of course!)
	-- Vigilante
	</NextNote>
		(10. Aug. 2010)
	Passing an empty array to define the types will also return objects with no class at all (such as trees, bushes, stones,...).
	Example:
	$Code$_objects = nearestObjects [_position, [], _radius];$/Code$
	Passing the array ["All"] is not the same and will only return objects that have some sort of class.
	</NextNote>
		(11.09.2013)
	If you want to detect nearby grenades for the position of a unit, for example, using 'nearestObjects' won't work. You have to use
	'nearObjects' instead.
	$Code$ count ( nearestObjects [_unit, ["GrenadeHand"], 30]) // WON'T WORK$/Code$
	Won't ever return anything but 0.
	$Code$ count (_unit nearObjects ["GrenadeHand", 30]) // WORKS!$/Code$
	Will work.
	</NextNote>
		(March 22, 2014)
	The distance from which an object is determined to be inside the radius is calculated from its model center (object modelToWorld [0,0,0]), and not the position returned by getPos/ATL/ASL. If an object is used as the origin from which to scan, distance is calculated from its model center as well.
	</NextNote>
		(October 26, 2014)
	Return all trees in 100m radius around player:
	$Code$trees = [];
	{
	if ( str _x find ": t_" -1) then {
	trees pushBack _x;
	};
	} forEach nearestObjects [ player, [], 100];$/Code$
	</NextNote>
		(August 27, 2015)
	If you use "Man" as the class to look for, it will only find dismounted men. IE, men in vehicles will NOT be found.
	</NextNote>
		(January 8, 2016)
	The first call to this command can take significantly longer then consecutive calls. But even after the objects in given radius were cached, the sorting this command performs could be quite expensive. For example to sort ~7000 object it might take up to 100ms. For performance reasons you can use nearObjects instead, which is basically the same command but without added sorting.
	</NextNote>
		(March 2, 2016)
	In Arma 3, nearestObjects is partially broken and is unable to return nearby placed explosive charges or mines when searching by classnames. Use nearObjects, nearestObject or allMines instead.
	Example of non-functional code:
	$Code$//always returns nothing, even if there are objects that should be returned
	nearestObjects [position player, ["APERSMine_Range_Ammo", "SatchelCharge_Remote_Ammo"], 10]$/Code$
	</NextNote>
		(October 31, 2016)
	Since Arma 3 v1.65.138818 the default sorting is done according to 3D distance not distance2D as before. This is an attempt to correct some very old bug in implementation.
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		removePrimaryWeaponItem
	</Keyword>
	<Description>
		Removes given weapon item from the primary weapon cargo space.
	As of Arma 3 DEV 1.37, this command also supports weapon magazines.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/removePrimaryWeaponItem
	</WikiPage>
	<Syntax>
		Object removePrimaryWeaponItem String
	</Syntax>
	<RawSyntax>
		unit removePrimaryWeaponItem item
	</RawSyntax>
	<Example>
		$Code$player removePrimaryWeaponItem "acc_flashlight";$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setHitIndex
	</Keyword>
	<Description>
		Set the current level of damage for a specific Hit Point (specified by its hit part index). All hit points can be obtained with getAllHitPointsDamage command.
	0: no damage
	1: full damage
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setHitIndex
	</WikiPage>
	<Syntax>
		Object setHitIndex Array
	</Syntax>
	<RawSyntax>
		vehicle setHitIndex [hitPartIndex, damage, useEffects]
	</RawSyntax>
	<Example>
		$Code$vehicle player setHitIndex [1, 1];$/Code$
	</NextExample>
		$Code$player setHitIndex [7, 0.5];$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		currentNamespace
	</Keyword>
	<Description>
		Returns current global namespace the script runs in.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/currentNamespace
	</WikiPage>
	<Syntax>
		currentNamespace
	</Syntax>
	<RawSyntax>
		currentNamespace
	</RawSyntax>
	<Example>
		$Code$if ( currentNamespace isEqualTo uiNamespace ) then { hint "This is uiNamespace"};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Namespace
	</ReturnValue>

</NextListItem>

	<Keyword>
		setSpeaker
	</Keyword>
	<Description>
		Sets the speaker of a person. In order to setSpeaker dynamically in MP, the command needs to run on every computer with exactly the same params otherwise the speaking unit could appear silent on other PCs. Run this on server:
	[bob, "Male02GRE"] remoteExecCall ["setSpeaker", 0];
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setSpeaker
	</WikiPage>
	<Syntax>
		Object setSpeaker String
	</Syntax>
	<RawSyntax>
		person setSpeaker speaker
	</RawSyntax>
	<Example>
		$Code$unit1 setSpeaker "Male02GRE";$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
		(September 19, 2013)
	speaker can be any of the following:
	Male01ENG
	Male01ENGB
	Male01GRE
	Male01PER
	Male02ENG
	Male02ENGB
	Male02GRE
	Male02PER
	Male03ENG
	Male03ENGB
	Male03GRE
	Male03PER
	Male04ENG
	Male04ENGB
	Male04GRE
	Male05ENG
	Male06ENG
	Male07ENG
	Male08ENG
	Male09ENG
	</NextNote>
		(January 12, 2014)
	speakers available in Arma 3 (v1.08) :
	Gender
	Profile setting
	US English (B) for EN-GB available
	Greek
	Persian
	Male
	Male01_F
	Male01ENG(B)
	Male01GRE
	Male01PER
	Male02_F
	Male02ENG(B)
	Male02GRE
	Male02PER
	Male03_F
	Male03ENG(B)
	Male03GRE
	Male03PER
	Male04_F
	Male04ENG(B)
	Male04GRE
	Male01PER
	Male05_F
	Male05ENG
	Male05GRE
	Male02PER
	Male06_F
	Male06ENG
	Male02GRE
	Male03PER
	Male07_F
	Male07ENG
	Male03GRE
	Male01PER
	Male08_F
	Male08ENG
	Male04GRE
	Male02PER
	Male09_F
	Male09ENG
	Male01GRE
	Male03PER
	Female
	-
	-
	-
	-
	</NextNote>
		(November 10, 2014)
	In order to stop a unit from talking you can use:
	$Code$_unit setSpeaker "NoVoice"$/Code$
	This will have no negative effect on the ability to command the unit.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		deleteEditorObject
	</Keyword>
	<Description>
		Delete the editor object. Requires all editor object links to be removed prior.
	i
	Some Old Editor Command
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/deleteEditorObject
	</WikiPage>
	<Syntax>
		Control deleteEditorObject String
	</Syntax>
	<RawSyntax>
		map deleteEditorObject object
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Any_Value
	</ReturnValue>

</NextListItem>

	<Keyword>
		menuURL
	</Keyword>
	<Description>
		Returns current URL set in entry on given path.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/menuURL
	</WikiPage>
	<Syntax>
		menuURL Array
	</Syntax>
	<RawSyntax>
		menuURL [idc, path]
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		taskNull
	</Keyword>
	<Description>
		A non-existing Task. To compare non-existent tasks use isNull or isEqualTo :
	taskNull == taskNull ; // false
	isNull taskNull ; // true
	taskNull isEqualTo taskNull ; // true
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/taskNull
	</WikiPage>
	<Syntax>
		taskNull
	</Syntax>
	<RawSyntax>
		taskNull
	</RawSyntax>
	<Example>
		$Code$! isNull taskNull ; // false$/Code$
	</NextExample>
		$Code$str taskNull ; // No task$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Task
	</ReturnValue>

</NextListItem>

	<Keyword>
		setVehicleReportRemoteTargets
	</Keyword>
	<Description>
		Sets that the vehicle will share targets that were acquired by its own sensors via datalink to the Side center.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setVehicleReportRemoteTargets
	</WikiPage>
	<Syntax>
		Object setVehicleReportRemoteTargets Boolean
	</Syntax>
	<RawSyntax>
		vehicle setVehicleReportRemoteTargets bool
	</RawSyntax>
	<Example>
		$Code$( vehicle player ) setVehicleReportRemoteTargets true;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setWindForce
	</Keyword>
	<Description>
		Set max. wind overall wind changes in time. A time of zero means there will be an immediate change. A wind level of zero is minimal changes and a wind level of one means that wind can change rapidly.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setWindForce
	</WikiPage>
	<Syntax>
		Number setWindForce Number
	</Syntax>
	<RawSyntax>
		time setWindForce wind
	</RawSyntax>
	<Example>
		$Code$1800 setWindForce 0.5$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setFog
	</Keyword>
	<Description>
		Changes the fog smoothly over the the given TransitionTime (in seconds). A time of zero means there will be an immediate change. A fog intensity of zero is minimum fog and a fog level of one is maximum fog.
	NOTE : Since Arma 3 this command is MP synchronised, if executed on server, the changes will propagate globally. If executed on client effect is temporary as it will soon change to the server setting.
	A little information about how Alt Syntax works. The fogValue is normal fog value that could be set independently with original setFog command. fogBase is the ASL altitude at which the fog will start. 0 is the sea level. fogDecay is how defined the fog start is. The more defined, the denser is the fog. 1 (or -1) are the max values. If it is positive the fog will be generated below fogBase line, if negative, above it. If fogDecay is small, the fog will transition more smoothly from no fog to full fog, and because of that it will cross fogBase line by quite a lot, depending on how small is fogDecay value. Current values of fogDecay and fogBase can be retrieved with fogParams
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setFog
	</WikiPage>
	<Syntax>
		Number setFog Number
	</NextSyntax>
		Number setFog Array
	</Syntax>
	<RawSyntax>
		time setFog fog
	</NextRawSyntax>
		time setFog [fogValue, fogDecay, fogBase]
	</RawSyntax>
	<Example>
		$Code$15 setFog 0.5;$/Code$
	</NextExample>
		$Code$// Force no fog:
	0 setFog 0;
	forceWeatherChange ;
	999999 setFog 0;$/Code$
	</NextExample>
		$Code$0 setFog [1, 0.01, 0];$/Code$
	</NextExample>
		$Code$// Mountain fog, starts from 70m ASL and thickens more the higher you climb:
	0 setFog [1, -1, 70];$/Code$
	</NextExample>
		$Code$// Valley fog, starts from 60m ASL and thickens more the lower you descend:
	0 setFog [1, 1, 60];$/Code$
	</NextExample>
		$Code$// Fooooog on the waaaater:
	0 setFog [1, 1, 0];$/Code$
	</Example>
	<Locality>
		undefined / global
	</Locality>
	<Note>
		This scripting command must be executed on the server to work properly in multiplayer
	</NextNote>
		Only one script command induced weather change (either setOvercast or setFog) can be happening at a time. Starting a new weather change will immediately halt the current weather change. SetRain changes are independent and can occur simultaneously to a weather change.
	</NextNote>
		(December 15, 2015)
	setTimeMultiplier DOES affect transition time.
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setAirplaneThrottle
	</Keyword>
	<Description>
		Sets a wanted throttle position, works only on player's vehicle.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setAirplaneThrottle
	</WikiPage>
	<Syntax>
		Object setAirplaneThrottle Number
	</Syntax>
	<RawSyntax>
		airplane setAirplaneThrottle value
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		addMagazinePool
	</Keyword>
	<Description>
		Add magazines to the magazine pool, of which the player may choose in the following mission. Available in campaigns only.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/addMagazinePool
	</WikiPage>
	<Syntax>
		addMagazinePool Array
	</Syntax>
	<RawSyntax>
		addMagazinePool [magazineName, count]
	</RawSyntax>
	<Example>
		$Code$addMagazinePool ["M16", 20];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		waypointBehaviour
	</Keyword>
	<Description>
		Gets the waypoint behavior.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/waypointBehaviour
	</WikiPage>
	<Syntax>
		waypointBehaviour Array
	</Syntax>
	<RawSyntax>
		waypointBehaviour waypoint
	</RawSyntax>
	<Example>
		$Code$waypointBehaviour [groupOne,1]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		saveVar
	</Keyword>
	<Description>
		Save variable value into the campaign space. This variable is available to all following missions in the campaign.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/saveVar
	</WikiPage>
	<Syntax>
		saveVar String
	</Syntax>
	<RawSyntax>
		saveVar varname
	</RawSyntax>
	<Example>
		$Code$saveVar "varOne"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(January 28, 2009)
	If you try to saveVar a vehicle saved in your variable (SavedVars = [Car1]; saveVar "SavedVars"), then Car1 will not be properly "saved", refering to ObjNull if you try to use it in subsequent missions, even if a vehicle with the same vehicle varname exists. To get around this, save the vehicle's varname as a string (SavedVars = [str(Car1)]) and then when you need it just use call compile to "unstring" the varname (_car = call compile (SavedVars select 0);).
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		removeDrawLinks
	</Keyword>
	<Description>
		Remove all drawn links for the given editor object for the given editor,object type. Pass an empty string as param type to remove all draw,links for an object.
	i
	Some Old Editor Command
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/removeDrawLinks
	</WikiPage>
	<Syntax>
		Control removeDrawLinks Array
	</Syntax>
	<RawSyntax>
		map removeDrawLinks [from,param type]
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		benchmark
	</Keyword>
	<Description>
		Returns the value of "3D Performance" in OFP Preferences (flashpoint.cfg). This can be used to estimate the computer performance to adapt CPU and GPU demanding settings like view distance dynamically in missions.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/benchmark
	</WikiPage>
	<Syntax>
		benchmark
	</Syntax>
	<RawSyntax>
		benchmark
	</RawSyntax>
	<Example>
		$Code$? (benchmark 2000) : setViewDistance 2000$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(14 March 2014)
	The command is obsolete, it was used in OFP to measure PC performance. In A3 it returns 2000.
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		resistance
	</Keyword>
	<Description>
		Resistance side.
	When used in a format statement ( hint format ["%1",resistance] ), the string returned is "GUER".
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/resistance
	</WikiPage>
	<Syntax>
		resistance
	</Syntax>
	<RawSyntax>
		resistance
	</RawSyntax>
	<Example>
		$Code$// SQS:
	?((side _unit) == resistance ) : hint "This is a resistance unit!"$/Code$
	</NextExample>
		$Code$// SQF:
	if (( side _unit) == resistance ) then {
	hint "This is a resistance unit!";
	};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Side
	</ReturnValue>

</NextListItem>

	<Keyword>
		clearOverlay
	</Keyword>
	<Description>
		Clear the current overlay.
	i
	Some Old Editor Command
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/clearOverlay
	</WikiPage>
	<Syntax>
		clearOverlay Control
	</Syntax>
	<RawSyntax>
		clearOverlay map
	</RawSyntax>
	<Example>
		$Code$clearOverlay _map,$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		playMoveNow
	</Keyword>
	<Description>
		When used on a person,a smooth transition to the given move will be initiated, but all previous playMove are discarded.
	List of moves in ArmA 2 List of moves in Armed Assault List of moves in Operation Flashpoint: Resistance
	The difference between playMove and playMoveNow is that playMove adds another move to the move queue, while playMoveNow replaces the whole move queue with new move:
	$Code$ player switchMove "amovpercmstpsraswrfldnon";
	[] spawn
	{
	sleep 0.5;
	player playMove "amovppnemstpsraswrfldnon"; // player goes prone
	player playMove "amovpknlmstpsraswrfldnon"; // player gets up on one knee
	};$/Code$
	Compared to:
	$Code$ player switchMove "amovpercmstpsraswrfldnon";
	[] spawn
	{
	sleep 0.5;
	player playMove "amovppnemstpsraswrfldnon"; // player never goes prone
	player playMoveNow "amovpknlmstpsraswrfldnon"; // player goes down on one knee straight away
	};$/Code$
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/playMoveNow
	</WikiPage>
	<Syntax>
		Object playMoveNow String
	</Syntax>
	<RawSyntax>
		soldier playMoveNow moveName
	</RawSyntax>
	<Example>
		$Code$player playMoveNow "AmovPercMevaSlowWrflDf"$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		isBurning
	</Keyword>
	<Description>
		Returns whether the unit is burning.
	This returns true only if unit is damaged by nearby fire, it does not check whether a fireplace is burning, use inflamed command for that.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isBurning
	</WikiPage>
	<Syntax>
		isBurning Object
	</Syntax>
	<RawSyntax>
		isBurning unit
	</RawSyntax>
	<Example>
		$Code$if ( isBurning player ) then { player groupChat "I'm burning!!"; }$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		playAction
	</Keyword>
	<Description>
		When used on a person, a smooth transition to the given action will be initiated.
	For Arma 3 actions see: playAction/actions.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/playAction
	</WikiPage>
	<Syntax>
		Object playAction String
	</Syntax>
	<RawSyntax>
		soldier playAction action
	</RawSyntax>
	<Example>
		$Code$soldierOne playAction "SitDown"$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		terminate
	</Keyword>
	<Description>
		Terminate (abort) spawned or execVM 'd script. Note : The given script will not terminate immediately upon terminate command execution, it will do so the next time the script is processed by the scheduler.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/terminate
	</WikiPage>
	<Syntax>
		terminate Script_Handle
	</Syntax>
	<RawSyntax>
		terminate scriptHandle
	</RawSyntax>
	<Example>
		$Code$_script = [] execVM "script.sqf";
	sleep 5;
	terminate _script;
	hint "'script.sqf' has been terminated after 5 seconds";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		currentMuzzle
	</Keyword>
	<Description>
		Returns current muzzle of unit's weapon.
	This command will return 0 Number if given object is a unit that is in a vehicle.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/currentMuzzle
	</WikiPage>
	<Syntax>
		currentMuzzle Object
	</Syntax>
	<RawSyntax>
		currentMuzzle gunner
	</RawSyntax>
	<Example>
		$Code$_muzzle = currentMuzzle player ;$/Code$
	</NextExample>
		$Code$_muzzle = currentMuzzle ( gunner ( vehicle player ));$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		getShadowDistance
	</Keyword>
	<Description>
		Gets the shadows rendering distance.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getShadowDistance
	</WikiPage>
	<Syntax>
		getShadowDistance
	</Syntax>
	<RawSyntax>
		getShadowDistance
	</RawSyntax>
	<Example>
		$Code$_value = getShadowDistance;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		clearItemCargoGlobal
	</Keyword>
	<Description>
		Removes all items from ammo box (or any general weapon holder container).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/clearItemCargoGlobal
	</WikiPage>
	<Syntax>
		clearItemCargoGlobal Object
	</Syntax>
	<RawSyntax>
		clearItemCargoGlobal box
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		modelToWorldVisual
	</Keyword>
	<Description>
		Converts position from object model space to world space in render time scope. For ASL version see modelToWorldVisualWorld.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/modelToWorldVisual
	</WikiPage>
	<Syntax>
		Object modelToWorldVisual Array
	</Syntax>
	<RawSyntax>
		object modelToWorldVisual modelPos
	</RawSyntax>
	<Example>
		$Code$_aboveAndBehindPlayer = player modelToWorldVisual [0,-1,3];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		camDestroy
	</Keyword>
	<Description>
		Destroy an object created with camCreate. camDestroy is conducted immediately, the command doesn't wait for camCommit.
	NOTE: Destroying camera object does not terminate camera effect automatically.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/camDestroy
	</WikiPage>
	<Syntax>
		camDestroy Object
	</Syntax>
	<RawSyntax>
		camDestroy object
	</RawSyntax>
	<Example>
		$Code$camDestroy _cam;$/Code$
	</NextExample>
		$Code$_cam cameraEffect ["terminate","back"];
	camDestroy _cam;$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		kbHasTopic
	</Keyword>
	<Description>
		Check if conversation topic was registered to given person. See Conversations for more details.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/kbHasTopic
	</WikiPage>
	<Syntax>
		Object kbHasTopic String
	</Syntax>
	<RawSyntax>
		person kbHasTopic topicName
	</RawSyntax>
	<Example>
		$Code$_obiHasTopic = player kbHasTopic "helloThereGeneralK";$/Code$
	</NextExample>
		$Code$if ( player kbHasTopic "dontShoot") then { player kbRemoveTopic "dontShoot"; };$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		isAutotest
	</Keyword>
	<Description>
		Returns true if game was started with autotest parameter
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isAutotest
	</WikiPage>
	<Syntax>
		isAutotest
	</Syntax>
	<RawSyntax>
		isAutotest
	</RawSyntax>
	<Example>
		$Code$_bool = isAutotest$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlMapAnimCommit
	</Keyword>
	<Description>
		Plays the map animation.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlMapAnimCommit
	</WikiPage>
	<Syntax>
		ctrlMapAnimCommit Control
	</Syntax>
	<RawSyntax>
		ctrlMapAnimCommit controlName
	</RawSyntax>
	<Example>
		$Code$// Center map on player:
	_ctrl ctrlMapAnimAdd [0, 0.05, player ];
	ctrlMapAnimCommit _ctrl;$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		lbSetCurSel
	</Keyword>
	<Description>
		Selects the item with the given index of the listbox or combobox with id idc of the topmost user dialog.
	To deselect all, use -1: _ctrl lbSetCurSel -1; For listbox of style LB_MULTI use lbSetSelected instead.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lbSetCurSel
	</WikiPage>
	<Syntax>
		lbSetCurSel Array
	</NextSyntax>
		Control lbSetCurSel Number
	</Syntax>
	<RawSyntax>
		lbSetCurSel [idc, index]
	</NextRawSyntax>
		control lbSetCurSel index
	</RawSyntax>
	<Example>
		$Code$lbSetCurSel [101, 0];$/Code$
	</NextExample>
		$Code$_control lbSetCurSel 0;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		More information on the LB command family can be found here
	</NextNote>
		(November 29, 2014)
	lbSetCurSel -1 has no effect while the listbox is populated. You should use lbClear first, then lbSetCurSel -1, then re-populate the listbox.
	</NextNote>
		(March 1, 2015)
	Keep in mind that running this command against control will fire attached 'onLBSelChanged' event handler.
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		selectMax
	</Keyword>
	<Description>
		Returns the array element with maximum numerical value. Engine solution to BIS_fnc_greatestNum and BIS_fnc_findExtreme. Therefore it is expected that supplied array consists of Numbers only. Booleans however are also supported and will be evaluated as Numbers : true - 1, false - 0. nil value treated as 0. Other non Number elements (not recommended) will be evaluated as 0 and Bad conversion: scalar message will be logged into. rpt.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/selectMax
	</WikiPage>
	<Syntax>
		selectMax Array
	</Syntax>
	<RawSyntax>
		selectMax array
	</RawSyntax>
	<Example>
		$Code$_max = selectMax [1,2,3,4,5]; //5$/Code$
	</NextExample>
		$Code$// Same as, for example:
	_max = _a max _b max _c max _d;
	// Only faster:
	_max = selectMax [_a,_b,_c,_d];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(December 19, 2016)
	Returns either number or boolean value, in case max value in array 0, command will return either 0 or false, which ever comes first.
	Same for 1 and true values.
	$Code$selectMax [false,0] // returns false
	selectMax [0,false] // returns 0
	selectMax [true,1] // returns true
	selectMax [1,true] // returns 1
	$/Code$
	in case all values are equal or less than zero, command may also return other type of values
	$Code$selectMax ["",false,0,-1] // returns ""
	$/Code$
	if nil value appears in array, other values are equal or less than zero, command returns nil
	</Note>
	<ReturnValue>
		Anything
	</ReturnValue>

</NextListItem>

	<Keyword>
		uniform
	</Keyword>
	<Description>
		Returns name of uniform.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/uniform
	</WikiPage>
	<Syntax>
		uniform Object
	</Syntax>
	<RawSyntax>
		uniform unit
	</RawSyntax>
	<Example>
		$Code$_uniform = uniform _unit$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		setShadowDistance
	</Keyword>
	<Description>
		Sets the shadows rendering distance.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setShadowDistance
	</WikiPage>
	<Syntax>
		setShadowDistance Number
	</Syntax>
	<RawSyntax>
		setShadowDistance value
	</RawSyntax>
	<Example>
		$Code$setShadowDistance 1000$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		tvCollapseAll
	</Keyword>
	<Description>
		Collapses all tree items for the given Tree View.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/tvCollapseAll
	</WikiPage>
	<Syntax>
		tvCollapseAll Number
	</NextSyntax>
		tvCollapseAll Control
	</Syntax>
	<RawSyntax>
		tvCollapseAll idc
	</NextRawSyntax>
		tvCollapseAll control
	</RawSyntax>
	<Example>
		$Code$tvCollapseAll 101;$/Code$
	</NextExample>
		$Code$tvCollapseAll _ctrl;$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		cutRsc
	</Keyword>
	<Description>
		Display a resource defined in RscTitles of the mission's Description.ext, the campaign's description.ext or the global config.
	For greater efficiency and ease of modability it is recommended to use named layers available with alternative syntax since Arma 3 v1.57.134673
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/cutRsc
	</WikiPage>
	<Syntax>
		cutRsc Array
	</NextSyntax>
		Number cutRsc Array
	</NextSyntax>
		String cutRsc Array
	</Syntax>
	<RawSyntax>
		cutRsc [class, type, speed, showInMap]
	</NextRawSyntax>
		layer cutRsc [class, type, speed, showInMap]
	</NextRawSyntax>
		layerName cutRsc [class, type, speed, showInMap]
	</RawSyntax>
	<Example>
		$Code$cutRsc ["binocular", "PLAIN"];
	cutRsc ["binocular", "PLAIN", 2];
	cutRsc ["binocular", "PLAIN", 2, false ];$/Code$
	</NextExample>
		$Code$2 cutRsc ["binocular", "PLAIN", 2];$/Code$
	</NextExample>
		$Code$_layer = "layer1" cutRsc ["binocular", "PLAIN", 2];$/Code$
	</NextExample>
		$Code$// Create IGUI display:
	"someLayer" cutRsc ["RscTitleDisplayEmpty", "PLAIN"];
	_display = uiNamespace getVariable "RscTitleDisplayEmpty";$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
		(30 Jun, 2008)
	Using cutRsc (instead of titleRsc ) for a HUD has the benefits of:
	having the HUD automatically hide itself when you access the map and redisplay itself after closing the map.
	using the 'Direct communication' chat channel messages will not interfere with the HUD by hiding it.
	</NextNote>
		(17 Oct, 2013)
	Regarding removing current resource with cutRsc ["Default", "PLAIN"]. If it does't work and it gives you error message that "Default" is not found, add it by yourself to RscTitles in description.ext so it looks like this:
	class RscTitles
	{
	class Default
	{
	idd = - 1 ;
	fadein = 0 ;
	fadeout = 0 ;
	duration = 0 ;
	};
	};
	Alternatively, you can use cutText, yes cutText command to cancel your resources. As Karel Moricky explains: "All 'cut' commands are in the same layer, the same as all 'title' commands are in another one." So to remove cutRsc resource execute cutText on the same layer:
	$Code$ cutRsc ["myRsc", "PLAIN"]; //show
	cutText ["", "PLAIN"]; //remove$/Code$
	$Code$10 cutRsc ["myRsc", "PLAIN"]; //show
	10 cutText ["", "PLAIN"]; //remove$/Code$
	Also if you use layers would be a good idea to register them with BIS_fnc_rscLayer to avoid possible clashes with other layers:
	$Code$("myLayerName" call BIS_fnc_rscLayer ) cutRsc ["myRsc","PLAIN"]; //show
	("myLayerName" call BIS_fnc_rscLayer ) cutText ["","PLAIN"]; //remove$/Code$
	You can also immediately remove resource with cutFadeOut command: $Code$123 cutFadeOut 0;$/Code$
	</Note>
	<ReturnValue>
		Nothing - Nothing - Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		hintC
	</Keyword>
	<Description>
		Displays attractive hint in the center of the screen. Player control is taken away until user presses "Continue". After user confirmation, the content of the hintC is repeated again in a normal hint. This type of hint can also have a title. It is also possible to drag this type of hint around the screen.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/hintC
	</WikiPage>
	<Syntax>
		hintC String
	</NextSyntax>
		String hintC Array
	</NextSyntax>
		String hintC Structured_Text
	</NextSyntax>
		String hintC String
	</Syntax>
	<RawSyntax>
		hintC content
	</NextRawSyntax>
		title hintC [content1, content2,]
	</NextRawSyntax>
		title hintC content
	</NextRawSyntax>
		title hintC content
	</RawSyntax>
	<Example>
		$Code$hintC "Press W to move forward";$/Code$
	</NextExample>
		$Code$// Same as the above in Arma3 but without second hint displayed:
	hintC "Press W to move forward";
	hintC_EH = findDisplay 57 displayAddEventHandler ["unload", {
	0 = _this spawn {
	_this select 0 displayRemoveEventHandler ["unload", hintC_EH];
	hintSilent "";
	};
	}];$/Code$
	</NextExample>
		$Code$"Instructions" hintC [
	"Press W to move forward.",
	"Press S to move backwards.",
	"Use the mouse to turn right or left.",
	"Press V for weapon sights."
	];$/Code$
	</NextExample>
		$Code$// Same as the above in Arma3 but without second hint displayed:
	"Instructions" hintC [
	"Press W to move forward.",
	"Press S to move backwards.",
	"Use the mouse to turn right or left.",
	"Press V for weapon sights."
	];
	hintC_arr_EH = findDisplay 72 displayAddEventHandler ["unload", {
	0 = _this spawn {
	_this select 0 displayRemoveEventHandler ["unload", hintC_arr_EH];
	hintSilent "";
	};
	}];$/Code$
	</NextExample>
		$Code$_separator1 = parseText " br / ------------------------ br / ";
	_image = "\ca\ui\textures\aus_flag.paa";
	_txt = composeText [ image _image, "Heading Text", _separator1, "Content"];
	"" hintC _txt;$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
		This command must be executed after mission start. If you place it into init.sqs or init field of some unit, it will not work. Just add a little delay (~0.001) and the place the command.
	</NextNote>
		To display multiple messages after another you have to add a small delay in between. Otherwise only the first message will be displayed. hintC "foo"; sleep 0.1; hintC "bar"; Without a sleep statement hintC will not suspend the script it has been called from.
	</NextNote>
		HintC can be used with formatting like this: HintC format["Hello %1",player].
	</NextNote>
		(March 19, 2015)
	"Titled" hintC all use display #72 while "untitled" one uses display #57. If you are trying examples in Arma 3 debug console, add little delay like this: $Code$[] spawn {sleep 0.5;....your example code goes here...};$/Code$ or no hintC will be displayed.
	</Note>
	<ReturnValue>
		Nothing - Nothing - Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setGroupIconsVisible
	</Keyword>
	<Description>
		Sets if group icons are visible.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setGroupIconsVisible
	</WikiPage>
	<Syntax>
		setGroupIconsVisible Array
	</Syntax>
	<RawSyntax>
		setGroupIconsVisible array
	</RawSyntax>
	<Example>
		$Code$setGroupIconsVisible [true,true];//[show markers on map, show markers on player hud]
	setGroupIconsVisible [true,false]; //Show only 2D
	setGroupIconsVisible [false,false];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		progressPosition
	</Keyword>
	<Description>
		Returns the current position in the progress bar.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/progressPosition
	</WikiPage>
	<Syntax>
		progressPosition Control
	</Syntax>
	<RawSyntax>
		progressPosition control
	</RawSyntax>
	<Example>
		$Code$_pos = progressPosition _control;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		enableReload
	</Keyword>
	<Description>
		Enable / disable reload when magazine is empty.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/enableReload
	</WikiPage>
	<Syntax>
		Object enableReload Boolean
	</Syntax>
	<RawSyntax>
		object enableReload enable
	</RawSyntax>
	<Example>
		$Code$_vehicle enableReload false ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setUnitPos
	</Keyword>
	<Description>
		Set unit position rules. Mode may be one of:
	"DOWN" - unit goes prone and stays prone.
	"UP" - unit stands and stays standing.
	"MIDDLE" - Kneel Position. ArmA version 1.04 (Unit will not kneel if it is unarmed )
	"AUTO" - unit chooses mode according to circumstances.
	This command will not change the stance of the human player, even though it will change the output of unitPos command. To change player stance use playAction or playActionNow :
	$Code$ player playAction "PlayerProne"; // DOWN
	player playAction "PlayerStand"; // UP
	player playAction "PlayerCrouch"; // MIDDLE$/Code$
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setUnitPos
	</WikiPage>
	<Syntax>
		Object setUnitPos String
	</Syntax>
	<RawSyntax>
		unit setUnitPos mode
	</RawSyntax>
	<Example>
		$Code$_soldier setUnitPos "UP";$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		(18 September 2008‎)
	Command most likely only works if run before join into group after createUnit.
	</NextNote>
		(11 March 2011)
	The above comment by Dwarden about 'an additional join required' is no longer true for Operation Arrowhead.
	</NextNote>
		(26 September 2013‎)
	A unit might not always go prone when ordered to setUnitPos "DOWN", if the unit doesn't agree with the command. To force the unit to go prone, stop the unit from firing by setCombatMode "BLUE" and then order the unit to prone.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		removeAllAssignedItems
	</Keyword>
	<Description>
		Unassigns and deletes all linked items from inventory. The commands operates on assignedItems array, which doesnt include goggles or headgear. Use removeGoggles and removeHeadgear for those.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/removeAllAssignedItems
	</WikiPage>
	<Syntax>
		removeAllAssignedItems Object
	</Syntax>
	<RawSyntax>
		removeAllAssignedItems unit
	</RawSyntax>
	<Example>
		$Code$removeAllAssignedItems player ;$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setVectorUp
	</Keyword>
	<Description>
		Set object's up vector. Direction of the object remain unchanged. Default object's vectorUp is [0,0,1].
	In Multiplayer, setVectorUp must be executed on the machine where the object it applied to is local.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setVectorUp
	</WikiPage>
	<Syntax>
		Object setVectorUp Array
	</Syntax>
	<RawSyntax>
		object setVectorUp [x, y, z]
	</RawSyntax>
	<Example>
		$Code$// Turn object upside down:
	_obj setVectorUp [0,0,-1];$/Code$
	</NextExample>
		$Code$// Align object with the terrain underneath:
	_obj setVectorUp surfaceNormal position _obj;$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		setVectorUp can only influence an object's bank. It can not influence pitch. Example:
	player setVectorUp [0,1,0]
	If the player is facing 0 degrees (north), then this will do NOTHING.
	If the player is facing 90 degrees (east), then this will make him bank 90 degrees to his left.
	</NextNote>
		(March 22, 2007)
	An in-depth discussion on the concept of vectors is available here.
	</NextNote>
		(March 16, 2008)
	Command can be also used to rotate camera in all three axis (which also mean it's possible to set camera bank).
	</NextNote>
		(October 3, 2013)
	It is possible to change both pitch and bank of an object ( surfaceNormal application for instance). Assuming an ammo box in the following example is facing North (default direction is 0): $Code$_ammobox setVectorUp [0,1,0]; //box is pitched 90 degrees forward
	_ammobox setVectorUp [1,0,0]; //box is banked 90 degrees to the right$/Code$
	However the above will stop working as soon as you attach the box to something. The following trick however will work in this case:
	$Code$_ammobox attachTo [ player, [0,2,1]];
	_ammobox setVectorUp [0,0.99,0.01]; //box is pitched ~90 degrees forward
	_ammobox setVectorUp [0.99,0,0.01]; //box is banked ~90 degrees to the right$/Code$
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		magazinesAllTurrets
	</Keyword>
	<Description>
		Returns all magazines (including empty) from all vehicle turrets (including driver turret [-1]) and their ammo counts.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/magazinesAllTurrets
	</WikiPage>
	<Syntax>
		magazinesAllTurrets Object
	</Syntax>
	<RawSyntax>
		magazinesAllTurrets vehicle
	</RawSyntax>
	<Example>
		$Code$_mags = magazinesAllTurrets vehicle player ;$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		gusts
	</Keyword>
	<Description>
		Return the current gusts value. Scale is 0 to 1.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/gusts
	</WikiPage>
	<Syntax>
		gusts
	</Syntax>
	<RawSyntax>
		gusts
	</RawSyntax>
	<Example>
		$Code$_gustsval = gusts ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		camSetFov
	</Keyword>
	<Description>
		Set the zoom level ( F ield O f V iew) of the given camera.
	The zoom level is from 0.01 for the nearest and 8.5 for the furthest zoom value, with a default zoom level of 0.75
	The angle of the field of view is atan(FOV)*2 radians when in 4:3 aspect ratio.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/camSetFov
	</WikiPage>
	<Syntax>
		Object camSetFov Number
	</Syntax>
	<RawSyntax>
		camera camSetFov level
	</RawSyntax>
	<Example>
		$Code$_cam camSetFov 0.75;$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		drawTriangle
	</Keyword>
	<Description>
		Draws a single triangle or multiple triangles on the map. Triangle is defined by 3 positions of its verticies: p0, p1, p2 in a single array [ p0, p1, p2 ]. Next 3 positions in the same array [p0, p1, p2, p0, p1, p2 ] will be used to draw second triangle, another 3 positions [p0, p1, p2, p0, p1, p2, p0, p1, p2 ] to draw 3rd and so on.
	NOTE : when fill param is absent or is an empty string "", the triangle is drawn with lines of the color set in color param. In order to draw color filled triangle of the same color as color param, set fill param to opaque white procedural texture "#(rgb,1,1,1)color(1,1,1,1)".
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/drawTriangle
	</WikiPage>
	<Syntax>
		Control drawTriangle Array
	</Syntax>
	<RawSyntax>
		map drawTriangle [vertices, color, fill]
	</RawSyntax>
	<Example>
		$Code$findDisplay 12 displayCtrl 51 ctrlAddEventHandler ["Draw",
	{
	_this select 0 drawTriangle
	[
	[
	player getRelPos [100, 0],
	player getRelPos [100, -135],
	player getRelPos [100, 135]
	],
	[1,0,0,0.5],
	"#(rgb,1,1,1)color(1,1,1,1)"
	];
	}];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(July 16, 2017)
	Example youtube video: [1] $Code$_ctrl = findDisplay 12 displayCtrl 51;
	_ctrl setVariable ["data", [1, "#(rgb,1,1,1)color(1,1,1,1)", 1000, position player,
	{
	params ["_p", "_r", "_a", "_sr", "_ba"];
	_sr = _r * 0.382;
	_pb = _p getPos [_sr, _a + 180];
	[
	_p getPos [_r, _a], _p getPos [_sr, _a + 36], _p getPos [_sr, _a - 36],
	_pb, _p getPos [_r, _a - 72], _p getPos [_r, _a + 72],
	_p getPos [_r, _a - 144], _p getPos [_sr, _a - 108], _pb,
	_p getPos [_r, _a + 144], _p getPos [_sr, _a + 108], _pb
	]
	}]];
	_ctrl ctrlRemoveAllEventHandlers "Draw";
	_ctrl ctrlAddEventHandler ["Draw",
	{
	_map = _this select 0;
	_data = _map getVariable "data";
	_data params ["_i", "_fill", "_dist", "_pos", "_fn"];
	_data set [0, _i + 1];
	_size = _i % _dist;
	if (_size == 0) then
	{
	_data set [0, 1];
	_data set [1, ["#(rgb,1,1,1)color(1,1,1,1)", ""] select (random 1 0.3)];
	_data set [2, 250 + round random 750];
	};
	_alpha = linearConversion [_dist, 0, _dist - _size, 1, 0];
	_map drawEllipse [_pos, _size * 2, _size * 2, 0, [0,0,1,_alpha], _fill];
	_map drawTriangle [[_pos getPos [_size, -_size], _size, _size] call _fn, [1,0,0,_alpha], _fill];
	_map drawTriangle [[_pos getPos [_size, -_size + 120], _size, _size] call _fn, [0,1,0,_alpha], _fill];
	_map drawTriangle [[_pos getPos [_size, -_size - 120], _size, _size] call _fn, [1,1,0,_alpha], _fill];
	}];
	openMap true;$/Code$
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		nearObjects
	</Keyword>
	<Description>
		Find objects in a sphere with given radius. The first object in the returned array is not necessarily the closest one. If you need returned objects to be sorted by distance, use nearestObjects. If typeName is given, only objects of given type (or its subtype) are listed.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/nearObjects
	</WikiPage>
	<Syntax>
		Position/Position2D/Object nearObjects Number
	</NextSyntax>
		PositionAGL/Position2D/Object nearObjects Array
	</Syntax>
	<RawSyntax>
		position nearObjects radius
	</NextRawSyntax>
		position nearObjects [typeName, radius]
	</RawSyntax>
	<Example>
		$Code$_list = position player nearObjects 50;$/Code$
	</NextExample>
		$Code$_list = [_xpos,_ypos] nearObjects ["House", 20];$/Code$
	</NextExample>
		$Code$_list = player nearObjects 20;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(June 30, 2007)
	Units in vehicles are not detected via this command.
	</NextNote>
		(December 15, 2011)
	In the second example, you can't omit the typeName parameter. It's required and you'll get an error if you don't supply it. Use "All" as an alternative to leaving it out. (CO 1.59)
	</NextNote>
		(January 3, 2013)
	If you use the first example, it will return objects many more objects such as pollen, honeybees and crucially, triggers. Triggers will show in the returned array as "no shape" but you can use typeOf to get the classname, which will give "EmptyDetector". This will not return objects that don't have classnames such as plants, stones and some map objects like vehicle wrecks. nearestObjects will find objects without classnames.
	</NextNote>
		(August 8, 2017)
	The example 2 means that the command will include all types which inherit from the given type. As an example, when using "Helipad_Base_F", the command will detect all types of helipads (Land_HelipadSquare_F, Land_HelipadCircle_F, Land_HelipadEmpty_F, etc) in the given radius.
	</Note>
	<ReturnValue>
		Array - Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		copyWaypoints
	</Keyword>
	<Description>
		Copy the chain of waypoints from source to target group. The target group will start to process waypoints from the first one.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/copyWaypoints
	</WikiPage>
	<Syntax>
		Group copyWaypoints Group
	</Syntax>
	<RawSyntax>
		groupTo copyWaypoints groupFrom
	</RawSyntax>
	<Example>
		$Code$group1 copyWaypoints group2;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		getCustomAimCoef
	</Keyword>
	<Description>
		Returns aimPrecision from animation state with custom value that will directly affects weapon sway size and speed.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getCustomAimCoef
	</WikiPage>
	<Syntax>
		getCustomAimCoef Object
	</Syntax>
	<RawSyntax>
		getCustomAimCoef unit
	</RawSyntax>
	<Example>
		$Code$_coef = getCustomAimCoef player$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		addMPEventHandler
	</Keyword>
	<Description>
		Adds MP event handler (EH) to the given object and returns EH handle. MP event handlers are added globally to every client on network in multiplayer and will fire on every client too upon event. If EH has some data to return upon event (e.g. the "MPKilled" EH will return an array with 2 elements: the killed unit, and the killer), it is passed in _this variable. Since Arma 3 v.1.63.137807 the EH handle is also stored in _thisEventHandler variable and is available during EH code execution. For more information see: Arma_3:_Event_Handlers#addMPEventHandler
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/addMPEventHandler
	</WikiPage>
	<Syntax>
		Object addMPEventHandler Array
	</Syntax>
	<RawSyntax>
		object addMPEventHandler [type, expression]
	</RawSyntax>
	<Example>
		$Code$_index = player addMPEventHandler ["mpkilled", {Null = _this execVM "playerkilled.sqf";}];$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
		(May 8, 2015)
	MP EHs are added on every PC and execute on every PC, apart from MPRespawn, that only executes at the locality where unit respawns.
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		ropeCreate
	</Keyword>
	<Description>
		Create a rope (PhysX rope in Arma 3).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ropeCreate
	</WikiPage>
	<Syntax>
		ropeCreate Array
	</Syntax>
	<RawSyntax>
		ropeCreate [fromObject, fromPoint, toObject, toPoint, segments, length]
	</NextRawSyntax>
		ropeCreate [fromObject, fromPoint, length, segments, unroll]
	</RawSyntax>
	<Example>
		$Code$myRope = ropeCreate [ vehicle player, "slingload0", myCargo, [0, 0, 0], 10]; //A3 example$/Code$
	</NextExample>
		$Code$myRope = ropeCreate [ vehicle player, "fastrope0", 10, 10, true ]; //TakeOn example$/Code$
	</NextExample>
		$Code$myRope = ropeCreate [veh1, [0,0,-2], veh2, [0,0,0], 10] //A3 1.34$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(November 8, 2014)
	Doesn't work well for towing vehicles on the ground.
	Their wheels don't turn freely and have a LOT of friction. You'll most likely end up flipping the vehicle over if you try to tow it.
	Also note that ropes can be destroyed/cut by shooting at them.
	</NextNote>
		(January 4, 2015)
	Pay special attention to what is your fromObject and what is your toObject as this will have an impact on the physics of the rope.
	For example: If you want to tow an Assault CRRC from a heavier Speedboat Minigun, attach two boats together with a rope. If you drive the Speedboat Minigun and set the CRRC as the fromObject, the rope will have almost no elasticity and the CRRC will yank around as you tow it. However, if you set the CRRC as the toObject, the rope will have more elasticity and will be a little friendlier for the CRRC when you are towing it.
	</NextNote>
		(July 9, 2015)
	Parameters segments and unroll are not supported in Arma 3. Segments are set automatically according the length of a rope.
	</Note>
	<ReturnValue>
		Object
	</ReturnValue>

</NextListItem>

	<Keyword>
		showWarrant
	</Keyword>
	<Description>
		Enable ID card (default false ). Obsolete command.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/showWarrant
	</WikiPage>
	<Syntax>
		showWarrant Boolean
	</Syntax>
	<RawSyntax>
		showWarrant show
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		className
	</Keyword>
	<Description>
		Returns short name of location.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/className
	</WikiPage>
	<Syntax>
		className Location
	</Syntax>
	<RawSyntax>
		className loc
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		getBurningValue
	</Keyword>
	<Description>
		Returns amount of damage from fire.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getBurningValue
	</WikiPage>
	<Syntax>
		getBurningValue Object
	</Syntax>
	<RawSyntax>
		getBurningValue unit
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		leaderboardDeInit
	</Keyword>
	<Description>
		Deletes internal class for the leaderboard with given name. Returns true if the board has been found and deinitialized.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/leaderboardDeInit
	</WikiPage>
	<Syntax>
		leaderboardDeInit String
	</Syntax>
	<RawSyntax>
		leaderboardDeInit boardName
	</RawSyntax>
	<Example>
		$Code$leaderboardDeInit "TT01"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		getArtilleryETA
	</Keyword>
	<Description>
		Returns ETA to the target in seconds for given artillery unit based on target position and used magazine, -1 if target can't be hit.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getArtilleryETA
	</WikiPage>
	<Syntax>
		Object getArtilleryETA Array
	</Syntax>
	<RawSyntax>
		unit getArtilleryETA [targetPosition, magazineType]
	</RawSyntax>
	<Example>
		$Code$_mortar getArtilleryETA [ getPos _target, getArtilleryAmmo [_mortar] select 0];$/Code$
	</NextExample>
		$Code$_mortar getArtilleryETA [ position _target, currentMagazine _mortar];$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(August 26, 2013)
	To avoid wrong ETA readings, position of the target should only be obtained via position or getPos
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		groupSelectedUnits
	</Keyword>
	<Description>
		Returns selected units in source group for normal commanding mode (individual units). For the High Command equivalent, see hcSelected.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/groupSelectedUnits
	</WikiPage>
	<Syntax>
		groupSelectedUnits Object
	</Syntax>
	<RawSyntax>
		groupSelectedUnits unit
	</RawSyntax>
	<Example>
		$Code$_selectedUnits = groupSelectedUnits player ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		<=
	</Keyword>
	<Description>
		Checks if the left number is smaller than or equal to the right one
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/a_less%3D_b
	</WikiPage>
	<Syntax>
		Number <= Number
	</Syntax>
	<RawSyntax>
		</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		camSetTarget
	</Keyword>
	<Description>
		Set the target object or position where the given camera should point at. Needs the call of camCommit to be conducted.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/camSetTarget
	</WikiPage>
	<Syntax>
		Object camSetTarget Object
	</NextSyntax>
		Object camSetTarget Array
	</Syntax>
	<RawSyntax>
		camera camSetTarget target
	</NextRawSyntax>
		camera camSetTarget position
	</RawSyntax>
	<Example>
		$Code$_camera camSetTarget player ;$/Code$
	</NextExample>
		$Code$_camera camSetTarget [2540,1503,26];$/Code$
	</NextExample>
		$Code$_cam = "camera" camCreate ( player modelToWorld [0,100,10]);
	_cam camSetTarget player ;
	_cam camSetRelPos [0, 0.5, 1.5];
	_cam cameraEffect ["internal", "back"];
	_cam camCommit 1;
	player setRandomLip true ;$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		createDiarySubject
	</Keyword>
	<Description>
		Create a new subject page in a log.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/createDiarySubject
	</WikiPage>
	<Syntax>
		Object createDiarySubject Array
	</Syntax>
	<RawSyntax>
		person createDiarySubject [subject, displayName, picture]
	</RawSyntax>
	<Example>
		$Code$_index = player createDiarySubject ["myPage","My page"];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		enableCaustics
	</Keyword>
	<Description>
		Enable/disable caustics drawing.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/enableCaustics
	</WikiPage>
	<Syntax>
		enableCaustics Boolean
	</Syntax>
	<RawSyntax>
		enableCaustics bool
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(October 23, 2017)
	Setting this to false will disable a light refraction on "liquid" objects like sea water. This has no effect on solid (static) objects.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		getObjectViewDistance
	</Keyword>
	<Description>
		Gets the values of rendering distances of objects and shadows.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getObjectViewDistance
	</WikiPage>
	<Syntax>
		getObjectViewDistance
	</Syntax>
	<RawSyntax>
		getObjectViewDistance
	</RawSyntax>
	<Example>
		$Code$_arr = getObjectViewDistance ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		atan
	</Keyword>
	<Description>
		ArcTangent of a number, result in Degrees.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/atan
	</WikiPage>
	<Syntax>
		atan Number
	</Syntax>
	<RawSyntax>
		atan x
	</RawSyntax>
	<Example>
		$Code$_degrees = atan 1; //45$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		teamType
	</Keyword>
	<Description>
		Returns a type of given team.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/teamType
	</WikiPage>
	<Syntax>
		teamType Team_Member
	</Syntax>
	<RawSyntax>
		teamType team
	</RawSyntax>
	<Example>
		$Code$_type = teamType _team;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		unitsBelowHeight
	</Keyword>
	<Description>
		Returns units in group/array below given height Above The Land (ATL). Current unit height ATL could be found with
	_height = ( getPosATL _unit) select 2;
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/unitsBelowHeight
	</WikiPage>
	<Syntax>
		Group/Array unitsBelowHeight Number
	</Syntax>
	<RawSyntax>
		units unitsBelowHeight height
	</RawSyntax>
	<Example>
		$Code$_allOnGroudUnits = group player unitsBelowHeight 10;$/Code$
	</NextExample>
		$Code$_units = allUnits unitsBelowHeight 30;$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(Nov 12, 2009)
	the height is calculated above terrain level (ATL), not water level or building level.
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlSetTextColor
	</Keyword>
	<Description>
		Sets text color of given control. Color is in format Color. As of Arma 3 v1.40 this command could also be used to change fill colour or the DialogControls-ProgressBar.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlSetTextColor
	</WikiPage>
	<Syntax>
		Control ctrlSetTextColor Array
	</Syntax>
	<RawSyntax>
		display ctrlSetTextColor color
	</RawSyntax>
	<Example>
		$Code$_control ctrlSetTextColor [1, 0, 0, 1]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(April 10, 2015)
	When used on a RscProgress control, remove the configured "texture" first. The two will affect each other. - Arma 3 v1.42
	</NextNote>
		(March 4, 2018)
	This command can be used to change the color of the light that is illuminating a texture in a display. By default, textures are lit with white light at 100% [1,1,1,1];
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		compileFinal
	</Keyword>
	<Description>
		Compile expression and makes it final, preventing it from:
	repeated compile or compileFinal
	removal by nil
	remote rewrite using publicVariable, publicVariableClient and publicVariableServer
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/compileFinal
	</WikiPage>
	<Syntax>
		compileFinal String
	</Syntax>
	<RawSyntax>
		compileFinal expression
	</RawSyntax>
	<Example>
		$Code$myCode = compileFinal "a = a + 1";
	call myCode;
	//--- Repeated compile won't have any effect
	myCode = compileFinal "a = a + 2";
	//--- Duplicate code will be final as well
	myDuplicateCode = myCode;$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
		(August 14, 2013)
	When broadcasting a compileFinal'ed variable using publicVariable or its variants, the variable also becomes final on the other client(s) and/or the server.
	Also, compileFinal does not prevent event handlers from being removed or overwritten.
	</NextNote>
		(May 27, 2017)
	in ArmA 3 1.70.141838, compileFinal also works for profileNamespace and uiNamespace. But be careful with that.
	</Note>
	<ReturnValue>
		Code
	</ReturnValue>

</NextListItem>

	<Keyword>
		tvTooltip
	</Keyword>
	<Description>
		Gets the tooltip text associated with the specified tree view path.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/tvTooltip
	</WikiPage>
	<Syntax>
		tvTooltip Array
	</NextSyntax>
		Control tvTooltip Array
	</Syntax>
	<RawSyntax>
		tvTooltip [idc, path]
	</NextRawSyntax>
		ctrl tvTooltip path
	</RawSyntax>
	<Example>
		$Code$_text = tvTooltip [101, [0,2]];$/Code$
	</NextExample>
		$Code$_text = _treeCtrl tvTooltip [0,2];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String - String
	</ReturnValue>

</NextListItem>

	<Keyword>
		from
	</Keyword>
	<Description>
		Continue sequence of for var construct. It sets the start value of the index variable.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/from
	</WikiPage>
	<Syntax>
		For_Type from Number
	</Syntax>
	<RawSyntax>
		for from b
	</RawSyntax>
	<Example>
		$Code$for "_x" from 10 to 20 do {..code..}$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		For_Type
	</ReturnValue>

</NextListItem>

	<Keyword>
		lnbSetText
	</Keyword>
	<Description>
		Sets the additional text (invisible) in the item with the given position of the 2D listbox.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lnbSetText
	</WikiPage>
	<Syntax>
		lnbSetText Array
	</NextSyntax>
		Control lnbSetText Array
	</Syntax>
	<RawSyntax>
		lnbSetText [idc,[row,column],data]
	</NextRawSyntax>
		_ctrl lnbSetText [ [row,column],data]
	</RawSyntax>
	<Example>
		$Code$lnbSetText [101, [0,1], "#1"];$/Code$
	</NextExample>
		$Code$_ctrl lnbSetText [ [0,1], "#1"];$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
		(Sep 9 2014)
	(A3 1.28)As for invisible data processing, lnbAddArray, lnbAddColumn, lnbData, lnbGetColumnsPosition, lnbSetColumnsPos, lnbSetData, lnbSetText, lnbSetValue, lnbText and lnbValue store data types into exact position of the listNbox with different spaces. Accessing data with coordinate command at nearly the same syntax:
	$Code$
	//Set same value to one position of a Control
	_ctrl lnbSetData [ [0,0],"#1"];
	lnbSetColumnsPos [102, [0,1], 1];
	_ctrl lnbSetText [ [0,1], "#1"];
	_ctrl lnbSetValue [ [0,0],1];
	//Accessing the value disregard affecting one another.
	_ctrl lnbData [0,0]; //"#1"
	lnbGetColumnsPosition _ctrl //[1];
	_ctrl lnbText [0,0];//"#1"
	_ctrl lnbValue [0,0];//1
	$/Code$
	For a direct visible control over CT_LISTNBOX:
	$Code$
	0 = [_CT_LISTNBOX] spawn {
	private ["_CT_LISTNBOX","_color","_current","_pic"];
	disableSerialization ;
	_CT_LISTNBOX = _this select 0;
	{
	_CT_LISTNBOX lnbAddRow [ getText (_x "displayNameShort"), getText (_x "displayName")];
	_CT_LISTNBOX lnbSetPicture [ [_foreachIndex,0], getText (_x "texture")];
	} forEach (" isClass _x" configClasses ( configFile "CfgRanks"));
	_CT_LISTNBOX lnbSetCurSelRow 0;
	_current = lnbCurSelRow _CT_LISTNBOX;
	_color = _CT_LISTNBOX lnbColor [_current,0];
	_CT_LISTNBOX lnbSetColor [ [_current,1], [(_color select 0)/2,0,0,1] ];
	_CT_LISTNBOX lnbDeleteColumn 0;
	_CT_LISTNBOX lnbDeleteRow 1;
	sleep 1;
	lnbClear _CT_LISTNBOX;//Clear all items but control still remains just invisible.
	};
	$/Code$
	A combined use of both invisible and visible data processing commands alive the Control.
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		onBriefingPlan
	</Keyword>
	<Description>
		Select a sound declared in the Description.ext of the mission to be played the first time the Plan tab is selected in the briefing.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/onBriefingPlan
	</WikiPage>
	<Syntax>
		onBriefingPlan String
	</Syntax>
	<RawSyntax>
		onBriefingPlan soundName
	</RawSyntax>
	<Example>
		$Code$onBriefingPlan "PlanVoiceOver"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(January 20, 2007)
	In OFP 1.96 only sound files defined in the mission description can be played in this way.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setFuelCargo
	</Keyword>
	<Description>
		Sets fuel amount in cargo space of refuel vehicle from empty (0) to full (1)
	Note, the carrying capacity of each side's refuel trucks differ.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setFuelCargo
	</WikiPage>
	<Syntax>
		Object setFuelCargo Number
	</Syntax>
	<RawSyntax>
		vehicle setFuelCargo amount
	</RawSyntax>
	<Example>
		$Code$_refuelTruckOne setFuelCargo 0;$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		(July 10, 2015)
	(ArmA 3 1.44) setFuelCargo will have no effect if the vehicle doesn't support getFuelCargo.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		removeAllItems
	</Keyword>
	<Description>
		Removes all special items from the unit.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/removeAllItems
	</WikiPage>
	<Syntax>
		removeAllItems Object
	</Syntax>
	<RawSyntax>
		removeAllItems unit
	</RawSyntax>
	<Example>
		$Code$removeAllItems unitName;$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		(June 18, 2013)
	Arma 3, version 0.70 - removes only items listed by command items.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		deleteGroupWhenEmpty
	</Keyword>
	<Description>
		Marks given group for auto-deletion when group is empty. true will mark the group for auto-deletion, however false will only unmark the group that was marked previously. There are other engine group auto-deletion mechanisms in place, which are not affected by this.
	NOTE: It might take up to a minute for the groups marked for auto-deletion when empty to get deleted when they become empty.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/deleteGroupWhenEmpty
	</WikiPage>
	<Syntax>
		Group deleteGroupWhenEmpty Boolean
	</Syntax>
	<RawSyntax>
		group deleteGroupWhenEmpty delete
	</RawSyntax>
	<Example>
		$Code$_group deleteGroupWhenEmpty true ;$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
		(February 8, 2018)
	It seems, that the argument has to be local (like for deleteGroup).
	So if you run it on a server and the group isn't local to the server this wouldn't work:
	$Code$_group deleteGroupWhenEmpty true;$/Code$
	But this would work:
	$Code$if (local _group) then {
	_group deleteGroupWhenEmpty true;
	} else {
	[_group, true] remoteExec ["deleteGroupWhenEmpty", groupOwner _group];
	};$/Code$
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		removeDrawIcon
	</Keyword>
	<Description>
		Removes an icon for an editor object.
	i
	Some Old Editor Command
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/removeDrawIcon
	</WikiPage>
	<Syntax>
		Control removeDrawIcon Array
	</Syntax>
	<RawSyntax>
		map removeDrawIcon [object,string identifier]
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		assignedVehicleRole
	</Keyword>
	<Description>
		Return the role a unit is assigned to within its assigned vehicle.
	The array which is returned contains:
	[] - Not assigned to any vehicle
	["Driver"] - Assigned as driver
	["Cargo"] (or ["Cargo", [turret path]] since Arma 3 1.31.127272) - Assigned as cargo
	["Turret", [turret path]] - Assigned to a turret
	If no vehicle role is assigned, an empty array is returned.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/assignedVehicleRole
	</WikiPage>
	<Syntax>
		assignedVehicleRole Object
	</Syntax>
	<RawSyntax>
		assignedVehicleRole unitName
	</RawSyntax>
	<Example>
		$Code$_RoleArray = assignedVehicleRole player ;$/Code$
	</NextExample>
		$Code$// Get weapons available to player at player occupied turret:
	_weaponsTurret = vehicle player weaponsTurret ( assignedVehicleRole player select 1);$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(August 31, 2013)
	When unit with unassigned vehicle role enters a vehicle, it gets assigned vehicle role automatically. The unit then will hold on to its assigned role after exiting the vehicle. To add, when player is in the group of AIs and is not the leader, assignedVehicleRole of the player could be unpredictable and absolutely not related to the position player occupies. In short, forget about this command, it is unreliable and has been broken too many times in the past.
	</NextNote>
		(November 15, 2014)
	In multiplayer (tested in v1.34), this only works reliably on the server.
	Behaviour is as follows:
	On a client, the command will return empty arrays for every unit that is not local.
	On the server, the command correctly returns the position, regardless of the units locality.
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		==
	</Keyword>
	<Description>
		Check if one value is equal to another. Both values need to be of the same type.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/a_%3D%3D_b
	</WikiPage>
	<Syntax>
		Anything == Anything
	</Syntax>
	<RawSyntax>
		</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		ppEffectDestroy
	</Keyword>
	<Description>
		Destroy Post process effects given by handle or array of handles.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ppEffectDestroy
	</WikiPage>
	<Syntax>
		ppEffectDestroy Number
	</NextSyntax>
		ppEffectDestroy Array
	</Syntax>
	<RawSyntax>
		ppEffectDestroy effect
	</NextRawSyntax>
		ppEffectDestroy [effect1,]
	</RawSyntax>
	<Example>
		$Code$ppEffectDestroy _hndl;$/Code$
	</NextExample>
		$Code$ppEffectDestroy [_hndl0, _hndl1, _hndl2];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		camPrepareTarget
	</Keyword>
	<Description>
		Prepares the camera target to a position or to a target.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/camPrepareTarget
	</WikiPage>
	<Syntax>
		Object camPrepareTarget Array
	</NextSyntax>
		Object camPrepareTarget Object
	</Syntax>
	<RawSyntax>
		camera camPrepareTarget position
	</NextRawSyntax>
		camera camPrepareTarget target
	</RawSyntax>
	<Example>
		$Code$_camera camPrepareTarget getPos player$/Code$
	</NextExample>
		$Code$_camera camPrepareTarget player$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		combatMode
	</Keyword>
	<Description>
		Returns the combat mode of the given unit. See setCombatMode for more information about combat modes.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/combatMode
	</WikiPage>
	<Syntax>
		combatMode Object/Group
	</Syntax>
	<RawSyntax>
		combatMode grp
	</RawSyntax>
	<Example>
		$Code$if (( combatMode _grp1) == "BLUE") then {_grp1 setCombatMode "GREEN"};$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(August 3, 2006)
	Notes from before the conversion:
	Use setCombatMode to set the combat mode. The definitions of the colours are given under that command.
	</NextNote>
		In OFP v1.96, combatMode return value does not change when unit's combat mode is set with radio commands, ie troops under the player's command.
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		flyInHeightASL
	</Keyword>
	<Description>
		Sets the minimal ASL height. Final height is max(flyInHeight, flyInHeightASL).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/flyInHeightASL
	</WikiPage>
	<Syntax>
		Object flyInHeightASL Array
	</Syntax>
	<RawSyntax>
		aircraft flyInHeightASL params
	</RawSyntax>
	<Example>
		$Code$cobraOne flyInHeightASL [200, 100, 400];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		objStatus
	</Keyword>
	<Description>
		Sets the status of an objective that was defined in briefing.html.
	Status may be one of:
	"ACTIVE"
	"FAILED"
	"DONE"
	"HIDDEN"
	To refer to an objective that is named "OBJ_1", for example, use only the index number in this command (i.e. "1" objStatus "HIDDEN").
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/objStatus
	</WikiPage>
	<Syntax>
		String objStatus String
	</Syntax>
	<RawSyntax>
		objectivenumber objStatus status
	</RawSyntax>
	<Example>
		$Code$"1" objStatus "DONE"
	Marks the objective named "OBJ_1" as completed.$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		taskCustomData
	</Keyword>
	<Description>
		Returns custom data attached to the local task or an empty array if there are no custom data attached.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/taskCustomData
	</WikiPage>
	<Syntax>
		taskCustomData Task
	</Syntax>
	<RawSyntax>
		taskCustomData task
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		setWaypointType
	</Keyword>
	<Description>
		Changes the waypoint type.
	Type can be:
	"MOVE"
	"DESTROY"
	"GETIN"
	"SAD"
	"JOIN"
	"LEADER"
	"GETOUT"
	"CYCLE"
	"LOAD"
	"UNLOAD"
	"TR UNLOAD"
	"HOLD"
	"SENTRY"
	"GUARD" (for use with GUARDED BY trigger or createGuardedPoint )
	"TALK"
	"SCRIPTED"
	"SUPPORT"
	"GETIN NEAREST"
	"DISMISS"
	"LOITER" (new in Arma 3)
	"AND" (only for game logics)
	"OR" (only for game logics)
	More details at Waypoint types.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setWaypointType
	</WikiPage>
	<Syntax>
		Array setWaypointType String
	</Syntax>
	<RawSyntax>
		waypoint setWaypointType type
	</RawSyntax>
	<Example>
		$Code$[_grp, 2] setWaypointType "HOLD";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(07:44, 23 November 2007)
	For waypoint types description look at
	ArmA: Mission_Editor
	OFP: Mission_Editor
	Using Move With a game logic group will move the logic to the set location just like setpos. In the editor only AND and OR type of waypoints are available for GAME LOGICS but you can use CYCLE type as well in setWaypointType.
	$Code$_wp = group logic1 addWaypoint [ getPos player, 1];
	[ group logic1, 1] setWPPos getPos player ;
	[ group logic1, 1] setWaypointType "move";$/Code$
	</NextNote>
		(23:07, 18 October 2013 (CEST))
	To clear up any confusion regarding the syntax, follow this example where grp01 is the name of a group of AI units:
	$Code$_wp = grp01 addWaypoint [[25295,21919,85], 0];
	_wp setWaypointType "MOVE";
	_wp1 = grp01 addWaypoint [[25381,21882,70], 0];
	_wp1 setWaypointType "MOVE";
	_wp2 = grp01 addWaypoint [[ 25332,21782,78], 0];
	_wp2 setWaypointType "CYCLE"; //Use the variable (_wp2), not [grp01, 0]$/Code$
	</NextNote>
		(December 22, 2015)
	To spawn a helicopter with troops inside and make them land and unload.
	</NextNote>
		(May 6, 2017)
	To use the LAND function in a waypoint, you must set "A3\functions_f\waypoints\fn_wpLand.sqf" as the script for that waypoint.
	</NextNote>
		(May 30, 2017)
	In ArmA3 1.70.141838, if you add a MOVE waypoint very soon after a LOITER waypoint, ( assuming that the index of the MOVE waypoint is HIGHER than the index of the LOITER waypoint )
	then the LOITER waypoint will be considered as a MOVE waypoint.
	And, if you add another waypoint after ( for example ) more than 1 second after adding the LOITER waypoint,
	then the LOITER waypoint will NOT complete even when its condition has been met.
	There are two ways to quit an existing LOITER waypoint that was added more than about 1 second ago; use the setCurrentWaypoint command OR add a waypoint that has the same ID as the LOITER waypoint.
	The difference between those two methods is that the lather prevents the LOITER waypoint from executing its statement.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		removeAction
	</Keyword>
	<Description>
		Removes user added action with given id index. This only removes actions added with the addAction command. You cannot remove default game actions, such as reload.
	This command has local effect. The action will only be removed on the computer that executes the command.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/removeAction
	</WikiPage>
	<Syntax>
		Object removeAction Number
	</Syntax>
	<RawSyntax>
		unit removeAction index
	</RawSyntax>
	<Example>
		$Code$player removeAction 0;$/Code$
	</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setHorizonParallaxCoef
	</Keyword>
	<Description>
		Sets coef used to shift horizon position based on camera height (use 0 to disable shifting).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setHorizonParallaxCoef
	</WikiPage>
	<Syntax>
		setHorizonParallaxCoef Number
	</Syntax>
	<RawSyntax>
		setHorizonParallaxCoef coef
	</RawSyntax>
	<Example>
		$Code$setHorizonParallaxCoef 1;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setGusts
	</Keyword>
	<Description>
		Changes the gusts value smoothly during the given time (in seconds). A time of zero means there will be an immediate change. Value is 0 to 1.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setGusts
	</WikiPage>
	<Syntax>
		Number setGusts Number
	</Syntax>
	<RawSyntax>
		time setGusts value
	</RawSyntax>
	<Example>
		$Code$60 setGusts 0.75;$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		speaker
	</Keyword>
	<Description>
		Returns the speaker of a person.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/speaker
	</WikiPage>
	<Syntax>
		speaker Object
	</Syntax>
	<RawSyntax>
		speaker person
	</RawSyntax>
	<Example>
		$Code$speaker player$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		addToRemainsCollector
	</Keyword>
	<Description>
		Adds an array of vehicles/units to disposal manager for automatic wreck/body removal. The disposal manager follows wreck/body removal values set in description.ext
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/addToRemainsCollector
	</WikiPage>
	<Syntax>
		addToRemainsCollector Array
	</Syntax>
	<RawSyntax>
		addToRemainsCollector remains
	</RawSyntax>
	<Example>
		$Code$addToRemainsCollector [unit1, unit2, vehicle1];$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		commandArtilleryFire
	</Keyword>
	<Description>
		Orders a unit to reload defined magazine commence fire burst on the given position (via the radio).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/commandArtilleryFire
	</WikiPage>
	<Syntax>
		Object commandArtilleryFire Array
	</Syntax>
	<RawSyntax>
		unit commandArtilleryFire [position, type, rounds]
	</RawSyntax>
	<Example>
		$Code$mortar1 commandArtilleryFire [[3000, 120, 1000], "8Rnd_82mm_Mo_shells", 3];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		removeGoggles
	</Keyword>
	<Description>
		Removes goggles from unit (diver goggles for example). This command does not remove NVGoggles. Use unassignItem and removeItem or just unlinkItem for latter.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/removeGoggles
	</WikiPage>
	<Syntax>
		removeGoggles Object
	</Syntax>
	<RawSyntax>
		removeGoggles unit
	</RawSyntax>
	<Example>
		$Code$removeGoggles assaultDiver;$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		>=
	</Keyword>
	<Description>
		Checks if the left number is greater than or equal to the right one
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/a_greater%3D_b
	</WikiPage>
	<Syntax>
		Number >= Number
	</Syntax>
	<RawSyntax>
		</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		>>
	</Keyword>
	<Description>
		Returns subentry of config entry with given name. Identical to config/name.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/config_greater_greater_name
	</WikiPage>
	<Syntax>
		Config >> String
	</Syntax>
	<RawSyntax>
		</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Config
	</ReturnValue>

</NextListItem>

	<Keyword>
		move3DENCamera
	</Keyword>
	<Description>
		Moves Eden Editor camera to given position, with or without offset.
	Default camera offset: [0,-25,25]
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/move3DENCamera
	</WikiPage>
	<Syntax>
		move3DENCamera Array
	</Syntax>
	<RawSyntax>
		move3DENCamera [position,useOffset]
	</RawSyntax>
	<Example>
		$Code$move3DENCamera [ getPos player,true];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		currentMagazineDetail
	</Keyword>
	<Description>
		Returns description of vehicle's currently loaded magazine, its ammo count (current/default) and its id.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/currentMagazineDetail
	</WikiPage>
	<Syntax>
		currentMagazineDetail Object
	</Syntax>
	<RawSyntax>
		currentMagazineDetail vehicle
	</RawSyntax>
	<Example>
		$Code$_currentMagazineDetail = currentMagazineDetail player ; //"6.5mm 30Rnd STANAG Mag(30/30)[id:0]"$/Code$
	</NextExample>
		$Code$_currentMagazineDetail = currentMagazineDetail Mi_48; //"30mm HE Shells(250/250)[id:21]"$/Code$
	</NextExample>
		$Code$_cmd = currentMagazineDetail player ; //"9mm 16Rnd Mag(13/16)[id/cr:10000011/0]"
	_cmd splitString "([ ]/:)"; //["9mm","16Rnd","Mag","13","16","id","cr","10000011","0"]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		nameSound
	</Keyword>
	<Description>
		Returns the nameSound of a person.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/nameSound
	</WikiPage>
	<Syntax>
		nameSound Object
	</Syntax>
	<RawSyntax>
		nameSound person
	</RawSyntax>
	<Example>
		$Code$nameSound player$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		sunOrMoon
	</Keyword>
	<Description>
		Returns the sun to moon transition state in range 0...1
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/sunOrMoon
	</WikiPage>
	<Syntax>
		sunOrMoon
	</Syntax>
	<RawSyntax>
		sunOrMoon
	</RawSyntax>
	<Example>
		$Code$_transitionState = sunOrMoon ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(September 21, 2014)
	Note that at a 0.99 value, the twilight is still quite dark.
	Can be tested with :
	$Code$//test
	onEachFrame
	{
	systemchat format ["%1",sunOrMoon];
	};$/Code$
	</NextNote>
		(May 18, 2017)
	As of Arma 3 1.7, this returns either 1 for sun or 0 for moon. Nothing in between.
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		forceWeaponFire
	</Keyword>
	<Description>
		The unit will be forced to fire weapon from the given muzzle. The weapon will not fire if firemode passed as parameter is not supported by the given muzzle. The muzzle could belong to a vehicle weapon and unit in this case will be the unit operating this weapon. Doesnt't seem to work for units in FFV positions. Works on player. See also: BIS_fnc_fire
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/forceWeaponFire
	</WikiPage>
	<Syntax>
		Object forceWeaponFire Array
	</Syntax>
	<RawSyntax>
		unit forceWeaponFire [muzzle, firemode]
	</RawSyntax>
	<Example>
		$Code$_unit forceWeaponFire ["arifle_MX_F", "Single"];
	_unit forceWeaponFire ["hgun_ACPC2_F", "hgun_ACPC2_F"];
	_unit forceWeaponFire ["HandGrenadeMuzzle","HandGrenadeMuzzle"];
	_unit forceWeaponFire ["MiniGrenadeMuzzle","MiniGrenadeMuzzle"];
	_unit forceWeaponFire ["HandGrenade_Stone","HandGrenade_Stone"];
	_unit forceWeaponFire ["SmokeShellMuzzle","SmokeShellMuzzle"];
	_unit forceWeaponFire ["ChemlightGreenMuzzle","ChemlightGreenMuzzle"];
	_unit forceWeaponFire ["IRGrenade","IRGrenade"];
	_unit forceWeaponFire ["Laserdesignator","Laserdesignator"];$/Code$
	</NextExample>
		$Code$gunner blackfoot forceWeaponFire ["gatling_20mm", "close"];$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		(August 25, 2013)
	Here is a neat workaround trick for firemode change from a script:
	$Code$_weapon = currentWeapon player ;
	_ammo = player ammo _weapon;
	player setAmmo [_weapon, 0];
	player forceWeaponFire [_weapon, "FullAuto"];
	player setAmmo [_weapon, _ammo];$/Code$
	</NextNote>
		(April 14, 2014)
	(A3 1.16) forceWeaponFire is no longer only limited to units, but can remote aircrafts weapon firing as well. Passed source unit should be the correct one who controls the weapon, if passed mode is "this", use the weapon name instead:
	$Code$_weapon = ( weapons _veh) select 3;
	_mode = ( getArray ( configFile "cfgweapons" _weapon "modes")) select 0;
	if (_mode == "this") then {_mode = _weapon;};
	( driver _veh) forceWeaponFire [_weapon, _mode];
	//Force a CAS fire a rocket.
	$/Code$
	Currently this command is not available for land vehicle remote fire.
	</NextNote>
		(September 02, 2014)
	Similar to Killzone Kid's note, This fires the units current weapon in its current firemode.
	$Code$_unit forceWeaponFire [ weaponState _unit select 1, weaponState _unit select 2];$/Code$
	</NextNote>
		(January 3, 2015)
	fireAtTarget command can be used to force fire gunner weapon in vehicles. A gunner must be present. $Code$_veh fireAtTarget [ objNull ];$/Code$ Will fire one shot even if player is gunner.
	fire command can also be used to fire vehicle weapon, like smoke launcher for example: $Code$ vehicle player fire "SmokeLauncher";$/Code$ And if this doesn't work, it is possible to force fire via action $Code$tank action ["UseWeapon", tank, commander tank, 0];$/Code$
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlRemoveEventHandler
	</Keyword>
	<Description>
		Remove a given event handler from the given control.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlRemoveEventHandler
	</WikiPage>
	<Syntax>
		Control ctrlRemoveEventHandler Array
	</Syntax>
	<RawSyntax>
		control ctrlRemoveEventHandler [handler name,id]
	</RawSyntax>
	<Example>
		$Code$_map ctrlRemoveEventHandler ["Draw", _id];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		shownWarrant
	</Keyword>
	<Description>
		Check if player has ID card enabled. Obsolete command.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/shownWarrant
	</WikiPage>
	<Syntax>
		shownWarrant
	</Syntax>
	<RawSyntax>
		shownWarrant
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		moveTime
	</Keyword>
	<Description>
		Returns the current time of the most important RTM animation currently being played on the soldier.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/moveTime
	</WikiPage>
	<Syntax>
		moveTime Object
	</Syntax>
	<RawSyntax>
		moveTime soldier
	</RawSyntax>
	<Example>
		$Code$moveTime player ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		missionStart
	</Keyword>
	<Description>
		Returns date and time when mission started in format [year, month, day, hour, minute, second].
	Works only in multiplayer, in singleplayer all values are equal to zero → [0,0,0,0,0,0]
	NOTE : Because missionStart contains the time of the actual start of the mission, it might not be available in pre-init or init, but is guaranteed to be available in post-init when time 0.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/missionStart
	</WikiPage>
	<Syntax>
		missionStart
	</Syntax>
	<RawSyntax>
		missionStart
	</RawSyntax>
	<Example>
		$Code$setDate ( missionStart select [0,5]);$/Code$
	</NextExample>
		$Code$// Set real date:
	//postInit = 1;
	if ( isServer ) then {
	waitUntil { time 0};
	setDate ( missionStart select [0,5]);
	};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(September 25, 2014)
	Returns array with date indicating when the mission has started (after briefing screen). In OFP this command is bugged – it works only in multiplayer on a player‐hosted machine and on a client. In single player it would return [0,0,0,0,0,0] and on a dedicated server – [1970,1,1,0,0,0]. In CWA this command is fixed.
	</NextNote>
		(December 30, 2014)
	In arma 3 this command returns [0,0,0,0,0,0] in SP, [1970,1,1,0,0,0] on dedicated server and [1970,1,1,0,0,0] initially and then server real time on local headless client. On player clients it shows client's local date and time. Since Arma 3 v1.49 the dedicated server also returns correct mission start date.
	</NextNote>
		(August 27, 2015)
	ArmA 3 1.50: This command now returns the correct values on dedicated server.
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		disableMapIndicators
	</Keyword>
	<Description>
		Command allows suppressing visualization of FRIENDLY, ENEMY, MINES and/or PING map indicators from difficulty setting EXTENDED MAP CONTENT.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/disableMapIndicators
	</WikiPage>
	<Syntax>
		disableMapIndicators Array
	</Syntax>
	<RawSyntax>
		disableMapIndicators [disableFriendly,disableEnemy,disableMines,disablePing]
	</RawSyntax>
	<Example>
		$Code$// Disable visualization of friendly and enemy units:
	disableMapIndicators [true,true,false,false];$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		sideRadio
	</Keyword>
	<Description>
		Sends the audio message to the side radio channel. Must have assigned "ItemRadio" to send or receive the transmission. The message is defined in CfgRadio in the description.ext file or config radio protocol. The transmission will play only on the PC where command was executed. If you need the transmission to play on all computers, you have to execute it globally (see remoteExec ).
	Note: When transmitting unit gets killed, transmission will be interrupted, however when receiving unit gets killed, the transmission continues to play.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/sideRadio
	</WikiPage>
	<Syntax>
		Object sideRadio String
	</NextSyntax>
		Array sideRadio String
	</Syntax>
	<RawSyntax>
		unit sideRadio radioName
	</NextRawSyntax>
		[side, identity] sideRadio radioName
	</RawSyntax>
	<Example>
		$Code$_soldierOne sideRadio "messageOne";$/Code$
	</NextExample>
		$Code$player sideRadio configName selectRandom ("true" configClasses ( configFile "CfgRadio"));$/Code$
	</NextExample>
		$Code$[ west, "Base"] sideRadio configName selectRandom ("true" configClasses ( configFile "CfgRadio"));$/Code$
	</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
		(03:47, 12 February 2007)
	In OFP v1.96, sideRadio messages can be sent from 2 abstract sources: "Papa_Bear" and "Base FireFly". Use sideRadio on an array in the form [SIDE,"base"],[SIDE,"HQ"],[SIDE,"Papa_bear"] or [SIDE,"airbase"], where SIDE is the side broadcasting. "HQ", "base" and "Papa_bear" seem to be the same object. The callsign strings can be re-defined using a stringTable.csv file, using STR_CFG_PAPABEAR and STR_CFG_FIREFLYBASE. Example : [EAST,"base"] sideRadio "returnToBase".
	</NextNote>
		(December 3, 2016)
	To transmit user custom sounds (see Multiplayer_Custom_Sounds_Tutorial ), prefix the full filename including file extension with #. For example if there is a custom user sound file called MySound.ogg, to play it on the radio use:
	$Code$ player sideRadio "#MySound.ogg";$/Code$
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		vehicleReportRemoteTargets
	</Keyword>
	<Description>
		Gets whether the vehicle shares acquired targets via datalink with the Side center.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/vehicleReportRemoteTargets
	</WikiPage>
	<Syntax>
		vehicleReportRemoteTargets Object
	</Syntax>
	<RawSyntax>
		vehicleReportRemoteTargets vehicle
	</RawSyntax>
	<Example>
		$Code$vehicleReportRemoteTargets ( vehicle player );$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		deleteVehicle
	</Keyword>
	<Description>
		Deletes an object. Only units inserted in the mission editor and units created during the game's progress can be deleted by this command. Island objects and player units cannot be removed. Deleting a vehicle, which is still being accessed by a running script, can result in a CTD.
	NOTE : Actual object deletion, when object becomes objNull, happens on the next frame after command execution, but there are some object modifications that happen immediately. For example if the object is unit in a group, it immediately becomes groupless isNull group _unit; //true
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/deleteVehicle
	</WikiPage>
	<Syntax>
		deleteVehicle Object
	</Syntax>
	<RawSyntax>
		deleteVehicle object
	</RawSyntax>
	<Example>
		$Code$deleteVehicle _house1;$/Code$
	</NextExample>
		$Code${
	_x action ["Eject", car];
	} forEach crew car;
	deleteVehicle car;$/Code$
	</NextExample>
		$Code$// Objects such as
	//test_EmptyObjectForBubbles
	//test_EmptyObjectForFireBig
	//test_EmptyObjectForSmoke
	//create additional emitters that needs to be deleted first before deleting the object itself:
	///--- function to delete test object (MP compatible)
	fnc_deleteTestObj = {
	_this addMPEventHandler ["MPKilled", {
	_this = _this select 0;
	{
	deleteVehicle _x;
	} forEach (_this getVariable ["effects", []]);
	if ( isServer ) then {
	deleteVehicle _this;
	};
	}];
	_this setDamage 1;
	};
	///--- example
	[] spawn {
	_fire = "test_EmptyObjectForFireBig" createVehicle position player ;
	sleep 5;
	_fire call fnc_deleteTestObj;
	};$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		shownCuratorCompass
	</Keyword>
	<Description>
		Returns true if compass is shown.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/shownCuratorCompass
	</WikiPage>
	<Syntax>
		shownCuratorCompass
	</Syntax>
	<RawSyntax>
		shownCuratorCompass
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		allCurators
	</Keyword>
	<Description>
		Returns list of all curators.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/allCurators
	</WikiPage>
	<Syntax>
		allCurators
	</Syntax>
	<RawSyntax>
		allCurators
	</RawSyntax>
	<Example>
		$Code$_myVariable = allCurators;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(June 20, 2015)
	This returns all curator logic units, not the units assigned to the logic.
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		suppressFor
	</Keyword>
	<Description>
		Force suppressive fire from the unit.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/suppressFor
	</WikiPage>
	<Syntax>
		Object suppressFor Number
	</Syntax>
	<RawSyntax>
		unit suppressFor duration
	</RawSyntax>
	<Example>
		$Code$_soldier1 suppressFor 10 
	// Will force soldier1 to do suppressive fire to known enemies during 10 seconds$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		isFlashlightOn
	</Keyword>
	<Description>
		Returns true if there is a linked and enabled flashlight on a given weapon.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isFlashlightOn
	</WikiPage>
	<Syntax>
		Object isFlashlightOn String
	</Syntax>
	<RawSyntax>
		unit isFlashlightOn weapon
	</RawSyntax>
	<Example>
		$Code$player isFlashlightOn ( currentWeapon player );$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		showHUD
	</Keyword>
	<Description>
		Enable / disable showing of HUD. Defines visibility of weapon crosshair and any informational tags that appear when pointing the weapon at an object as well as availability of the default action menu. Unfortunately, it also hides icons drawn with drawIcon3D.
	Appearance of HUD can also be controlled with showHUD param in description.ext. NOTE: As of Arma 3 v1.49.131879 there is a showHUD[] array param, that is identical in format to the extended showHUD command. When showHUD[] array param is present in description.ext, it will disable showHUD command entirely, allowing mission makers to permanently alter visibility of some HUD elements.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/showHUD
	</WikiPage>
	<Syntax>
		showHUD Boolean
	</NextSyntax>
		showHUD Array
	</Syntax>
	<RawSyntax>
		showHUD enable
	</NextRawSyntax>
		showHUD [hud, info, radar, compass, direction, menu, group, cursors, panels]
	</RawSyntax>
	<Example>
		$Code$showHUD false ;$/Code$
	</NextExample>
		$Code$// Hide vehicle radar and compass:
	showHUD [ true, true, false, false, true, true, true, true ];$/Code$
	</NextExample>
		$Code$// Check if HUD visibility is hardcoded in mission config and showHUD command is overriden:
	_disabledShowHUD = isArray ( missionConfigFile "showHUD");$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
		(August 17, 2015)
	Last param, "cursors" controls visibility of the action menu as well as weapon cursors. However if 1st param "hud" hides and disables action menu, last param "cursors" only hides it. So you get invisible action menu that is fully operational. inGameUISetEventHandler will still fire on interaction, giving the information about selected item on the action menu even if you cannot see it. Unfortunately it also hides icons drawn with drawIcon3D.
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		showCompass
	</Keyword>
	<Description>
		Shows or hides the compass on the map screen, if enabled for the mission and you possess the item. (default true )
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/showCompass
	</WikiPage>
	<Syntax>
		showCompass Boolean
	</Syntax>
	<RawSyntax>
		showCompass show
	</RawSyntax>
	<Example>
		$Code$showCompass false ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(16 Aug, 2009)
	In Arma 2, the Compass is now an inventory item. Class path is CfgWeapons- ItemCompass. Use the commands addWeapon and removeWeapon to add or remove it from a unit's inventory. (example: player addweapon "ItemCompass")
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setFeatureType
	</Keyword>
	<Description>
		Enable/disable object as a feature/landmark. Possible feature types:
	0 - Feature disabled
	1 - Object is always visible within object view distance
	2 - Object is always visible within terrain view distance
	The limit is 500 map/static objects and 200 dynamic objects including config features and auto features (flying helicopters, airplanes). When limit is reached, function returns false.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setFeatureType
	</WikiPage>
	<Syntax>
		Object setFeatureType Number
	</Syntax>
	<RawSyntax>
		object setFeatureType type
	</RawSyntax>
	<Example>
		$Code$// Set a building to be always rendered:
	building setFeatureType 2;$/Code$
	</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
		(October 10, 2017)
	For world objects, command effect persists after mission restart. Map must be reloaded to automatically revert setting.
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		setFace
	</Keyword>
	<Description>
		Set person's face. For a list of available faces, check Category:CfgIdentities.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setFace
	</WikiPage>
	<Syntax>
		Object setFace String
	</Syntax>
	<RawSyntax>
		person setFace face
	</RawSyntax>
	<Example>
		$Code$soldier1 setFace "WhiteHead_02"$/Code$
	</NextExample>
		$Code$// Set persistent face for a unit in MP
	if ( isServer ) then {[_unit, "AsianHead_A3_02"] remoteExec ["setFace", 0, _unit]};$/Code$
	</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
		(September 19, 2013)
	For ArmA 3 face can be any of the following:
	AfricanHead_01
	AfricanHead_02
	AfricanHead_03
	AsianHead_A3_01
	AsianHead_A3_02
	AsianHead_A3_03
	GreekHead_A3_01
	GreekHead_A3_02
	GreekHead_A3_03
	GreekHead_A3_04
	GreekHead_A3_05
	GreekHead_A3_06
	GreekHead_A3_07
	GreekHead_A3_08
	GreekHead_A3_09
	PersianHead_A3_01
	PersianHead_A3_02
	PersianHead_A3_03
	NATOHead_01
	WhiteHead_02
	WhiteHead_03
	WhiteHead_04
	WhiteHead_05
	WhiteHead_06
	WhiteHead_07
	WhiteHead_08
	WhiteHead_09
	WhiteHead_10
	WhiteHead_11
	WhiteHead_12
	WhiteHead_13
	WhiteHead_14
	WhiteHead_15
	</NextNote>
		(unknown)
	For ArmA 2 the face value is a string from Face01 to Face107. Camo faces are available as well, 6 per face. For example the full set of class names for face value 77 would be:
	Face77, Face77_camo1, Face77_camo2, Face77_camo3, Face77_camo4, Face77_camo5 and Face77_camo6
	All Armed Assault 1.08 faces plus tutorial,
	Online gallery of 1.08 Armed Assault faces
	a full list of Arma 2 faces
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		resources
	</Keyword>
	<Description>
		Returns the resources of a team member. Results are local to the PC on which command was executed.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/resources
	</WikiPage>
	<Syntax>
		resources Team_Member
	</Syntax>
	<RawSyntax>
		resources member
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		windDir
	</Keyword>
	<Description>
		Returns the current wind azimuth.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/windDir
	</WikiPage>
	<Syntax>
		windDir
	</Syntax>
	<RawSyntax>
		windDir
	</RawSyntax>
	<Example>
		$Code$if ( windDir 45 || windDir 315) then {
	hint "I feel a northern wind";
	};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		locationPosition
	</Keyword>
	<Description>
		Returns the position of a location. If the location is attached to an object, that object's position is returned.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/locationPosition
	</WikiPage>
	<Syntax>
		locationPosition Location
	</Syntax>
	<RawSyntax>
		locationPosition location
	</RawSyntax>
	<Example>
		$Code$_locationPos = locationPosition myLocation;$/Code$
	</NextExample>
		$Code$_location = nearestLocation [ getPos player, "nameCity"];
	_locationPos = locationPosition _location;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(October 24, 2015)
	locationPosition returns a position that is altitude zero ASL.
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		closeDialog
	</Keyword>
	<Description>
		Close the currently active user dialog with exit code. Most common exit codes are:
	$Code$#define IDC_OK 1 //emulate "Ok" button$/Code$
	$Code$#define IDC_CANCEL 2 //emulate "Cancel" button$/Code$
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/closeDialog
	</WikiPage>
	<Syntax>
		closeDialog Number
	</Syntax>
	<RawSyntax>
		closeDialog exitcode
	</RawSyntax>
	<Example>
		$Code$closeDialog 2;$/Code$
	</NextExample>
		$Code$#define IDC_CANCEL 2
	closeDialog IDC_CANCEL;$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		lockedCargo
	</Keyword>
	<Description>
		Check whether cargo position of the vehicle is locked.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lockedCargo
	</WikiPage>
	<Syntax>
		Object lockedCargo Number
	</Syntax>
	<RawSyntax>
		vehicle lockedCargo cargoIndex
	</RawSyntax>
	<Example>
		$Code$_result = vehicleName lockedCargo 0;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(May 4, 2016)
	For some vehicles, the command returns nothing if the cargo index is invalid (i.e. -1)
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		verifySignature
	</Keyword>
	<Description>
		Check if file is signed by any key present in game keys folders. Note: On client, it does not check against the keys accepted by server.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/verifySignature
	</WikiPage>
	<Syntax>
		verifySignature String
	</Syntax>
	<RawSyntax>
		verifySignature filename
	</RawSyntax>
	<Example>
		$Code$verifySignature "@MyAddon\Addons\SomeAddon.pbo";$/Code$
	</NextExample>
		$Code$verifySignature "@MyAddon\Somefnc.dll";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		round
	</Keyword>
	<Description>
		Rounds up or down to the closest integer.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/round
	</WikiPage>
	<Syntax>
		round Number
	</Syntax>
	<RawSyntax>
		round x
	</RawSyntax>
	<Example>
		$Code$_val= round 5.25, result is 5$/Code$
	</NextExample>
		$Code$_val= round 5.55, result is 6$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(February 23, 2018)
	If you want to round to a specific place past the decimal point, use toFixed and parseNumber together. For example:
	$Code$ parseNumber (3.16666 toFixed 1); // 3.2$/Code$
	</NextNote>
		(April 3, 2018)
	Before toFixed ( round (( getDir player ) * 100)) / 100
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		createSimpleObject
	</Keyword>
	<Description>
		Create object with given shape defined as path to.p3d model. Supported LODs include Geometry, Fire Geometry, Roadway, View Geometry and ShadowVolume. Supported features include collision, texturing, animation, penetration, AI spotting occlusion, and surface specific sounds (like footsteps). Unsupported features include PhysX, damage, AI pathfinding (causes walking through walls), and built in lights.
	Given the simulation limitations, global decorative objects can be created with very little network traffic. Objects that could be exclusively created with this command are: trees, bushes, rocks, bridges, roads, vehicle wrecks, custom models in mission, and other objects without a class in config. The height of the placement position might need to be adjusted experimentally. Some of the model examples could be found here: createSimpleObject/objects
	Guide: Arma 3 Simple Objects
	One cannot attach actions to a simple object via addAction.
	NOTES :
	Objects created with Syntax 1 cannot be textured. Some objects may also have inverted default direction.
	Objects created with Syntax 2 can be textured. The default direction should match the direction of the object if it was created with createVehicle.
	Since Arma 3 v1.67 simple objects support setVariable and getVariable
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/createSimpleObject
	</WikiPage>
	<Syntax>
		createSimpleObject Array
	</Syntax>
	<RawSyntax>
		createSimpleObject [shapeName, positionWorld]
	</NextRawSyntax>
		createSimpleObject [className, positionASL]
	</RawSyntax>
	<Example>
		$Code$_pos = player getRelPos [10, 0];
	_tank = createSimpleObject ["a3\armor_f_beta\apc_tracked_01\apc_tracked_01_rcws_f.p3d", _pos];
	_tank setPos (_pos vectorAdd ( getPosWorld _tank vectorDiff (_tank modelToWorld [0,0,0])));
	_tank hideSelection ["zasleh", true ];
	_tank hideSelection ["zasleh2", true ];
	_tank hideSelection ["clan", true ];
	_tank animate ["Wheel_podkoloL3", 0.5, true ];
	_tank animate ["Wheel_podkoloL6", 0.5, true ];$/Code$
	</NextExample>
		$Code$_pos = player getRelPos [10, 0];
	_tank = createSimpleObject ["B_APC_Tracked_01_CRV_F", AGLtoASL _pos];
	_tank setObjectTexture [0, "#(rgb,8,8,3)color(0,1,0,0.01)"];
	_tank hideSelection ["zasleh", true ];
	_tank hideSelection ["zasleh2", true ];
	_tank hideSelection ["clan", true ];
	_tank animate ["Wheel_podkoloL3", 0.5, true ];
	_tank animate ["Wheel_podkoloL6", 0.5, true ];$/Code$
	</Example>
	<Locality>
		undefined / global
	</Locality>
	<Note>
		(April 18, 2016)
	The easiest way to correctly place simple object is to create normal object of the same shape from class (if possible), then copy getPosWorld, vectorDir and vectorUp from it. Then create the simple object and apply copied values to it, this will position simple object exactly as normal object was positioned:
	$Code$_heli = "B_Heli_Light_01_F" createVehicleLocal ( player getRelPos [10, 0]);
	_position = getPosWorld _heli;
	_vectorDirUp = [ vectorDir _heli, vectorUp _heli];
	_model = getModelInfo _heli select 1;
	deleteVehicle _heli;
	_simpleHeli = createSimpleObject [_model, _position];
	_simpleHeli setVectorDirAndUp _vectorDirUp;$/Code$
	</NextNote>
		(April 28, 2016)
	Models from within the mission file/folder can be created, but full system path is needed. Use:
	$Code$( str missionConfigFile select [0, count str missionConfigFile - 15]) + "myModel.p3d"
	//mission folder path code from: http://killzonekid.com/arma-scripting-tutorials-mission-root/ $/Code$
	</NextNote>
		(May 11, 2016)
	simulationEnabled returns false.
	</NextNote>
		(September 5, 2016)
	There is a section in function library dedicated to simple object creation and interaction. It's purpose is to simplify the operations:
	BIS_fnc_createSimpleObject
	creates simple object according to the supplied data
	you can supply p3d path, class name or data you get from scanning a non-simple object
	BIS_fnc_simpleObjectData
	gathers and returns data about the non-simple object
	data can be then used to create simple object
	BIS_fnc_replaceWithSimpleObject
	replaces non-simple object with simple object on the scene
	do not use it in large scale in MP missions as it is not network efficient
	BIS_fnc_adjustSimpleObject
	adjusts simple object to looks as close to the non-simple object as possible
	function is internally called from the 'bis_fnc_createSimpleObject', you won't probably need to call this function directly
	Check the function headers for more info about the input parameters and possibilities.
	</Note>
	<ReturnValue>
		Object
	</ReturnValue>

</NextListItem>

	<Keyword>
		queryWeaponPool
	</Keyword>
	<Description>
		Return number of weapons of type name in weapon pool (used in campaign to transfer weapons into next mission).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/queryWeaponPool
	</WikiPage>
	<Syntax>
		queryWeaponPool String
	</Syntax>
	<RawSyntax>
		queryWeaponPool name
	</RawSyntax>
	<Example>
		$Code$_num=queryWeaponPool "M16"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		detach
	</Keyword>
	<Description>
		Detaches previously attached with attachTo object.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/detach
	</WikiPage>
	<Syntax>
		detach Object
	</Syntax>
	<RawSyntax>
		detach object
	</RawSyntax>
	<Example>
		$Code$obj1 attachTo [player];
	detach obj1;$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		fleeing
	</Keyword>
	<Description>
		Checks if a unit is fleeing.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/fleeing
	</WikiPage>
	<Syntax>
		fleeing Object
	</Syntax>
	<RawSyntax>
		fleeing unitName
	</RawSyntax>
	<Example>
		$Code$? (fleeing _east_unit) : player sideChat "We have won!"$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		tvSortByValue
	</Keyword>
	<Description>
		Sorts children of given item by tvValue from highest to lowest by default. IDC means id of parent Tree View.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/tvSortByValue
	</WikiPage>
	<Syntax>
		Control tvSortByValue Array
	</NextSyntax>
		tvSortByValue Array
	</Syntax>
	<RawSyntax>
		control tvSortByValue [path, reversed]
	</NextRawSyntax>
		tvSortByValue [idc, path, reversed]
	</RawSyntax>
	<Example>
		$Code$control tvSortByValue [[0], false ];$/Code$
	</NextExample>
		$Code$tvSortByValue [102, [0], false ];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		doStop
	</Keyword>
	<Description>
		Order the given unit(s) to stop (without radio messages). The units stopped in this way will leave the groups formation. It will prevent them from moving around with their group (or formation leader), while still being able to turn around and even move to a new position if they see fit. The units will still respond to orders from their group leader (like engage, rearm, board a vehicle), but all of their actions will be separate from the group formation. To resume group default behaviour, use doFollow command. For example: units _group doFollow leader _group;
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/doStop
	</WikiPage>
	<Syntax>
		doStop Object/Array
	</Syntax>
	<RawSyntax>
		doStop unit
	</RawSyntax>
	<Example>
		$Code$doStop _soldier1;$/Code$
	</NextExample>
		$Code$doStop [_soldier1, _soldier2];$/Code$
	</NextExample>
		$Code$doStop ( units player );$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
		(August 3, 2006)
	Notes from before the conversion:
	This command will make the unit stop where he is until the unit's group engages the enemy. At that time, the unit will move and fight the enemy. One good use for this is to place a bunch of units in the same group around a campfire or in some other place "for looks", and make them sit down or have their weapon on their back. When the enemy is spotted, they will get up and attack. Note that you cannot do something like place somebody behind sandbags and keep him there during a fight with this command. For that you will need disableAI "move".
	</NextNote>
		In ArmA 1.14, this command will not stop a unit that has been given a move order by selecting the unit, then clicking on the in game map (or ground).
	</NextNote>
		doStop'ed units WILL return to formation if their leader's behaviour isn't set to "COMBAT". The squad leader will also order everyone to return to formation if there are no enemies nearby in a set period of time, overwriting the doStop command. doStop can be best used to simply stop the unit from doing whatever he is currently doing without radio messages.
	</NextNote>
		(December 23, 2016)
	When a unit reaches position given with doMove, unitReady becomes true. If doStop command is not executed, unit will start wondering on its own soon after, especially if unit is under fire. doStop will keep unit at the given position, but watch out for unitReady as it will become false since unit is holding position indefinitely.
	</NextNote>
		(December 27, 2016)
	Although it is possible to resume group default behaviour by joining units into own group like this units _group joinSilent _group there is a risk that the leader will change. Instead use doFollow command as explained in the description.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		curatorCameraAreaCeiling
	</Keyword>
	<Description>
		Returns ceiling height for curator camera.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/curatorCameraAreaCeiling
	</WikiPage>
	<Syntax>
		curatorCameraAreaCeiling Object
	</Syntax>
	<RawSyntax>
		curatorCameraAreaCeiling curatorObj
	</RawSyntax>
	<Example>
		$Code$curatorCameraAreCeiling BIS_curatorUnit;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		addHandgunItem
	</Keyword>
	<Description>
		Adds weapon item to the weapon cargo space. This is used for infantry weapons.
	As of Arma 3 DEV 1.37, this command also supports weapon magazines.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/addHandgunItem
	</WikiPage>
	<Syntax>
		Object addHandgunItem String
	</Syntax>
	<RawSyntax>
		unit addHandgunItem item
	</RawSyntax>
	<Example>
		$Code$player addHandgunItem "muzzle_snds_L";$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		addGoggles
	</Keyword>
	<Description>
		Create a new item and try to link it into goggles slot. This command doesn't add NVGoggles. Use addItem and assignItem or just linkItem for latter.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/addGoggles
	</WikiPage>
	<Syntax>
		Object addGoggles String
	</Syntax>
	<RawSyntax>
		unit addGoggles type
	</RawSyntax>
	<Example>
		$Code$player addGoggles "G_Tactical_Clear";$/Code$
	</NextExample>
		$Code$diver addGoggles "G_Diving";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		menuSetCheck
	</Keyword>
	<Description>
		Sets item on given path to be checked or not.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/menuSetCheck
	</WikiPage>
	<Syntax>
		menuSetCheck Array
	</Syntax>
	<RawSyntax>
		menuSetCheck [idc, path, checkedl]
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setPosASL2
	</Keyword>
	<Description>
		Sets the object position. The pos array uses the PositionASL format. The version of the command does not offset based on object center.
	Appears to be broken
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setPosASL2
	</WikiPage>
	<Syntax>
		Object setPosASL2 Array
	</Syntax>
	<RawSyntax>
		obj setPosASL2 pos
	</RawSyntax>
	<Example>
		$Code$player setPosASL2 [ getPosASL player select 0, ( getPosASL player select 1) + 10, getPosASL player select 2]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(21 Aug, 2013)
	This command appears to do nothing in both Arma 2 and Arma 3. Tested on 21-08-2013.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		worldToScreen
	</Keyword>
	<Description>
		Converts position in world space into screen (UI) space. If a specified position is not within the current screen view, an empty array is returned.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/worldToScreen
	</WikiPage>
	<Syntax>
		worldToScreen Array
	</Syntax>
	<RawSyntax>
		worldToScreen position
	</RawSyntax>
	<Example>
		$Code$_screenPos = worldToScreen getPos soldier1;$/Code$
	</NextExample>
		$Code$_screenPos = worldToScreen ( player modelToWorld [0,10,0]);$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(august 19th, 2012)
	please take safezones in consideration : the returned result can be out of the [0,0]..[1,1] range and can also be a filled array even if the position is not displayed on your monitor - this command thinks of triplescreens configurations as well. [] returned = not rendered
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		taskResult
	</Keyword>
	<Description>
		Send a result of the task to the task sender.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/taskResult
	</WikiPage>
	<Syntax>
		taskResult Task
	</Syntax>
	<RawSyntax>
		taskResult task
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		getCursorObjectParams
	</Keyword>
	<Description>
		Returns object and named selections under cursor and distance to object's surface (to the point cursor points at). If object surface is further away than 50 meters, selections are always an empty array and distance is 1e10 (10^10).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getCursorObjectParams
	</WikiPage>
	<Syntax>
		getCursorObjectParams
	</Syntax>
	<RawSyntax>
		getCursorObjectParams
	</RawSyntax>
	<Example>
		$Code$hint str getCursorObjectParams ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		score
	</Keyword>
	<Description>
		Returns the person's score in MP.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/score
	</WikiPage>
	<Syntax>
		score Object
	</Syntax>
	<RawSyntax>
		score unit
	</RawSyntax>
	<Example>
		$Code$_pScore = score player ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		rad
	</Keyword>
	<Description>
		Convert x from Degrees to Radians. 360 degrees is equal to 2 multiplied with pi.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/rad
	</WikiPage>
	<Syntax>
		rad Number
	</Syntax>
	<RawSyntax>
		rad x
	</RawSyntax>
	<Example>
		$Code$_radians = rad 180
	// Result is 3.1415 (eg pi$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		enablePersonTurret
	</Keyword>
	<Description>
		Enables or disables firing from a vehicle cargo position. To get the turret path use assignedVehicleRole or getCargoIndex command.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/enablePersonTurret
	</WikiPage>
	<Syntax>
		Object enablePersonTurret Array
	</Syntax>
	<RawSyntax>
		vehicle enablePersonTurret [turretPath, enable]
	</RawSyntax>
	<Example>
		$Code$heli enablePersonTurret [[1], true ];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		removeAllCuratorEditingAreas
	</Keyword>
	<Description>
		Delete all curator edit areas.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/removeAllCuratorEditingAreas
	</WikiPage>
	<Syntax>
		removeAllCuratorEditingAreas Object
	</Syntax>
	<RawSyntax>
		removeAllCuratorEditingAreas curatorObj
	</RawSyntax>
	<Example>
		$Code$removeAllCuratorEditingAreas myCurator;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		assignedCargo
	</Keyword>
	<Description>
		Returns the list of soldiers assigned to the given vehicle as a cargo.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/assignedCargo
	</WikiPage>
	<Syntax>
		assignedCargo Object
	</Syntax>
	<RawSyntax>
		assignedCargo vehicle
	</RawSyntax>
	<Example>
		$Code$_list = assignedCargo _vehicleName$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		isDedicated
	</Keyword>
	<Description>
		Return true if the machine (executing the command) is a dedicated multiplayer server. In single player returns false.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isDedicated
	</WikiPage>
	<Syntax>
		isDedicated
	</Syntax>
	<RawSyntax>
		isDedicated
	</RawSyntax>
	<Example>
		$Code$if ( isDedicated ) then { diag_log "Dedicated Server on the run !";};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(December 21, 2014)
	$Code$ if ( isDedicated ) then {
	//run on dedicated server only
	};
	if ( isServer ) then {
	//run on dedicated server or player host
	};
	if ( hasInterface ) then {
	//run on all player clients incl. player host
	};
	if (! isDedicated ) then {
	//run on all player clients incl. player host and headless clients
	};
	if (! isServer ) then {
	//run on all player clients incl. headless clients but not player host
	};
	if (! hasInterface ) then {
	//run on headless clients and dedicated server
	};
	if (! hasInterface && ! isDedicated ) then {
	//run on headless clients only
	};$/Code$
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		deleteResources
	</Keyword>
	<Description>
		Delete (unregister) resources of the team member. Resources are deleted in the order they were added. Case insensitive.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/deleteResources
	</WikiPage>
	<Syntax>
		Team_Member deleteResources Array
	</Syntax>
	<RawSyntax>
		teamMember deleteResources [resource1, resource2,]
	</RawSyntax>
	<Example>
		$Code$teamMember _agent deleteResources ["Legs"];$/Code$
	</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		nearestObject
	</Keyword>
	<Description>
		Returns the nearest object of given type to given position within a sphere. Hardcoded radius is 50 meters. Unlike with nearestObjects, where distance is measured in 2D space, nearestObject will be closest object in 3D space.
	If object class type is used, any object derived from the type is found as well (In OFP however, only objects with exactly the type given are found). If object ID passed as an argument (as in example 2) the search range is unlimited.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/nearestObject
	</WikiPage>
	<Syntax>
		nearestObject Array
	</NextSyntax>
		nearestObject Position3D/Position2D/Object
	</NextSyntax>
		Position3D/Position2D nearestObject String
	</NextSyntax>
		Position3D/Position2D nearestObject Number
	</Syntax>
	<RawSyntax>
		nearestObject [position, type]
	</NextRawSyntax>
		nearestObject position
	</NextRawSyntax>
		position nearestObject type
	</NextRawSyntax>
		position nearestObject id
	</RawSyntax>
	<Example>
		$Code$_nObject = nearestObject [2345,6789];
	_nObject = nearestObject [ player, "StreetLamp"];$/Code$
	</NextExample>
		$Code$// Return the object with ID 123456:
	_nObject = [0,0,0] nearestObject 123456;$/Code$
	</NextExample>
		$Code$_nObject = getPos player nearestObject "StreetLamp";$/Code$
	</NextExample>
		$Code$// Return the nearest object with ( typeOf _nObject == "#XXXX") - #mark, #slop, etc. Unlimited search range:
	_nObject = _position nearestObject -1; 
	// Return the nearest object with ( typeOf _nObject != ""). Search range is 50m:_nObject = nearestObject _position;$/Code$
	</NextExample>
		$Code$// (See also allMissionObjects ):
	_blood = nearestObject [ player, "#slop"];
	_step = nearestObject [ player, "#mark"];
	_track = nearestObject [ player, "#track"];
	_crater = nearestObject [ player, "#crater"];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Object - Object - Object - Object
	</ReturnValue>

</NextListItem>

	<Keyword>
		moveObjectToEnd
	</Keyword>
	<Description>
		Shifts an editor object to the end of the objects array. This means,that the object will be drawn last (after all other objects).
	i
	Some Old Editor Command
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/moveObjectToEnd
	</WikiPage>
	<Syntax>
		Control moveObjectToEnd String
	</Syntax>
	<RawSyntax>
		map moveObjectToEnd object
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		missionDifficulty
	</Keyword>
	<Description>
		Return difficulty that has been forced for this mission, returns -1 if difficulty is not forced and it's used one from player's options.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/missionDifficulty
	</WikiPage>
	<Syntax>
		missionDifficulty
	</Syntax>
	<RawSyntax>
		missionDifficulty
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		isAutoHoverOn
	</Keyword>
	<Description>
		Return true if vehicle has enabled auto hover. (always returns false if the vehicle can't set auto hover)
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isAutoHoverOn
	</WikiPage>
	<Syntax>
		isAutoHoverOn Object
	</Syntax>
	<RawSyntax>
		isAutoHoverOn vehicle
	</RawSyntax>
	<Example>
		$Code$status = isAutoHoverOn vehicle player;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlSetAutoScrollRewind
	</Keyword>
	<Description>
		Defines if scroll should rewind when auto-scroll reach end. Setter for ctrlAutoScrollRewind.
	Autorscroll is available for CT_LISTBOX and CT_CONTROLS_GROUP types of controls only. Autoscroll will wait ctrlAutoScrollDelay seconds (must be 0) and then will scroll the scroll bar down to the bottom. ctrlAutoScrollSpeed defines the speed with which scrollbar is scrolled. If ctrlAutoScrollRewind is true, the control will fade out, immediately rewind to the top, then fade in, wait ctrlAutoScrollDelay seconds and then repeat the scrolling in a loop. If user focuses on the control, autoscrolling is interrupted.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlSetAutoScrollRewind
	</WikiPage>
	<Syntax>
		Control ctrlSetAutoScrollRewind Boolean
	</Syntax>
	<RawSyntax>
		control ctrlSetAutoScrollRewind set
	</RawSyntax>
	<Example>
		$Code$_ctrlGroup ctrlSetAutoScrollRewind true ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		synchronizeWaypoint
	</Keyword>
	<Description>
		Synchronizes the waypoint with other waypoints. Each waypoint is given as an array [group, index].
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/synchronizeWaypoint
	</WikiPage>
	<Syntax>
		Array synchronizeWaypoint Array
	</Syntax>
	<RawSyntax>
		waypoint synchronizeWaypoint [waypoint1, waypoint2,]
	</RawSyntax>
	<Example>
		$Code$[_group1, 2] synchronizeWaypoint [ [_group2, 3] ];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(March 31, 2008)
	To 'unsynchronize' a waypoint use: Waypoint synchronizeWaypoint []
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setPosWorld
	</Keyword>
	<Description>
		Sets position of an object based on PositionWorld, which is PositionASL of the model centre [0,0,0].
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setPosWorld
	</WikiPage>
	<Syntax>
		Object setPosWorld PositionWorld
	</Syntax>
	<RawSyntax>
		object setPosWorld position
	</RawSyntax>
	<Example>
		$Code$_obj setPosWorld getPosWorld _obj;$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		waitUntil
	</Keyword>
	<Description>
		Suspends execution of function or SQF based script until given condition is satisfied. This command will loop and call the code inside {} mostly every frame (depends on complexity of condition and overall engine load) until the code returns true. The execution of the rest of the script therefore will be suspended until waitUntil completes.
	If the very first execution of the code returns true the command will exit immediately, therefore it will not produce any "Suspending not allowed in this context" error when used inside non-scheduled script. For all other uses it must be executed in environment that allows suspension ( canSuspend ), such as spawned or execVMed code.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/waitUntil
	</WikiPage>
	<Syntax>
		waitUntil Code
	</Syntax>
	<RawSyntax>
		waitUntil condition
	</RawSyntax>
	<Example>
		$Code$waitUntil { not alive player };$/Code$
	</NextExample>
		$Code$_i = 0; waitUntil { _i = _i + 1; _i = 100 };$/Code$
	</NextExample>
		$Code$waitUntil { sleep 0.1; not alive player };$/Code$
	</NextExample>
		$Code$// An on-the-fly custom event handler :
	_myEH = ["ZoomIn"] spawn {
	while { true } do {
	waitUntil {
	inputAction ( _this select 0) == 1;
	};
	diag_log format ["%1 @ %2", _this select 0, diag_tickTime ];
	};
	};
	// Although perhaps better to use onEachFrame, depending on the application.$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(September 20, 2013)
	In case you have more complex code inside waitUntil loop, to be on the safe side always return boolean at the end of the scope:
	$Code$ player addEventHandler ["Fired", {
	_null = (_this select 6) spawn {
	_p = [0,0,0];
	waitUntil {
	if ( isNull _this) exitWith { true };
	_p = getPos _this;
	false // -- boolean at the end of the scope
	};
	hint str _p;
	};
	}];$/Code$
	</NextNote>
		(December 20, 2006)
	waitUntil suspends both SQF functions and SQF scripts. In functions, the calling script is still in suspension due to waiting for a return from the call command. The game engine will continue, however. See Function for more detail.
	</NextNote>
		(April 2, 2010)
	If WaitUntil uses an undefined call code, WaitUntil won't release, even when this code is separated from other conditions through or. Be warned that this won't cause an error message.
	</NextNote>
		(Jan 07, 2011)
	By default the cycle time for the condition check is per frame. Look at the example 3, how to set it at a lower rate yourself.
	Often times one does not need per frame checking. Saves a lot CPU checks; especially when the condition is complex to compute.
	</NextNote>
		(December 13, 2014)
	If you want to use waitUntil together with exitWith, remember that the loop only exits if the code block returns true.
	It should look like this:
	$Code$
	waitUntil {
	// exit loop if the unit gets deleted
	if (isNull _unit) exitWith {true}; // has to return true to continue
	!alive _unit;
	};
	$/Code$
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		campaignConfigFile
	</Keyword>
	<Description>
		Return root of campaign description.ext entries hierarchy.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/campaignConfigFile
	</WikiPage>
	<Syntax>
		campaignConfigFile
	</Syntax>
	<RawSyntax>
		campaignConfigFile
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Config
	</ReturnValue>

</NextListItem>

	<Keyword>
		waypointName
	</Keyword>
	<Description>
		Gets the waypoint name.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/waypointName
	</WikiPage>
	<Syntax>
		waypointName Waypoint
	</Syntax>
	<RawSyntax>
		waypointName waypoint
	</RawSyntax>
	<Example>
		$Code$_wpName = waypointName [_grp,2];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		enableSimulationGlobal
	</Keyword>
	<Description>
		MP command. Enable or disable simulation for given entity, globally. Call this only from the server. Has the same effect as enableSimulation when used in SP.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/enableSimulationGlobal
	</WikiPage>
	<Syntax>
		Object enableSimulationGlobal Boolean
	</Syntax>
	<RawSyntax>
		entity enableSimulationGlobal enable
	</RawSyntax>
	<Example>
		$Code$_myObject enableSimulationGlobal false;$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
		This scripting command must be executed on the server to work properly in multiplayer
	</NextNote>
		(October 21, 2014)
	Units that have been previously subjected to enableSimulation false; or enableSimulationGlobal false; may stay unrecognised for a long time even after simulation was re-enabled, returning objNull as cursorTarget. Force revealing units with reveal command usually solves the problem. For example: $Code${ player reveal _x} forEach allUnits ;$/Code$
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		objectCurators
	</Keyword>
	<Description>
		Returns array with all curators which can edit given object.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/objectCurators
	</WikiPage>
	<Syntax>
		objectCurators Object
	</Syntax>
	<RawSyntax>
		objectCurators obj
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		stop
	</Keyword>
	<Description>
		Stop AI unit. Stopped unit will not be able to move, fire, or change its orientation to follow a watched object. It may still change the stance if deemed appropriate (e.g. under fire). Use disableAI to disable specific AI capabilities.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/stop
	</WikiPage>
	<Syntax>
		Object stop Boolean
	</Syntax>
	<RawSyntax>
		unitName stop toggle
	</RawSyntax>
	<Example>
		$Code$loon1 stop true$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		(January 6, 2011)
	This command appears to be local only.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		diag_activeMissionFSMs
	</Keyword>
	<Description>
		Returns array with active Mission FSMs.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/diag_activeMissionFSMs
	</WikiPage>
	<Syntax>
		diag_activeMissionFSMs
	</Syntax>
	<RawSyntax>
		diag_activeMissionFSMs
	</RawSyntax>
	<Example>
		$Code${ systemChat str _x} forEach diag_activeMissionFSMs ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		commandGetOut
	</Keyword>
	<Description>
		Orders the unit to get out from the vehicle (via the radio).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/commandGetOut
	</WikiPage>
	<Syntax>
		commandGetOut Object/Array
	</Syntax>
	<RawSyntax>
		commandGetOut unitName
	</RawSyntax>
	<Example>
		$Code$commandGetOut _unitOne$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		addMissionEventHandler
	</Keyword>
	<Description>
		Adds event handler (EH) attached to the current mission and returns EH handle. If EH has some data to return upon event, it is passed in _this variable. Since Arma 3 v.1.63.137807 the EH handle is also stored in _thisEventHandler variable and is available during EH code execution. For the list of available mission event handlers see: Arma_3:_Event_Handlers/addMissionEventHandler
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/addMissionEventHandler
	</WikiPage>
	<Syntax>
		addMissionEventHandler Array
	</Syntax>
	<RawSyntax>
		addMissionEventHandler [type, command]
	</RawSyntax>
	<Example>
		$Code$// A script could be executed to stop custom scripts graciously, or save progress & stats, for example:
	_id = addMissionEventHandler ["Ended",{ _this execVM "missionEnded.sqf" }];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		waypointShow
	</Keyword>
	<Description>
		Gets the waypoint show/hide status.
	Possible values are:
	"NEVER" - never show it
	"EASY" - show only in cadet mode
	"ALWAYS" - always show it
	"ERROR" - when set to any different string
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/waypointShow
	</WikiPage>
	<Syntax>
		waypointShow Array
	</Syntax>
	<RawSyntax>
		waypointShow waypoint
	</RawSyntax>
	<Example>
		$Code$_wpShow = waypointShow [groupOne,1];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		setPosASLW
	</Keyword>
	<Description>
		Sets the object position above sea surface. The pos array uses the PositionASLW format.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setPosASLW
	</WikiPage>
	<Syntax>
		Object setPosASLW Array
	</Syntax>
	<RawSyntax>
		obj setPosASLW pos
	</RawSyntax>
	<Example>
		$Code$_diver setPosASLW [( position _diver) select 0, ( position _diver) select 1, -10];$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		vehicleRadio
	</Keyword>
	<Description>
		Sends the audio message to the vehicle radio channel. The message is defined in CfgRadio in the description.ext file or config radio protocol. The transmission will play only on the PC where command was executed. If you need the transmission to play on all computers, you have to execute it globally (see remoteExec ).
	Note: When transmitting unit gets killed, transmission will be interrupted, however when receiving unit gets killed, the transmission continues to play.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/vehicleRadio
	</WikiPage>
	<Syntax>
		Object vehicleRadio String
	</Syntax>
	<RawSyntax>
		unit vehicleRadio radioName
	</RawSyntax>
	<Example>
		$Code$_soldierOne vehicleRadio "messageOne";$/Code$
	</NextExample>
		$Code$player vehicleRadio configName selectRandom ("true" configClasses ( configFile "CfgRadio"));$/Code$
	</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
		(December 3, 2016)
	To transmit user custom sounds (see Multiplayer_Custom_Sounds_Tutorial ), prefix the full filename including file extension with #. For example if there is a custom user sound file called MySound.ogg, to play it on the radio use:
	$Code$ player vehicleRadio "#MySound.ogg";$/Code$
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		groupSelectUnit
	</Keyword>
	<Description>
		Selects a unit from player's group. If player is the leader, the effect of this command is similar to player pressing F1, F2, F3... buttons to highlight units in his squad, after which the unit command menu is shown. If leader is AI, player will get usual communication menu to interact with the leader.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/groupSelectUnit
	</WikiPage>
	<Syntax>
		Object groupSelectUnit Array
	</Syntax>
	<RawSyntax>
		player groupSelectUnit [unit, select]
	</RawSyntax>
	<Example>
		$Code$// After leaving menu, deselect all units (command menu is not opened - no selection)
	{
	player groupSelectUnit [_x, false ];
	} forEach ( groupSelectedUnits player );$/Code$
	</NextExample>
		$Code$// Select all units when player is the leader:
	{
	player groupSelectUnit [_x, true ];
	} forEach units player ;$/Code$
	</NextExample>
		$Code$// Open communication with group leader:
	player groupSelectUnit [ leader player, true ];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		gearIDCAmmoCount
	</Keyword>
	<Description>
		Returns ammo count of assigned magazine.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/gearIDCAmmoCount
	</WikiPage>
	<Syntax>
		gearIDCAmmoCount Number
	</Syntax>
	<RawSyntax>
		gearIDCAmmoCount idc
	</RawSyntax>
	<Example>
		$Code$ammo = gearIDCAmmoCount _control;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		setMarkerType
	</Keyword>
	<Description>
		Set marker type. See cfgMarkers for a list of standard markers.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setMarkerType
	</WikiPage>
	<Syntax>
		String setMarkerType String
	</Syntax>
	<RawSyntax>
		markerName setMarkerType type
	</RawSyntax>
	<Example>
		$Code$"MarkerOne" setMarkerType "Warning";$/Code$
	</Example>
	<Locality>
		undefined / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		addBackpackCargoGlobal
	</Keyword>
	<Description>
		Add backpack(s) to the cargo space of vehicle. MP synchronized. Classname list of available backpacks is here
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/addBackpackCargoGlobal
	</WikiPage>
	<Syntax>
		Object addBackpackCargoGlobal Array
	</Syntax>
	<RawSyntax>
		vehicle addBackpackCargoGlobal [packClassName, count]
	</RawSyntax>
	<Example>
		$Code$this addBackpackCargoGlobal ["TK_RPG_Backpack_EP1",2];$/Code$
	</NextExample>
		$Code$_apc addBackpackCargoGlobal ["US_Patrol_Pack_EP1",4];$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		handgunItems
	</Keyword>
	<Description>
		Returns array with all items assigned to the handgun. This command is used for infantry weapons only.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/handgunItems
	</WikiPage>
	<Syntax>
		handgunItems Object
	</Syntax>
	<RawSyntax>
		handgunItems unit
	</RawSyntax>
	<Example>
		$Code$handgunItems player ;
	/*
	[
	"muzzle_snds_L",//silencer
	"",//laser
	"",//optics
	""//bipod
	]
	*/$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlShown
	</Keyword>
	<Description>
		Returns whether given control is shown.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlShown
	</WikiPage>
	<Syntax>
		ctrlShown Control
	</Syntax>
	<RawSyntax>
		ctrlShown controlName
	</RawSyntax>
	<Example>
		$Code$_bool = ctrlShown _ctrl;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		sleep
	</Keyword>
	<Description>
		Suspends code execution for given time in seconds. The sleep precision is given by a framerate, the delay given is the minimal delay expected. Must be called inside of a context which is interruptible, i.e. a script executed by execVM or spawn.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/sleep
	</WikiPage>
	<Syntax>
		sleep Number
	</Syntax>
	<RawSyntax>
		sleep delay
	</RawSyntax>
	<Example>
		$Code$[] spawn { sleep 5; hint "after 5 sec..."};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		this command will suspend the script indefinitely if game simulation is paused in SP. To avoid this, use uiSleep.
	</NextNote>
		(December 20, 2006)
	Sleep suspends both SQF functions and SQF scripts. In functions, the calling script is still in suspension due to waiting for a return from the call command. The game engine will continue, however. See Function for more detail.
	</NextNote>
		(February 12, 2007)
	Sleep durations between.0005 and.02 will cause the same delay (roughly.02 seconds). Delays of.0005 and less have no effect (ie, the sleep call will return immediately).
	</NextNote>
		The comment above is a little misleading. The game engine appears to work by processing frames and then checking to see whether scripts are available to execute. Sleep causes the script/function to be suspended until at least the specified time has elapsed. To wait for the next frame, or give other scripts a chance to run, use Sleep 0.001.
	</NextNote>
		(July 16, 2007)
	For scripts called by the Init Event Handler the first sleep command will suspend the script at the briefing screen at the start of a mission. The script will continue after the briefing screen, when actually "in game".
	</NextNote>
		(July 12, 2014)
	Sleep will treat negative values as if they were 0. (Tested in Arma 3 v1.22)
	</NextNote>
		(October 18, 2014)
	For server scripts, if you are creating "while true" timers, it is best to use uiSleep instead, as the sleep from that command is not slowed down by simulation / server lag, so the timers will execute at intervals that are much closer to real time, even under heavy lag.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlSetFontHeight
	</Keyword>
	<Description>
		Sets the font size of given control.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlSetFontHeight
	</WikiPage>
	<Syntax>
		Control ctrlSetFontHeight Number
	</Syntax>
	<RawSyntax>
		controlName ctrlSetFontHeight height
	</RawSyntax>
	<Example>
		$Code$_control ctrlSetFontHeight 0.05$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		lbSetSelectColor
	</Keyword>
	<Description>
		Sets the select color of the item with the given index of the listbox or combobox with id idc of the topmost user dialog to color.
	Colour is in format Color.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lbSetSelectColor
	</WikiPage>
	<Syntax>
		lbSetSelectColor Array
	</NextSyntax>
		Control lbSetSelectColor Array
	</Syntax>
	<RawSyntax>
		lbSetSelectColor [idc, index, color]
	</NextRawSyntax>
		control lbSetSelectColor [index, color]
	</RawSyntax>
	<Example>
		$Code$lbSetSelectColor [101, 0, [0, 1, 0, 0.5]];$/Code$
	</NextExample>
		$Code$_control lbSetSelectColor [0, [0, 1, 0, 0.5]];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		More information on the LB command family can be found here
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		deleteRange
	</Keyword>
	<Description>
		Removes a range of array elements from the given array (modifies the original array, just like resize or set ).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/deleteRange
	</WikiPage>
	<Syntax>
		Array deleteRange Array
	</Syntax>
	<RawSyntax>
		array deleteRange [from, count]
	</RawSyntax>
	<Example>
		$Code$_arr = [1,2,3,4,5,6];
	_arr deleteRange [1,4];
	hint str _arr; //[1,6]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		addForce
	</Keyword>
	<Description>
		Applies force to given object at given position. Force is defined as vector [x, y, z] in world space, position is vector [x, y, z] in model space. If you need to define force in model space, use vectorModelToWorld or vectorModelToWorldVisual commands first. The force applied as impulse. For more information see NVIDIA docs
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/addForce
	</WikiPage>
	<Syntax>
		Object addForce Array
	</Syntax>
	<RawSyntax>
		object addForce [force, position]
	</RawSyntax>
	<Example>
		$Code$// Apply force [0,1000,0] defined in world space (not factoring object actual positioning) to object position [1,0,0]:
	_object addForce [[0,1000,0],[1,0,0]];$/Code$
	</NextExample>
		$Code$// Apply force [0,1000,0] defined in model space (relative to object) to object position [1,0,0]:
	_object addForce [_object vectorModelToWorld [0,1000,0],[1,0,0]];$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		diag_drawMode
	</Keyword>
	<Description>
		Activates specific debug visualization.
	Command is only available when using Arma 3 Diagnostics Exe on Dev-Branch.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/diag_drawMode
	</WikiPage>
	<Syntax>
		diag_drawMode String
	</Syntax>
	<RawSyntax>
		diag_drawMode type
	</RawSyntax>
	<Example>
		$Code$diag_drawMode "normal"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(September 6, 2016)
	Currently A3 dev branch, diag.exe, version 1.65.138249 has no drawModes available:
	$Code$diag_list "drawMode" - []$/Code$
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		addOwnedMine
	</Keyword>
	<Description>
		Sets ownership over a remotely detonatable mine to the unit.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/addOwnedMine
	</WikiPage>
	<Syntax>
		Object addOwnedMine Object
	</Syntax>
	<RawSyntax>
		Unit addOwnedMine mine
	</RawSyntax>
	<Example>
		$Code$player addOwnedMine SuperMine;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		titleRsc
	</Keyword>
	<Description>
		Display a resource defined in RscTitles. Also see cutRsc, with these two commands you can show two different resources at once.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/titleRsc
	</WikiPage>
	<Syntax>
		titleRsc Array
	</Syntax>
	<RawSyntax>
		titleRsc [text, type, speed, showInMap]
	</RawSyntax>
	<Example>
		$Code$titleRsc ["BIS", "PLAIN"]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(30 Jun, 2008)
	Using titleRsc (unlike cutRsc ) for a HUD will mean:
	the HUD will remain visible when you access the map and overlay it.
	using the 'Direct communication' chat channel messages will interfere with the HUD by hiding it, since it appears to use the same 'resource layer'.
	</NextNote>
		(September 25, 2014)
	In OFP/CWA any x Rsc will hide all the elements of the HUD, including the map.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		allowSprint
	</Keyword>
	<Description>
		Force player to run/jog if set to false.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/allowSprint
	</WikiPage>
	<Syntax>
		Object allowSprint Boolean
	</Syntax>
	<RawSyntax>
		unit allowSprint state
	</RawSyntax>
	<Example>
		$Code$player allowSprint false$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		set3DENSelected
	</Keyword>
	<Description>
		Changes selection in 3den to what is inside entities array.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/set3DENSelected
	</WikiPage>
	<Syntax>
		set3DENSelected Array
	</Syntax>
	<RawSyntax>
		set3DENSelected entities
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		buttonAction
	</Keyword>
	<Description>
		Return the action assigned to a control of the currently active user dialog. Can be used for buttons and active texts. Read Dialog Control for more information about user dialogs and controls.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/buttonAction
	</WikiPage>
	<Syntax>
		buttonAction Number
	</NextSyntax>
		buttonAction Control
	</Syntax>
	<RawSyntax>
		buttonAction idc
	</NextRawSyntax>
		buttonAction control
	</RawSyntax>
	<Example>
		$Code$buttonSetAction [100, {player exec "reply.sqs"}]
	_action = buttonAction 100
	returns {player exec "reply.sqs"}$/Code$
	</Example>
	<Locality>
		local / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String - String
	</ReturnValue>

</NextListItem>

	<Keyword>
		getContainerMaxLoad
	</Keyword>
	<Description>
		Returns max load value of given container. Currently works only with uniform, vest and backpack classes.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getContainerMaxLoad
	</WikiPage>
	<Syntax>
		getContainerMaxLoad String
	</Syntax>
	<RawSyntax>
		getContainerMaxLoad containerClass
	</RawSyntax>
	<Example>
		$Code$_maxLoadUniform = getContainerMaxLoad uniform player ;
	_maxLoadVest = getContainerMaxLoad vest player ;
	_maxLoadBackpack = getContainerMaxLoad backpack player ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		getWPPos
	</Keyword>
	<Description>
		Returns the position of a selected waypoint of a given group. Waypoints include only those which were placed in the mission editor.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getWPPos
	</WikiPage>
	<Syntax>
		getWPPos Array
	</Syntax>
	<RawSyntax>
		getWPPos [group, index]
	</RawSyntax>
	<Example>
		$Code$[_group1,1] setWPPos [200,600,0]; _pos = getWPPos [_group1,1];
	// returns [200,600,0]$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		publicVariable
	</Keyword>
	<Description>
		Broadcasts missionNamespace variable and its value to all computers. The data is sent consequently and reliably to all clients. Using publicVariable too frequently in a given period of time can cause other parts of the game to experience bandwidth problems.
	Variables broadcast with publicVariable during a mission stay persistent for JIP (Join In Progress) clients. Such persistent variables are synced to the JIP client before the first batch of client side Event Scripts are ran.
	The following Types of data are supported:
	Number
	Since OFP version 1.34 :
	Boolean
	Object
	Group
	Since ArmA version 1.00:
	String
	Text
	Since ArmA version 1.09 :
	Array
	Code
	Since Arma 3 version 1.26 :
	Nothing ( nil )
	Limitations : Cannot use reserved names, such as " player " or " west " or " side ", etc. It is also not possible to transfer references to entities which are local, like scripts, displays, or local objects. Team Member is also not supported.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/publicVariable
	</WikiPage>
	<Syntax>
		publicVariable String
	</Syntax>
	<RawSyntax>
		publicVariable varName
	</RawSyntax>
	<Example>
		$Code$publicVariable "CTFscoreOne";$/Code$
	</NextExample>
		$Code$myPubVar = [123, "456", true ];
	publicVariable "myPubVar";$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		(3 Aug, 2006 23:03)
	This command broadcasts a variable to all clients, but as soon as you change the variable again, you have to use publicVariable again, as it does not automatically synchronise it.
	</NextNote>
		(12 April, 2008)
	Be sure to place your variable name in quotation marks. This may sound awfully simple, but many times I have forgotten to do this, and it has resulted in no end of headaches for me.
	</NextNote>
		(2 Feb, 2008)
	When initialising a public variable to handle JIP, you will usually first want to check if the public variable has already been (broadcast, received and) set locally. Otherwise you may inadvertantly overwrite the broadcast value with your default value.
	To perform this check, use code similar to the following to first check that the variable is nil:
	if ( isNil "PV_abc") then
	{
	// set the nil variable with a default value for server and both JIP & 'join at mission start'
	PV_abc = [7, 8, 9];
	};
	// else public variable has already been set due to a public variable broadcast.
	</NextNote>
		(14 July, 2011)
	To make Dr_Eyeball's note even more clear:
	For JIP players pV'ed variables are received and set BEFORE the init.sqf.
	So to avoid the received variables getting overwritten by variable initialization normally done in the init.sqf, you HAVE TO to use the 'if ( isNil "PV_abc")' pattern.
	It says literally: "Only initialize value it has not yet been set. And in a JIP this may already been the cause due to publicVariable use".
	</NextNote>
		(21 September, 2013)
	To make Dr_Eyeball's and kju's notes even more clear, public variable is persistent. Once it has been broadcast it will be delivered to all clients, present and future. Therefore it is wise to check if the variable already exists on a client due to it being persistent before initialising its value.
	</NextNote>
		(23 February, 2014)
	Just to clarify, when players JIP, they get the value of the variable from the last call to publicVariable, not the current value of the variable. Eg. with
	$Code$SomeVar = 5; publicVariable "SomeVar"; SomeVar = 10;$/Code$
	Connecting players will receive 5, not the current value of 10.
	</NextNote>
		(October 19, 2014)
	I'm pretty far down the notes list so I hope this doesn't get buried.
	For clarity, after a variable has been publicVariable'd, scripts in all clients can use it as if it had been defined locally.
	Variables that have been publicVariable'd do not need to be pre-defined on receiving clients. In fact, this could cause issues with JIP players overwriting a publicVariable value, as mentioned above. (tested in A3 1.32.127785)
	Local variables cannot be publicVariable'd. (tested in A3 1.32.127785) (tested by having dedicated server publicVariable a local variable, then trying to hint it on client. Error was "Undefined variable in expression")
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlActivate
	</Keyword>
	<Description>
		Launch actions attached to given (button based) control.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlActivate
	</WikiPage>
	<Syntax>
		ctrlActivate Control
	</Syntax>
	<RawSyntax>
		ctrlActivate controlName
	</RawSyntax>
	<Example>
		$Code$ctrlActivate _control$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		lnbAddColumn
	</Keyword>
	<Description>
		Adds an column at given position. It returns the index of the newly added column.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lnbAddColumn
	</WikiPage>
	<Syntax>
		Control lnbAddColumn Number
	</NextSyntax>
		lnbAddColumn Array
	</Syntax>
	<RawSyntax>
		_ctrl lnbAddColumn position
	</NextRawSyntax>
		lnbAddColumn [idc or Control,position]
	</RawSyntax>
	<Example>
		$Code$_ctrl lnbAddColumn 0.8;$/Code$
	</NextExample>
		$Code$lnbAddColumn [105,0.8];$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
		(A3 1.28) Horizontal coordinates of columns were added relative to list width, in range from 0 to 1.
	</Note>
	<ReturnValue>
		Number/Void - Number/Void
	</ReturnValue>

</NextListItem>

	<Keyword>
		abs
	</Keyword>
	<Description>
		Absolute value of a real number
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/abs
	</WikiPage>
	<Syntax>
		abs Number
	</Syntax>
	<RawSyntax>
		abs n
	</RawSyntax>
	<Example>
		$Code$_n = abs -3;
	// Returns 3$/Code$
	</Example>
	<Locality>
		local / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		selectPlayer
	</Keyword>
	<Description>
		Moves player into given unit. In Arma 3 it is now not possible to selectPlayer into unit occupied by another player. Also avoid selecting player into editor placed units in multiplayer, as it may, on occasion, lead to some undefined behaviour. If you need to selectPlayer into another unit, consider creatingUnit dynamically.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/selectPlayer
	</WikiPage>
	<Syntax>
		selectPlayer Object
	</Syntax>
	<RawSyntax>
		selectPlayer unitName
	</RawSyntax>
	<Example>
		$Code$selectPlayer bob;$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		This command has significant effects on locality
	Notes on locality issues with selectPlayer in multiplayer environments:
	1) If you switch to a unit that's not local, control over movement will not be given to you immediately. For example, if you switch to an AI unit whose leader is a player, you will not be able to control the movement of your new avatar, as its control remains with the leader unit. You will however be able to look around while the unit walks automatically.
	2) The identity of units are not transferred properly: If your old unit dies, this will count for your stats. Your old unit might remain identifiable as you (if you aim at the unit you see your own name). Your new unit will keep it's name, face and voice (face can be set dynamically, but name, voice and glasses have to be defined before mission start in the description.ext). When chatting, not the name of your original identity, but the identity of the transferred to person will show.
	Those 2 Points were for ArmA I, I am currently analyzing the behaviour in ArmA II with version 1.08 + OA 1.57
	So with ArmA II, you still have to keep an eye on locality (otherwise the AI will controll the unit you are), but there are cool possibilities now: if you do a "selectPlayer unitVarName",the unit takes your identity (with name, voice, face and glasses) - and your identity is also visible on other clients!
	But you have to remember that your old unit will stay with your Identity. Dies the old unit, the stats count it. An other thing you have to pay attention is the Death for your new unit - you have to register an EventHandler, otherwise you will stay in your dead unit, and also the MenuOption Respawn won't help you out! 3.Jan. 2011
	3) If you do a selectPlayer call, join,joinSilent,joinAs,joinAsSilent wont work anymore correctly. Means: Your unit joins the other group AND your unit will be local to the other group. so at the moment you can use selectPlayer only as a single human player in a group. In the later day I will try what happens if both human players are units by selectPlayer, and both join the same group (till yet tried with one selectPlayer unit and one originUnit)
	14.May 2011
	Tried to create ingame a group with a selectPlayer Unit (on both clients), and joint the new squad. The result was, the group was local to the client who created the group, so after that, all other units that join that Group are - as you may think already, local to that single client. 18.May 2011
	</NextNote>
		3) After switching to a unit that's not local, the unit will remain local to you after switching back. For example, if we have units A and B, and a client starts as unit A and unit B is AI under server control. If you switch to unit B, it will take some time, but eventually you can control the movement of unit B (see (1) above). Now if you switch back to unit A, unit B will remain local to you, the player. Any server-side scripts which try to execute local arguments -- such as doMove -- will fail.
	</NextNote>
		A working implementation can be found at A&S ProMode dev-heaven repo, acc guest, pw guest or at pastebin.
	Be careful to learn all the pitfalls and things you need to take into consideration to have this working in MP.
	</NextNote>
		(09 March 2014)
	Arma 3 (v1.13): In MP the Identity and the name carries over to the new Unit but not in SP. Use setName to set the name in SP.
	</NextNote>
		(June 24, 2015)
	Most of the notes above do not apply to Arma 3 anymore.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		getBackpackCargo
	</Keyword>
	<Description>
		Returns all backpack types and count from the cargo space
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getBackpackCargo
	</WikiPage>
	<Syntax>
		getBackpackCargo Object
	</Syntax>
	<RawSyntax>
		getBackpackCargo object
	</RawSyntax>
	<Example>
		$Code$_content = getBackpackCargo carName;$/Code$
	</NextExample>
		$Code$_content = getBackpackCargo ammoBoxName;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		magazineCargo
	</Keyword>
	<Description>
		Get array with magazines from ammo box (or any general weapon holder container).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/magazineCargo
	</WikiPage>
	<Syntax>
		magazineCargo Object
	</Syntax>
	<RawSyntax>
		magazineCargo box
	</RawSyntax>
	<Example>
		$Code$hint str magazineCargo uniformContainer cursorTarget ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		setTriggerStatements
	</Keyword>
	<Description>
		Defines trigger condition, activation and deactivation statements. Trigger condition has to return Boolean. true will activate the trigger, false will deactivate it (only if activation is set to repeat). thisList returns the same result as list command, which includes all entities in the trigger area that are capable of activating the trigger. Dead entities are excluded as well as crew in vehicles, vehicles themselves are included.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setTriggerStatements
	</WikiPage>
	<Syntax>
		Object setTriggerStatements Array
	</Syntax>
	<RawSyntax>
		trigger setTriggerStatements [condition, activation, deactivation]
	</RawSyntax>
	<Example>
		$Code$_trg setTriggerStatements ["this", " hint 'trigger on'", " hint 'trigger off'"]$/Code$
	</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
		(Mar 14, 2011)
	An array with three arguments is mandatory for this function.
	</NextNote>
		(September 16, 2014)
	Magic variable thisList does not contain dead units.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		synchronizeObjectsRemove
	</Keyword>
	<Description>
		Remove given objects from the unit's list of synchronized objects.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/synchronizeObjectsRemove
	</WikiPage>
	<Syntax>
		Object synchronizeObjectsRemove Array
	</Syntax>
	<RawSyntax>
		unit synchronizeObjectsRemove [objects]
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setCamUseTI
	</Keyword>
	<Description>
		Activates thermal vision. Mode index defines what sort of thermal vision it is:
	0 - White Hot
	1 - Black Hot
	2 - Light Green Hot / Darker Green cold
	3 - Black Hot / Darker Green cold
	4 - Light Red Hot /Darker Red Cold
	5 - Black Hot / Darker Red Cold
	6 - White Hot. Darker Red Cold
	7 - Thermal (Shade of Red and Green, Bodies are white)
	This command only works with camCreate created camera that is currently the main camera for the player (see example).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setCamUseTI
	</WikiPage>
	<Syntax>
		Boolean setCamUseTI Number
	</Syntax>
	<RawSyntax>
		Bool setCamUseTI modeIndex
	</RawSyntax>
	<Example>
		$Code$true setCamUseTI 1;$/Code$
	</NextExample>
		$Code$// "Preditor" vision:
	_cam = "camera" camCreate [0,0,0];
	_cam camSetTarget player ;
	_cam camSetRelPos [0,1,1.5];
	_cam cameraEffect ["Internal","Back"];
	_cam camCommit 0;
	true setCamUseTI 7;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		nearObjectsReady
	</Keyword>
	<Description>
		Check whether all data are loaded to nearObjects will return in reasonable time.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/nearObjectsReady
	</WikiPage>
	<Syntax>
		Object/Array nearObjectsReady Number
	</Syntax>
	<RawSyntax>
		position nearObjectsReady radius
	</RawSyntax>
	<Example>
		$Code$_twnpos nearObjectsReady 500;//from ALICE$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		completedFSM
	</Keyword>
	<Description>
		Check whether the given FSM completes.
	The FSM handle is the number returned by the execFSM command.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/completedFSM
	</WikiPage>
	<Syntax>
		completedFSM Number
	</Syntax>
	<RawSyntax>
		completedFSM fsmHandle
	</RawSyntax>
	<Example>
		$Code$_completed = completedFSM _fsmHandle;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		getSuppression
	</Keyword>
	<Description>
		Gets the suppression value of given unit. Returns SCALAR between 0 and 1. Suppression is not calculated for player entities.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getSuppression
	</WikiPage>
	<Syntax>
		getSuppression Object
	</Syntax>
	<RawSyntax>
		getSuppression unit
	</RawSyntax>
	<Example>
		$Code$getSuppression AI_unit_1;$/Code$
	</Example>
	<Locality>
		local / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		assignAsDriver
	</Keyword>
	<Description>
		Assign a unit as driver of a vehicle. Used together with orderGetIn to order subordinate units to get in as driver of a specific vehicle. Before usage of this command a subordinate unit hasn't got the option to get into the driver place of the vehicle.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/assignAsDriver
	</WikiPage>
	<Syntax>
		Object assignAsDriver Object
	</Syntax>
	<RawSyntax>
		unitName assignAsDriver vehicleName
	</RawSyntax>
	<Example>
		$Code$_soldier1 assignAsDriver _tank
	[_soldier1] orderGetIn true$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		camConstuctionSetParams
	</Keyword>
	<Description>
		Sets construction camera parameters. To work with "camconstruct" object.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/camConstuctionSetParams
	</WikiPage>
	<Syntax>
		Object camConstuctionSetParams Array
	</Syntax>
	<RawSyntax>
		camera camConstuctionSetParams [[x,y,z], radius, maxAboveLand]
	</RawSyntax>
	<Example>
		$Code$_camera camConstuctionSetParams [ getPos player, 50, 20];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlClassName
	</Keyword>
	<Description>
		Returns the class name of a Control as it is defined in config. If you need config class of a game created Display, it is stored on display itself:
	$Code$_className = findDisplay 12 getVariable ["BIS_fnc_initDisplay_configClass", ""]; // "RscDiary"$/Code$
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlClassName
	</WikiPage>
	<Syntax>
		ctrlClassName Control
	</Syntax>
	<RawSyntax>
		ctrlClassName control
	</RawSyntax>
	<Example>
		$Code$// List class names of all controls present on display 46:
	_ctrls = "";
	for "_i" from -1 to 10000 do {
	with uiNamespace do {
	_ctrl = findDisplay 46 displayCtrl _i;
	if (! isNull _ctrl) then {
	_ctrls = _ctrls + format ["IDC: %1, Class Name: %2\n", _i, ctrlClassName _ctrl];
	};
	};
	};
	hint _ctrls;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		ropeEndPosition
	</Keyword>
	<Description>
		Return rope end positions in Position3D format
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ropeEndPosition
	</WikiPage>
	<Syntax>
		ropeEndPosition Object
	</Syntax>
	<RawSyntax>
		ropeEndPosition rope
	</RawSyntax>
	<Example>
		$Code$_ends = ropeEndPosition ( ropes heli1 select 0);
	_end1 = _ends select 0;
	_end2 = _ends select 1;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		removeMissionEventHandler
	</Keyword>
	<Description>
		Removes mission event handler added by addMissionEventHandler.
	When any handler is removed, all handler indices higher that the deleted one should be decremented.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/removeMissionEventHandler
	</WikiPage>
	<Syntax>
		removeMissionEventHandler Array
	</Syntax>
	<RawSyntax>
		removeMissionEventHandler [type, index]
	</RawSyntax>
	<Example>
		$Code$for "_i" from 0 to 4 do {
	missionNamespace setVariable [ format ["handler%1",_i], addMissionEventHandler ["Loaded","hint ""_i"";"]];
	};
	removeMissionEventHandler ["Loaded",handler2]; //Remove the third index under type "Loaded"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(August 6, 2015)
	As of Arma 3 version 1.38 you can safely remove mission event handlers without worrying about decrementing higher indices.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		getAssignedCuratorLogic
	</Keyword>
	<Description>
		Returns curator logic to which given player has access.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getAssignedCuratorLogic
	</WikiPage>
	<Syntax>
		getAssignedCuratorLogic Object
	</Syntax>
	<RawSyntax>
		getAssignedCuratorLogic player
	</RawSyntax>
	<Example>
		$Code$( getAssignedCuratorLogic player ) removeCuratorEditableObjects [ allDead, true ];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(August 17, 2014)
	This command will return objNull if used immediately after the curator logic is assigned to the unit in question (this includes at mission time 0). To avoid problems use the following beforehand: $Code$ waitUntil {! isNull ( getAssignedCuratorLogic unit)};$/Code$
	</Note>
	<ReturnValue>
		Object
	</ReturnValue>

</NextListItem>

	<Keyword>
		taskDescription
	</Keyword>
	<Description>
		Returns the sub-parts of the task description. The returned Array is in format [Task description, Task title, Task waypoint description].
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/taskDescription
	</WikiPage>
	<Syntax>
		taskDescription Task
	</Syntax>
	<RawSyntax>
		taskDescription task
	</RawSyntax>
	<Example>
		$Code$_taskDescArray = taskDescription _task;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(November 14, 2014)
	Be careful if you want to use this to retrieve the title of a task.
	If the task has no description set, then "taskDescription" will only return an array of empty Strings.
	Therefor always use setSimpleTaskDescription directly after creating a new task, even if you set the Description to "".
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		aimedAtTarget
	</Keyword>
	<Description>
		Returns how good the weapon of the vehicle is aimed at the target.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/aimedAtTarget
	</WikiPage>
	<Syntax>
		Object aimedAtTarget Array
	</Syntax>
	<RawSyntax>
		vehicle aimedAtTarget [target, weapon]
	</RawSyntax>
	<Example>
		$Code$_aimingQuality = heli aimedAtTarget [target];$/Code$
	</NextExample>
		$Code$_aimingQuality = heli aimedAtTarget [target,"M197"];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(November 19, 2013)
	The command doesn't work with soldier weapons, only vehicle weapons (in Arma 3 at least). The return value is either 1 or 0, very rarely the value falls in between. 1 doesn't mean you are going to hit the target, while 0 means you're definitely off.
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlAutoScrollDelay
	</Keyword>
	<Description>
		Returns number of seconds auto-scroll will wait before scroll and/or rewind. -2 if scrollbar not present.
	Autorscroll is available for CT_LISTBOX and CT_CONTROLS_GROUP types of controls only. Autoscroll will wait ctrlAutoScrollDelay seconds (must be 0) and then will scroll the scroll bar down to the bottom. ctrlAutoScrollSpeed defines the speed with which scrollbar is scrolled. If ctrlAutoScrollRewind is true, the control will fade out, immediately rewind to the top, then fade in, wait ctrlAutoScrollDelay seconds and then repeat the scrolling in a loop. If user focuses on the control, autoscrolling is interrupted.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlAutoScrollDelay
	</WikiPage>
	<Syntax>
		ctrlAutoScrollDelay Control
	</Syntax>
	<RawSyntax>
		ctrlAutoScrollDelay control
	</RawSyntax>
	<Example>
		$Code$_ctrlDelay = ctrlAutoScrollDelay _ctrlGroup;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		removeMagazine
	</Keyword>
	<Description>
		Remove magazine from the unit.
	Note: You may create invalid combinations with this function. When doing so, application behaviour is undefined.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/removeMagazine
	</WikiPage>
	<Syntax>
		Object removeMagazine String
	</Syntax>
	<RawSyntax>
		unitName removeMagazine magazineName
	</RawSyntax>
	<Example>
		$Code$player removeMagazine "M16"$/Code$
	</Example>
	<Locality>
		local / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setGroupIdGlobal
	</Keyword>
	<Description>
		A global equivalent of setGroupId
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setGroupIdGlobal
	</WikiPage>
	<Syntax>
		Object/Group setGroupIdGlobal Array
	</Syntax>
	<RawSyntax>
		group setGroupIdGlobal [nameFormat, nameParam1,, nameParamN]
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		moveInCargo
	</Keyword>
	<Description>
		Move soldier into vehicle cargo position (Immediate, no animation).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/moveInCargo
	</WikiPage>
	<Syntax>
		Object moveInCargo Object
	</NextSyntax>
		Object moveInCargo Array
	</Syntax>
	<RawSyntax>
		unitName moveInCargo vehicle
	</NextRawSyntax>
		unitName moveInCargo [vehicle, CargoIndex]
	</RawSyntax>
	<Example>
		$Code$_soldierOne moveInCargo _jeepOne;$/Code$
	</NextExample>
		$Code$_soldierOne moveInCargo [_jeepOne, 1];$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		(August 4, 2006)
	Notes from before the conversion
	If you place a soldier in a vehicle with the moveInCargo command, he wont "know" he's in the vehicle, and thus he won't disembark properly when the vehicle reaches a Transport Unload waypoint. Therefore you have to use the assignAsCargo command, in order for the AI to catch on. Something like this: moveInCargo helo1 this assignAsCargo helo1
	MP Note Functions MoveInCargo can only be called for local soldiers. They will be ignored for remote soldiers. (see Locality in Multiplayer )
	</NextNote>
		In OFP v1.96, the moveIn commands will not trigger an associated getIn event. To ensure the getIn event is fired, use the "getIn Cargo" action command.
	</NextNote>
		In Arma 3 when using the alternative syntax of moveInCargo, it is necessary to call assignAsCargoIndex because it is not called automatically.
	$Code$unit1 moveInCargo [heli, 3];
	unit1 assignAsCargoIndex [heli, 3];$/Code$
	Alternatively avoid this broken syntax all together and use:
	$Code$unit1 assignAsCargoIndex [heli, 3];
	unit1 moveInCargo heli;
	$/Code$
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setMarkerSizeLocal
	</Keyword>
	<Description>
		Set marker size.
	Size is in format [a-axis, b-axis].
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setMarkerSizeLocal
	</WikiPage>
	<Syntax>
		String setMarkerSizeLocal Array
	</Syntax>
	<RawSyntax>
		markerName setMarkerSizeLocal [a-axis, b-axis]
	</RawSyntax>
	<Example>
		$Code$"MarkerOne" setMarkerSizeLocal [100, 200];$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		camPrepareDive
	</Keyword>
	<Description>
		Prepares the camera dive angle.
	This command is non-functional !
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/camPrepareDive
	</WikiPage>
	<Syntax>
		Object camPrepareDive Number
	</Syntax>
	<RawSyntax>
		camera camPrepareDive dive
	</RawSyntax>
	<Example>
		$Code$_camera camPrepareDive -0.1$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		libraryDisclaimers
	</Keyword>
	<Description>
		Returns the library disclaimers.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/libraryDisclaimers
	</WikiPage>
	<Syntax>
		libraryDisclaimers
	</Syntax>
	<RawSyntax>
		libraryDisclaimers
	</RawSyntax>
	<Example>
		$Code$hint str libraryDisclaimers ; // as in Arma2 OA 1.62.95208
	// ["THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		edit3DENMissionAttributes
	</Keyword>
	<Description>
		Open a window with scenario attribute in given section.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/edit3DENMissionAttributes
	</WikiPage>
	<Syntax>
		edit3DENMissionAttributes String
	</Syntax>
	<RawSyntax>
		edit3DENMissionAttributes section
	</RawSyntax>
	<Example>
		$Code$edit3DENMissionAttributes "Multiplayer";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		curatorAddons
	</Keyword>
	<Description>
		Returns list of addons allowed to given curator.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/curatorAddons
	</WikiPage>
	<Syntax>
		curatorAddons Object
	</Syntax>
	<RawSyntax>
		curatorAddons curatorObj
	</RawSyntax>
	<Example>
		$Code$_addons = curatorAddons myCurator;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		waypointCompletionRadius
	</Keyword>
	<Description>
		Gets the radius around the waypoint where the waypoint is completed.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/waypointCompletionRadius
	</WikiPage>
	<Syntax>
		waypointCompletionRadius Array
	</Syntax>
	<RawSyntax>
		waypointCompletionRadius waypoint
	</RawSyntax>
	<Example>
		$Code$_radius = waypointCompletionRadius [groupOne, 1];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		finite
	</Keyword>
	<Description>
		True, if number is finite (not infinite and a valid number)
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/finite
	</WikiPage>
	<Syntax>
		finite Number
	</Syntax>
	<RawSyntax>
		finite x
	</RawSyntax>
	<Example>
		$Code$?!finite 10/0 : hint "Infinite"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(27 Sep, 2013)
	Don't get high hopes with this command thinking what a great way of catching divisions by zero, the command is pretty useless in this respect:
	$Code$//ArmA 2
	hint str finite (10/0); //true... O_o Huh????
	hint str (10/0); //0... Weird, but that explains it.
	//ArmA 3
	hint str finite (10/0); // Error Zero Divisor
	hint str finite 10; //true
	hint str finite 1000000000000000000000000000000000000000; //false$/Code$
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		soldierMagazines
	</Keyword>
	<Description>
		Get array with all magazines of the given unit.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/soldierMagazines
	</WikiPage>
	<Syntax>
		soldierMagazines Object
	</Syntax>
	<RawSyntax>
		soldierMagazines unit
	</RawSyntax>
	<Example>
		$Code$soldierMagazines player ;[
	"6.5mm 30Rnd STANAG Mag(30/30)[id/cr:1/0](5x)",
	"9mm 16Rnd Mag(16/16)[id/cr:7/0](2x)",
	"RGO Frag Grenade(1/1)[id/cr:10/0](2x)",
	"Smoke Grenade (White)(1/1)[id/cr:12/0](1x)",
	"Smoke Grenade (Green)(1/1)[id/cr:13/0](1x)",
	"Chemlight (Green)(1/1)[id/cr:14/0](2x)",
	"Titan AT Missile(1/1)[id/cr:16/0](2x)"
	]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		buildingPos
	</Keyword>
	<Description>
		Returns PositionAGL of a given indexed position in a building. The index is 0-based (i.e. the first possible position would be 0. So if a building has 5 positions listed in the editor, 4 would be the highest position index usable with this command). Command will return [0,0,0] if buildingPos with given index is non-existent.
	Since Arma 3 v.155.133934 if index -1 is supplied, the command will return array with all available positions.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/buildingPos
	</WikiPage>
	<Syntax>
		Object buildingPos Number
	</Syntax>
	<RawSyntax>
		building buildingPos index
	</RawSyntax>
	<Example>
		$Code$_soldier setPosATL (_house1 buildingPos 2);$/Code$
	</NextExample>
		$Code$_allpositions = nearestBuilding player buildingPos -1;$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(August 2, 2006)
	Notes from before the conversion:
	These examples will move a unit to the 1st position specified in a buildings model, in the second example - bunker1.
	$Code$this move (building buildingPos 1);
	this move (bunker1 buildingPos 1);$/Code$
	In the default game buildings, the buildingPos is usually right behind a window. This can make it easy to place units in the windows of buildings, by putting the unit near a building and putting this in its init field:
	$Code$this setPosATL (( nearestBuilding this) buildingPos 1);$/Code$
	The location returned by buildingPos is not reliable after the player has exited and then resumed the mission. For code that is executed immediately after the mission starts there is no problem.
	If buildingPos locations are to be accessed during the mission when the player may have exited and then resumed, save the locations you require at the start of the mission and use these saved locations in your subsequent scripts.
	</NextNote>
		(January 26, 2007)
	The highest index is not necessarily the highest position in a building! Check the z-value to find out the absolute height of a position.
	</NextNote>
		(February 16, 2007)
	(building buildingPos 1) will return [0,0,0] if buildingPos with this index does not exist.
	</NextNote>
		(January 08, 2011)
	Almost all buildings loose their building positions when they get (visually) damaged or destroyed. Some debris do still have building positions though. So it is no technical limitation. Just most damaged/destructed buildings models do not (yet?) have building positions. Keep in mind that a damaged or destroyed building is a different object instance (and model).
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		commandFSM
	</Keyword>
	<Description>
		Orders a unit to process command defined by FSM file (via the radio).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/commandFSM
	</WikiPage>
	<Syntax>
		Object/Array commandFSM Array
	</Syntax>
	<RawSyntax>
		unitName commandFSM [fsm name, position, target]
	</RawSyntax>
	<Example>
		$Code$_soldierOne commandFSM ["move.fsm", position player, player]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		getPosVisual
	</Keyword>
	<Description>
		Returns an object's rendered 3D position (z value above sea when over sea, or above ground when over land) in render time scope. Alias of visiblePosition.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getPosVisual
	</WikiPage>
	<Syntax>
		getPosVisual Object
	</Syntax>
	<RawSyntax>
		getPosVisual object
	</RawSyntax>
	<Example>
		$Code$_playerRenderedPos = getPosVisual player ;$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		canAdd
	</Keyword>
	<Description>
		Checks if given object can be stored in inventory of given object or any inventory container ( uniform, vest, backpack ) of given unit.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/canAdd
	</WikiPage>
	<Syntax>
		Object canAdd String
	</NextSyntax>
		Object canAdd Array
	</Syntax>
	<RawSyntax>
		object canAdd item
	</NextRawSyntax>
		object canAdd [item, count]
	</RawSyntax>
	<Example>
		$Code$if ( player canAdd "FirstAidKit") then {
	player addItem "FirstAidKit";
	} else {
	hint "Not enough space";
	};$/Code$
	</NextExample>
		$Code$if (_box canAdd "FirstAidKit") then {
	_box addWeaponCargo ["FirstAidKit", 1];
	} else {
	hint "Not enough space";
	};$/Code$
	</NextExample>
		$Code$car canAdd [ currentWeapon player, 50];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(November 29, 2015)
	Can also be used on any object that has inventory, not only player inventory containers.
	Where _box is B_supplyCrate_F :
	$Code$// Empty
	_box canAdd "FirstAidKit";
	- true
	// Full
	_box canAdd "FirstAidKit";
	- false
	$/Code$
	</NextNote>
		(February 11, 2017)
	This can also be used as alternative to canAddItemToBackpack, canAddItemToUniform, canAddItemToVest where container might not be strictly defined.In some cases it might be a good optimisation for your code, where you also don't need to perform checks on which type of player container this is. Example:
	$Code$_i = [(uniformContainer player),(vestContainer player),(backpackContainer player)] call BIS_fnc_selectRandom;
	if (_i canAdd "Rangefinder") then {
	_i addItemCargoGlobal ["Rangefinder",1];
	};
	$/Code$
	</Note>
	<ReturnValue>
		Boolean - Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		clearWeaponCargo
	</Keyword>
	<Description>
		Remove all weapons from the given vehicle's weapon cargo space.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/clearWeaponCargo
	</WikiPage>
	<Syntax>
		clearWeaponCargo Object
	</Syntax>
	<RawSyntax>
		clearWeaponCargo vehicleName
	</RawSyntax>
	<Example>
		$Code$clearWeaponCargo _truck$/Code$
	</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
		(October 24, 2009)
	Only works on clients.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		actionKeysImages
	</Keyword>
	<Description>
		Returns a list of button images or names assigned to the given user action. A maximum of maxKeys keys is listed. You can find the action names in config class ControllerSchemes or user action names.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/actionKeysImages
	</WikiPage>
	<Syntax>
		actionKeysImages String
	</NextSyntax>
		actionKeysImages Array
	</Syntax>
	<RawSyntax>
		actionKeysImages userAction
	</NextRawSyntax>
		actionKeysImages [userAction, maxKeys]
	</RawSyntax>
	<Example>
		$Code$_text = actionKeysImages "ReloadMagazine"$/Code$
	</NextExample>
		$Code$_reload = actionKeysImages ["ReloadMagazine",1] will return "R" (incl. the quotation marks!)$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Structured_Text - Structured_Text
	</ReturnValue>

</NextListItem>

	<Keyword>
		moveInTurret
	</Keyword>
	<Description>
		Moves the soldier into the vehicle's turret. (Immediately, without animation). turret path is an array of positions inside a turret, or positions inside a turret of a turret.
	[0] means first turret.
	[0,0] means first turret of first turret.
	[0,1] means second turret of first turret.
	[1] means second turret.
	[1,0] means first turret of the second turret.
	[2,0] means first turret of third turret.
	And so on...
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/moveInTurret
	</WikiPage>
	<Syntax>
		Object moveInTurret Array
	</Syntax>
	<RawSyntax>
		unitName moveInTurret [vehicle, turretPath]
	</RawSyntax>
	<Example>
		$Code$_soldierOne moveInTurret [_tank, [0, 0]]$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		(March 6, 2008)
	To find out which turrets are available on a vehicle, and what the syntax is, you can use this little script.
	</NextNote>
		(February 13, 2014)
	Examples for nested turrets:
	MainTurret = $Code$_soldierOne moveInTurret [_tank, [0]] $/Code$
	CommanderTurret = $Code$_soldierOne moveInTurret [_tank, [0, 0]] $/Code$
	... where:
	MainTurret is the standard BIS MainTurret... e.g:
	$Code$class Turrets
	{
	class MainTurret {};
	};$/Code$
	CommanderTurret is the standard BIS CommanderTurret located on the MainTurret... e.g:
	$Code$class Turrets
	{
	class MainTurret
	{
	class Turrets
	{
	class CommanderTurret {};
	};
	};
	};$/Code$
	</NextNote>
		(March 18, 2014)
	Here is a small function to find available turret paths for a given vehicle. It will only search 2 levels deep, hence called commonTurrets :
	$Code$KK_fnc_commonTurrets = {
	private ["_arr","_trts"];
	_arr = [];
	_trts = configFile / "CfgVehicles" / typeOf _this / "Turrets";
	for "_i" from 0 to count _trts - 1 do {
	_arr set [ count _arr, [_i]];
	for "_j" from 0 to count (
	_trts / configName (_trts select _i) / "Turrets"
	) - 1 do {
	_arr set [ count _arr, [_i, _j]];
	};
	};
	_arr
	};$/Code$
	Example call:
	$Code$ hint str ( vehicle player call KK_fnc_commonTurrets); //[[0],[0,0]]$/Code$
	See also allTurrets
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		shownChat
	</Keyword>
	<Description>
		Returns true if chat window is enabled. Chat window can be disabled with showChat command.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/shownChat
	</WikiPage>
	<Syntax>
		shownChat
	</Syntax>
	<RawSyntax>
		shownChat
	</RawSyntax>
	<Example>
		$Code$_bool = shownChat ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		groupIconsVisible
	</Keyword>
	<Description>
		Return group icons are visible.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/groupIconsVisible
	</WikiPage>
	<Syntax>
		groupIconsVisible
	</Syntax>
	<RawSyntax>
		groupIconsVisible
	</RawSyntax>
	<Example>
		$Code$// HC bar active
	if (isNil "BIS_HC_visible") then {BIS_HC_visible = groupIconsVisible};
	setGroupIconsVisible [true,true];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		setPos
	</Keyword>
	<Description>
		Sets object position.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setPos
	</WikiPage>
	<Syntax>
		Object setPos Array
	</Syntax>
	<RawSyntax>
		object setPos pos
	</RawSyntax>
	<Example>
		$Code$player setPos [ getPos player select 0, getPos player select 1, ( getPos player select 2) +10];
	//the same as above using modelToWorld :
	player setPos ( player modelToWorld [0,0,10]);
	//the same as above using vectorAdd :
	player setPos ( getPos player vectorAdd [0,0,10]);$/Code$
	</NextExample>
		$Code$_obj setPos [ getPos _obj select 0, getPos _obj select 1, -5];$/Code$
	</NextExample>
		$Code$player setPos ( getPos _obj);$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
		(6 Feb, 2011)
	Calling setPos on an object can cause the object's orientation to change. This depends on the terrain and/or objects below the object. This was tested by calling setPos on a test object with the position of a helicopter ( modelToWorld with some offset). When flying over land the orientation of the test object would rapidly change depending on the slope of the ground and objects beneath it.
	Comment applicable to Ver 1.96 and earlier :
	obj1 setPos [x,y,z]
	Will place most objects z metres above ground level (negative numbers for underground). But if obj1 is a trigger then it will be placed z metres above sea level. This can be very useful if you want to check a unit's height above sea level but it can be a problem if you want to move a trigger to create an explosion or a sound. To move a trigger to a location at ground level:
	$Code$triggername setPos [x,y,0];
	triggername setPos [x,y, abs ( getPos triggername select 2)];$/Code$
	Note for Armed Assault: Using setPos for a trigger will work in exactly the same way that setPos works for other objects - namely that setPos [x,y,z] will place the trigger z metres above ground level.
	SetPos for static objects like a ammo crate do not work in MP.
	</NextNote>
		(23 Nov, 2011)
	You can use getPos and setPos on triggers.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		get3DENMissionAttribute
	</Keyword>
	<Description>
		Return value of scenario attribute.
	!
	Attributes are available only within the Eden Editor workspace. You cannot access them in scenario preview or exported scenario!
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/get3DENMissionAttribute
	</WikiPage>
	<Syntax>
		String get3DENMissionAttribute String
	</Syntax>
	<RawSyntax>
		section get3DENMissionAttribute class
	</RawSyntax>
	<Example>
		$Code$systemChat str ("Multiplayer" get3DENMissionAttribute "respawn");$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(February 26, 2016)
	The class names of the vanilla sections are:
	General
	Scenario
	Environment
	Intel
	Multiplayer
	Multiplayer
	Garbage Collection
	GarbageCollection
	Preferences
	Preferences
	</Note>
	<ReturnValue>
		Anything
	</ReturnValue>

</NextListItem>

	<Keyword>
		UAVControl
	</Keyword>
	<Description>
		Returns array with current operator of UAV and his vehicle role in UAV.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/UAVControl
	</WikiPage>
	<Syntax>
		UAVControl Object
	</Syntax>
	<RawSyntax>
		UAVControl uav
	</RawSyntax>
	<Example>
		$Code$UAVControl uav;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		getAllSoundControllers
	</Keyword>
	<Description>
		Returns an array containing names and values of the sound controllers that can be used in simple expressions when configuring sounds.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getAllSoundControllers
	</WikiPage>
	<Syntax>
		getAllSoundControllers Object
	</Syntax>
	<RawSyntax>
		getAllSoundControllers vehicle
	</RawSyntax>
	<Example>
		$Code$getAllSoundControllers vehicle player ;
	// Result: [["rpm",0],["randomizer",0.874332],["speed",0],["thrust",0],...]]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		setLightColor
	</Keyword>
	<Description>
		Set diffuse color of light. Illuminates surfaces that are facing the light.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setLightColor
	</WikiPage>
	<Syntax>
		Object setLightColor Array
	</Syntax>
	<RawSyntax>
		light setLightColor [r, g, b]
	</RawSyntax>
	<Example>
		$Code$myLight setLightColor [0.5,0,0]; //produces red$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
		(Dec 1, 2006)
	Light can be created with command createVehicleLocal with special vehicle class "#lightpoint"
	for example:
	$Code$_light = "#lightpoint" createVehicleLocal pos;
	_light setLightBrightness 1.0;
	_light setLightAmbient [0.0, 1.0, 0.0];
	_light setLightColor [0.0, 1.0, 0.0];
	_light lightAttachObject [_object, [0,0,0]];
	$/Code$
	</NextNote>
		(Aug 17, 2007)
	To clarify:
	setLightAmbient - Terrain and surrounding objects are bathed in this colour.
	setLightColor - Controls the "haze" seen around the lightsource (ex flares).
	</NextNote>
		(Mar 24, 2014)
	1. In ArmA3 ver 1.14 setLightColor will also change the color of the flare when setLightUseFlare, setLightFlareSize and setLightFlareMaxDistance were used on the same light source. For example:
	$Code$
	_light setLightUseFlare true;
	_light setLightFlareSize 2;
	_light setLightFlareMaxDistance 60;
	_light setLightColor [1, 1, 1];
	$/Code$
	2. When both setLightAmbient and setLightColor were [0,0,0], there won’t be any visual presentation on the light source.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		debugLog
	</Keyword>
	<Description>
		Dump argument type and value to debugging output.
	This command is non-functional in the retail version
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/debugLog
	</WikiPage>
	<Syntax>
		debugLog Any_Value
	</Syntax>
	<RawSyntax>
		debugLog anything
	</RawSyntax>
	<Example>
		$Code$debugLog player$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		menuEnabled
	</Keyword>
	<Description>
		Returns if menu entry on given path is enabled or not.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/menuEnabled
	</WikiPage>
	<Syntax>
		menuEnabled Array
	</Syntax>
	<RawSyntax>
		menuEnabled [idc, path]
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		countUnknown
	</Keyword>
	<Description>
		Count how many units in the array are unknown to the given unit.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/countUnknown
	</WikiPage>
	<Syntax>
		Object countUnknown Array
	</Syntax>
	<RawSyntax>
		unitName countUnknown arrayName
	</RawSyntax>
	<Example>
		$Code$_num = player countUnknown list _triggerOne;$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		visibleWatch
	</Keyword>
	<Description>
		Checks if the player has watch opened and visible
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/visibleWatch
	</WikiPage>
	<Syntax>
		visibleWatch
	</Syntax>
	<RawSyntax>
		visibleWatch
	</RawSyntax>
	<Example>
		$Code$if ( visibleWatch ) then { hint "Watch is visible"};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		exec
	</Keyword>
	<Description>
		Execute a script using (the deprecated but still available).sqs syntax. The argument is passed to the script in the "_this" variable, and magic variable "_time" within the script contains the time in seconds that the script has been running.
	Alternatively use execVM command in combination with.sqf syntax.
	Learn more about scripts under Scripts.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/exec
	</WikiPage>
	<Syntax>
		Any_Value exec String
	</Syntax>
	<RawSyntax>
		argument exec script
	</RawSyntax>
	<Example>
		$Code$[player, _jeep] exec "getin.sqs"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		getWeaponSway
	</Keyword>
	<Description>
		Returns current size of weapon sway of a given unit, in radians
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getWeaponSway
	</WikiPage>
	<Syntax>
		getWeaponSway Object
	</Syntax>
	<RawSyntax>
		getWeaponSway unit
	</RawSyntax>
	<Example>
		$Code$_sway = getWeaponSway player ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		private
	</Keyword>
	<Description>
		Sets a variable to the innermost scope as demonstrated in Example 3. One other command that is capable of creating private variables is params.
	Since Arma 3 v1.53.132932 private can be used as keyword as shown in Example 4.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/private
	</WikiPage>
	<Syntax>
		private String
	</NextSyntax>
		private Array
	</Syntax>
	<RawSyntax>
		private variableName
	</NextRawSyntax>
		private variableNameList
	</RawSyntax>
	<Example>
		$Code$private "_varname";$/Code$
	</NextExample>
		$Code$private ["_varname1", "_varname2"];$/Code$
	</NextExample>
		$Code$_myvar = 123;
	systemChat str [_myvar]; // -- [123]
	call {
	systemChat str [_myvar]; // -- [123]
	private "_myvar";
	systemChat str [_myvar]; // -- [any]
	_myvar = 345;
	systemChat str [_myvar]; // -- [345]
	};
	systemChat str [_myvar]; // -- [123]$/Code$
	</NextExample>
		$Code$// Usage of private as keyword:
	private _myvar = 123;
	//is the same as
	private "_myvar";
	_myvar = 123;$/Code$
	</NextExample>
		$Code$_lol = 123; call { hint str [_lol]}; // [123]
	_lol = 123; call { private "_lol"; hint str [_lol]}; // [any]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(Sep 24, 2009 15:04)
	The example provided is fairly worthless without a context.
	Using the private command allows you to declare a variable in the current scope, without regards to variables in a higher scope with the same name. Note that if you try to declare a variable without an underscore (meaning it's global) with the private command, it will cause an error. Specifically: "Error Local variable in global space".
	Here's a code example with output for your benefit.
	$Code$
	_foo = 10;
	if (true) then
	{
	private ["_foo"];
	_foo = 5;
	player sideChat format ["%1", _foo];
	};
	player sideChat format ["%1", _foo];
	$/Code$
	In this example, the first sidechat (innermost) returns 5 while the second sidechat (outermost) returns 10.
	$Code$
	if (true) then
	{
	private ["_bar"];
	_bar = 5;
	player sideChat format ["%1", _bar];
	};
	$/Code$
	In this example, the private command does nothing and is simply a waste of code, assuming there is no higher level code to interfere with the if statement.
	</NextNote>
		(August 4, 2010)
	The higher scope is also the script from which the function has been called.
	If you've got in the script:
	$Code$
	_a = 1;
	call compile loadFile "function.sqf";
	hint format ["%1", _a];
	$/Code$
	And in the function.sqf :
	$Code$
	_a = 2;
	$/Code$
	Game will display 2.
	Inserting private "_a" in the function prevents the change and so number 1 will be displayed on the screen.
	</NextNote>
		(February 25, 2015)
	Recursive loops require the use of private. Without it, your variables will be overwritten.
	</NextNote>
		(January 31, 2018)
	More examples!
	$Code$ if ( true ) then { //new scope
	_localVar = "some string";
	systemChat _localVar; // = "some string"
	};
	systemChat _localVar; // = ERROR _localVar doesn't exist in the outer Scope
	$/Code$
	$Code$_localVar = "bla";
	if ( true ) then { //new scope
	_localVar = "some string";
	systemChat _localVar; // = "some string"
	};
	systemChat _localVar; // = "some string"
	$/Code$
	$Code$_localVar = "bla";
	if ( true ) then {
	private _localVar = "some string";
	systemChat _localVar; // = "some string"
	};
	systemChat _localVar; // = "bla"
	$/Code$
	$Code$_localVar = "bla";
	if ( true ) then { //new scope
	private _localVar = "some string";
	if ( true ) then { //new scope
	private _localVar = "some other string";
	systemChat _localVar; // = "some other string"
	};
	systemChat _localVar; // = "some string"
	};
	systemChat _localVar; // = "bla"
	$/Code$
	</NextNote>
		(January 31, 2018)
	This command has the same functionality as javascript's let keyword.
	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		savingEnabled
	</Keyword>
	<Description>
		Check if saving the game is enabled.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/savingEnabled
	</WikiPage>
	<Syntax>
		savingEnabled
	</Syntax>
	<RawSyntax>
		savingEnabled
	</RawSyntax>
	<Example>
		$Code$if ( savingEnabled ) then {
	hint "Saving is enabled!";
	};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		lnbSetColumnsPos
	</Keyword>
	<Description>
		Sets relative screen X for ListNBox control columns positions. Setter for lnbGetColumnsPosition
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lnbSetColumnsPos
	</WikiPage>
	<Syntax>
		lnbSetColumnsPos Array
	</NextSyntax>
		Control lnbSetColumnsPos Array
	</Syntax>
	<RawSyntax>
		lnbSetColumnsPos [idc, positions]
	</NextRawSyntax>
		ctrl lnbSetColumnsPos positions
	</RawSyntax>
	<Example>
		$Code$lnbSetColumnsPos [101, [0.1,0.5,0.7]];$/Code$
	</NextExample>
		$Code$_ctrl lnbSetColumnsPos [0.1,0.5,0.7];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(Sep 9 2014)
	See: List Box#LISTNBOX
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		isEqualTo
	</Keyword>
	<Description>
		Performs strict comparison between var1 and var2 and returns true if equal, otherwise false. Strict means that it would check that both arguments are of the same data type and then compare the values.
	Some differences between isEqualTo and == :
	It performs case sensitive comparison on Strings
	It doesn't throw error when comparing different types, i.e. ("eleven" isEqualTo 11)
	It can compare Arrays, Scripts and Booleans ( alive player isEqualTo true )
	It can compare non-existent game objects ( grpNull isEqualTo grpNull )
	It can compare Namespaces ( As of Arma 3 v1.47 )
	It is slightly faster than ==, especially when comparing Strings
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isEqualTo
	</WikiPage>
	<Syntax>
		Anything isEqualTo Anything
	</Syntax>
	<RawSyntax>
		val1 isEqualTo val2
	</RawSyntax>
	<Example>
		$Code$_arr1 = [1,[2,[3]]];
	_arr2 = [1,[2,[3]]];
	if (_arr1 isEqualTo _arr2) then { hint "Arrays match!"}$/Code$
	</NextExample>
		$Code$if (a isEqualTo b) then { hint "a is equal to b"};
	if !(a isEqualTo b) then { hint "a is not equal to b"};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(July 19, 2014)
	The behavior of "var1 isEqualTo var2" is pretty much equivalent to "var1 in [var2]", plus the ability to compare arrays, and slightly better performance.
	</NextNote>
		(December 3, 2014)
	Simply put, "isEqualTo" is a binary comparison. Therefor it is very fast but only accepts 100% identical matches. In some other languages this is known as "===" instead of "==".
	</NextNote>
		(November 3, 2016)
	When comparing with nil result is Nothing.
	"nil isEqualTo player" returns "Nothing" instead of expected "false"
	$Code$diag_log [nil isEqualTo player];$/Code$
	Will print "[bool]"
	$Code$diag_log (str (nil isEqualTo player)) + "test";$/Code$
	Will throw Generic error in expression
	"+: Type Nothing, expected Number,Array,String,Not a Number"
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		setWaypointDescription
	</Keyword>
	<Description>
		Sets the description shown in the HUD while the waypoint is active.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setWaypointDescription
	</WikiPage>
	<Syntax>
		Array setWaypointDescription String
	</Syntax>
	<RawSyntax>
		waypoint setWaypointDescription text
	</RawSyntax>
	<Example>
		$Code$[_grp, 2] setWaypointDescription "Move here.";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		secondaryWeaponItems
	</Keyword>
	<Description>
		Returns array with all items assigned to the secondary weapon. This command is used for infantry weapons only.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/secondaryWeaponItems
	</WikiPage>
	<Syntax>
		secondaryWeaponItems Object
	</Syntax>
	<RawSyntax>
		secondaryWeaponItems unit
	</RawSyntax>
	<Example>
		$Code$secondaryWeaponItems player ; //["","","",""]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		timeMultiplier
	</Keyword>
	<Description>
		Returns the value set with setTimeMultiplier.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/timeMultiplier
	</WikiPage>
	<Syntax>
		timeMultiplier
	</Syntax>
	<RawSyntax>
		timeMultiplier
	</RawSyntax>
	<Example>
		$Code$_multiplier = timeMultiplier ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		vectorAdd
	</Keyword>
	<Description>
		Adds two 3D vectors.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/vectorAdd
	</WikiPage>
	<Syntax>
		Array vectorAdd Array
	</Syntax>
	<RawSyntax>
		vector1 vectorAdd vector2
	</RawSyntax>
	<Example>
		$Code$hint str ( velocity unit1 vectorAdd velocity unit2);$/Code$
	</NextExample>
		$Code$[5,10,5] vectorAdd [5,5,10]; //returns [10,15,15]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(28 Jun, 2014)
	(ArmA3 1.22)Algorithm:
	$Code$
	Vector1 = [x1,y1,z1]; Vector2 = [x2,y2,z2];
	Result = [x1 + x2,y1 + y2,z1 + z2;]
	$/Code$
	It is recommended to use vectorAdd instead of BIS_fnc_vectorAdd.
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		ASLToAGL
	</Keyword>
	<Description>
		Converts position from PositionASL to PositionAGL
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ASLToAGL
	</WikiPage>
	<Syntax>
		ASLToAGL PositionASL
	</Syntax>
	<RawSyntax>
		ASLToAGL posASL
	</RawSyntax>
	<Example>
		$Code$_playerPosAGL = ASLToAGL getPosASL player ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		PositionAGL
	</ReturnValue>

</NextListItem>

	<Keyword>
		kbAddDatabaseTargets
	</Keyword>
	<Description>
		Register target list knowledge base database to given person. See Conversations for more details.
	This function is no longer available in ArmA 2.
	This function is no longer available in Arma 3.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/kbAddDatabaseTargets
	</WikiPage>
	<Syntax>
		Object kbAddDatabaseTargets String
	</Syntax>
	<RawSyntax>
		person kbAddDatabaseTargets fileName
	</RawSyntax>
	<Example>
		$Code$_hasBeenAdded = _unit kbAddDatabaseTargets "chat.txt"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		setWaves
	</Keyword>
	<Description>
		Changes the waves value smoothly during the given time (in seconds). A time of zero means there will be an immediate change.
	NOTE : This command will have no effect (even though the value of waves changes) unless Manual Override option is selected in the editor in the Intel, which is normally off.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setWaves
	</WikiPage>
	<Syntax>
		Number setWaves Number
	</Syntax>
	<RawSyntax>
		time setWaves value
	</RawSyntax>
	<Example>
		$Code$180 setWaves.5;$/Code$
	</NextExample>
		$Code$0 setWaves 1;$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		preloadSound
	</Keyword>
	<Description>
		Makes sure that a sound can start playing without any delay once it is needed. Command works in Arma 3, but might not be implemented in earlier Arma installments.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/preloadSound
	</WikiPage>
	<Syntax>
		preloadSound String
	</Syntax>
	<RawSyntax>
		preloadSound soundName
	</RawSyntax>
	<Example>
		$Code${
	waitUntil { preloadSound _x};
	} forEach getArray ( missionConfigFile "CfgSounds" "sounds");$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		setRadioMsg
	</Keyword>
	<Description>
		Sets radio trigger menu title text (0 - 0 - map radio). Use "NULL" to disable radio slot. Use "" to restore default title
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setRadioMsg
	</WikiPage>
	<Syntax>
		Number setRadioMsg String
	</Syntax>
	<RawSyntax>
		index setRadioMsg text
	</RawSyntax>
	<Example>
		$Code$1 setRadioMsg "Click meeeeeeeeee"; //changes title of radio Alpha$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		saveOverlay
	</Keyword>
	<Description>
		Save the current overlay.
	i
	Some Old Editor Command
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/saveOverlay
	</WikiPage>
	<Syntax>
		saveOverlay Control
	</Syntax>
	<RawSyntax>
		saveOverlay map
	</RawSyntax>
	<Example>
		$Code$saveOverlay _map$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		systemOfUnits
	</Keyword>
	<Description>
		Returns the currently selected system of units.
	0: Metric
	1: Mixed (ground vehicles use Metric / air vehicles use Imperial)
	2: Imperial
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/systemOfUnits
	</WikiPage>
	<Syntax>
		systemOfUnits
	</Syntax>
	<RawSyntax>
		systemOfUnits
	</RawSyntax>
	<Example>
		$Code$_system = systemOfUnits;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		weaponDirection
	</Keyword>
	<Description>
		Returns the direction that the vehicle weapon is aiming in.
	For addons the weapon name must be an entry in CfgWeapons.
	Returns an array in format [x, y, z]
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/weaponDirection
	</WikiPage>
	<Syntax>
		Object weaponDirection String
	</Syntax>
	<RawSyntax>
		vehicleName weaponDirection weaponName
	</RawSyntax>
	<Example>
		$Code$_weaponVectorDir = player weaponDirection currentWeapon player ;$/Code$
	</NextExample>
		$Code$// Draw AI eye direction (green) and weapon direction (red) in 3D:
	bob = createGroup east createUnit ["O_Soldier_F", [0,0,0], [], 0, "NONE"];
	bob setVehiclePosition [ player modelToWorld [0,100,0], [], 0, "NONE"];
	onEachFrame
	{
	_beg = ASLToAGL eyePos bob;
	_endE = (_beg vectorAdd ( eyeDirection bob vectorMultiply 100));
	drawLine3D [ _beg, _endE, [0,1,0,1]];
	_endW = (_beg vectorAdd (bob weaponDirection currentWeapon bob vectorMultiply 100));
	drawLine3D [_beg, _endW, [1,0,0,1]];
	};$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(August 18, 2007)
	Works great in multiplayer.
	The numbers are representing offset as follows : [X axis,Y axis,Z axis]
	The return array can be processed-converted into degrees as follows:
	$Code$_array = _this weaponDirection "weapon class" ;
	_dir_degrees = (_array select 0) atan2 (_array select 1);$/Code$
	</NextNote>
		(November 11, 2007)
	WeaponClass can only be the primary turret of the vehicle. For example it is not possible to get direction of commander's M2 on M1Abrams.
	</NextNote>
		(November 13, 2007)
	For an alternative to the weaponDirection command, see the following post on the offical forums. On how to obtain the direction of multiple turrets on vehicles.
	Turret Animations - new forum
	</NextNote>
		(December 9, 2014)
	The suggestion above using atan2 and weaponDirection get the direction the barrel of a weapon is pointing, but this is not the same as the direction a shell will be fired (verify this by getting in an M4 Scorcher, parking it on a slope, elevating the barrel "across" the slope and watching the shell come out in third person).
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		markAsFinishedOnSteam
	</Keyword>
	<Description>
		Marks current mission as finished on Steam. Returns true if Steam query is successfully started or false otherwise.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/markAsFinishedOnSteam
	</WikiPage>
	<Syntax>
		markAsFinishedOnSteam
	</Syntax>
	<RawSyntax>
		markAsFinishedOnSteam
	</RawSyntax>
	<Example>
		$Code$markAsFinishedOnSteam ;
	endMission "END1";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		getFuelCargo
	</Keyword>
	<Description>
		Returns the fuel amount (between 0 and 1) in the cargo space of a refuelling vehicle.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getFuelCargo
	</WikiPage>
	<Syntax>
		getFuelCargo Object
	</Syntax>
	<RawSyntax>
		getFuelCargo vehicle
	</RawSyntax>
	<Example>
		$Code$value = getFuelCargo myVehicleName;$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(December 22, 2014)
	If the vehicle is not alive, it always returns Nothing, which you should check for using isNil.
	If the vehicle is unable to carry that type of cargo, it returns -1.#IND, which you should check for using finite.
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		morale
	</Keyword>
	<Description>
		Checks a current morale level of the unit (-1..+1).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/morale
	</WikiPage>
	<Syntax>
		morale Object
	</Syntax>
	<RawSyntax>
		morale unit
	</RawSyntax>
	<Example>
		$Code$morale ( leader player );//result is 0.5$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctClear
	</Keyword>
	<Description>
		Removes all the lines from the RscControlsTable. Returns Nothing.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctClear
	</WikiPage>
	<Syntax>
		ctClear Control
	</Syntax>
	<RawSyntax>
		ctClear ctrl
	</RawSyntax>
	<Example>
		$Code$ctClear _control;$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		formationTask
	</Keyword>
	<Description>
		Return the current task of the unit in the formation.
	You can't use it in ArmA 2, it will always returns "NOTHING"
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/formationTask
	</WikiPage>
	<Syntax>
		formationTask Object
	</Syntax>
	<RawSyntax>
		formationTask person
	</RawSyntax>
	<Example>
		$Code$_CurrentTask = FormationTask _person$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		textLogFormat
	</Keyword>
	<Description>
		Debugging output.
	This command is non-functional in the retail version
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/textLogFormat
	</WikiPage>
	<Syntax>
		textLogFormat Array
	</Syntax>
	<RawSyntax>
		textLogFormat [format, arg1, arg2,]
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		magazinesDetail
	</Keyword>
	<Description>
		Returns an array of strings with description of all vehicle's magazines, their ammo count (current/default) and their ids.
	When applied to a unit (soldier), the command behaves differently and will omit magazines already loaded into unit's weapons. Use currentMagazineDetail to get this information for a currently loaded magazine.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/magazinesDetail
	</WikiPage>
	<Syntax>
		magazinesDetail Object
	</Syntax>
	<RawSyntax>
		magazinesDetail vehicle
	</RawSyntax>
	<Example>
		$Code$_magazinesDetail = magazinesDetail player ;
	/*
	[
	"6.5mm 30Rnd STANAG Mag(30/30)[id:3]",
	"6.5mm 30Rnd STANAG Mag(30/30)[id:9]",
	"9mm 16Rnd Mag(16/16)[id:12]",
	"Smoke Grenade (Green)(1/1)[id:14]",
	"Chemlight (Green)(1/1)[id:16]",
	"RGO Frag Grenade(1/1)[id:18]"
	]
	*/$/Code$
	</NextExample>
		$Code$_magazinesDetail = magazinesDetail Mi_48;
	/*
	[
	"30mm APDS shells(250/250)[id:20]",
	"30mm HE Shells(250/250)[id:21]",
	"Scalpel E2(8/8)[id:22]",
	"Skyfire(38/38)[id:23]"
	]
	*/$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlSetTooltipColorShade
	</Keyword>
	<Description>
		Sets tooltip background color of given control. Color is in format Color.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlSetTooltipColorShade
	</WikiPage>
	<Syntax>
		Control ctrlSetTooltipColorShade Array
	</Syntax>
	<RawSyntax>
		control ctrlSetTooltipColorShade color
	</RawSyntax>
	<Example>
		$Code$_control ctrlSetTooltipColorShade [1, 0, 0, 1];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		lbSetSelectColorRight
	</Keyword>
	<Description>
		Sets the select color of the of the secondary text (right aligned) of the item with the given index of the listbox or combobox with id idc of the topmost user dialog to color.
	Colour is in format Color.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lbSetSelectColorRight
	</WikiPage>
	<Syntax>
		lbSetSelectColorRight Array
	</NextSyntax>
		Control lbSetSelectColorRight Array
	</Syntax>
	<RawSyntax>
		lbSetSelectColorRight [idc, index, color]
	</NextRawSyntax>
		control lbSetSelectColorRight [index, color]
	</RawSyntax>
	<Example>
		$Code$lbSetSelectColorRight [101, 0, [0, 1, 0, 0.5]];$/Code$
	</NextExample>
		$Code$_control lbSetSelectColorRight [0, [0, 1, 0, 0.5]];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		More information on the LB command family can be found here
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setTriggerArea
	</Keyword>
	<Description>
		Defines the area monitored by the given trigger. The area could be either rectangular or elliptical. Since Arma 3 v1.59.135137 it is possible to define 3 dimensional area to monitor by specifying extra param for the area height (see pic).
	Just like with a and b dimensions, c dimension will alter area in opposite directions from the trigger position along z axis. Therefore if the trigger position is on the surface, half of the trigger area will be above the surface and half below. To place the whole area above the surface, adjust trigger position (move it up c meters). If c is not specified or = 0, the trigger area considered infinitely tall, like in old triggers.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setTriggerArea
	</WikiPage>
	<Syntax>
		Object setTriggerArea Array
	</Syntax>
	<RawSyntax>
		trigger setTriggerArea [a, b, angle, isRectangle, c]
	</RawSyntax>
	<Example>
		$Code$_trigger setTriggerArea [100, 50, 45, false ];$/Code$
	</NextExample>
		$Code$// Possible since Arma 3 v1.59.135137:
	_trigger setTriggerArea [100, 50, 45, false, 100];$/Code$
	</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		intersect
	</Keyword>
	<Description>
		Finds named selections in object which are in specified LOD, intersected by given section of a line. Return value is in the form of [selection, distance]. Multiple returned arrays are nested within a single array. No intersection returns []. lodName could be one of the following:
	"FIRE"
	"VIEW"
	"GEOM"
	"IFIRE" - ("I" stands for Indirect, almost the same as FIRE)
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/intersect
	</WikiPage>
	<Syntax>
		Array intersect Array
	</Syntax>
	<RawSyntax>
		[object, lodName] intersect [begPos, endPos]
	</RawSyntax>
	<Example>
		$Code$[_tank, "VIEW"] intersect [[1500, 1500, 2], [1550, 1500, 2]];$/Code$
	</NextExample>
		$Code$sphere = "Sign_Sphere10cm_F" createVehicle [0,0,0];
	onEachFrame {
	_begPos = positionCameraToWorld [0,0,0];
	_begPosASL = AGLToASL _begPos;
	_endPos = positionCameraToWorld [0,0,1000];
	_endPosASL = AGLToASL _endPos;
	_ins = lineIntersectsSurfaces [_begPosASL, _endPosASL, player, objNull, true, 1, "FIRE", "NONE"];
	if (_ins isEqualTo []) exitWith {sphere setPosASL [0,0,0]};
	_ins select 0 params ["_pos", "_norm", "_obj", "_parent"];
	if !( getModelInfo _parent select 2) exitWith {sphere setPosASL [0,0,0]};
	_ins2 = [_parent, "FIRE"] intersect [_begPos, _endPos];
	if (_ins2 isEqualTo []) exitWith {sphere setPosASL [0,0,0]};
	_ins2 select 0 params ["_name", "_dist"];
	_posASL = _begPosASL vectorAdd ((_begPosASL vectorFromTo _endPosASL) vectorMultiply _dist);
	drawIcon3D ["", [1,1,1,1], ASLToAGL _posASL, 0, 0, 0, _name, 1, 0.03, "PuristaMedium"];
	sphere setPosASL _posASL;
	};$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(Jul 25, 2007)
	The most common LOD is " FIRE ", which identifies the most detailled hitbox used for ammunition.
	</NextNote>
		(Mar 27, 2014)
	Example (In ArmA3 ver 1.14) display returned arrays on cursor entities:
	$Code$
	Sto = [];
	Fn = {
	{
	Sto set [_foreachindex,[cursortarget,_x] intersect [(asltoagl (eyepos player)),(screentoworld [0.5,0.5])]];
	} foreach ["FIRE","VIEW","GEOM","IFIRE"];
	hintsilent format ["FIRE: %1, VIEW: %2, GEOM: %3, IFIRE: %4",Sto select 0,Sto select 1,Sto select 2,Sto select 3];
	};
	["sample_id","onEachFrame","Fn"] call BIS_fnc_addStackedEventHandler;
	$/Code$
	Return FIRE: [something], VIEW: [something], GEOM: [something], IFIRE: [something].
	</NextNote>
		(August 20, 2015)
	intersect will spam.rpt if passed to it object has no skeleton. Use getModelInfo to filter out those objects.
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		deleteCenter
	</Keyword>
	<Description>
		In a nutshell, this command removes gaming Side (see createCenter ). If a side has 0 Groups it cannot be deleted. Center can only be created for: east, west, resistance, civilian and sideLogic, therefore only centers from the mentioned sides can be deleted.
	Old description: Destroys the AI center of the given side.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/deleteCenter
	</WikiPage>
	<Syntax>
		deleteCenter Side
	</Syntax>
	<RawSyntax>
		deleteCenter side
	</RawSyntax>
	<Example>
		$Code$deleteCenter east$/Code$
	</Example>
	<Locality>
		undefined / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		channelEnabled
	</Keyword>
	<Description>
		Returns true or false depending on whether the given channel is enabled or disabled. For more information about enabling/disabling of chat channels see enableChannel. Channel / Number correspondence:
	0 = Global
	1 = Side
	2 = Command
	3 = Group
	4 = Vehicle
	5 = Direct
	6-15 = Custom Radio (Is not supported by channelEnabled )
	Please note that since Arma 3 v1.59.135661 the output of this command was changed from Boolean to Array in format [ Boolean, Boolean ]
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/channelEnabled
	</WikiPage>
	<Syntax>
		channelEnabled Number
	</Syntax>
	<RawSyntax>
		channelEnabled channel
	</RawSyntax>
	<Example>
		$Code$_isGlobalChatEnabled = ( channelEnabled 0) select 0; // Check if user can use text on global channel$/Code$
	</NextExample>
		$Code$_isGlobalVoiceEnabled = ( channelEnabled 0) select 1; // Check if user can use the VoN on global channel$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		setCamShakeDefParams
	</Keyword>
	<Description>
		Sets camera shake default params, the default camshake when, for example, you freelook at your character shooting a 12.7mm sniper rifle or firing tank cannon. Would also work in 1st person.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setCamShakeDefParams
	</WikiPage>
	<Syntax>
		setCamShakeDefParams Array
	</Syntax>
	<RawSyntax>
		setCamShakeDefParams [power, duration, frequency, minSpeed, minMass, caliberCoefHit, vehicleCoef]
	</RawSyntax>
	<Example>
		$Code$setCamShakeDefParams [1, 2, 3, 4, 5,.5,.5];$/Code$
	</NextExample>
		$Code$setCamShakeDefParams [100, 10, 10, 4, 5, 1, 1];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(December 1, 2014)
	Doesn't appear to have any effect in ArmA 3.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		camPrepareFov
	</Keyword>
	<Description>
		Prepares the camera field of view (zoom). The default zoom level is 0.75, 0.01 is the nearest and 2 the furthest zoom value. The angle of the field of view is atan(FOV)*2 radians when in 4:3 aspect ratio. Needs the call of camCommitPrepared to be conducted.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/camPrepareFov
	</WikiPage>
	<Syntax>
		Object camPrepareFov Number
	</Syntax>
	<RawSyntax>
		camera camPrepareFov fieldOfView
	</RawSyntax>
	<Example>
		$Code$_camera camPrepareFov 0.1$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		onPreloadFinished
	</Keyword>
	<Description>
		Defines an action performed after the preload screen finished. Preload event occurs after briefing screen on mission start.
	i
	Since Arma 3 v1.57 a stackable version of this EH is available: PreloadFinished
	In order to keep compatibility between official and community content the functions BIS_fnc_addStackedEventHandler and BIS_fnc_removeStackedEventHandler should be used instead.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/onPreloadFinished
	</WikiPage>
	<Syntax>
		onPreloadFinished String/Code
	</Syntax>
	<RawSyntax>
		onPreloadFinished command
	</RawSyntax>
	<Example>
		$Code$onPreloadFinished {TAG_ReceivingScreenDone = true };$/Code$
	</NextExample>
		$Code$//removes the event immediately after the first run again
	onPreloadFinished {TAG_ReceivingScreenDone = true ; onPreloadFinished ""};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(July 24, 2009)
	There is a bug in Arma2 that will make this command execute every time the screen with "Receiving..." has been displayed.
	If this code is put in the Init.sqf it will run the startcam.sqf script when the loading screen has disappeared
	onPreloadFinished '[fire1] execVM "scripts\startcam.sqf"';
	It will however also run every time a player change graphics settings, alt-tab or do anything else that will trigger the loading screen.
	You will have to script around it with if statements to get it to run only in the beginning of the mission.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		roadsConnectedTo
	</Keyword>
	<Description>
		Find the road segments connected to the given road segment.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/roadsConnectedTo
	</WikiPage>
	<Syntax>
		roadsConnectedTo Object
	</Syntax>
	<RawSyntax>
		roadsConnectedTo roadSegment
	</RawSyntax>
	<Example>
		$Code$_road = ( player nearRoads 50) select 0;
	_connectedRoads = roadsConnectedTo _road;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		isWeaponRested
	</Keyword>
	<Description>
		Returns true if weapon is currently rested.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isWeaponRested
	</WikiPage>
	<Syntax>
		isWeaponRested Object
	</Syntax>
	<RawSyntax>
		isWeaponRested unit
	</RawSyntax>
	<Example>
		$Code$_rest = isWeaponRested player ;$/Code$
	</Example>
	<Locality>
		local / undefined
	</Locality>
	<Note>
		(July 1, 2015)
	You can force a unit out of bipod or resting with:
	$Code$_unit playMove "";$/Code$
	</NextNote>
		(July 12, 2015)
	As of 1.49 $Code$ isWeaponRested player $/Code$ is the only current use of this command. You cannot detect remote player and you cannot detect local unit that is not a player. Might as well be a nullar command without argument.
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		radioChannelSetCallSign
	</Keyword>
	<Description>
		Set the custom radio channel's call sign.
	Available special parameters:
	$KEY (reference to a localized text)
	%CHANNEL_LABEL
	%UNIT_SIDE
	%UNIT_NAME
	%UNIT_RANK
	%UNIT_ID
	%UNIT_REF
	%UNIT_GRP_NAME
	%UNIT_GRP_LEADER
	%UNIT_VEH_NAME
	%UNIT_VEH_POSITION
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/radioChannelSetCallSign
	</WikiPage>
	<Syntax>
		Number radioChannelSetCallSign String
	</Syntax>
	<RawSyntax>
		index radioChannelSetCallSign callSign
	</RawSyntax>
	<Example>
		$Code$4 radioChannelSetCallSign "%UNIT_NAME";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		getDir
	</Keyword>
	<Description>
		Returns the object heading in the range from 0 to 360.
	Since Arma 3 v1.55.133361, an alternative syntax is added that allows to get heading from one object or position to another object or position, the equivalent of BIS_fnc_dirTo
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getDir
	</WikiPage>
	<Syntax>
		getDir Object
	</NextSyntax>
		Object/Position2D/Position3D getDir Object/Position2D/Position3D
	</Syntax>
	<RawSyntax>
		getDir object
	</NextRawSyntax>
		pos1 getDir pos2
	</RawSyntax>
	<Example>
		$Code$_azimuth = getDir player ;$/Code$
	</NextExample>
		$Code$_azimuth = player getDir tank;$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(October 23, 2013)
	Be careful when using this command in conjunction with BIS_fnc_rotateVector2D ; the latter rotates vectors counterclockwise (mathematically correct), while getDir returns a clockwise angle.
	To counter this, simply negate the output of getDir:
	$Code$[[0,1,0], -( getDir _object ) ] call BIS_fnc_rotateVector2D ;$/Code$
	</Note>
	<ReturnValue>
		Number - Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		setMarkerSize
	</Keyword>
	<Description>
		Set marker size.
	Size is in format [a-axis, b-axis].
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setMarkerSize
	</WikiPage>
	<Syntax>
		String setMarkerSize Array
	</Syntax>
	<RawSyntax>
		markerName setMarkerSize [a-axis, b-axis]
	</RawSyntax>
	<Example>
		$Code$"MarkerOne" setMarkerSize [100, 200];$/Code$
	</Example>
	<Locality>
		undefined / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		radioChannelRemove
	</Keyword>
	<Description>
		Remove the units from the custom radio channel.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/radioChannelRemove
	</WikiPage>
	<Syntax>
		Number radioChannelRemove Array
	</Syntax>
	<RawSyntax>
		index radioChannelRemove units
	</RawSyntax>
	<Example>
		$Code$3 radioChannelRemove [blufor_unit_1, blufor_unit_2];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		mineActive
	</Keyword>
	<Description>
		Checks if the given mine is active.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/mineActive
	</WikiPage>
	<Syntax>
		mineActive Object
	</Syntax>
	<RawSyntax>
		mineActive obj
	</RawSyntax>
	<Example>
		$Code$if ( mineActive _mine) then { hint "BOOM!"};$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		saveProfileNamespace
	</Keyword>
	<Description>
		Saves the variables stored in profileNamespace to the persistent active user profile.
	Warning : this is a file operation, which makes it expensive! It is not recommended to do this at a high frequency in a loop for example. It is however also recommended not to change a large amount of variables and wait long before saving, because certain game crashes may cause a loss of data.
	Warning : saving a lot of data can quickly increase the size of the profile variables file, so keep an eye on this.
	Warning : TKOH's Heliport status (used in the Career mode for example) is stored in this file, so be mindful of working with this technology to avoid losing data and progress.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/saveProfileNamespace
	</WikiPage>
	<Syntax>
		saveProfileNamespace
	</Syntax>
	<RawSyntax>
		saveProfileNamespace
	</RawSyntax>
	<Example>
		$Code$saveProfileNamespace;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		Variables are also saved when the game is quit.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setLightBrightness
	</Keyword>
	<Description>
		Set brightness of light.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setLightBrightness
	</WikiPage>
	<Syntax>
		Object setLightBrightness Number
	</Syntax>
	<RawSyntax>
		light setLightBrightness brightness
	</RawSyntax>
	<Example>
		$Code$myLight setLightBrightness 2;$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
		(Dec 1, 2006)
	Light can be created with command createVehicleLocal with special vehicle class "#lightpoint"
	for example:
	$Code$_light = "#lightpoint" createVehicleLocal pos;
	_light setLightBrightness 1.0;
	_light setLightAmbient [0.0, 1.0, 0.0];
	_light setLightColor [0.0, 1.0, 0.0];
	_light lightAttachObject [_object, [0,0,0]];
	$/Code$
	</NextNote>
		(Mar 24, 2014)
	In ArmA3 ver1.14 setLightBrightness will overwrite the previous effect processed by setLightIntensity on the same light source, vice versa. And both of them currently play the same role on brightness, for example: $Code$_light setLightBrightness 1;// same as _light setLightIntensity 3000;$/Code$
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		addMagazineCargoGlobal
	</Keyword>
	<Description>
		Add magazines to the cargo space of vehicles, which can be taken out by infantry units.
	MP Synchronized
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/addMagazineCargoGlobal
	</WikiPage>
	<Syntax>
		Object addMagazineCargoGlobal Array
	</Syntax>
	<RawSyntax>
		vehicleName addMagazineCargoGlobal [magazineName, count]
	</RawSyntax>
	<Example>
		$Code$_truck addMagazineCargoGlobal ["M16", 5];$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
		(November 7, 2011)
	Synchronized to JIP as well.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		currentTasks
	</Keyword>
	<Description>
		List all uncompleted tasks.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/currentTasks
	</WikiPage>
	<Syntax>
		currentTasks Team_Member
	</Syntax>
	<RawSyntax>
		currentTasks member
	</RawSyntax>
	<Example>
		$Code$_playerTasks = currentTasks teamMember player$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctHeaderControls
	</Keyword>
	<Description>
		Returns array of controls on the header with the given index.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctHeaderControls
	</WikiPage>
	<Syntax>
		Control ctHeaderControls Number
	</Syntax>
	<RawSyntax>
		ctrl ctHeaderControls index
	</RawSyntax>
	<Example>
		$Code$_array = _control ctHeaderControls 0;$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		forceSpeed
	</Keyword>
	<Description>
		Force the speed limit on given object (object will never attempt to move faster than given by forceSpeed). Use negative value to return to default behaviour. Used unit is m/s.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/forceSpeed
	</WikiPage>
	<Syntax>
		Object forceSpeed Number
	</Syntax>
	<RawSyntax>
		object forceSpeed speed
	</RawSyntax>
	<Example>
		$Code$_helicopter forceSpeed 150;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(17:02, 2 March 2007 (CET))
	Setting forceSpeed to -1 will make the unit move according to the group speed mode (often specified by the waypoint) again. Setting forceSpeed to 0 will halt the unit ignoring waypoints or orders.
	</NextNote>
		(9 February 2008)
	Does not seem to do anything at the current time (V1.08.5163)
	</NextNote>
		(14 December 2011)
	If a unit (man) has forceSpeed set to anything under jogging (walking only) the unit will refuse to get into vehicles. He will automatically be unassigned from a vehicle everytime he is ordered to get in (via scripts or direct action)
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		removeAllPrimaryWeaponItems
	</Keyword>
	<Description>
		Removes all items from weapon except magazine.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/removeAllPrimaryWeaponItems
	</WikiPage>
	<Syntax>
		removeAllPrimaryWeaponItems Object
	</Syntax>
	<RawSyntax>
		removeAllPrimaryWeaponItems unit
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		secondaryWeapon
	</Keyword>
	<Description>
		Returns name of a unit's secondary weapon (empty string if none).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/secondaryWeapon
	</WikiPage>
	<Syntax>
		secondaryWeapon Object
	</Syntax>
	<RawSyntax>
		secondaryWeapon unit
	</RawSyntax>
	<Example>
		$Code$_sWeap = secondaryWeapon player ;$/Code$
	</NextExample>
		$Code$hint secondaryWeapon player ; //"launch_NLAW_F"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(August 4, 2006)
	Notes from before the conversion:
	secondaryWeapon tells you what weapon the unit has irrespective of the status of the weapon. For example a unit that has a LAWLauncher on his back will still report a LAWLauncher as its secondary weapon. Use currentWeapon to detect the active weapon.
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		get3DENEntity
	</Keyword>
	<Description>
		Returns Eden Entity based on its unique ID. If the ID points to a layer, the ID will be returned instead.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/get3DENEntity
	</WikiPage>
	<Syntax>
		get3DENEntity Number
	</Syntax>
	<RawSyntax>
		get3DENEntity id
	</RawSyntax>
	<Example>
		$Code$myEntity = get3DENEntity 1$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		EdenEntity
	</ReturnValue>

</NextListItem>

	<Keyword>
		atan2
	</Keyword>
	<Description>
		ArcTangent of x/y. Used to determine the angle of a vector [x,y]. Result in Degrees between -180 and 180.
	Note that this command can handle y being 0, unlike when using atan, and will return 90
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/atan2
	</WikiPage>
	<Syntax>
		Number atan2 Number
	</Syntax>
	<RawSyntax>
		x atan2 y
	</RawSyntax>
	<Example>
		$Code$_xy = [5,3];
	_degrees = (_xy select 0) atan2 (_xy select 1); //59.0362$/Code$
	</NextExample>
		$Code$// Get direction from _obj1 to _obj2:
	_vd = getPosASL _obj2 vectorDiff getPosASL _obj1;
	_dir = (_vd select 0) atan2 (_vd select 1); //_dir range from -180 to +180
	if (_dir 0) then {_dir = 360 + _dir}; //_dir range from 0 to 360$/Code$
	</NextExample>
		$Code$// Get relative direction from _obj1 to _obj2:
	_xy = _obj1 worldToModel getPosASL _obj2;
	_dir = (_xy select 0) atan2 (_xy select 1); //_dir range from -180 to +180
	if (_dir 0) then {_dir = 360 + _dir}; //_dir range from 0 to 360$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(08:00, 18 November 2009)
	To get the direction of an object from the player:
	$Code$
	_dir = (( getPos _obj select 0) - ( getPos player select 0)) atan2 (( getPos _obj select 1) - ( getPos player select 1));
	//_dir will be from -180 to 180.
	$/Code$
	If positive values are needed then use:
	$Code$
	if (_dir 0) then {_dir = _dir + 360};
	$/Code$
	Or just use BIS_fnc_dirTo directly.
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		deleteWaypoint
	</Keyword>
	<Description>
		Removes the specified waypoint.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/deleteWaypoint
	</WikiPage>
	<Syntax>
		deleteWaypoint Array
	</Syntax>
	<RawSyntax>
		deleteWaypoint [group, index]
	</RawSyntax>
	<Example>
		$Code$deleteWaypoint [_grp, 2]$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
		(1 Feb, 2008)
	In order to change the behavior of a unit currently following a string of waypoints, it is not enough to use deleteWaypoint. The path of the unit is calculated by the waypoints present at start, and the unit will continue according to the original waypoints even if you delete them by using this command.
	To achieve the wanted effect, you should rather use setWPPos to the units current position (thereby stopping the unit), and (after a small delay) use deleteWaypoint to remove the waypoints.
	</NextNote>
		(15 Nov, 2008)
	Another (more foolproof) method to avoid the problem of non-deleteable waypoints is to introduce another group (createGroup) and join all units of the present group. A new group will start without any preset waypoints so you can start setting new WPs all over again.
	Old group is "_combatGroup", new group is "_combatGroup2"
	$Code$_combatGroup2 = createGroup EAST;
	{[_x] joinSilent _combatGroup2} forEach ( units _combatGroup);
	_combatGroup2 addWaypoint [ getPos player, 25];$/Code$
	</NextNote>
		(January 04, 2011)
	When you want to remove all waypoints, do NOT iterate over waypoints _group while trying to delete them (an array is by reference!). Instead use an approach like this:
	$Code$
	while {( count ( waypoints _group)) 0} do
	{
	deleteWaypoint (( waypoints _group) select 0);
	};$/Code$
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		radioChannelAdd
	</Keyword>
	<Description>
		Add the units to the custom radio channel.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/radioChannelAdd
	</WikiPage>
	<Syntax>
		Number radioChannelAdd Array
	</Syntax>
	<RawSyntax>
		index radioChannelAdd units
	</RawSyntax>
	<Example>
		$Code$2 radioChannelAdd [player, unit1];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setCollisionLight
	</Keyword>
	<Description>
		Switches collision lights of a vehicle on/off. Note that the vehicle has to be local.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setCollisionLight
	</WikiPage>
	<Syntax>
		Object setCollisionLight Boolean
	</Syntax>
	<RawSyntax>
		vehicle setCollisionLight set
	</RawSyntax>
	<Example>
		$Code$heli setCollisionLight true ;$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlIDC
	</Keyword>
	<Description>
		Returns control IDC.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlIDC
	</WikiPage>
	<Syntax>
		ctrlIDC Control
	</Syntax>
	<RawSyntax>
		ctrlIDC control
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlIDD
	</Keyword>
	<Description>
		Returns display IDD.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlIDD
	</WikiPage>
	<Syntax>
		ctrlIDD Display
	</Syntax>
	<RawSyntax>
		ctrlIDD display
	</RawSyntax>
	<Example>
		$Code$ctrlIDD findDisplay 46; //46$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		ceil
	</Keyword>
	<Description>
		The ceil value of x.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ceil
	</WikiPage>
	<Syntax>
		ceil Number
	</Syntax>
	<RawSyntax>
		ceil x
	</RawSyntax>
	<Example>
		$Code$ceil 5.25
	Result is 6$/Code$
	</NextExample>
		$Code$ceil -5.25
	Result is -5$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		createTask
	</Keyword>
	<Description>
		Create a new AI task (subtask of parentTask). Type is name of registered task type.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/createTask
	</WikiPage>
	<Syntax>
		Team_Member createTask Array
	</Syntax>
	<RawSyntax>
		teamMember createTask [[type, parentTask], priority, name1, value1nameN, valueN]
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Task
	</ReturnValue>

</NextListItem>

	<Keyword>
		exit
	</Keyword>
	<Description>
		Stops the execution of a SQS script.
	It's ignored in SQF Scripts.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/exit
	</WikiPage>
	<Syntax>
		exit
	</Syntax>
	<RawSyntax>
		exit
	</RawSyntax>
	<Example>
		$Code$exit$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setBleedingRemaining
	</Keyword>
	<Description>
		Sets for how many seconds injured unit leaves blood trail. The unit damage must be = 0.1 for this command to have an effect, otherwise, the getBleedingRemaining will return 0 and no blood trail is left behind.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setBleedingRemaining
	</WikiPage>
	<Syntax>
		Object setBleedingRemaining Number
	</Syntax>
	<RawSyntax>
		unit setBleedingRemaining time
	</RawSyntax>
	<Example>
		$Code$_unit setBleedingRemaining 60;$/Code$
	</NextExample>
		$Code$player setDamage 0.25;
	player setBleedingRemaining 120;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		isRealTime
	</Keyword>
	<Description>
		Returns true if the mission editor is operating in real time mode.
	i
	Some Old Editor Command
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isRealTime
	</WikiPage>
	<Syntax>
		isRealTime Control
	</Syntax>
	<RawSyntax>
		isRealTime map
	</RawSyntax>
	<Example>
		$Code$_isRealTime = isRealTime _map$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		driver
	</Keyword>
	<Description>
		Returns the driver of a vehicle.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/driver
	</WikiPage>
	<Syntax>
		driver Object
	</Syntax>
	<RawSyntax>
		driver vehicle
	</RawSyntax>
	<Example>
		$Code$( driver _tank) action ["getout", _tank];$/Code$
	</NextExample>
		$Code$( driver ( vehicle player )) isEqualTo player //check if player is driver of current vehicle$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(August 3, 2006)
	Notes from before the conversion:
	It is also possible to find the driver of a vehicle by placing a D after the name of the vehicle so Tank1D and driver Tank1 both refer to the same unit, providing the original driver has not got out of the tank.
	The difference between the two is Tank1D is always the unit that was driver of the tank when the mission started, whilst driver Tank1 is the driver which is now there.
	</Note>
	<ReturnValue>
		Object
	</ReturnValue>

</NextListItem>

	<Keyword>
		doWatch
	</Keyword>
	<Description>
		Order the given unit(s) to watch the given position or target (without radio messages). Use objNull as the target to order a unit to stop watching a position/target.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/doWatch
	</WikiPage>
	<Syntax>
		Object/Array doWatch Array
	</NextSyntax>
		Object/Array doWatch Object
	</Syntax>
	<RawSyntax>
		unit doWatch position
	</NextRawSyntax>
		unit doWatch target
	</RawSyntax>
	<Example>
		$Code$_soldierOne doWatch markerPos "MarkerMoveOne"
	// The unit named "soldierOne" will watch the position where the marker "MarkerMoveOne" is placed.$/Code$
	</NextExample>
		$Code$_soldierOne doWatch _eastSoldier
	// The unit named "soldierOne" will watch the unit named "eastSoldier".$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		(April 18, 2015)
	Also controls where a vehicle gunner aims.
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlMapWorldToScreen
	</Keyword>
	<Description>
		Transfers a map control world position to screen coordinates.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlMapWorldToScreen
	</WikiPage>
	<Syntax>
		Control ctrlMapWorldToScreen Position
	</Syntax>
	<RawSyntax>
		control ctrlMapWorldToScreen position
	</RawSyntax>
	<Example>
		$Code$_screenCoord = _control ctrlMapWorldToScreen _worldCoord;$/Code$
	</NextExample>
		$Code$_screenCoord = _control ctrlMapWorldToScreen position player ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(June 16, 2010)
	Notes:
	It returns a 2d array with the position on the active map display. Say the return [0.5.0.5] would mean that your input 3d world position, like [500,1000], is currently at the center of the active map display.
	In other words you can make the actual world position (of an object for example), relative to your active map display.
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		ppEffectCommitted
	</Keyword>
	<Description>
		Check whether given post process effect is committed
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ppEffectCommitted
	</WikiPage>
	<Syntax>
		ppEffectCommitted String
	</NextSyntax>
		ppEffectCommitted Number
	</Syntax>
	<RawSyntax>
		ppEffectCommitted effect
	</NextRawSyntax>
		ppEffectCommitted effect
	</RawSyntax>
	<Example>
		$Code$ppEffectCommitted "colorCorrection";$/Code$
	</NextExample>
		$Code$ppEffectCommitted _hndl;$/Code$
	</NextExample>
		$Code$if ( ppEffectCommitted "colorCorrection") then { hint "alteration done !"};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean - Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		setLightnings
	</Keyword>
	<Description>
		Changes the lightnings value smoothly during the given time (in seconds). A time of zero means there will be an immediate change.
	NOTE : This command will have no effect (even though the value of lightnings changes) unless Manual Override option is selected in the editor in the Intel, which is normally off.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setLightnings
	</WikiPage>
	<Syntax>
		Number setLightnings Number
	</Syntax>
	<RawSyntax>
		time setLightnings value
	</RawSyntax>
	<Example>
		$Code$1800 setLightnings 0.7;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		linkItem
	</Keyword>
	<Description>
		Create and assign item to the correct slot. If there is an item in the targeted slot, it gets replaced.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/linkItem
	</WikiPage>
	<Syntax>
		Object linkItem String
	</Syntax>
	<RawSyntax>
		unit linkItem item
	</RawSyntax>
	<Example>
		$Code$bluforUnit linkItem "NVGoggles";
	opforUnit linkItem "NVGoggles_OPFOR";
	independentUnit linkItem "NVGoggles_INDEP";$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		fadeMusic
	</Keyword>
	<Description>
		Changes the music volume smoothly within the given time.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/fadeMusic
	</WikiPage>
	<Syntax>
		Number fadeMusic Number
	</Syntax>
	<RawSyntax>
		time fadeMusic volume
	</RawSyntax>
	<Example>
		$Code$5 fadeMusic 0$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlType
	</Keyword>
	<Description>
		Returns number representing the type of control, which is also defined by type property in config. For more information see Dialog Control
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlType
	</WikiPage>
	<Syntax>
		ctrlType Control
	</Syntax>
	<RawSyntax>
		ctrlType control
	</RawSyntax>
	<Example>
		$Code$_type = ctrlType _rscEdit; // 2$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		forEachMember
	</Keyword>
	<Description>
		Executes the given command recursively for both teams and agents that are members of the given team. For teams only use forEachMemberTeam. For agents only use forEachMemberAgent.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/forEachMember
	</WikiPage>
	<Syntax>
		Code forEachMember Team_Member
	</Syntax>
	<RawSyntax>
		command forEachMember team
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		weapons
	</Keyword>
	<Description>
		Returns array of names of all Unit 's weapons.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/weapons
	</WikiPage>
	<Syntax>
		weapons Object
	</Syntax>
	<RawSyntax>
		weapons vehicleName
	</RawSyntax>
	<Example>
		$Code$_wArray = weapons player ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(12:07, 20 January 2007)
	(A1 1.02) this command returns only weapons defined for the primary turret of the vehicle.
	for ex. only ["D81", "PKT"] for t72, not ["D81", "PKT","DSHKM"]
	</NextNote>
		(06:01, 3 March 2007 (CET))
	weapons never returns the weapon "Throw" which all soldier units have have to throw handgrenades. You'd have to use hasWeapon to verfy it. Also handgrenades are not listed since they are magazines. Use magazines for that.
	</NextNote>
		(11 March 2011)
	Use weaponsTurret to determine the weapons of a non gunner/turret position.
	</NextNote>
		(25 November 2011)
	This command does not include non-turret weapons, such as smoke, flare or chaff launchers which are usually declared in the root of the vehicle's class, rather than in the Turrets hierarchy. (Unsure whether it excludes it because it is not in the turret or because these are not considered true weapons via some property.)
	</NextNote>
		(18 June 2013)
	Lists also weapons in inventory from Arma 3 ver. 0.70.
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		setApertureNew
	</Keyword>
	<Description>
		Sets custom camera aperture ([-1] to do it automatically).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setApertureNew
	</WikiPage>
	<Syntax>
		setApertureNew Array
	</Syntax>
	<RawSyntax>
		setApertureNew [min, std, max, stdLum]
	</RawSyntax>
	<Example>
		$Code$setApertureNew [0.3, 0.2, 0.1, 1];$/Code$
	</NextExample>
		$Code$// Simulate eye adjustment at night:
	setDate [2016, 8, 10, 4, 0];
	setApertureNew [2, 8, 14,.9];$/Code$
	</NextExample>
		$Code$// Narrower range for a subtler effect:
	setDate [2016, 8, 10, 4, 0];
	setApertureNew [2, 5, 9,.8];$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
		(October 30, 2016)
	Some notes on example 2 - try it outdoors on a piece of ground with high contrasting areas. I suggest the end of a runway, standing among the white painted triangles.
	Look up about 60 degrees above the horizon and toggle between setApertureNew [2, 8, 14,.9]; and the default setting of setAperture -1;. There should be little change -- at least on the date in the example.
	Reset again to setApertureNew [2, 8, 14,.9]; and then pan slowly down until you're basically looking at your feet. The less sky (the main outdoor light source) you see, the 'wider' (toward the 'min' number) the aperture will become. Looking at the ground on a runway, for example, you should be able to easily distinguish the painted white triangles from the unpainted pavement. Again, toggle back to the default aperture. The view should get much darker.
	This setting allows for some natural adjustment based on the amount of visible light in the scene, and is highly encouraged over the default fixed aperature for night missions. When you're standing in the beam of a lighthouse, for example (try near the 'Spartan' on Stratis), you will be basically unable to see anything not illuminated by the beam. Once the beam passes and your vision returns to normal, your immediate surroundings will be dimmer, of course, but you'll be able to see further out.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setDamage
	</Keyword>
	<Description>
		Damage / repair object. Damage 0 means fully functional, damage 1 means completely destroyed / dead. (This function is an alias of setDammage and was introduced to fix the obvious spelling error in the original function name)
	Since Arma 3 v1.67 there is an alternative syntax to this command allowing to switch off destruction effects.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setDamage
	</WikiPage>
	<Syntax>
		Object setDamage Number
	</NextSyntax>
		Object setDamage Array
	</Syntax>
	<RawSyntax>
		object setDamage damage
	</NextRawSyntax>
		object setDamage [damage, useEffects]
	</RawSyntax>
	<Example>
		$Code$_soldier1 setDamage 1;$/Code$
	</NextExample>
		$Code$_house1 setDamage [1, false ];$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
		In OFP, setting a unit's damage to a negative value will set it's health to full, but impair their aim.
	</NextNote>
		(May 29, 2015)
	Using this possible overrides individual hit damages such as setHitPointDamage ["HitHead", _value]; if you're having issues try setting hitdamage after setdamage
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		showNewEditorObject
	</Keyword>
	<Description>
		Show the add editor object dialog,type is editor object type,class is,class definition to automatically select,side filters by a certain,side,pos is position to create the object.
	i
	Some Old Editor Command
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/showNewEditorObject
	</WikiPage>
	<Syntax>
		Control showNewEditorObject Array
	</Syntax>
	<RawSyntax>
		map showNewEditorObject [type,class,side,position]
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Any_Value
	</ReturnValue>

</NextListItem>

	<Keyword>
		updateDrawIcon
	</Keyword>
	<Description>
		Updates the icon to be shown in 2D editor for the specified editor,object. If maintain size is false,icon will not scale depending on the,scale of the map. If maintain size is a number,the icon will maintain,size if map scale is below that number.
	i
	Some Old Editor Command
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/updateDrawIcon
	</WikiPage>
	<Syntax>
		Control updateDrawIcon Array
	</Syntax>
	<RawSyntax>
		map updateDrawIcon [object,string identifier,color,offset,width,height,maintain size,angle,shadow]
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setMarkerAlpha
	</Keyword>
	<Description>
		Sets the marker alpha. The marker is modified on all computers in a network session.
	When alpha equals 1, the marker is visible, but if alpha equals 0, then the marker is invisible.
	Alpha can be numbers and fractions.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setMarkerAlpha
	</WikiPage>
	<Syntax>
		String setMarkerAlpha Number
	</Syntax>
	<RawSyntax>
		marker setMarkerAlpha alpha
	</RawSyntax>
	<Example>
		$Code$"my_marker" setMarkerAlpha 0.5;$/Code$
	</NextExample>
		$Code$"enemy_convoy_marker" setMarkerAlpha 0;$/Code$
	</Example>
	<Locality>
		undefined / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		menuValue
	</Keyword>
	<Description>
		Returns current value set in menu entry on given path.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/menuValue
	</WikiPage>
	<Syntax>
		menuValue Array
	</Syntax>
	<RawSyntax>
		menuValue [idc, path]
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		diag_mergeConfigFile
	</Keyword>
	<Description>
		Adjust configs on-the-fly without the need of restarting the game (by merging the given config file into the main config in memory). Location is relative to the Userdir (default) or mission directory depending on the the value of UserDir [FileName,UserDir].
	Doesn't work with cfgAmmo & few other classes. (Since 1.69, cfgAmmo should be mergeable!) Merging config file means also that you can't delete parameters through diag_mergeConfigFile. Changes applied by diag_mergeConfigFile are applied to all new entities so restart of mission is not necessarily required - spawning vehicle again or changing back forth weapon should usually do the trick.
	Command is only available when using Arma 3 Diagnostics Exe on Dev-Branch.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/diag_mergeConfigFile
	</WikiPage>
	<Syntax>
		diag_mergeConfigFile Array
	</Syntax>
	<RawSyntax>
		diag_mergeConfigFile path
	</RawSyntax>
	<Example>
		$Code$diag_mergeConfigFile ["O:\Arma3\A3\Stuff_F\config.cpp"]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		enableEnvironment
	</Keyword>
	<Description>
		Enable/disable environmental effects: ambient life and/or ambient sound.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/enableEnvironment
	</WikiPage>
	<Syntax>
		enableEnvironment Boolean
	</NextSyntax>
		enableEnvironment Array
	</Syntax>
	<RawSyntax>
		enableEnvironment enabled
	</NextRawSyntax>
		enableEnvironment [ambientLife, ambientSound]
	</RawSyntax>
	<Example>
		$Code$enableEnvironment false ;$/Code$
	</NextExample>
		$Code$enableEnvironment [ false, true ];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(28 October, 2013)
	This command has to be executed after mission start to have an effect. So if you add this command in init.sqf make sure you wait until mission is running:
	$Code$//init.sqf
	waitUntil { time 0};
	enableEnvironment false ;$/Code$
	</NextNote>
		(October 23, 2017)
	NOTE: Disabling ambient life will remove generation of anything that is coming from AmbientA3 map class (see Ambient System ). That means removing not only bees and cicadas around a player, but rabbits, snakes, seagulls and all the fish in the sea.
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		allSimpleObjects
	</Keyword>
	<Description>
		Returns array of all simple objects that belong to the listed class names. If the array of types is empty [], all simple objects are returned including those without class name. NOTE : There is no inheritance in simple objects, so only exact class match is allowed. className is not case sensitive.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/allSimpleObjects
	</WikiPage>
	<Syntax>
		allSimpleObjects Array
	</Syntax>
	<RawSyntax>
		allSimpleObjects [className1, className2,classNameN]
	</RawSyntax>
	<Example>
		$Code$allSimpleObjects ["Box_NATO_Equip_F", "Land_CampingChair_V2_F"];$/Code$
	</NextExample>
		$Code$_allSimpleObjects = allSimpleObjects [];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		mapGridPosition
	</Keyword>
	<Description>
		Returns the map grid position of an object or position. The format is determined by the Grid format specified in the CfgWorlds for the current world. Eg: "024577" or "De82" or similar.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/mapGridPosition
	</WikiPage>
	<Syntax>
		mapGridPosition Object/Position
	</Syntax>
	<RawSyntax>
		mapGridPosition param
	</RawSyntax>
	<Example>
		$Code$_gridPos = mapGridPosition player$/Code$
	</NextExample>
		$Code$_gridPos = mapGridPosition getPos player$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		setObjectProxy
	</Keyword>
	<Description>
		Set the proxy object associated with the given editor object.
	i
	Some Old Editor Command
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setObjectProxy
	</WikiPage>
	<Syntax>
		Control setObjectProxy Array
	</Syntax>
	<RawSyntax>
		map setObjectProxy [object,proxy object]
	</RawSyntax>
	<Example>
		$Code$_map setObjectProxy ["_group_0", vehicle (leader _group)];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		local
	</Keyword>
	<Description>
		Check if given unit is local on the computer in Multiplayer games (see Locality in Multiplayer for general concepts).
	This can be used when some activation fields or scripts need to be performed only on one computer. In Single player all objects are local.
	Note1: Map created objects (those placed in Visitor ) are local everywhere.
	Note2: Since Arma 3 v1.53.132932 keyword local has been renamed to private for consistency and to avoid any confusion. However, this just makes the third example obsolete. It's core functionality still remains.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/local
	</WikiPage>
	<Syntax>
		local Object/Group
	</Syntax>
	<RawSyntax>
		local object
	</RawSyntax>
	<Example>
		$Code$// SQS:
	?! local _unitName : hint "remote"$/Code$
	</NextExample>
		$Code$// SQF:
	if (! local _unitName) then {
	hint "remote";
	};$/Code$
	</NextExample>
		$Code$_isLocalGroup = local group _unit;$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(August 4, 2006)
	Notes from before the conversion:
	In multiplayer, a game logic will always be local to the host computer. This works on both dedicated and player-hosted servers.
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		crew
	</Keyword>
	<Description>
		Returns the crew (both dead and alive) of the given vehicle.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/crew
	</WikiPage>
	<Syntax>
		crew Object
	</Syntax>
	<RawSyntax>
		crew vehicleName
	</RawSyntax>
	<Example>
		$Code$player in ( crew _tank);$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(3 February, 2010)
	The crew command will return crew in order [driver,gunner,commander,turrets,cargo]
	</NextNote>
		(1 June, 2014)
	The crew command will return an empty array if the object has no crew - this includes objects that can't hold crew. If used on a unit (man, module, etc.) it will return an array containing that unit.
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctRemoveRows
	</Keyword>
	<Description>
		Takes array of row indices as a parameter and removes rows with those indices. Indices of remaining rows will be recomputed.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctRemoveRows
	</WikiPage>
	<Syntax>
		Control ctRemoveRows Number
	</Syntax>
	<RawSyntax>
		ctrl ctRemoveRows indices
	</RawSyntax>
	<Example>
		$Code$_control ctRemoveRows [0, 1, 2];$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		getWeaponCargo
	</Keyword>
	<Description>
		Returns all weapons types and count from the cargo space
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getWeaponCargo
	</WikiPage>
	<Syntax>
		getWeaponCargo Object
	</Syntax>
	<RawSyntax>
		getWeaponCargo object
	</RawSyntax>
	<Example>
		$Code$_content = getWeaponCargo carName;$/Code$
	</NextExample>
		$Code$_content = getWeaponCargo ammoBoxName;
	// Sample result returns:
	[["arifle_Katiba_F","launch_B_Titan_short_F"],[2,1]]$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		isOnRoad
	</Keyword>
	<Description>
		Checks if given position is on road. Same as roadAt, only return is boolean instead of road object.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isOnRoad
	</WikiPage>
	<Syntax>
		isOnRoad Object/Array
	</Syntax>
	<RawSyntax>
		isOnRoad position
	</RawSyntax>
	<Example>
		$Code$_objOnRoad = isOnRoad player ;$/Code$
	</NextExample>
		$Code$_posOnRoad = isOnRoad ASLToAGL getPosASL player ;$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(November 24, 2017)
	Some roadobjects will return false when using this command. invisibleroadway_square_f.p3d is found by the nearRoads command, yet will return false for isOnRoad.
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		camPreload
	</Keyword>
	<Description>
		Preload the scene for the prepared camera. Time gives timeout, zero means no (infinite) timeout.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/camPreload
	</WikiPage>
	<Syntax>
		Object camPreload Number
	</Syntax>
	<RawSyntax>
		camera camPreload time
	</RawSyntax>
	<Example>
		$Code$_camera camPreload 5$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		attachedObject
	</Keyword>
	<Description>
		Returns the object a location is attached to. If the location is unattached, then objNull is returned.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/attachedObject
	</WikiPage>
	<Syntax>
		attachedObject Location
	</Syntax>
	<RawSyntax>
		attachedObject location
	</RawSyntax>
	<Example>
		$Code$_locAttachedObj = attachedObject myLocation;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Object
	</ReturnValue>

</NextListItem>

	<Keyword>
		joinSilent
	</Keyword>
	<Description>
		Join all units in the array to given group silently (without radio message). To have a group member leave a group, join him with the grpNull group (e.g. [guy1] joinSilent grpNull ), but beware, as brand new group is created for the leaving unit and this could result in the number of groups in a mission growing out of control.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/joinSilent
	</WikiPage>
	<Syntax>
		Array joinSilent Object/Group
	</Syntax>
	<RawSyntax>
		unitArray joinSilent group
	</RawSyntax>
	<Example>
		$Code$[_unitOne, _unitTwo] joinSilent ( group player );$/Code$
	</NextExample>
		$Code$[_unitOne, _unitTwo] joinSilent player ;$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
		(August 4, 2014)
	If all units of a group are joined to another group then the first group will be NULL-group afterward.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		loadFile
	</Keyword>
	<Description>
		Return content of given filename as string. If you plan to compile said string, be aware that the file shouldn't contain comments or compile will throw an error. If there are comments, use preprocessFile / preprocessFileLineNumbers instead.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/loadFile
	</WikiPage>
	<Syntax>
		loadFile String
	</Syntax>
	<RawSyntax>
		loadFile fileName
	</RawSyntax>
	<Example>
		$Code$_contents = loadFile "wantedString.txt";$/Code$
	</NextExample>
		$Code$_contents = compile loadFile "myFunction.sqf"; // will compile string into code$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(25 January 2016)
	Notice that you will have to activate file patching via -filePatching. Otherwise, execVM and loadFile will *not* load any files outside your mission folder (like the global scripts).
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		failMission
	</Keyword>
	<Description>
		Finish the mission. If the server is set to run persistent mission, failMission will not end the mission when last player gets kicked to the lobby. Use endMission to end the mission.
	The end type can be:
	"CONTINUE"
	"KILLED"
	"LOSER"
	"END1"
	"END2"
	"END3"
	"END4"
	"END5"
	"END6"
	Mission saves won't be deleted.
	To maintain Arma 3 visual style, it's recommended to use BIS_fnc_endMission instead.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/failMission
	</WikiPage>
	<Syntax>
		failMission String
	</Syntax>
	<RawSyntax>
		failMission endtype
	</RawSyntax>
	<Example>
		$Code$failMission "LOSER";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		enginesIsOnRTD
	</Keyword>
	<Description>
		Returns which engines are producing some work.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/enginesIsOnRTD
	</WikiPage>
	<Syntax>
		enginesIsOnRTD Object
	</Syntax>
	<RawSyntax>
		enginesIsOnRTD RTD_helicopter
	</RawSyntax>
	<Example>
		$Code$_enginesTaru = enginesIsOnRTD _taru// Returns [true,true]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		ppEffectCreate
	</Keyword>
	<Description>
		Creates Post process effects specified by effect name and priority. Supported effects are:
	"RadialBlur"
	"ChromAberration"
	"WetDistortion"
	"ColorCorrections"
	"DynamicBlur"
	"FilmGrain"
	"ColorInversion"
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ppEffectCreate
	</WikiPage>
	<Syntax>
		ppEffectCreate Array
	</Syntax>
	<RawSyntax>
		ppEffectCreate [name, priority]
	</NextRawSyntax>
		ppEffectCreate [[name1, priority1],]
	</RawSyntax>
	<Example>
		$Code$_ppGrain = ppEffectCreate ["filmGrain", 2005];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(July 24, 2015)
	"wetDistortion" only works if handle is used. Arma 3 (1.48.131561)
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		sliderRange
	</Keyword>
	<Description>
		Return limits, as an Array [min, max] of slider idc of topmost user dialog.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/sliderRange
	</WikiPage>
	<Syntax>
		sliderRange Number
	</NextSyntax>
		sliderRange Control
	</Syntax>
	<RawSyntax>
		sliderRange idc
	</NextRawSyntax>
		sliderRange control
	</RawSyntax>
	<Example>
		$Code$_slidelimits1 = sliderRange 105;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array - Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		vectorDistanceSqr
	</Keyword>
	<Description>
		Squared distance between two 3D vectors.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/vectorDistanceSqr
	</WikiPage>
	<Syntax>
		Array vectorDistanceSqr Array
	</Syntax>
	<RawSyntax>
		vector1 vectorDistanceSqr vector2
	</RawSyntax>
	<Example>
		$Code$_distSqr = getPos player vectorDistanceSqr [0,0,2];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(28 Jun, 2014)
	(ArmA3 1.22)Algorithm:
	$Code$
	Vector1 = [x1,y1,z1]; Vector2 = [x2,y2,z2];
	Result = (x2 - x1) ^ 2 + (y2 - y1) ^ 2 + (z2 - z1) ^ 2;
	$/Code$
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		gearSlotData
	</Keyword>
	<Description>
		Returns gear slot item name.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/gearSlotData
	</WikiPage>
	<Syntax>
		gearSlotData Control
	</Syntax>
	<RawSyntax>
		gearSlotData control
	</RawSyntax>
	<Example>
		$Code$Open any ammobox and click by any gear slots
	private "_dspl";
	disableSerialization;
	waitUntil {
	_dspl = findDisplay 106;
	! isNull _dspl;
	};
	uiNamespace setVariable ["/VDMJ/RscDisplayGear/SlotDataEH", {
	_self = _this select 0;
	_weaponName = gearSlotData _self;
	_conf = configFile _confSection _weaponName;
	_name = getText(_conf "displayName");
	_desc = getText(_conf "Library" "libTextDesc");
	_image = getText(_conf "picture");
	hint parseText format[
	' t size="1.3" align="center" shadow="true" shadowColor="#000000" %1 /t br / img image="%2" size="6" align="center" / br / %3 br / %4',
	_name, _image, _desc
	];
	}];
	for "_i" from 107 to 145 do {
	_dspl displayCtrl _i ctrlAddEventHandler ["ButtonClick",
	format [
	'_confSection = "%1"; _this call (uiNamespace getVariable "/VDMJ/RscDisplayGear/SlotDataEH");',
	if( _i = 109 && _i = 129 ) then { "CfgMagazines" } else { "CfgWeapons" }
	]
	];
	};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		lbAdd
	</Keyword>
	<Description>
		Adds an item with the given text to the listbox or combobox with id idc of the topmost user dialog.
	It returns the index of the newly added item.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lbAdd
	</WikiPage>
	<Syntax>
		lbAdd Array
	</NextSyntax>
		Control lbAdd String
	</Syntax>
	<RawSyntax>
		lbAdd [idc, text]
	</NextRawSyntax>
		control lbAdd text
	</RawSyntax>
	<Example>
		$Code$_index = lbAdd [101, "First item"];$/Code$
	</NextExample>
		$Code$_index = _control lbAdd "First item";$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
		More information on the LB command family can be found here
	</NextNote>
		(April 12, 2015)
	This command can be very very frustrating to use because it does not output any errors if unable to function.
	Often, the 2nd provided syntax needs to be used like this:
	$Code$_giveYourControlAname = (findDisplay 7) displayCtrl 9;
	_addThisToListBox = "Option";
	_giveYourControlAname lbAdd _addThisToListBox;$/Code$
	Where "7" is the "idd" of the dialog you made in your ".hpp" file and where "9" is the "idc" of the RscListBox or RscComboBox.
	The code above will add an option named "Option" to the ListBox or ComboBox.
	</Note>
	<ReturnValue>
		Number - Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		waypointCombatMode
	</Keyword>
	<Description>
		Gets the waypoint combat mode.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/waypointCombatMode
	</WikiPage>
	<Syntax>
		waypointCombatMode Array
	</Syntax>
	<RawSyntax>
		waypointCombatMode waypoint
	</RawSyntax>
	<Example>
		$Code$waypointCombatMode [groupOne,1]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		deleteLocation
	</Keyword>
	<Description>
		Delete a location.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/deleteLocation
	</WikiPage>
	<Syntax>
		deleteLocation Location
	</Syntax>
	<RawSyntax>
		deleteLocation location
	</RawSyntax>
	<Example>
		$Code$deleteLocation myLocation$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		onHCGroupSelectionChanged
	</Keyword>
	<Description>
		Defines an action performed when high command group selection has been changed.
	Command receives 2 variables:
	_group: Group - last selected/deselected group
	_isSelected: Boolean - new selection state of the specific group
	The code is executed on every hc group selection change until it is
	removed via $Code$ onHCGroupSelectionChanged "";$/Code$ or $Code$ onHCGroupSelectionChanged {};$/Code$
	or replaced by $Code$ onHCGroupSelectionChanged "SomeOtherCommand(s)";$/Code$ or $Code$ onHCGroupSelectionChanged {SomeOtherCommand(s)};$/Code$
	i
	Since Arma 3 v1.57 a stackable version of this EH is available: HCGroupSelectionChanged
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/onHCGroupSelectionChanged
	</WikiPage>
	<Syntax>
		onHCGroupSelectionChanged String/Code
	</Syntax>
	<RawSyntax>
		onHCGroupSelectionChanged command
	</RawSyntax>
	<Example>
		$Code$onHCGroupSelectionChanged {
	if (_isSelected) then {
	hint format ["Group %1 has been selected.", _group];
	} else {
	hint format ["Group %1 has been deselected.", _group];
	};
	};$/Code$
	</NextExample>
		$Code$onHCGroupSelectionChanged " player globalChat 'HC group selection has been changed.';";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		getItemCargo
	</Keyword>
	<Description>
		Returns all items names and count from ammo box (or any general weapon holder container).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getItemCargo
	</WikiPage>
	<Syntax>
		getItemCargo Object
	</Syntax>
	<RawSyntax>
		getItemCargo box
	</RawSyntax>
	<Example>
		$Code$hint str getItemCargo cursorTarget ;$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		lookAtPos
	</Keyword>
	<Description>
		Center the map on,and point the camera at,the position.
	i
	Some Old Editor Command
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lookAtPos
	</WikiPage>
	<Syntax>
		Control lookAtPos Array
	</Syntax>
	<RawSyntax>
		map lookAtPos position
	</RawSyntax>
	<Example>
		$Code$(findDisplay 12) lookAtPos [0,0,0];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		assignCurator
	</Keyword>
	<Description>
		Assign player as curator. Two players cannot act as one curator.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/assignCurator
	</WikiPage>
	<Syntax>
		Object assignCurator Object
	</Syntax>
	<RawSyntax>
		player assignCurator curatorObj
	</RawSyntax>
	<Example>
		$Code$player assignCurator myCurator;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		This scripting command must be executed on the server to work properly in multiplayer
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		removeGroupIcon
	</Keyword>
	<Description>
		Remove icon with given ID from group.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/removeGroupIcon
	</WikiPage>
	<Syntax>
		Group removeGroupIcon Number
	</Syntax>
	<RawSyntax>
		group removeGroupIcon iconID
	</RawSyntax>
	<Example>
		$Code$_target removeGroupIcon (_target getvariable "hc_attackicon");$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setOxygenRemaining
	</Keyword>
	<Description>
		Sets oxygen remaining. It has no effect when soldier is not diving. Oxygen remaining is a number between 0 and 1.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setOxygenRemaining
	</WikiPage>
	<Syntax>
		Object setOxygenRemaining Number
	</Syntax>
	<RawSyntax>
		unit setOxygenRemaining value
	</RawSyntax>
	<Example>
		$Code$player setOxygenRemaining 0; // Drowns player$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		drawIcon
	</Keyword>
	<Description>
		Draw an icon on the map. The command needs to be called every frame, preferably with "Draw" control event handler ctrlAddEventHandler.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/drawIcon
	</WikiPage>
	<Syntax>
		Control drawIcon Array
	</Syntax>
	<RawSyntax>
		map drawIcon [texture, color, position, width, height, angle, text, shadow, textSize, font, align]
	</RawSyntax>
	<Example>
		$Code$findDisplay 12 displayCtrl 51 ctrlAddEventHandler ["Draw", "
	_this select 0 drawIcon [
	'iconStaticMG',
	[1,0,0,1],
	getPos player,
	24,
	24,
	getDir player,
	'Player Vehicle',
	1,
	0.03,
	'TahomaB',
	'right'
	]
	"];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(July 03, 2013)
	Support of paremeters textSize, font and align is in the game since Arma 3 version 0.72.
	</NextNote>
		(March 22, 2014)
	icon will always remain the same width and height, if you want an icon scaled to the map, use: $Code$( sizeInMeters * 0.15) * 10^(abs log (ctrlMapScale _ctrl))$/Code$ for width and height (guessimated).
	</NextNote>
		(July 20, 2014)
	If you want only text with no icon, you can use "#(argb,8,8,3)color(0,0,0,0)" as texture.
	</NextNote>
		(July 7, 2015)
	Be careful when using this command. Unlike map markers, the draw commands can decrease your framerate.
	</NextNote>
		(January 4, 2016)
	Arma 3 1.54
	This command doesn't seem to play nice with onEachFrame. It seems to draw on the main screen while maintaing position relative to the map position
	Example:
	$Code$ onEachFrame {
	findDisplay 12 displayCtrl 51 drawIcon ['iconStaticMG',[1,0,0,1], getPos player,24,24, getDir player,'Player Vehicle',1,0.03,'TahomaB','right'];
	};$/Code$
	</NextNote>
		(October 13, 2016)
	If you unPBO the following addon:
	$Code$@ui_f_data.pbo $/Code$
	You can find the possible icons inside this folder:
	$Code$ui_f_data\map\vehicleicons$/Code$
	For example:
	If you want to use "iconman_ca.paa" you will write "iconman" on the texture string.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		hcAllGroups
	</Keyword>
	<Description>
		Returns selected groups in high command.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/hcAllGroups
	</WikiPage>
	<Syntax>
		hcAllGroups Object
	</Syntax>
	<RawSyntax>
		hcAllGroups unit
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		lnbValue
	</Keyword>
	<Description>
		Returns the additional integer value in the item with the given position of the 2D listbox.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lnbValue
	</WikiPage>
	<Syntax>
		lnbValue Array
	</NextSyntax>
		Control lnbValue Array
	</Syntax>
	<RawSyntax>
		lnbValue [idc,[row, column]]
	</NextRawSyntax>
		ctrl lnbValue [row, column]
	</RawSyntax>
	<Example>
		$Code$_ctrl lnbValue [0,0];//1, default is 0 if value is String set by lnbSetValue$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(Sep 9 2014)
	(A3 1.28)As for invisible data processing, lnbAddArray, lnbAddColumn, lnbData, lnbGetColumnsPosition, lnbSetColumnsPos, lnbSetData, lnbSetText, lnbSetValue, lnbText and lnbValue store data types into exact position of the listNbox with different spaces. Accessing data with coordinate command at nearly the same syntax:
	$Code$
	//Set same value to one position of a Control
	_ctrl lnbSetData [ [0,0],"#1"];
	lnbSetColumnsPos [102, [0,1], 1];
	_ctrl lnbSetText [ [0,1], "#1"];
	_ctrl lnbSetValue [ [0,0],1];
	//Accessing the value disregard affecting one another.
	_ctrl lnbData [0,0]; //"#1"
	lnbGetColumnsPosition _ctrl //[1];
	_ctrl lnbText [0,0];//"#1"
	_ctrl lnbValue [0,0];//1
	$/Code$
	For a direct visible control over CT_LISTNBOX:
	$Code$
	0 = [_CT_LISTNBOX] spawn {
	private ["_CT_LISTNBOX","_color","_current","_pic"];
	disableSerialization ;
	_CT_LISTNBOX = _this select 0;
	{
	_CT_LISTNBOX lnbAddRow [ getText (_x "displayNameShort"), getText (_x "displayName")];
	_CT_LISTNBOX lnbSetPicture [ [_foreachIndex,0], getText (_x "texture")];
	} forEach (" isClass _x" configClasses ( configFile "CfgRanks"));
	_CT_LISTNBOX lnbSetCurSelRow 0;
	_current = lnbCurSelRow _CT_LISTNBOX;
	_color = _CT_LISTNBOX lnbColor [_current,0];
	_CT_LISTNBOX lnbSetColor [ [_current,1], [(_color select 0)/2,0,0,1] ];
	_CT_LISTNBOX lnbDeleteColumn 0;
	_CT_LISTNBOX lnbDeleteRow 1;
	sleep 1;
	lnbClear _CT_LISTNBOX;//Clear all items but control still remains just invisible.
	};
	$/Code$
	A combined use of both invisible and visible data processing commands alive the Control.
	</Note>
	<ReturnValue>
		Number - Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		setAmmoOnPylon
	</Keyword>
	<Description>
		Set count of ammo in magazine on pylon
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setAmmoOnPylon
	</WikiPage>
	<Syntax>
		Object setAmmoOnPylon Array
	</Syntax>
	<RawSyntax>
		vehicle setAmmoOnPylon [pylon nameindex, ammo count]
	</RawSyntax>
	<Example>
		$Code$( vehicle player ) setAmmoOnPylon [1, 12];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(August 18, 2017)
	The pylon indices start at 1 and not at 0.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setMarkerShape
	</Keyword>
	<Description>
		Selects the shape (type) of the marker.
	Shape can be "ICON", "RECTANGLE", "ELLIPSE" or "POLYLINE".
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setMarkerShape
	</WikiPage>
	<Syntax>
		String setMarkerShape String
	</Syntax>
	<RawSyntax>
		markerName setMarkerShape shape
	</RawSyntax>
	<Example>
		$Code$"Marker1" setMarkerShape "RECTANGLE";$/Code$
	</Example>
	<Locality>
		undefined / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		commandWatch
	</Keyword>
	<Description>
		Orders the unit(s) to watch the given position or target (via the radio). Use objNull as the target to order a unit to stop watching a position/target
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/commandWatch
	</WikiPage>
	<Syntax>
		Object/Array commandWatch Array
	</NextSyntax>
		Object/Array commandWatch Object
	</Syntax>
	<RawSyntax>
		unitName commandWatch position
	</NextRawSyntax>
		unitName commandWatch target
	</RawSyntax>
	<Example>
		$Code$_soldierOne commandWatch markerPos "MarkerMoveOne"$/Code$
	</NextExample>
		$Code$[s1,s2] commandWatch player$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		precision
	</Keyword>
	<Description>
		Return the precision of the given entity, how is the entity able to be precise when moving to given target.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/precision
	</WikiPage>
	<Syntax>
		precision Object
	</Syntax>
	<RawSyntax>
		precision entity
	</RawSyntax>
	<Example>
		$Code$if ( position _this distance _dangerPos = precision _this) then {...};
	//used in formationCDanger.fsm$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		getPilotCameraDirection
	</Keyword>
	<Description>
		Returns model space vector of the object airplane or helicopter pilotCamera.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getPilotCameraDirection
	</WikiPage>
	<Syntax>
		getPilotCameraDirection Object
	</Syntax>
	<RawSyntax>
		getPilotCameraDirection object
	</RawSyntax>
	<Example>
		$Code$_pilotCamVector = getPilotCameraDirection vehicle player$/Code$
	</Example>
	<Locality>
		local / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		getMissionDLCs
	</Keyword>
	<Description>
		Returns list of DLCs that are used in the mission. List is created only from units listed in mission.sqm and doesn't detect units created by scripts!
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getMissionDLCs
	</WikiPage>
	<Syntax>
		getMissionDLCs
	</Syntax>
	<RawSyntax>
		getMissionDLCs
	</RawSyntax>
	<Example>
		$Code$_list = getMissionDLCs$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		rating
	</Keyword>
	<Description>
		Check unit rating. Rating is increased for killing enemies, decreased for killing friendlies (see Rating Values ). Can be changed via addRating by the mission designer.
	The rating of the player is displayed as the "score" at the end of the mission. Via Description.ext one can define how many points it takes to get a perfect score, as well as the number of stars.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/rating
	</WikiPage>
	<Syntax>
		rating Object
	</Syntax>
	<RawSyntax>
		rating unitName
	</RawSyntax>
	<Example>
		$Code$_score = rating player$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		In ArmA 1.18 rating does only return rating levels for units that are local.
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		lookAt
	</Keyword>
	<Description>
		Control what the unit(s) is/are looking at (target or position).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lookAt
	</WikiPage>
	<Syntax>
		Object/Array lookAt Object/Array
	</Syntax>
	<RawSyntax>
		unit lookAt position
	</RawSyntax>
	<Example>
		$Code$_someSoldier lookAt _otherSoldier$/Code$
	</NextExample>
		$Code$[_someSoldier, _otherSoldier] lookAt markerPos "markerOne"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		waypointHousePosition
	</Keyword>
	<Description>
		Gets the house position assigned to the waypoint.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/waypointHousePosition
	</WikiPage>
	<Syntax>
		waypointHousePosition Array
	</Syntax>
	<RawSyntax>
		waypointHousePosition waypoint
	</RawSyntax>
	<Example>
		$Code$waypointHousePosition [groupOne,1]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		textLog
	</Keyword>
	<Description>
		Dump argument value to debugging output.
	This command is non-functional in the retail version
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/textLog
	</WikiPage>
	<Syntax>
		textLog Any_Value
	</Syntax>
	<RawSyntax>
		textLog anything
	</RawSyntax>
	<Example>
		$Code$textLog player$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setStatValue
	</Keyword>
	<Description>
		Sets a value to a given stat.
	A list of possible StatNames can be found here: StatNames
	Its important to note that most Stats are restricted to scripts in certain paths.
	For example "ExpWarlockDown" is restricted to scripts in any subdirectory of "a3\Missions_F_Exp\Campaign\Missions\"
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setStatValue
	</WikiPage>
	<Syntax>
		setStatValue Array
	</Syntax>
	<RawSyntax>
		setStatValue [name, value]
	</RawSyntax>
	<Example>
		$Code$setStatValue ["ExpWarlockDown", 1]; //Unlocks the "Warlock Down" Steam achivement$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		nextMenuItemIndex
	</Keyword>
	<Description>
		Returns the next available menu item index.
	i
	Some Old Editor Command
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/nextMenuItemIndex
	</WikiPage>
	<Syntax>
		nextMenuItemIndex Control
	</Syntax>
	<RawSyntax>
		nextMenuItemIndex map
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		camSetPos
	</Keyword>
	<Description>
		Sets the position of the given camera or seagull (see camCreate ). It is worth mentioning that camera position can also be set with setPos, in which case it would be instant. With camSetPos it is possible to make smooth position transition in time, defined with camCommit, which is required in this case.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/camSetPos
	</WikiPage>
	<Syntax>
		Object camSetPos Array
	</Syntax>
	<RawSyntax>
		camera camSetPos position
	</RawSyntax>
	<Example>
		$Code$_cam camSetPos [2300,1000,130];
	_cam camCommit 10;$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		triggerText
	</Keyword>
	<Description>
		Returns trigger text.
	Note: The trigger could be local or remote but the result returned by this command will be for the trigger condition set up locally on the client that executed the command. See createTrigger for more info.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/triggerText
	</WikiPage>
	<Syntax>
		triggerText Object
	</Syntax>
	<RawSyntax>
		triggerText trigger
	</RawSyntax>
	<Example>
		$Code$result = triggerText triggerName;$/Code$
	</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		setWaypointLoiterType
	</Keyword>
	<Description>
		Sets the waypoint loiter type.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setWaypointLoiterType
	</WikiPage>
	<Syntax>
		Waypoint setWaypointLoiterType String
	</Syntax>
	<RawSyntax>
		waypoint setWaypointLoiterType type
	</RawSyntax>
	<Example>
		$Code$[_grp, 2] setWaypointLoiterType "CIRCLE";$/Code$
	</NextExample>
		$Code$[_grp, 2] setWaypointLoiterType "CIRCLE_L";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		getObjectDLC
	</Keyword>
	<Description>
		Returns appID of the DLC the object belongs to or nil if object is vanilla.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getObjectDLC
	</WikiPage>
	<Syntax>
		getObjectDLC Object
	</Syntax>
	<RawSyntax>
		getObjectDLC obj
	</RawSyntax>
	<Example>
		$Code$_appID = getObjectDLC cursorTarget ;
	if (! isNil "_appID") then {
	hint format ["This object belongs to DLC with id: %1", _appID];
	} else {
	hint "This object is vanilla";
	};$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number/Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctFindHeaderRows
	</Keyword>
	<Description>
		Takes index of a header as a parameter. Returns array of indices of rows under this header.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctFindHeaderRows
	</WikiPage>
	<Syntax>
		Control ctFindHeaderRows Number
	</Syntax>
	<RawSyntax>
		ctrl ctFindHeaderRows index
	</RawSyntax>
	<Example>
		$Code$_array = _control ctFindHeaderRows 0;$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		newOverlay
	</Keyword>
	<Description>
		Creates the new overlay dialog for the specified type of overlay.
	i
	Some Old Editor Command
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/newOverlay
	</WikiPage>
	<Syntax>
		Control newOverlay Config
	</Syntax>
	<RawSyntax>
		map newOverlay config
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		drawArrow
	</Keyword>
	<Description>
		Draws a single line arrow on the map. To draw a color filled arrow of custom shape see BIS_fnc_drawArrow
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/drawArrow
	</WikiPage>
	<Syntax>
		Control drawArrow Array
	</Syntax>
	<RawSyntax>
		map drawArrow [from, to, color]
	</RawSyntax>
	<Example>
		$Code$findDisplay 12 displayCtrl 51 ctrlAddEventHandler ["Draw",
	{
	_this select 0 drawArrow [
	player, player getRelPos [100, 0], [1,0,0,1]
	];
	}];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(July 7, 2015)
	Be careful when using this command. Unlike map markers, the draw commands can decrease your framerate.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		vectorFromTo
	</Keyword>
	<Description>
		Unit vector, equal to direction from vector1 to vector2. In other words this command produces vectorNormalized between given 2 points. To get a normal vector use vectorDiff.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/vectorFromTo
	</WikiPage>
	<Syntax>
		Array vectorFromTo Array
	</Syntax>
	<RawSyntax>
		vector1 vectorFromTo vector2
	</RawSyntax>
	<Example>
		$Code$[1,2,3] vectorFromTo [4,5,6]; //[0.57735,0.57735,0.57735]
	//is the same as
	vectorNormalized ([4,5,6] vectorDiff [1,2,3]); //[0.57735,0.57735,0.57735]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(19 Jul, 2014)
	(ArmA3 1.26) Algorithm:
	$Code$
	Vector1 = [x1,y1,z1]; Vector2 = [x2,y2,z2];
	Result = [(x1 – x2)/( sqrt ((x1 – x2) ^ 2 + (y1 – y2) ^ 2 + (z1 – z2) ^ 2)),
	(y1 – y2)/( sqrt ((x1 – x2) ^ 2 + (y1 – y2) ^ 2 + (z1 – z2) ^ 2)),
	(z1 – z2)/( sqrt ((x1 – x2) ^ 2 + (y1 – y2) ^ 2 + (z1 – z2) ^ 2))];
	$/Code$
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		assignedItems
	</Keyword>
	<Description>
		Get array with all assigned items.
	The resulting Array is sorted like: [ Map, Compass, Watch, Radio, GPS, NVG, Binoculars ].
	But if something is missing it get's omitted so you can not be sure that some element is at a constant index.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/assignedItems
	</WikiPage>
	<Syntax>
		assignedItems Object
	</Syntax>
	<RawSyntax>
		assignedItems unit
	</RawSyntax>
	<Example>
		$Code$hint str assignedItems player ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(June 18, 2013)
	Arma 3, version 0.70 - headgear and goggles are not present in returned array now.
	</NextNote>
		(August 22, 2013)
	For head gear use headgear, addHeadgear and removeHeadgear. For goggles use goggles, addGoggles and removeGoggles
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		setVelocityModelSpace
	</Keyword>
	<Description>
		Sets the velocity (speed vector) of the given vehicle relative to its model.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setVelocityModelSpace
	</WikiPage>
	<Syntax>
		Object setVelocityModelSpace Array
	</Syntax>
	<RawSyntax>
		vehicle setVelocityModelSpace [x, y, z]
	</RawSyntax>
	<Example>
		$Code$car setVelocityModelSpace [0, 10, 0]; //pushes car forward$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		forceEnd
	</Keyword>
	<Description>
		Sets the flag which tells engine that the mission end was forced. Might need additional endMission execution. Can be used in an "END" trigger to force end conditions in the editor.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/forceEnd
	</WikiPage>
	<Syntax>
		forceEnd
	</Syntax>
	<RawSyntax>
		forceEnd
	</RawSyntax>
	<Example>
		$Code$if (_TerritoryLost) then { forceEnd }$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		getWingsPositionRTD
	</Keyword>
	<Description>
		Returns position of stabilizers.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getWingsPositionRTD
	</WikiPage>
	<Syntax>
		getWingsPositionRTD Object
	</Syntax>
	<RawSyntax>
		getWingsPositionRTD RTD_helicopter
	</RawSyntax>
	<Example>
		$Code$_position = getWingsPositionRTD myHelicopter;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		groupRadio
	</Keyword>
	<Description>
		Sends the audio message to the group radio channel. Must have assigned "ItemRadio" to send or receive the transmission. The message is defined in CfgRadio in the description.ext file or config radio protocol. The transmission will play only on the PC where command was executed. If you need the transmission to play on all computers, you have to execute it globally (see remoteExec ).
	Note: When transmitting unit gets killed, transmission will be interrupted, however when receiving unit gets killed, the transmission continues to play.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/groupRadio
	</WikiPage>
	<Syntax>
		Object groupRadio String
	</Syntax>
	<RawSyntax>
		unit groupRadio radioName
	</RawSyntax>
	<Example>
		$Code$_soldierOne groupRadio "messageOne";$/Code$
	</NextExample>
		$Code$player groupRadio configName selectRandom ("true" configClasses ( configFile "CfgRadio"));$/Code$
	</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
		(December 3, 2016)
	To transmit user custom sounds (see Multiplayer_Custom_Sounds_Tutorial ), prefix the full filename including file extension with #. For example if there is a custom user sound file called MySound.ogg, to play it on the radio use:
	$Code$ player groupRadio "#MySound.ogg";$/Code$
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		acos
	</Keyword>
	<Description>
		ArcCosine of a number, result in Degrees
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/acos
	</WikiPage>
	<Syntax>
		acos Number
	</Syntax>
	<RawSyntax>
		acos x
	</RawSyntax>
	<Example>
		$Code$_degrees = acos 0.5
	// returns 60$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		lbSetPictureRightColor
	</Keyword>
	<Description>
		Sets the color of the second (right aligned) picture of the given index of the listbox with id idc of the topmost user dialog to the given color. Color is in format Color. Color which consists from only zeros means disable this override.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lbSetPictureRightColor
	</WikiPage>
	<Syntax>
		lbSetPictureRightColor Array
	</NextSyntax>
		Control lbSetPictureRightColor Array
	</Syntax>
	<RawSyntax>
		lbSetPictureRightColor [idc, index, color]
	</NextRawSyntax>
		control lbSetPictureRightColor [index, color]
	</RawSyntax>
	<Example>
		$Code$lbSetPictureRightColor [101, 0, [0, 1, 0, 0.5]];$/Code$
	</NextExample>
		$Code$_ctrl lbSetPictureRightColor [0, [1, 1, 1, 1]];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		More information on the LB command family can be found here
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		primaryWeaponItems
	</Keyword>
	<Description>
		Returns array with all items assigned to the primary weapon. This command is used for infantry weapons only.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/primaryWeaponItems
	</WikiPage>
	<Syntax>
		primaryWeaponItems Object
	</Syntax>
	<RawSyntax>
		primaryWeaponItems unit
	</RawSyntax>
	<Example>
		$Code$primaryWeaponItems player ;
	/*
	[
	"muzzle_snds_H",//silencer
	"acc_pointer_IR",//laser
	"optic_Aco",//optics
	"bipod_01_F_blk"//bipod
	]
	*/$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(March 16, 2015)
	Since revision 129742, this command also returns an attached bipod.
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		getOxygenRemaining
	</Keyword>
	<Description>
		Returns amount of remaining oxygen.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getOxygenRemaining
	</WikiPage>
	<Syntax>
		getOxygenRemaining Object
	</Syntax>
	<RawSyntax>
		getOxygenRemaining unit
	</RawSyntax>
	<Example>
		$Code$_oxygen = getOxygenRemaining player;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(October 24, 2014)
	Unit will die instantly at 0 oxygen unlike some other games that permit a certain amount of time after oxygen is depleted.
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		roleDescription
	</Keyword>
	<Description>
		Returns unit description set in Editor and visible on role selection screen in MP. Works in MP and SP.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/roleDescription
	</WikiPage>
	<Syntax>
		roleDescription Object
	</Syntax>
	<RawSyntax>
		roleDescription unit
	</RawSyntax>
	<Example>
		$Code$_playerRole = roleDescription player ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(June 29, 2015)
	One thing you should know about roles. When switching to units placed in editor on the fly in MP, it could mess up the role of the player. Could be bug, could be intended, but I would not recommend doing this. Create new unit dynamically if you need to switch to. Anyway, if role of the unit is messed up so is roleDescription.
	</NextNote>
		(May 26, 2017)
	roleDescription works for playableUnits only. That means not on AI disabled in lobby and not in SP (even for player).
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		setCuratorEditingAreaType
	</Keyword>
	<Description>
		Set whether curator can edit in all editing areas (true) or outside of them (false).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setCuratorEditingAreaType
	</WikiPage>
	<Syntax>
		Object setCuratorEditingAreaType Boolean
	</Syntax>
	<RawSyntax>
		curatorObj setCuratorEditingAreaType bool
	</RawSyntax>
	<Example>
		$Code$curatorModule setCuratorEditingAreaType true$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		This scripting command must be executed on the server to work properly in multiplayer
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		limitSpeed
	</Keyword>
	<Description>
		Limit speed of given vehicle or person to given value (in km/h).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/limitSpeed
	</WikiPage>
	<Syntax>
		Object limitSpeed Number
	</Syntax>
	<RawSyntax>
		objectName limitSpeed speed
	</RawSyntax>
	<Example>
		$Code$// Adjust "speedLimit" variable to change limited speed. (A3 1.24 we don't need loop for a continus effect, limitSpeed alone is enough.)
	_this setVariable ["speedLimit", 200];
	_nul = _this spawn {
	while { canMove _this} do {
	_this limitSpeed (_this getVariable "speedLimit");
	sleep 0.1;
	};
	};$/Code$
	</NextExample>
		$Code$["SpeedObserver","onEachFrame",{ hintSilent format ["%1", speed vehicle MyVehicle]},[]] call BIS_fnc_addStackedEventHandler ;
	sleep 10;
	MyVehicle limitSpeed 5; //Watch the effect of this command.$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(9 February 2008)
	(A1 1.08.5163)Has only an temporary effect on the vehicle specified (i.e. vehicle goes back to its previous speed right away). So, in order for this command to have a real, noticeable effect, it would have to be issued continuously (e.g. via a script loop, but in A3 1.24 it's unnecessary).
	</NextNote>
		(29 July 2014)
	(A3 1.24)To clarify, limitSpeed only do effect on non-player controlled AI units, it has continuous effect and AI won’t break through the speed limitation until one is contacted, engaged or regrouped.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		sideAmbientLife
	</Keyword>
	<Description>
		Returns side of ambient life, for example ambient life placed in Eden Editor.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/sideAmbientLife
	</WikiPage>
	<Syntax>
		sideAmbientLife
	</Syntax>
	<RawSyntax>
		sideAmbientLife
	</RawSyntax>
	<Example>
		$Code$_sideAmbientLife = sideAmbientLife ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Side
	</ReturnValue>

</NextListItem>

	<Keyword>
		lbPictureRight
	</Keyword>
	<Description>
		Returns the right picture name of the item with the given index of the listbox or combobox with id idc of the topmost user dialog.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lbPictureRight
	</WikiPage>
	<Syntax>
		lbPictureRight Array
	</NextSyntax>
		Control lbPictureRight Number
	</Syntax>
	<RawSyntax>
		lbPictureRight [idc, index]
	</NextRawSyntax>
		control lbPictureRight index
	</RawSyntax>
	<Example>
		$Code$_picture = lbPictureRight [101, 0];$/Code$
	</NextExample>
		$Code$_picture = _control lbPictureRight 0;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String - String
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlSetTooltip
	</Keyword>
	<Description>
		Sets tooltip text of given control.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlSetTooltip
	</WikiPage>
	<Syntax>
		Control ctrlSetTooltip String
	</Syntax>
	<RawSyntax>
		control ctrlSetTooltip text
	</RawSyntax>
	<Example>
		$Code$_control ctrlSetTooltip "tooltip";$/Code$
	</NextExample>
		$Code$findDisplay 10000 displayCtrl 10001 ctrlSetTooltip "ThisIsAGoodTip";$/Code$
	</NextExample>
		$Code$with uiNamespace do
	{
	bar = findDisplay 46 createDisplay "RscDisplayEmpty" ctrlCreate ["RscProgress", -1];
	bar ctrlSetPosition [0,0,1,0.01];
	bar ctrlCommit 0;
	bar progressSetPosition 0.75;
	bar ctrlSetTooltip "lalalalalalalala";
	};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(September 26, 2017)
	NOTE : If you want to recieve a multi-line tooltip, you can simply input newline escape symbol in your text:
	$Code$_ctrl ctrlSetTooltip "Your text\nYour text on next line";$/Code$
	Localization files (stringtable.xml) also supports that.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setVehicleLock
	</Keyword>
	<Description>
		Sets vehicle lock. Possible values:
	"UNLOCKED"
	"DEFAULT"
	"LOCKED"
	"LOCKEDPLAYER"
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setVehicleLock
	</WikiPage>
	<Syntax>
		Object setVehicleLock String
	</Syntax>
	<RawSyntax>
		vehicleName setVehicleLock lockState
	</RawSyntax>
	<Example>
		$Code$_veh1 setVehicleLock "LOCKED";$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		(October 22, 2014)
	In Arma 3:
	setVehicleLock "UNLOCKED" = same as " lock 0"
	setVehicleLock "DEFAULT" = same as " lock 1"
	setVehicleLock "LOCKED" = same as " lock 2"
	setVehicleLock "LOCKEDPLAYER" = same as " lock 3"
	</NextNote>
		(March 4, 2015)
	DEFAULT lock is default vehicle lock when vehicle placed in editor. If player is in a group of AIs and not the leader, he will not be able to enter this vehicle as he will not have GetIn action for this vehicle.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setMarkerBrushLocal
	</Keyword>
	<Description>
		Selects the fill texture for the marker ("RECTANGLE" or "ELLIPSE"). Brush is the name of the subclass in CfgMarkerBrushes.
	brush can be:
	"Solid"
	"SolidFull" (A3 only)
	"Horizontal"
	"Vertical"
	"Grid"
	"FDiagonal"
	"BDiagonal"
	"DiagGrid"
	"Cross"
	"Border" (A2/A3 only)
	"SolidBorder" (OA/A3 only)
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setMarkerBrushLocal
	</WikiPage>
	<Syntax>
		String setMarkerBrushLocal String
	</Syntax>
	<RawSyntax>
		markerName setMarkerBrushLocal brush
	</RawSyntax>
	<Example>
		$Code$"Marker1" setMarkerBrushLocal "DiagGrid";$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		disableDebriefingStats
	</Keyword>
	<Description>
		Disable debriefing score table.
	This command is broken.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/disableDebriefingStats
	</WikiPage>
	<Syntax>
		disableDebriefingStats
	</Syntax>
	<RawSyntax>
		disableDebriefingStats
	</RawSyntax>
	<Example>
		$Code$disableDebriefingStats ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		camCommit
	</Keyword>
	<Description>
		Smoothly conduct the changes that were assigned to a camera within the given time. If the time is set to zero, the changes are done immediately.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/camCommit
	</WikiPage>
	<Syntax>
		Object camCommit Number
	</Syntax>
	<RawSyntax>
		camera camCommit time
	</RawSyntax>
	<Example>
		$Code$// SQS
	; create a camera object
	_cam = "camera" camCreate [5600,4800,10]
	_cam camSetTarget player
	_cam cameraEffect ["internal", "BACK"]
	_cam camCommit 0
	; smoothly move the camera to its new position in 6 seconds
	_cam camSetPos [5680,4720,20]
	_cam camCommit 6
	@ camCommitted _cam
	; proceed$/Code$
	</NextExample>
		$Code$// SQF
	private "_cam";
	comment "create a camera object";
	_cam = "camera" camCreate [ position player select 0, position player select 1, 2];
	_cam camSetTarget player ;
	_cam cameraEffect ["internal", "BACK"];
	_cam camCommit 0;
	comment "smoothly move the camera to its new position in 6 seconds";
	_cam camSetPos [ position player select 0, ( position player select 1) + 10, 20];
	_cam camCommit 6;
	waitUntil { camCommitted _cam; };$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		switchableUnits
	</Keyword>
	<Description>
		Returns a list of playable units available for switching to. Command is relative to the client on which it is executed and will only show playable units for the same side as player 's group + player himself. The playableUnits command on the other hand will show all playable units regardless of the side. Exception is SP, where playable units from all sides will be accessible via this command. Dead units are automatically removed from the resulting array. Playable units that are already occupied by other human players will also not show in the results.
	NOTE that in Multiplayer, switchableUnits are only available when respawn type is set to SIDE or GROUP. In all other cases it is an empty array [].
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/switchableUnits
	</WikiPage>
	<Syntax>
		switchableUnits
	</Syntax>
	<RawSyntax>
		switchableUnits
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
		(July 06, 2011)
	On dedicated server this command returns empty array.
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		ropeUnwound
	</Keyword>
	<Description>
		False if unwinding in progress, otherwise true
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ropeUnwound
	</WikiPage>
	<Syntax>
		ropeUnwound Object
	</Syntax>
	<RawSyntax>
		ropeUnwound rope
	</RawSyntax>
	<Example>
		$Code$_isUnwound = ropeUnwound ( ropes heli1 select 0);$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		addCamShake
	</Keyword>
	<Description>
		Creates the camera shaking effect, like when you are near an explosion
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/addCamShake
	</WikiPage>
	<Syntax>
		addCamShake Array
	</Syntax>
	<RawSyntax>
		addCamShake [power, duration, frequency]
	</RawSyntax>
	<Example>
		$Code$addCamShake [10, 1, 25];$/Code$
	</NextExample>
		$Code$enableCamShake true ;
	addCamShake [5, 5, 25];$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		doGetOut
	</Keyword>
	<Description>
		Orders a unit or units to get out from the vehicle (silently).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/doGetOut
	</WikiPage>
	<Syntax>
		doGetOut Object/Array
	</Syntax>
	<RawSyntax>
		doGetOut unit
	</RawSyntax>
	<Example>
		$Code$doGetOut _unitOne$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		getAimingCoef
	</Keyword>
	<Description>
		Get current aiming coefficient (higher ~ less precise, default is 1)
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getAimingCoef
	</WikiPage>
	<Syntax>
		getAimingCoef Object
	</Syntax>
	<RawSyntax>
		getAimingCoef unit
	</RawSyntax>
	<Example>
		$Code$_coef = getAimingCoef player$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		reload
	</Keyword>
	<Description>
		Reload all weapons
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/reload
	</WikiPage>
	<Syntax>
		reload Object
	</Syntax>
	<RawSyntax>
		reload unitName
	</RawSyntax>
	<Example>
		$Code$if ( needReload player == 1) then { reload player };$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		diag_logSlowFrame
	</Keyword>
	<Description>
		Log all frames, where section takes longer than the threshold (in seconds).
	Note : Only available in specific builds. See Performance Profiling for details.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/diag_logSlowFrame
	</WikiPage>
	<Syntax>
		diag_logSlowFrame Array
	</Syntax>
	<RawSyntax>
		diag_logSlowFrame [section, threshold]
	</RawSyntax>
	<Example>
		$Code$diag_logSlowFrame ['total',0.3]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		and
	</Keyword>
	<Description>
		Returns true only if both conditions are true. In case of the alternative syntax, lazy evaluation is used (if left operand is false, evaluation of the right side is skipped completely).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/and
	</WikiPage>
	<Syntax>
		Boolean and Boolean
	</NextSyntax>
		Boolean and Code
	</Syntax>
	<RawSyntax>
		a and b
	</NextRawSyntax>
		a and b
	</RawSyntax>
	<Example>
		$Code$if (( alive player ) and (_enemycount == 0)) then { hint "you win !"}$/Code$
	</NextExample>
		$Code$if (( count _array 0) and {(_array select 0) == player }) then { hint "It works! Without lazy evaluation it would throw an error if array was empty."}$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(April 12, 2015)
	Just like the "or" command, the "and" command allows several conditions to be checked. Example:
	$Code$if(alive player and speed player 0 and _someOtherVar) then { hint"All three condtions are true" };$/Code$
	The example above will check if the player is alive and if the player is moving and checks if _someOtherVar is true.
	</Note>
	<ReturnValue>
		Boolean - Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		lnbAddArray
	</Keyword>
	<Description>
		Adds list of rows of strings.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lnbAddArray
	</WikiPage>
	<Syntax>
		lnbAddArray Array
	</Syntax>
	<RawSyntax>
		lnbAddArray [idc, [[[text,text],[value,],[data,]],[[text,text],[value,],[data,]],]]
	</RawSyntax>
	<Example>
		$Code$lnbAddArray [102,[[["#1"],[1],["#1"]]]];$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		setVehicleCargo
	</Keyword>
	<Description>
		Load cargo vehicle inside vehicle if possible, returns bool based on whether the vehicle was able to be loaded. Can also be used to unload a specific loaded vehicle or all loaded vehicles.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setVehicleCargo
	</WikiPage>
	<Syntax>
		Object setVehicleCargo Object
	</Syntax>
	<RawSyntax>
		vehicle setVehicleCargo cargo
	</RawSyntax>
	<Example>
		$Code$// Blackfish with no vehicle cargo loaded
	_success = blackfish setVehicleCargo offroad; //true$/Code$
	</NextExample>
		$Code$// Blackfish with full cargo already loaded
	_success = blackfish setVehicleCargo offroad; //false$/Code$
	</NextExample>
		$Code$// Unload specific loaded vehicle
	_success = objNull setVehicleCargo offroad;$/Code$
	</NextExample>
		$Code$// Unload all vehicles
	_success = blackfish setVehicleCargo objNull ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(July 4, 2016)
	From biforums :
	"objnull setVehicleCargo cargo vehicle - will unload specific loaded vehicle" and "transporting vehicle setVehicleCargo objnul - unload all vehicles"
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		allCutLayers
	</Keyword>
	<Description>
		Returns all named layers used by cutRsc, cutText, cutObj or cutFadeOut. The layer normally would be added on the first use of any of the aforementioned commands, however if a layer needs to be reserved it could be done like so: _layerNum = "myLayerName" cutFadeOut 0;. The index of the layer name in the array corresponds to the layer number the cut effect will be displayed on. If no layers were defined, the return is [""], because 0 layer is reserved for usage in cut commands without layer param or when name of the layer given is empty "".
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/allCutLayers
	</WikiPage>
	<Syntax>
		allCutLayers
	</Syntax>
	<RawSyntax>
		allCutLayers
	</RawSyntax>
	<Example>
		$Code$_allLayers = allCutLayers ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		onPreloadStarted
	</Keyword>
	<Description>
		Defines an action performed just before the preload screen started. Preload event occurs after briefing screen on mission start.
	i
	Since Arma 3 v1.57 a stackable version of this EH is available: PreloadStarted
	In order to keep compatibility between official and community content the functions BIS_fnc_addStackedEventHandler and BIS_fnc_removeStackedEventHandler should be used instead.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/onPreloadStarted
	</WikiPage>
	<Syntax>
		onPreloadStarted String/Code
	</Syntax>
	<RawSyntax>
		onPreloadStarted command
	</RawSyntax>
	<Example>
		$Code$onPreloadStarted { diag_log "preload started"};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		groupIconSelectable
	</Keyword>
	<Description>
		Return if groups icon raises onClick and onOver events.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/groupIconSelectable
	</WikiPage>
	<Syntax>
		groupIconSelectable
	</Syntax>
	<RawSyntax>
		groupIconSelectable
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctAddHeader
	</Keyword>
	<Description>
		Adds a header line of controls according to the HeaderTemplate class. It returns an array containing header index and array of created controls in a format [ headerIndex, [ control0, control1... control n ]].
	Note that rows and headers are indexed separately.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctAddHeader
	</WikiPage>
	<Syntax>
		ctAddHeader Control
	</Syntax>
	<RawSyntax>
		ctAddHeader Control
	</RawSyntax>
	<Example>
		$Code$_array = ctAddHeader _control;$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlMapAnimClear
	</Keyword>
	<Description>
		Clears the map animation.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlMapAnimClear
	</WikiPage>
	<Syntax>
		ctrlMapAnimClear Control
	</Syntax>
	<RawSyntax>
		ctrlMapAnimClear controlName
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		isWalking
	</Keyword>
	<Description>
		Returns true if walk is toggled (W+S in Arma 3).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isWalking
	</WikiPage>
	<Syntax>
		isWalking Object
	</Syntax>
	<RawSyntax>
		isWalking unitName
	</RawSyntax>
	<Example>
		$Code$_bool = isWalking player ;$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(March 8, 2015)
	To expand on the limited description, this command doesn't necessarily say whether or not the unit is currently walking. All it says is that walking is toggled on or off. This command can still return true when the unit is sprinting. When walking is toggled on, the unit will return to walking pace when not sprinting. When walking is toggled off, the unit will return to jogging pace when not sprinting. This command is not intended to gauge a units current movement speed.
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		attachedTo
	</Keyword>
	<Description>
		Returns the object it is attached to.
	Returns objNull if not attached to anything.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/attachedTo
	</WikiPage>
	<Syntax>
		attachedTo Object
	</Syntax>
	<RawSyntax>
		attachedTo object
	</RawSyntax>
	<Example>
		$Code$if ( isNull attachedTo _obj1) then {
	hint "_obj1 is not attached to anything.";
	};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Object
	</ReturnValue>

</NextListItem>

	<Keyword>
		menuShortcut
	</Keyword>
	<Description>
		Returns shortcut related to menu entry on given path.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/menuShortcut
	</WikiPage>
	<Syntax>
		menuShortcut Array
	</Syntax>
	<RawSyntax>
		menuShortcut [idc, path]
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		loadStatus
	</Keyword>
	<Description>
		Loads object's properties from Objects.sav file in campaign directory (from entry name).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/loadStatus
	</WikiPage>
	<Syntax>
		Object loadStatus String
	</Syntax>
	<RawSyntax>
		obj loadStatus entryName
	</RawSyntax>
	<Example>
		$Code$_ok = player loadStatus "playerState";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		set3DENObjectType
	</Keyword>
	<Description>
		Sets the classname of one or more given Eden Editor objects. For Logic objects use set3DENLogicType
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/set3DENObjectType
	</WikiPage>
	<Syntax>
		Array set3DENObjectType String
	</Syntax>
	<RawSyntax>
		objects set3DENObjectType classname
	</RawSyntax>
	<Example>
		$Code$[ get3DENMouseOver select 1] set3DENObjectType "B_crew_F";
	// turns object under cursor into a blufor crewman$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlSetTooltipColorText
	</Keyword>
	<Description>
		Sets tooltip text color of given control. Color is in format Color.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlSetTooltipColorText
	</WikiPage>
	<Syntax>
		Control ctrlSetTooltipColorText Array
	</Syntax>
	<RawSyntax>
		display ctrlSetTooltipColorText color
	</RawSyntax>
	<Example>
		$Code$_control ctrlSetTooltipColorText [1, 0, 0, 1]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setHit
	</Keyword>
	<Description>
		Damage / repair part of object. The object must be local to the computer where command is executed.
	Damage 0 means fully functional, damage 1 means completely destroyed / dead. Note: Some part names are in Czech; see translation table.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setHit
	</WikiPage>
	<Syntax>
		Object setHit Array
	</Syntax>
	<RawSyntax>
		object setHit [part, damage, useEffects]
	</RawSyntax>
	<Example>
		$Code$vehicle player setHit ["motor", 1]$/Code$
	</NextExample>
		$Code$vehicle player setHit ["mala vrtule", 0.95]$/Code$
	</NextExample>
		$Code$if ( local _heli) then {
	_heli setHit ["velka vrtule", 0];
	} else {
	hint "Vehicle " + str _heli + " must be local to this machine to do that!";
	};$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		Damaging specific parts of the vehicle will not update its overall damage value (as of v1.03):
	player setHit ["hands", 0.9];
	hint str (damage player); //will return 0
	</NextNote>
		Direct use of the names of sections of the model is likely a bad practice, and will not work on some addons.
	So instead:
	_MH60S setHit ["elektronika", _hit];
	should be used:
	_MH60S setHit [getText(configFile "cfgVehicles" "MH60S" "HitPoints" "HitAvionics" "name"), _hit];
	</NextNote>
		Since there is no getHit (as of 1.61), you can use canMove command to check if vehicle is capable of moving.
	For land wheeled vehicles canMove will return false if any real wheel (damaging nonexistent wheels doesn't count) has hitpoint damage greater than 0.9. Having HitEngine damage greater than 0.9 will make canMove to return false as well (plus will result in vehicle exploding). HitFuel however doesn't make canMove return false even though having high HitFuel damage will make car explode.
	For helicopters HitEngine with damage greater than 0.9 will make canMove return false as well. Having HitHRotor (main rotor) damaged even up to 1 will never make canMove return false. However, if HitVRotor (tail rotor) will have damage greater than 0.703608 it will make canMove return false (even though some helicopters are controllable and flyable by player with broken tail rotor).
	In same manner you can use canFire to check if turret hitpoints are not damaged enough to be able to fire. (canFire always returns false if there is nobody in vehicle)
	Update: Since ArmA 3 1.31 getHit has been introduced.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		addPlayerScores
	</Keyword>
	<Description>
		MP server only: Adds player score.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/addPlayerScores
	</WikiPage>
	<Syntax>
		Object addPlayerScores Array
	</Syntax>
	<RawSyntax>
		unit addPlayerScores values
	</RawSyntax>
	<Example>
		$Code$player addPlayerScores [0, 1, 0, 0, 1];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		This scripting command must be executed on the server to work properly in multiplayer
	</NextNote>
		(May 2, 2017)
	As this command will add the given number to a player's score, a little bit of thought needs to be given to friendly-fire if it's for something like a deathmatch or a FFA, due to friendly-fire incurring negative points. So to counter this just add 2 points every time a player kills a unit from the same side:
	$Code$player addPlayerScores [2, 0, 0, 0, 0];$/Code$
	The 2 points will add 1 point to counter the negative friendly-fire point and 1 point to add correctly to the score.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		getHit
	</Keyword>
	<Description>
		Returns selection damage. Same as getHitPointDamage only argument is selection part instead of hit point. Note: Some part names are in Czech; see translation table.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getHit
	</WikiPage>
	<Syntax>
		Object getHit String
	</Syntax>
	<RawSyntax>
		vehicle getHit selection
	</RawSyntax>
	<Example>
		$Code$player getHit "head";$/Code$
	</NextExample>
		$Code$_car getHit "motor";$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number/Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		saveStatus
	</Keyword>
	<Description>
		Saves object's properties to Objects.sav file in campaign directory as entry name.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/saveStatus
	</WikiPage>
	<Syntax>
		Object saveStatus String
	</Syntax>
	<RawSyntax>
		object saveStatus name
	</RawSyntax>
	<Example>
		$Code$player saveStatus "playerstate"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		createMenu
	</Keyword>
	<Description>
		Creates a previously added menu.
	i
	Some Old Editor Command
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/createMenu
	</WikiPage>
	<Syntax>
		Control createMenu Number
	</Syntax>
	<RawSyntax>
		map createMenu index
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		playMission
	</Keyword>
	<Description>
		The mission is launched (from the main menu). Both campaign and mission are given as their directory name. If the campaign is empty, a single mission is launched. If skipBriefing is true, the intro and briefing are skipped.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/playMission
	</WikiPage>
	<Syntax>
		playMission Array
	</Syntax>
	<RawSyntax>
		playMission [campaign, mission, skipBriefing]
	</RawSyntax>
	<Example>
		$Code$playMission ["XOutrage","x05Negotiator.Noe"]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setFatigue
	</Keyword>
	<Description>
		Sets the person's fatigue, from 0 to 1.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setFatigue
	</WikiPage>
	<Syntax>
		Object setFatigue Number
	</Syntax>
	<RawSyntax>
		unit setFatigue value
	</RawSyntax>
	<Example>
		$Code$player setFatigue 1;$/Code$
	</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
		(05 April, 2014)
	setFatigue will affect fatigue of a local unit only. If you execute it on remote unit, the getFatigue value will only change locally with no effect on remote unit. Scripted setFatigue changes don't broadcast at all. In short, use setFatigue on local units only.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setLocalWindParams
	</Keyword>
	<Description>
		Sets parameters for helicopter rotor wash. Visually it affects how much the grass and bushes bend under a helicopter and how big is the area of the effect. Default [1.0, 1.0].
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setLocalWindParams
	</WikiPage>
	<Syntax>
		setLocalWindParams Array
	</Syntax>
	<RawSyntax>
		setLocalWindParams [strength, diameter]
	</RawSyntax>
	<Example>
		$Code$setLocalWindParams [10, 5];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setFlagAnimationPhase
	</Keyword>
	<Description>
		Sets flag position on the flag pole according to the given animation phase, where 0 is the bottom of the flag pole, 1 is the top of the flag pole. The changes to the flag position are local to the PC command is executed on. To animate flag use BIS_fnc_animateFlag
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setFlagAnimationPhase
	</WikiPage>
	<Syntax>
		Object setFlagAnimationPhase Number
	</Syntax>
	<RawSyntax>
		flag setFlagAnimationPhase phase
	</RawSyntax>
	<Example>
		$Code$_flag1 setFlagAnimationPhase 0.5;$/Code$
	</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		estimatedTimeLeft
	</Keyword>
	<Description>
		Sets the estimated time left in the game. Using this function the designer can provide a "time left" estimate that is shown in the "Game in progress" screen or in the master browser. This command works in MP only and must be executed on the server only. NOTE that since Arma 3 v1.69 the max value that can be set is 10 hours (36000 seconds)
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/estimatedTimeLeft
	</WikiPage>
	<Syntax>
		estimatedTimeLeft Number
	</Syntax>
	<RawSyntax>
		estimatedTimeLeft seconds
	</RawSyntax>
	<Example>
		$Code$estimatedTimeLeft 600; //10 min$/Code$
	</NextExample>
		$Code$// For missions with a hard set limit adjusted via Param1, the following example can be used in the init.sqs file:
	estimatedTimeLeft Param1;$/Code$
	</Example>
	<Locality>
		undefined / global
	</Locality>
	<Note>
		This scripting command must be executed on the server to work properly in multiplayer
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		enableDiagLegend
	</Keyword>
	<Description>
		Enable or disable the legend for diagnostics. Internal dev only
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/enableDiagLegend
	</WikiPage>
	<Syntax>
		enableDiagLegend Boolean
	</Syntax>
	<RawSyntax>
		enableDiagLegend Bool
	</RawSyntax>
	<Example>
		$Code$enableDiagLegend false$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		isUAVConnected
	</Keyword>
	<Description>
		Returns true if UAV is connected to some terminal.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isUAVConnected
	</WikiPage>
	<Syntax>
		isUAVConnected Object
	</Syntax>
	<RawSyntax>
		isUAVConnected uav
	</RawSyntax>
	<Example>
		$Code$bool = isUAVConnected cursorTarget ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		echo
	</Keyword>
	<Description>
		Sends any text into the debugger console or the logfile. Present in internal version only, not working in the retail version.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/echo
	</WikiPage>
	<Syntax>
		echo String
	</Syntax>
	<RawSyntax>
		echo text
	</RawSyntax>
	<Example>
		$Code$echo "Text in logfile"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		onShowNewObject
	</Keyword>
	<Description>
		Defines an action performed when the user right clicks on the map and,selects New Object. Set to empty for default behavior. Command receives:,_pos array position,
	i
	Some Old Editor Command
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/onShowNewObject
	</WikiPage>
	<Syntax>
		Control onShowNewObject String
	</Syntax>
	<RawSyntax>
		map onShowNewObject command
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Any_Value
	</ReturnValue>

</NextListItem>

	<Keyword>
		get3DENLinesVisible
	</Keyword>
	<Description>
		Get visibility state of Eden Editor lines.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/get3DENLinesVisible
	</WikiPage>
	<Syntax>
		get3DENLinesVisible
	</Syntax>
	<RawSyntax>
		get3DENLinesVisible
	</RawSyntax>
	<Example>
		$Code$if ( get3DENLinesVisible select 0) then { hint "Lines are visible in the map.";};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		nil
	</Keyword>
	<Description>
		Nil value. This value can be used to undefine existing variables.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/nil
	</WikiPage>
	<Syntax>
		nil
	</Syntax>
	<RawSyntax>
		nil
	</RawSyntax>
	<Example>
		$Code$variableToDestroy = nil ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		Note that ArrayName = nil destroys the arrayNAME not the array content.
	Array content is 'destroyed' when no more ArrayName s refer to the content.
	</NextNote>
		Never ever assign a value to nil !
	Doing so creates a global variable with the same name that overrides the "command" nil :
	foo = "foo";
	nil = "bar";
	foo = nil;
	hint foo; // displays "bar"
	</NextNote>
		(September 25, 2014)
	While isNil isn't available in OFP/CWA you can easily emulate it with something like this:
	_nil = format["%1",_nilstring];
	?(format["%1",foo]==_nil): foo = "Hello World!"
	</Note>
	<ReturnValue>
		Void
	</ReturnValue>

</NextListItem>

	<Keyword>
		objectFromNetId
	</Keyword>
	<Description>
		Get object with given unique ID. If object is a group use groupFromNetId. As this command is MP only, you can use BIS_fnc_objectFromNetId, which extends the use to SP as well.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/objectFromNetId
	</WikiPage>
	<Syntax>
		objectFromNetId String
	</Syntax>
	<RawSyntax>
		objectFromNetId id
	</RawSyntax>
	<Example>
		$Code$objectFromNetId "2:3"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Object
	</ReturnValue>

</NextListItem>

	<Keyword>
		animateDoor
	</Keyword>
	<Description>
		Animates a door on a vehicle. Animation is defined in config file in CfgVehicles - AnimationSources. Wanted animation phase is set with phase param. This command works only on animation sources with "door" controller. Door_L in the example below can be animated with animateDoor but not CargoRamp_Open: heli animateDoor ["Door_L", 1];
	class AnimationSources
	{
	class CargoRamp_Open
	{
	source = "user" ;
	animPeriod = 5 ;
	initPhase = 0 ;
	};
	class Door_L
	{
	source = "door" ;
	animPeriod = 1.6 ;
	};
	};
	To animate doors or other sources that have "user" controller, use animate command, or even better, animateSource (recommended). Sources with "hit" controller can be animated with setHitPointDamage command applied to the name contained in hitpoint property. For availability of animation sources and their controller types see: createVehicle/vehicles
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/animateDoor
	</WikiPage>
	<Syntax>
		Object animateDoor Array
	</Syntax>
	<RawSyntax>
		object animateDoor [doorname, phase, instant]
	</RawSyntax>
	<Example>
		$Code$Taru animateDoor ["Door_1_source", 1];$/Code$
	</NextExample>
		$Code$// Open left front door on Ifrit instantly:
	Ifrit animateDoor ["Door_LF", 1, true ];$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlSetFontPB
	</Keyword>
	<Description>
		Sets P bold font of given HTML control.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlSetFontPB
	</WikiPage>
	<Syntax>
		Control ctrlSetFontPB String
	</Syntax>
	<RawSyntax>
		controlName ctrlSetFontPB fontName
	</RawSyntax>
	<Example>
		$Code$_control ctrlSetFontPB "TahomaB"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		exp
	</Keyword>
	<Description>
		Let x be a number, then exp (x) is equal to e to the power of x (or e^x)
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/exp
	</WikiPage>
	<Syntax>
		exp Number
	</Syntax>
	<RawSyntax>
		exp x
	</RawSyntax>
	<Example>
		$Code$_result = exp 1
	// returns 2.7182$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		Note that you cannot exponent a value greater than 88.72283554077147726999 (999 repeating), as this is beyond what the game can calculate.
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		waves
	</Keyword>
	<Description>
		Return waves value.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/waves
	</WikiPage>
	<Syntax>
		waves
	</Syntax>
	<RawSyntax>
		waves
	</RawSyntax>
	<Example>
		$Code$waveIntensity = waves ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		backpackContainer
	</Keyword>
	<Description>
		Returns a cargo container of a unit's backpack.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/backpackContainer
	</WikiPage>
	<Syntax>
		backpackContainer Object
	</Syntax>
	<RawSyntax>
		backpackContainer unit
	</RawSyntax>
	<Example>
		$Code$hint str backpackContainer player ; //1a5f7900# 163944: backpack_fast.p3d$/Code$
	</NextExample>
		$Code$hint str getMagazineCargo backpackContainer player ;
	// [
	//[
	//"APERSBoundingMine_Range_Mag",
	//"ClaymoreDirectionalMine_Remote_Mag",
	//"SLAMDirectionalMine_Wire_Mag",
	//"DemoCharge_Remote_Mag"
	//],[
	//3,
	//2,
	//2,
	//1
	//]
	//]$/Code$
	</NextExample>
		$Code$( backpackContainer player ) addWeaponCargoGlobal [ weapons player select 0,1];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(Apr 29, 2014)
	In ArmA3 ver 1.16, we can use either backpackContainer or unitBackpack at present since both of them enjoy same operand type and return value.
	</Note>
	<ReturnValue>
		Object
	</ReturnValue>

</NextListItem>

	<Keyword>
		currentWeaponTurret
	</Keyword>
	<Description>
		Returns the name of the currently selected weapon on specified turret. Use turret path [-1] for driver's turret.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/currentWeaponTurret
	</WikiPage>
	<Syntax>
		Object currentWeaponTurret Array
	</Syntax>
	<RawSyntax>
		vehicle currentWeaponTurret [turret path]
	</RawSyntax>
	<Example>
		$Code$_weapon = MBT_Kuma currentWeaponTurret [0];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		doMove
	</Keyword>
	<Description>
		Order the given unit(s) to move to the given position (without radio messages). After reaching his destination, the unit will immediately return to formation (if in a group); or order his group to form around his new position (if a group leader). Use doStop to stop units returning to formation.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/doMove
	</WikiPage>
	<Syntax>
		Object/Array doMove Array
	</Syntax>
	<RawSyntax>
		unit doMove position
	</RawSyntax>
	<Example>
		$Code$_soldier1 doMove ( position _officer);$/Code$
	</NextExample>
		$Code$this doMove ( getMarkerPos "Marker1");$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		(February 9, 2008)
	If doMove is to be used in conjunction with waypoint behavior commands (e.g. setSpeedMode ), then those have to be issued after the move command to have an effect. Otherwise the move will be done with the default settings.
	</NextNote>
		(February 3, 2009)
	If a unit is part of a group, and is not the leader, the unit will fall back into formation soon after the domove is completed. This does not happen for units that are in a group alone (because they are their own leader).
	There is no single command to get a unit to move to a position and stay there. The best way to do this is to issue a domove, then wait for the unit to reach his destination, then disable his movement AI. VBS2 users can use the fn_vbs_doMoveEx function.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		scudState
	</Keyword>
	<Description>
		Current state of given Scud launcher. Following states are recognized:
	0 - No activity
	1 - Launch preparation,
	2 - Launch prepared
	3 - Ignition
	4 - Launched.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/scudState
	</WikiPage>
	<Syntax>
		scudState Object
	</Syntax>
	<RawSyntax>
		scudState scudName
	</RawSyntax>
	<Example>
		$Code$if (( scudState _scud) == 3) exitWith
	{
	player sideChat "SCUD Launch status: Missile Ignition";
	};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(August 4, 2006)
	This command checks the scud status (Non-integral values are used to indicate transition between states).
	To make the scud be upright, launch or cancel launch you need to use actions.
	$Code$scud1 action ["scudLaunch",scud1]; // erect the missile
	scud1 action ["scudStart",scud1]; // launch the missile
	scud1 action ["scudCancel",scud1]; // down the missile
	$/Code$
	(Make sure either the scud launcher has a crew inside or you use the game logic to perform actions).
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		sliderPosition
	</Keyword>
	<Description>
		Return current thumb position of slider idc of topmost user dialog.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/sliderPosition
	</WikiPage>
	<Syntax>
		sliderPosition Number
	</NextSyntax>
		sliderPosition Control
	</Syntax>
	<RawSyntax>
		sliderPosition idc
	</NextRawSyntax>
		sliderPosition control
	</RawSyntax>
	<Example>
		$Code$_slidepos1 = sliderPosition 105;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number - Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		uiSleep
	</Keyword>
	<Description>
		Suspend execution of script for given uitime. uiSleep is a sleep method to delay script execution where script time/simulation time is stopped. uiSleep is basically using the system time (uiTime more specifically) and not simulation time. So in the cases where sleep command would get stuck indefinitely, uiSleep can still be used to effectively delay script execution. For example in a mission briefing or an editor or when simulation is paused in general.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/uiSleep
	</WikiPage>
	<Syntax>
		uiSleep Number
	</Syntax>
	<RawSyntax>
		uiSleep delay
	</RawSyntax>
	<Example>
		$Code$uiSleep 0.5$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(March 28, 2016)
	If the game is paused in SP (via ESC) the sleep command will stop working, to prevent that use uiSleep.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		viewDistance
	</Keyword>
	<Description>
		Returns the rendering distance.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/viewDistance
	</WikiPage>
	<Syntax>
		viewDistance
	</Syntax>
	<RawSyntax>
		viewDistance
	</RawSyntax>
	<Example>
		$Code$hint ("my view distance is " + str viewDistance + " meters");$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		removeAllHandgunItems
	</Keyword>
	<Description>
		Removes all items from weapon except magazine.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/removeAllHandgunItems
	</WikiPage>
	<Syntax>
		removeAllHandgunItems Object
	</Syntax>
	<RawSyntax>
		removeAllHandgunItems unit
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		weaponState
	</Keyword>
	<Description>
		Returns the currently selected weapon state for unit or vehicle.
	Since Arma 3 v1.69.140397 this command has been improved and extended:
	It is now possible to query any weapon of a vehicle without the need to place a weapon operator first, provided the weapon or muzzle is specified in optional param. By default a vehicle has no weapons selected, so querying currently selected weapon returns no weapon, unless weapon is specified.
	Driver turret can now be accessed as well with turret path [-1].
	Muzzle name is supported as well as weapon name. Weapon search gets priority, but if there is no weapon with given name, the muzzles will be searched.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/weaponState
	</WikiPage>
	<Syntax>
		weaponState Object
	</NextSyntax>
		weaponState Array
	</Syntax>
	<RawSyntax>
		weaponState unit
	</NextRawSyntax>
		weaponState [vehicle, turretPath, weapon]
	</RawSyntax>
	<Example>
		$Code$_wsPlayer = weaponState player ; // ["arifle_MXC_ACO_F","arifle_MXC_ACO_F","Single","30Rnd_65x39_caseless_mag",30]$/Code$
	</NextExample>
		$Code$_wsVehicle = weaponState [_apc, [0]]; // ["autocannon_40mm_CTWS","HE","player","60Rnd_40mm_GPR_Tracer_Red_shells",60]$/Code$
	</NextExample>
		$Code$_wsVehicle = weaponState [_apc, [0], "AP"]; // ["autocannon_40mm_CTWS","AP","player","40Rnd_40mm_APFSDS_Tracer_Red_shells",40]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array - Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		turretUnit
	</Keyword>
	<Description>
		Returns the unit in the vehicle turret. Driver turret [-1] is supported since Arma 3 v1.57.135045
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/turretUnit
	</WikiPage>
	<Syntax>
		Object turretUnit Array
	</Syntax>
	<RawSyntax>
		vehicle turretUnit turretpath
	</RawSyntax>
	<Example>
		$Code$_vehicle turretUnit _thisTurret$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Object
	</ReturnValue>

</NextListItem>

	<Keyword>
		removeWeaponCargo
	</Keyword>
	<Description>
		Remove weapon from the vehicle cargo space.
	This is unoffical documentation. All Information here is as it exists in the Engine. It might not reflect the reality.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/removeWeaponCargo
	</WikiPage>
	<Syntax>
		Object removeWeaponCargo Array
	</Syntax>
	<RawSyntax>
		vehicle removeWeaponCargo [weaponID,creatorID]
	</RawSyntax>
	<Example>
		$Code$rearmTruckOne removeWeaponCargo [19, 1]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		lnbText
	</Keyword>
	<Description>
		Returns the shown text in the item with the given position of the given 2D listbox.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lnbText
	</WikiPage>
	<Syntax>
		Control lnbText Array
	</Syntax>
	<RawSyntax>
		control lnbText [row,column]
	</RawSyntax>
	<Example>
		$Code$_ctrl lnbText [0,0];$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
		(Sep 9 2014)
	(A3 1.28)As for invisible data processing, lnbAddArray, lnbAddColumn, lnbData, lnbGetColumnsPosition, lnbSetColumnsPos, lnbSetData, lnbSetText, lnbSetValue, lnbText and lnbValue store data types into exact position of the listNbox with different spaces. Accessing data with coordinate command at nearly the same syntax:
	$Code$
	//Set same value to one position of a Control
	_ctrl lnbSetData [ [0,0],"#1"];
	lnbSetColumnsPos [102, [0,1], 1];
	_ctrl lnbSetText [ [0,1], "#1"];
	_ctrl lnbSetValue [ [0,0],1];
	//Accessing the value disregard affecting one another.
	_ctrl lnbData [0,0]; //"#1"
	lnbGetColumnsPosition _ctrl //[1];
	_ctrl lnbText [0,0];//"#1"
	_ctrl lnbValue [0,0];//1
	$/Code$
	For a direct visible control over CT_LISTNBOX:
	$Code$
	0 = [_CT_LISTNBOX] spawn {
	private ["_CT_LISTNBOX","_color","_current","_pic"];
	disableSerialization ;
	_CT_LISTNBOX = _this select 0;
	{
	_CT_LISTNBOX lnbAddRow [ getText (_x "displayNameShort"), getText (_x "displayName")];
	_CT_LISTNBOX lnbSetPicture [ [_foreachIndex,0], getText (_x "texture")];
	} forEach (" isClass _x" configClasses ( configFile "CfgRanks"));
	_CT_LISTNBOX lnbSetCurSelRow 0;
	_current = lnbCurSelRow _CT_LISTNBOX;
	_color = _CT_LISTNBOX lnbColor [_current,0];
	_CT_LISTNBOX lnbSetColor [ [_current,1], [(_color select 0)/2,0,0,1] ];
	_CT_LISTNBOX lnbDeleteColumn 0;
	_CT_LISTNBOX lnbDeleteRow 1;
	sleep 1;
	lnbClear _CT_LISTNBOX;//Clear all items but control still remains just invisible.
	};
	$/Code$
	A combined use of both invisible and visible data processing commands alive the Control.
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		setOvercast
	</Keyword>
	<Description>
		Set overcast to given value smoothly during given time (in seconds). Zero time means immediate change. An overcast setting of zero means clear (sunny) weather, and one means storms and rain are very likely. Higher overcast values also result in higher wind speeds.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setOvercast
	</WikiPage>
	<Syntax>
		Number setOvercast Number
	</Syntax>
	<RawSyntax>
		time setOvercast overcast
	</RawSyntax>
	<Example>
		$Code$50 setOvercast 0.5$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
		(August 4, 2006)
	Notes from before the conversion:
	Use setRain if you want to make sure it rains.
	</NextNote>
		Only one script command induced weather change (either setOvercast or setFog ) can be happening at a time. Starting a new weather change will immediately halt the current weather change. SetRain changes are independent and can occur simultaneously to a weather change.
	</NextNote>
		Arma 3 's volumetric clouds cannot be instantly changed (it would take up to a few seconds to do a full recompute). Therefore, 0 setOvercast 0 will not have the desired effect. You can use skipTime to get to the desired cloud coverage.
	NOTE: To get instant, seamless overcast change to overcast 1 advance the time 24 hours with skipTime while setting overcast transition time to 86400 seconds (24 hours) -- Killzone_Kid
	$Code$86400 setOvercast 1;
	skipTime 24;
	//to remain on the same date:
	skipTime -24;
	86400 setOvercast 1;
	skipTime 24;
	$/Code$
	</NextNote>
		With removal of simulSetHumidity‎, in order to add instant cloud cover, execute simulWeatherSync with delay (for now):
	$Code$ skipTime -24;
	86400 setOvercast 1;
	skipTime 24;
	0 = [] spawn {
	sleep 0.1;
	simulWeatherSync ;
	};$/Code$
	There is slight freeze with simul command.
	</NextNote>
		Delay in Arma 3 doesn't work for quick changes. Using 120 setOvercast 1 only reaches full overcast after about 50 minutes. Using setTimeMultiplier does speed up the overcast, but it doesn't render any clouds. You will need to skipTime or forceWeatherChange to render clouds if you want it to happen within the hour.
	</NextNote>
		(May 4, 2016)
	Actual transition time is inversely proportional to the timeMultiplier. For example, a time of 7200 (2 hours) and a timeMultiplier of 2 will result in a real-life transition time of 7200 / 2 = 3600 (1 hour).
	In case of overcast, a timeMultiplier 1 will cause gradual desyncing of the cloud cover with the overcast value, so it is advised that you multiply the transition time by the multiplier, i.e. :
	$Code$(7200 * timeMultiplier ) setOvercast 1$/Code$
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		reportRemoteTarget
	</Keyword>
	<Description>
		Shares the target vehicle via datalink to the Side center for a given time.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/reportRemoteTarget
	</WikiPage>
	<Syntax>
		Side reportRemoteTarget Array
	</Syntax>
	<RawSyntax>
		side reportRemoteTarget [target, time]
	</RawSyntax>
	<Example>
		$Code$blufor reportRemoteTarget [ vehicle player, 60];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		taskDestination
	</Keyword>
	<Description>
		Returns the position of the task (as specified by destination parameter in config).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/taskDestination
	</WikiPage>
	<Syntax>
		taskDestination Task
	</Syntax>
	<RawSyntax>
		taskDestination task
	</RawSyntax>
	<Example>
		$Code$if (! isNull currentTask player ) then { taskDestination currentTask player }; //return Position ( Array )$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		displayRemoveEventHandler
	</Keyword>
	<Description>
		Remove a given event handler from the given display.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/displayRemoveEventHandler
	</WikiPage>
	<Syntax>
		Display displayRemoveEventHandler Array
	</Syntax>
	<RawSyntax>
		display displayRemoveEventHandler [handler name,id]
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(April 19, 2015)
	If you for example used this code to add the eventHandler:
	$Code$_myEH = (findDisplay 46) displayAddEventHandler ["KeyDown", "hint str _this"];$/Code$
	Then this would be the correct code to remove that eventHandler again:
	$Code$(findDisplay 46) displayRemoveEventHandler ["KeyDown", _myEH];$/Code$
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlMapAnimDone
	</Keyword>
	<Description>
		Checks whether the map animation has finished.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlMapAnimDone
	</WikiPage>
	<Syntax>
		ctrlMapAnimDone Control
	</Syntax>
	<RawSyntax>
		ctrlMapAnimDone controlName
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		createVehicleCrew
	</Keyword>
	<Description>
		Creates crew to given empty vehicle. Crew members are default crew defined in config. Crew side will also correspond to vehicle's faction. This command does not addVehicle to the created crew in the same way this normally happens when crewed vehicle created in the editor.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/createVehicleCrew
	</WikiPage>
	<Syntax>
		createVehicleCrew Object
	</Syntax>
	<RawSyntax>
		createVehicleCrew vehicle
	</RawSyntax>
	<Example>
		$Code$// Spawn a flying UAV with crew.
	myUAV = [ getPos player, 0, "B_UAV_02_F", west ] call BIS_fnc_spawnVehicle ;
	createVehicleCrew (myUAV select 0);$/Code$
	</NextExample>
		$Code$_veh = createVehicle ["O_MRAP_02_hmg_F", position player, [], 0, "NONE"];
	createVehicleCrew _veh;
	{
	diag_log [_x, faction _x, side _x, side group _x];
	} forEach crew _veh;[O Alpha 1-1:1,"OPF_F",EAST,EAST]
	[O Alpha 1-1:2,"OPF_F",EAST,EAST]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(August 20, 2014)
	As of ARMA 3 v1.26 the command will work on non-empty vehicles. If any of the crew defined in config are missing they will be added.
	</NextNote>
		(November 8, 2014)
	This command creates drivers/copilots, commanders and gunners where appropriate, but it never creates cargo crew.
	So a gunship Huron will get a pilot and copilot plus 2 door gunners, but nobody in the back.
	</NextNote>
		(December 22, 2015)
	createVehicleCrew does not work with Transport Unload waypoints for helicopters. You need to spawn the pilots separately and then get them into the helicopter in order to get Transport Unload waypoints to work.
	</NextNote>
		(July 2, 2017)
	The particular seats to which units are added depend on the dontCreateAI property, the hasDriver property of the base class, and the hasGunner propery of turret classes.
	For instance, the following snippet calculates how many seats will be occupied by the created crew:
	$Code$private _vehCfg = configFile "CfgVehicles" typeOf _vehicle;
	private _crewCount = {round getNumber (_x "dontCreateAI") 1 &&
	((_x == _vehCfg && {round getNumber (_x "hasDriver") 0}) ||
	(_x != _vehCfg && {round getNumber (_x "hasGunner") 0}))} count ([_vehicle, configNull] call BIS_fnc_getTurrets);
	$/Code$
	Also, I've written a function to create a UAV crew for a specific side: https://gist.github.com/AgentRev/cb25d30e464f2239b6cee51fa0110c78
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		lbText
	</Keyword>
	<Description>
		Returns the shown text in the item with the given index of the listbox or combobox with id idc of the topmost user dialog.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lbText
	</WikiPage>
	<Syntax>
		lbText Array
	</NextSyntax>
		Control lbText Number
	</Syntax>
	<RawSyntax>
		lbText [idc, index]
	</NextRawSyntax>
		control lbText index
	</RawSyntax>
	<Example>
		$Code$_text = lbText [101, 0];$/Code$
	</NextExample>
		$Code$_text = _control lbText 0;$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
		More information on the LB command family can be found here
	</Note>
	<ReturnValue>
		String - String
	</ReturnValue>

</NextListItem>

	<Keyword>
		lbSetPicture
	</Keyword>
	<Description>
		Sets the picture in the item (left) with the given index of the listbox or combobox with id idc of the topmost user dialog. Name is the picture name. The picture is searched for in the mission directory, the dtaExt subdirectory of the campaign directory and the dtaExt directory and the data bank (or directory).
	In Arma 3 it might be necessary to set the color of the picture as well with lbSetPictureColor as default [0,0,0,0] color makes picture invisible.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lbSetPicture
	</WikiPage>
	<Syntax>
		lbSetPicture Array
	</NextSyntax>
		Control lbSetPicture Array
	</Syntax>
	<RawSyntax>
		lbSetPicture [idc, index, name]
	</NextRawSyntax>
		control lbSetPicture [index, name]
	</RawSyntax>
	<Example>
		$Code$lbSetPicture [101, 0, "iskoda"];$/Code$
	</NextExample>
		$Code$_control lbSetPicture [0, "iskoda"];$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
		More information on the LB command family can be found here
	</NextNote>
		(August 18, 2015)
	(ArmA 3) To place an image on the right end of the listItem: $Code$_ctrl lbSetPictureRight [_index, "A3\path\to\image.paa"];$/Code$
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		menuAdd
	</Keyword>
	<Description>
		Adds new submenu entry into item on given path.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/menuAdd
	</WikiPage>
	<Syntax>
		menuAdd Array
	</Syntax>
	<RawSyntax>
		menuAdd [idc, path, text]
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		processDiaryLink
	</Keyword>
	<Description>
		Open the diary screen on the record specified by link.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/processDiaryLink
	</WikiPage>
	<Syntax>
		processDiaryLink String
	</Syntax>
	<RawSyntax>
		processDiaryLink link
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(June 30, 2017)
	To select various tabs in the map screen:
	$Code$ processDiaryLink createDiaryLink ["selected_tab", player, ""];$/Code$
	... where "selected_tab" can be "Map", "Tasks", "Diary", "Units", "Players", "Log".
	</NextNote>
		(June 30, 2017)
	You can also force open diary with selected link by passing string in link format directly:
	$Code$ processDiaryLink " log subject=""Diary"" /log ";$/Code$
	The above will open tab Briefing.
	$Code$ processDiaryLink " log subject=""Diary"" record=""Record2"" /log ";$/Code$
	The above will open tab Briefing and select 3rd record from the bottom, provided the records were added consistently.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlSetText
	</Keyword>
	<Description>
		Set the text of a control of the currently active user dialog or display. This command can be used for: static texts, buttons, edit lines and active texts as well as for images, where you can use it to set the image path.
	Read Dialog Control for more information about user dialogs and controls.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlSetText
	</WikiPage>
	<Syntax>
		ctrlSetText Array
	</NextSyntax>
		Control ctrlSetText String
	</Syntax>
	<RawSyntax>
		ctrlSetText [idc, text]
	</NextRawSyntax>
		controlName ctrlSetText text
	</RawSyntax>
	<Example>
		$Code$ctrlSetText [100, "Hello world"];//for Dialogs$/Code$
	</NextExample>
		$Code$_control ctrlSetText "Hello world.";// for Displays$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
		(16 Nov, 2011)
	For ArmA2 textured "shortcut" buttons (type = 16), you must use the alternative syntax.
	</NextNote>
		(October 16, 2016)
	When using ctrlSetText with picture control, the path to the texture is cached, so that if the new texture is from the same file as old one, the precious CPU cycles would not be wasted on reloading it.
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		countFriendly
	</Keyword>
	<Description>
		Count how many units in the array are considered friendly to the given unit.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/countFriendly
	</WikiPage>
	<Syntax>
		Object countFriendly Array
	</Syntax>
	<RawSyntax>
		unitName countFriendly arrayName
	</RawSyntax>
	<Example>
		$Code$_num = player countFriendly list _triggerOne;$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(August 3, 2006)
	Notes from before the conversion:
	The countFriendly command seem to count the number of units from the array that are considered to be of the given type by the whole side, not just the specified unit.
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		callExtension
	</Keyword>
	<Description>
		Calls custom.dll also known as Extension. The name of the extension is the name of the extension.dll without ".dll" part (or without "_x64.dll" part on 64-bit Arma). For example if the file is 'myExtension.dll' the name of the extension will be "myExtension". For 64-bit extensions, the name of the extension doesn't need to change and is still "myExtension". The game will automatically look for 'myExtension_x64.dll' when you use 64-bit Arma exe.
	This command is blocking, meaning that the game will wait for the extension to return before continuing. This may cause FPS drop if extension is not optimised. If extension takes too long, consider making asynchronous extension, where the result of the work of the extension is collected in a separate call.
	Currently there is no limit how much data you can send to the extension. However there is a limit on how much data you can return from extension in one call. The limit is known to the extension and is passed in int outputSize. The limit may or may not change in the future and is currently 10240 bytes. It is up to extension designer to handle multipart results if returned data exceeds output limit.
	Since Arma 3 v1.67 it is possible to pass array of arguments to extensions. The array of arguments could be anything and all elements will be converted to strings, however you might want to only send simple types like Booleans, Strings, Numbers and Arrays of all of the above. There is currently a limit on how many arguments can be sent and it is 1024. However an argument could be an Array itself, in this case extension maker will have to provide additional methods for parsing such arguments.
	Possible error codes:
	101: SYNTAX_ERROR_WRONG_PARAMS_SIZE
	102: SYNTAX_ERROR_WRONG_PARAMS_TYPE
	201: PARAMS_ERROR_TOO_MANY_ARGS
	301: EXECUTION_WARNING_TAKES_TOO_LONG
	Each error will have entry in.rpt file with more details.
	Since Arma 3 v1.69, RVExtensionVersion interface (see source code example below) has been added, which is called by the engine on extension load and expects extension version. This interface is designed to work with both, Linux and Windows. The max buffer size is 32 bytes. The version information will then appear in. rpt file like so:
	$Code$19:06:36 CallExtension loaded: test_extension (.\test_extension.dll) [1.0.0.1]$/Code$
	For more information see Extensions.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/callExtension
	</WikiPage>
	<Syntax>
		String callExtension String
	</NextSyntax>
		String callExtension Array
	</Syntax>
	<RawSyntax>
		extension callExtension function
	</NextRawSyntax>
		extension callExtension [function, arguments]
	</RawSyntax>
	<Example>
		$Code$_return = "myExtension" callExtension "stringToBeParsed";$/Code$
	</NextExample>
		$Code$_result = "test_extension" callExtension str weapons player ;
	_result = "test_extension" callExtension ["fnc1", getUnitLoadout player ];
	_result = "test_extension" callExtension ["fnc2", magazinesAmmoFull player ];
	_result = "test_extension" callExtension ["fnc1", [ weapons player, magazines player ]];$/Code$
	</NextExample>
		$Code$_result = "test_extension" callExtension ["fnc1", [1,"two", true,[4,"five", false ]]];
	parseSimpleArray (_result select 0) params ["_number","_string","_boolean","_array"];
	systemChat str [_number,_string,_boolean,_array];
	// Source Code ( Download.dll )
	//This is an example of an extension compatible with both syntaxes. When using 1st syntax, the data is just copied from input to output. When using alt syntax, the arguments are parsed and then assembled back into string array in 2 ways: fnc1 and fnc2. fnc1 is a fraction faster.
	//#include string
	//#include vector
	//#include iterator
	//#include sstream
	//#define CURRENT_VERSION "1.0.0.1"
	//extern "C"
	//{
	////--- Engine called on extension load
	//__declspec ( dllexport ) void __stdcall RVExtensionVersion ( char * output, int outputSize );
	////--- STRING callExtension STRING
	//__declspec ( dllexport ) void __stdcall RVExtension ( char * output, int outputSize, const char * function );
	////--- STRING callExtension ARRAY
	//__declspec ( dllexport ) int __stdcall RVExtensionArgs ( char * output, int outputSize, const char * function, const char ** args, int argsCnt );
	//}
	////--- Extension version information shown in.rpt file
	//void __stdcall RVExtensionVersion ( char * output, int outputSize )
	//{
	////--- max outputSize is 32 bytes
	//strncpy_s ( output, outputSize, CURRENT_VERSION, _TRUNCATE );
	//}
	////--- name callExtension function
	//void __stdcall RVExtension ( char * output, int outputSize, const char * function )
	//{
	//std :: string str = function ;
	//strncpy_s ( output, outputSize, ( "Input Was: " + str ). c_str (), _TRUNCATE );
	//}
	////--- name callExtension [function, args]
	//int __stdcall RVExtensionArgs ( char * output, int outputSize, const char * function, const char ** args, int argsCnt )
	//{
	//if ( strcmp ( function, "fnc1" ) == 0 )
	//{
	////--- Manually assemble output array
	//int i = 0 ;
	//std :: string str = "[" ;
	////--- Each argument can be accessed via args[n]
	//if ( argsCnt 0 )
	//str += args [ i ++ ];
	//while ( i argsCnt )
	//{
	//str += "," ;
	//str += args [ i ++ ];
	//}
	//str += "]" ;
	////--- Extension result
	//strncpy_s ( output, outputSize, str. c_str (), _TRUNCATE );
	////--- Extension return code
	//return 100 ;
	//}
	//else if ( strcmp ( function, "fnc2" ) == 0 )
	//{
	////--- Parse args into vector
	//std :: vector std :: string vec ( args, std :: next ( args, argsCnt ));
	//std :: ostringstream oss ;
	//if ( ! vec. empty ())
	//{
	////--- Assemble output array
	//std :: copy ( vec. begin (), vec. end () - 1, std :: ostream_iterator std :: string ( oss, "," ));
	//oss vec. back ();
	//}
	////--- Extension result
	//strncpy_s ( output, outputSize, ( "[" + oss. str () + "]" ). c_str (), _TRUNCATE );
	////--- Extension return code
	//return 200 ;
	//}
	//else
	//{
	//strncpy_s ( output, outputSize, "Avaliable Functions: fnc1, fnc2", outputSize - 1 );
	//return - 1 ;
	//}
	//}$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String - Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		configProperties
	</Keyword>
	<Description>
		Returns an array of config entries which meet criteria in condition code. Command iterates through available classes and config properties for given config entry. If 3rd param is true the search also includes inherited properties. Current looked at config is stored in _x variable (similar to alternative count command implementation). Condition has to return true in order for the looked at property to be added to the resulting array. A bit slower than configClasses but allows to access inherited entires.
	The condition code passed to configProperties should only be used for simple filter expressions and nothing more
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/configProperties
	</WikiPage>
	<Syntax>
		configProperties Array
	</Syntax>
	<RawSyntax>
		configProperties [config, condition, inherit]
	</RawSyntax>
	<Example>
		$Code$_configs = configProperties [ configFile "CfgVehicles" "O_Truck_02_box_F"];$/Code$
	</NextExample>
		$Code$_configs = configProperties [ configFile "RscText", " true ", true ];$/Code$
	</NextExample>
		$Code$// Get all hitpoints of a truck:
	_hitPoints = [];
	_hitPointsCfgs = configProperties [
	configFile "CfgVehicles" "O_Truck_02_box_F" "HitPoints",
	" true ",
	true
	];
	hint str _hitPointsCfgs;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlSetChecked
	</Keyword>
	<Description>
		Sets checked state of a checkbox in checkboxes control (CT_CHECKBOXES, type = 7; ). Since Arma 3 v1.71.141591 it is possible to check checkbox with given index in multiple checkboxes set-up. For more information see DialogControls-CheckBoxes.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlSetChecked
	</WikiPage>
	<Syntax>
		Control ctrlSetChecked Boolean
	</NextSyntax>
		Control ctrlSetChecked Array
	</Syntax>
	<RawSyntax>
		control ctrlSetChecked checked
	</NextRawSyntax>
		control ctrlSetChecked [index, checked]
	</RawSyntax>
	<Example>
		$Code$_control ctrlSetChecked true ;$/Code$
	</NextExample>
		$Code$_control ctrlSetChecked [3, true ];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		enableUAVWaypoints
	</Keyword>
	<Description>
		Enables/disables the option for player to set waypoints for UAV in AV terminal.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/enableUAVWaypoints
	</WikiPage>
	<Syntax>
		Object enableUAVWaypoints Boolean
	</Syntax>
	<RawSyntax>
		uav enableUAVWaypoints enable
	</RawSyntax>
	<Example>
		$Code$_uav enableUAVWaypoints false ;
	hint str waypointsEnabledUAV _uav; // returns false$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		default
	</Keyword>
	<Description>
		See switch do.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/default
	</WikiPage>
	<Syntax>
		default Code
	</Syntax>
	<RawSyntax>
		default a
	</RawSyntax>
	<Example>
		$Code$switch (_condition) do {
	case 1: { hint "1" };
	case 2: { hint "2" };
	default { hint "default" };
	};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		registeredTasks
	</Keyword>
	<Description>
		List all registered task types.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/registeredTasks
	</WikiPage>
	<Syntax>
		registeredTasks Team_Member
	</Syntax>
	<RawSyntax>
		registeredTasks member
	</RawSyntax>
	<Example>
		$Code$tasklist = registeredTasks teamMember player ;$/Code$
	</NextExample>
		$Code$_rabbit = createAgent ["Rabbit_F", position player,[], 0, "None"];
	hint str registeredTasks teamMember _rabbit;
	// Hint shows ["Animal Main Task"] in Arma 3.$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		captive
	</Keyword>
	<Description>
		Returns the captive state of the given unit (set with setCaptive ). A captive unit will not be attacked by its enemies.
	!
	While a captive unit won't be attacked, it will still attack its enemies – be sure to setBehaviour "CARELESS" / removeAllWeapons accordingly.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/captive
	</WikiPage>
	<Syntax>
		captive Object
	</Syntax>
	<RawSyntax>
		captive object
	</RawSyntax>
	<Example>
		$Code$if ( captive _general) then { removeAllWeapons _general; };$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		addTeamMember
	</Keyword>
	<Description>
		Add given member to given team. Effect is local, unless both member and team are local to PC on which command is executed, then effect is global.
	The same Team Member can be member of several different teams at the same time.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/addTeamMember
	</WikiPage>
	<Syntax>
		Team_Member addTeamMember Team_Member
	</Syntax>
	<RawSyntax>
		team addTeamMember member
	</RawSyntax>
	<Example>
		$Code$_team addTeamMember _teamMember;$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		assignAsTurret
	</Keyword>
	<Description>
		Assigns the soldier to turret.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/assignAsTurret
	</WikiPage>
	<Syntax>
		Object assignAsTurret Array
	</Syntax>
	<RawSyntax>
		unit assignAsTurret [vehicle, [turretPath]]
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		inArea
	</Keyword>
	<Description>
		Checks whether given position is inside given area. The area is usually a rectangle or an ellipse defined similar to triggerArea format. Hence argument for this command could be a trigger, a marker, a location or an array in format [center, a, b, angle, isRectangle, c]. This command also supports hexagon area which can be created from ellipse when both a and b are negative. Hexagon ellipses are also supported by both marker creation and drawEllipse.
	Alternatively, use inAreaArray to check multiple positions/objects within area.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/inArea
	</WikiPage>
	<Syntax>
		Array/Object inArea Object
	</NextSyntax>
		Array/Object inArea String
	</NextSyntax>
		Array/Object inArea Location
	</NextSyntax>
		Array/Object inArea Array
	</Syntax>
	<RawSyntax>
		position inArea trigger
	</NextRawSyntax>
		position inArea marker
	</NextRawSyntax>
		position inArea location
	</NextRawSyntax>
		position inArea [center, a, b, angle, isRectangle, c]
	</RawSyntax>
	<Example>
		$Code$_playerIsInside = player inArea _myTrigger;$/Code$
	</NextExample>
		$Code$_positionIsInside = _myPosition inArea [[100, 100, 0], 20, 30, 45, false ];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean - Boolean - Boolean - Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		preloadTitleRsc
	</Keyword>
	<Description>
		Resource title - Preload data.
	The resource can be defined in the Description.ext file.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/preloadTitleRsc
	</WikiPage>
	<Syntax>
		preloadTitleRsc Array
	</Syntax>
	<RawSyntax>
		preloadTitleRsc [name, type]
	</NextRawSyntax>
		preloadTitleRsc [name, type, speed, showInMap]
	</RawSyntax>
	<Example>
		$Code$_ok=preloadTitleRsc ["BIS", "PLAIN"]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		removeBackpackGlobal
	</Keyword>
	<Description>
		Removes backpack from a unit. (even non-local)
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/removeBackpackGlobal
	</WikiPage>
	<Syntax>
		removeBackpackGlobal Object
	</Syntax>
	<RawSyntax>
		removeBackpackGlobal unit
	</RawSyntax>
	<Example>
		$Code$removeBackpackGlobal player ;$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
		(May 8, 2016)
	Because of AG (Arguments Global), you can use this command to remove the backpack from UNITS that are local as well as REMOTE.
	$Code$ removeBackpackGlobal UNIT;$/Code$ where UNIT can be a local and/or REMOTE player and/or AI
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		typeOf
	</Keyword>
	<Description>
		Returns the config class name of given object or "" if object doesn't have config class.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/typeOf
	</WikiPage>
	<Syntax>
		typeOf Object
	</Syntax>
	<RawSyntax>
		typeOf object
	</RawSyntax>
	<Example>
		$Code$if ( typeOf vehicle player == "B_Heli_Light_01_armed_F") then { hint "Player is in AH-9 Pawnee"};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(August 4, 2006)
	(CWR 1.90)Try using this on an object pre-placed in the mission editor (such as a house): hint format ["%1", typeOf object xxx] Now place an object in the editor, save the map, and open up the Mission.sqm. Find the line: vehicle = "XXX", and replace XXX with the name of the object that you found above. Save it, and load the map. (this method is no longer available since ArmA)
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		moveTo
	</Keyword>
	<Description>
		Low level command to person to move to given position.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/moveTo
	</WikiPage>
	<Syntax>
		Object moveTo PositionATL
	</Syntax>
	<RawSyntax>
		person moveTo position
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		(August 14, 2010)
	moveTo is a low-level command used in FSM called with doFSM or commandFSM. See doFSM for more information about this. Use doMove everywhere else - even in FSM executed with execFSM.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		menuShortcutText
	</Keyword>
	<Description>
		Returns a string containing shortcut text for menu item on the given path.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/menuShortcutText
	</WikiPage>
	<Syntax>
		menuShortcutText Array
	</Syntax>
	<RawSyntax>
		menuShortcutText [idc, path]
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		selectedEditorObjects
	</Keyword>
	<Description>
		Returns a list of currently selected editor objects.
	i
	Some Old Editor Command
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/selectedEditorObjects
	</WikiPage>
	<Syntax>
		selectedEditorObjects Control
	</Syntax>
	<RawSyntax>
		selectedEditorObjects map
	</RawSyntax>
	<Example>
		$Code$_selObjects = selectedEditorObjects _map
	Result can be: ["_vehicle_0","_vehicle_9","_vehicle_11"]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		grpNull
	</Keyword>
	<Description>
		A non-existing Group. To compare non-existent groups use isNull or isEqualTo :
	grpNull == grpNull ; // false
	isNull grpNull ; // true
	grpNull isEqualTo grpNull ; // true
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/grpNull
	</WikiPage>
	<Syntax>
		grpNull
	</Syntax>
	<RawSyntax>
		grpNull
	</RawSyntax>
	<Example>
		$Code$! isNull grpNull ; // false$/Code$
	</NextExample>
		$Code$str grpNull ; // NULL-group$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Group
	</ReturnValue>

</NextListItem>

	<Keyword>
		finishMissionInit
	</Keyword>
	<Description>
		Finish world initialization before mission is launched.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/finishMissionInit
	</WikiPage>
	<Syntax>
		finishMissionInit
	</Syntax>
	<RawSyntax>
		finishMissionInit
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		create3DENComposition
	</Keyword>
	<Description>
		Create new Composition. To create individual entities, use create3DENEntity.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/create3DENComposition
	</WikiPage>
	<Syntax>
		create3DENComposition Array
	</Syntax>
	<RawSyntax>
		create3DENComposition [configPath, position]
	</RawSyntax>
	<Example>
		$Code$myComposition = create3DENComposition [
	configFile "CfgGroups" "West" "BLU_F" "Infantry" "BUS_InfSquad",
	screenToWorld [0.5,0.5]
	];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		getMarkerColor
	</Keyword>
	<Description>
		Returns marker color for given marker. See setMarkerColor. Note: This function is identical to markerColor.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getMarkerColor
	</WikiPage>
	<Syntax>
		getMarkerColor String
	</Syntax>
	<RawSyntax>
		getMarkerColor markerName
	</RawSyntax>
	<Example>
		$Code$"MarkerOne" setMarkerColor "ColorBlack";
	_color = getMarkerColor "MarkerOne"; //returns "ColorBlack"$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		call
	</Keyword>
	<Description>
		Executes given set of compiled instructions with an option to pass arguments to the executed Code. In OFP this command used to accept String for the code.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/call
	</WikiPage>
	<Syntax>
		call Code
	</NextSyntax>
		Anything call Code
	</Syntax>
	<RawSyntax>
		call code
	</NextRawSyntax>
		args call code
	</RawSyntax>
	<Example>
		$Code$call { hint str 123};$/Code$
	</NextExample>
		$Code$123 call { hint str _this};$/Code$
	</NextExample>
		$Code$_sum = [1, 2] call {(_this select 0) + (_this select 1)};
	hint str _sum; //3$/Code$
	</NextExample>
		$Code$123 call compile " hint str _this";$/Code$
	</NextExample>
		$Code$_result = 123 call compile preprocessFileLineNumbers "myfile.sqf";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(July 5, 2014)
	A called function may only use suspension ( sleep, uiSleep, waitUntil ) if it originates in a scheduled environment. If the called function originates in a non-scheduled environment it will return a generic error.
	$Code$// *** non-scheduled origin ***
	[] spawn {
	// *** scheduled scope ***
	[] call {
	// *** scheduled scope ***
	sleep 3; // - OK
	hintSilent "Hello World!";
	};
	};
	$/Code$
	$Code$// *** non-scheduled origin ***
	[] call {
	// *** non-scheduled scope***
	[] call {
	// *** non-scheduled scope ***
	sleep 3; // - NOT OK
	hintSilent "Hello World!";
	};
	};
	$/Code$
	$Code$// *** scheduled origin ***
	[] spawn {
	// *** scheduled scope ***
	[] call {
	// *** scheduled scope ***
	sleep 3; // - OK
	hintSilent "Hello World!";
	};
	};
	$/Code$
	$Code$// *** scheduled origin ***
	[] call {
	// *** scheduled scope***
	[] call {
	// *** scheduled scope ***
	sleep 3; // - OK
	hintSilent "Hello World!";
	};
	};
	$/Code$
	</NextNote>
		(February 17, 2015)
	If the code is in non-scheduled scope and contains while-do statement, the code runs only 10,000 times at the maximum, even if the statement makes infinite loop. (ARMA3 Ver. 1.38.128937)
	$Code$// *** non-scheduled origin ***
	[] call {
	// *** non-scheduled scope***
	[] call {
	// *** non-scheduled scope ***
	_a=0;
	while{_a 15000} do{
	_a=_a+1;
	};
	hint str(_a);//10000
	};
	};$/Code$
	</Note>
	<ReturnValue>
		Anything - Anything
	</ReturnValue>

</NextListItem>

	<Keyword>
		lightIsOn
	</Keyword>
	<Description>
		Check if lampost is on (shining). For working with CfgNonAIVehicles class "StreetLamp" only. Possible values are:
	"ON"
	"OFF"
	"AUTO" (auto is only on during the night).
	"ERROR"
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lightIsOn
	</WikiPage>
	<Syntax>
		lightIsOn Object
	</Syntax>
	<RawSyntax>
		lightIsOn lamppost
	</RawSyntax>
	<Example>
		$Code$? lightIsOn nearestObject [ player, "StreetLamp"] == "ON" :hint "nightime"$/Code$
	</NextExample>
		$Code$_it = lightIsOn object 159582$/Code$
	</NextExample>
		$Code$if ( count allMissionObjects "StreetLamp" == 0) then {
	hint "Objects compatible with 'lightIsOn' are not found.";
	} else {
	hint "'lightIsOn' compatible objects are found!";
	};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(August 4, 2006)
	Notes from before the conversion:
	Use switchLight to turn lamposts on and off.
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		cutFadeOut
	</Keyword>
	<Description>
		Terminates the effect in the given layer by fading it out according to the given duration. If named layer used and it doesn't exist, it will be allocated.
	For greater efficiency and ease of modability it is recommended to use named layers available with alternative syntax since Arma 3 v1.57.134673
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/cutFadeOut
	</WikiPage>
	<Syntax>
		Number cutFadeOut Number
	</NextSyntax>
		String cutFadeOut Number
	</Syntax>
	<RawSyntax>
		layer cutFadeOut duration
	</NextRawSyntax>
		layerName cutFadeOut duration
	</RawSyntax>
	<Example>
		$Code$0 cutFadeOut 2;$/Code$
	</NextExample>
		$Code$_layer = "layer1" cutFadeOut 2;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(July 9, 2016)
	(ArmA v1.60)
	The actual fadeout-duration can be dependent on the duration for the fadein (e.g. specified by cutText ). If the fadein-duration is set to a value less than 1 the fadeout-duration will be the given number multiplied by the fadein-duration.
	"test" cutText ["", "BLACK", 0.5, true]; // fadein is 0
	"test" cutFadeout 2; // The actual fadeout-time is 2 * 0.5 = 1
	</Note>
	<ReturnValue>
		Nothing - Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		get3DENEntityID
	</Keyword>
	<Description>
		Returns unique index of an Eden Entity. This number remains the same even after saving and loading the scenario.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/get3DENEntityID
	</WikiPage>
	<Syntax>
		get3DENEntityID EdenEntity
	</Syntax>
	<RawSyntax>
		get3DENEntityID entity
	</RawSyntax>
	<Example>
		$Code$myID = get3DENEntityID player$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		playGesture
	</Keyword>
	<Description>
		When used on a person,a smooth transition to the given move will be initiated. Command doesn't seem to be functional
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/playGesture
	</WikiPage>
	<Syntax>
		Object playGesture String
	</Syntax>
	<RawSyntax>
		soldier playGesture moveName
	</RawSyntax>
	<Example>
		$Code$soldierOne playGesture "Wave"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(August 31, 2010)
	Rpt says "Not implemented" as of OA 1.54.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlSetAngle
	</Keyword>
	<Description>
		Sets the rotation of an ST_PICTURE control. Rotation will be done within the control boundaries, so if the X and Y are given off center, the picture may get clipped by the control boundaries. Doesn't require ctrlCommit. Procedural textures filled controls do not rotate.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlSetAngle
	</WikiPage>
	<Syntax>
		Control ctrlSetAngle Array
	</Syntax>
	<RawSyntax>
		control ctrlSetAngle [angle, centerX, centerY]
	</NextRawSyntax>
		control ctrlSetAngle [angle, centerX, centerY, now]
	</RawSyntax>
	<Example>
		$Code$_control ctrlSetAngle [25, 0.5, 0.5];$/Code$
	</NextExample>
		$Code$with uiNamespace do
	{
	ctrl = findDisplay 46 ctrlCreate ["RscPictureKeepAspect", -1];
	ctrl ctrlSetPosition [0,0,1,1];
	ctrl ctrlSetText "A3\Missions_F_Exp\data\Img\lobby\ui_campaign_lobby_background_tablet_radial_left_ca.paa";
	ctrl ctrlCommit 0;
	angle = 0;
	onEachFrame
	{
	with uiNamespace do
	{
	if (angle 359) then {angle = 0};
	ctrl ctrlSetAngle [angle, 0.5, 0.5];
	angle = angle + 1;
	};
	};
	};$/Code$
	</NextExample>
		$Code$_control ctrlSetAngle [25, 0.5, 0.5, false ];
	_control ctrlCommit 1; // Rotation applies smoothly for 1 second.$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		weaponsItemsCargo
	</Keyword>
	<Description>
		Returns an array with subarrays contains class names and also names of connected items of all the vehicle's cargo weapons in weaponsItems format. If weapon has no magazine, an empty array [] is returned instead of magazine info.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/weaponsItemsCargo
	</WikiPage>
	<Syntax>
		weaponsItemsCargo Object
	</Syntax>
	<RawSyntax>
		weaponsItemsCargo vehicle
	</RawSyntax>
	<Example>
		$Code$weaponsItemsCargo vehicle player ;$/Code$
	</NextExample>
		$Code$weaponsItemsCargo _weaponholder;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		showWaypoints
	</Keyword>
	<Description>
		Shows/Hides task HUD markers and waypoints that will fade out in time. Dependable on difficulty settings.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/showWaypoints
	</WikiPage>
	<Syntax>
		showWaypoints Boolean
	</Syntax>
	<RawSyntax>
		showWaypoints enabled
	</RawSyntax>
	<Example>
		$Code$showWaypoints true ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		ropeDestroy
	</Keyword>
	<Description>
		Destroy a rope.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ropeDestroy
	</WikiPage>
	<Syntax>
		ropeDestroy Object
	</Syntax>
	<RawSyntax>
		ropeDestroy rope
	</RawSyntax>
	<Example>
		$Code$ropeDestroy myRope;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		markerBrush
	</Keyword>
	<Description>
		Gets the marker brush. See setMarkerBrush.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/markerBrush
	</WikiPage>
	<Syntax>
		markerBrush String
	</Syntax>
	<RawSyntax>
		markerBrush name
	</RawSyntax>
	<Example>
		$Code$if ( markerBrush "Marker1" == "Solid") then { hint "Marker1 is solid!"}$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		toLower
	</Keyword>
	<Description>
		Converts the supplied string to all lowercase characters.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/toLower
	</WikiPage>
	<Syntax>
		toLower String
	</Syntax>
	<RawSyntax>
		toLower string
	</RawSyntax>
	<Example>
		$Code$hint toLower("AaBb1")
	// returns "aabb1"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		lnbColor
	</Keyword>
	<Description>
		Returns the text color of the item with the given position of the 2D listbox. The color is returned in format Color.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lnbColor
	</WikiPage>
	<Syntax>
		lnbColor Array
	</NextSyntax>
		Control lnbColor Array
	</Syntax>
	<RawSyntax>
		lnbColor [idc, [row, column]]
	</NextRawSyntax>
		control lnbColor [row, column]
	</RawSyntax>
	<Example>
		$Code$_ctrl lnbColor [0,0];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(Sep 9 2014)
	(A3 1.28)As for invisible data processing, lnbAddArray, lnbAddColumn, lnbData, lnbGetColumnsPosition, lnbSetColumnsPos, lnbSetData, lnbSetText, lnbSetValue, lnbText and lnbValue store data types into exact position of the listNbox with different spaces. Accessing data with coordinate command at nearly the same syntax:
	$Code$
	//Set same value to one position of a Control
	_ctrl lnbSetData [ [0,0],"#1"];
	lnbSetColumnsPos [102, [0,1], 1];
	_ctrl lnbSetText [ [0,1], "#1"];
	_ctrl lnbSetValue [ [0,0],1];
	//Accessing the value disregard affecting one another.
	_ctrl lnbData [0,0]; //"#1"
	lnbGetColumnsPosition _ctrl //[1];
	_ctrl lnbText [0,0];//"#1"
	_ctrl lnbValue [0,0];//1
	$/Code$
	For a direct visible control over CT_LISTNBOX:
	$Code$
	0 = [_CT_LISTNBOX] spawn {
	private ["_CT_LISTNBOX","_color","_current","_pic"];
	disableSerialization ;
	_CT_LISTNBOX = _this select 0;
	{
	_CT_LISTNBOX lnbAddRow [ getText (_x "displayNameShort"), getText (_x "displayName")];
	_CT_LISTNBOX lnbSetPicture [ [_foreachIndex,0], getText (_x "texture")];
	} forEach (" isClass _x" configClasses ( configFile "CfgRanks"));
	_CT_LISTNBOX lnbSetCurSelRow 0;
	_current = lnbCurSelRow _CT_LISTNBOX;
	_color = _CT_LISTNBOX lnbColor [_current,0];
	_CT_LISTNBOX lnbSetColor [ [_current,1], [(_color select 0)/2,0,0,1] ];
	_CT_LISTNBOX lnbDeleteColumn 0;
	_CT_LISTNBOX lnbDeleteRow 1;
	sleep 1;
	lnbClear _CT_LISTNBOX;//Clear all items but control still remains just invisible.
	};
	$/Code$
	A combined use of both invisible and visible data processing commands alive the Control.
	</Note>
	<ReturnValue>
		Array - Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		removeAllCuratorAddons
	</Keyword>
	<Description>
		Restrict access to all addons for given curator.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/removeAllCuratorAddons
	</WikiPage>
	<Syntax>
		removeAllCuratorAddons Object
	</Syntax>
	<RawSyntax>
		removeAllCuratorAddons curatorObj
	</RawSyntax>
	<Example>
		$Code$removeAllCuratorAddons myCurator;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		This scripting command must be executed on the server to work properly in multiplayer
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		getEnvSoundController
	</Keyword>
	<Description>
		Returns value of the specified controller.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getEnvSoundController
	</WikiPage>
	<Syntax>
		Position getEnvSoundController String
	</Syntax>
	<RawSyntax>
		position getEnvSoundController controller
	</RawSyntax>
	<Example>
		$Code$position player getEnvSoundController "trees"; //0.3333$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(March 25, 2018)
	Other environmental variables are;
	rain, night, wind, daytime, meadows, trees, houses, forest, sea, coast, altitudeGround. alititudeSea, shooting, deadbody and fog
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		removeAllActions
	</Keyword>
	<Description>
		Removes all unit's user added actions.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/removeAllActions
	</WikiPage>
	<Syntax>
		removeAllActions Object
	</Syntax>
	<RawSyntax>
		removeAllActions unit
	</RawSyntax>
	<Example>
		$Code$removeAllActions player ;$/Code$
	</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
		(30 October, 2013)
	Syntax of this command was until Arma 3 ver. 1.06: unit removeAllActions number
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		atg
	</Keyword>
	<Description>
		Equivalent to atan
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/atg
	</WikiPage>
	<Syntax>
		atg Number
	</Syntax>
	<RawSyntax>
		atg x
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		glanceAt
	</Keyword>
	<Description>
		Control what the unit is glancing at (target or Position ).
	How frequently the unit is glancing there depends on behaviour.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/glanceAt
	</WikiPage>
	<Syntax>
		Object/Array glanceAt Object/Array
	</Syntax>
	<RawSyntax>
		unit glanceAt position
	</RawSyntax>
	<Example>
		$Code$_someSoldier glanceAt _otherSoldier$/Code$
	</NextExample>
		$Code$_otherSoldier glanceAt markerPos "markerOne"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setWaypointFormation
	</Keyword>
	<Description>
		Switches the group formation when the waypoint becomes active.
	Possible values are:
	"NO CHANGE"
	"COLUMN"
	"STAG COLUMN"
	"WEDGE"
	"ECH LEFT"
	"ECH RIGHT"
	"VEE"
	"LINE"
	"FILE"
	"DIAMOND"
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setWaypointFormation
	</WikiPage>
	<Syntax>
		Array setWaypointFormation String
	</Syntax>
	<RawSyntax>
		waypoint setWaypointFormation formation
	</RawSyntax>
	<Example>
		$Code$[_grp, 2] setWaypointFormation "LINE";$/Code$
	</Example>
	<Locality>
		undefined / global
	</Locality>
	<Note>
		This scripting command must be executed on the server to work properly in multiplayer
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		inheritsFrom
	</Keyword>
	<Description>
		Returns base entry of config entry.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/inheritsFrom
	</WikiPage>
	<Syntax>
		inheritsFrom Config
	</Syntax>
	<RawSyntax>
		inheritsFrom config
	</RawSyntax>
	<Example>
		$Code$_base = inheritsFrom ( configFile "CfgVehicles" "Car");
	// Result is Config entry for class "LandVehicle"$/Code$
	</NextExample>
		$Code$// Print parent tree of given config class:
	fnc_printParents =
	{
	disableSerialization ;
	if (! isClass _this) exitWith { hint "Argument is not a config Class"};
	private _parents = [];
	while {! isNull _this} do
	{
	_parents pushBack configName _this;
	_this = inheritsFrom _this;
	};
	reverse _parents;
	private _tv = findDisplay 46 createDisplay "RscDisplayEmpty" ctrlCreate ["RscTree", -1];
	_tv ctrlSetPosition [0,0,1,1];
	_tv ctrlSetBackgroundColor [0,0,0,0.5];
	_tv ctrlCommit 0;
	private _path = [];
	{
	_tv tvAdd [_path, _x];
	_path pushBack 0;
	}
	forEach _parents;
	tvExpandAll _tv;
	};
	// Example:
	( configFile "CfgVehicles" typeOf player ) call fnc_printParents;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(Apr 2, 2014)
	(A3 1.14)Use BIS_fnc_returnParents if a parents' collection of the given entry is needed.
	$Code$
	[( configFile "CfgVehicles" "Land_Atm_02_F"), true ] call BIS_fnc_returnParents ;
	//return: ["Land_Atm_02_F","House_Small_F","House_F","House","HouseBase","NonStrategic","Building","Static","All"]
	$/Code$
	Not all entries have parent, and please differ parents from path.
	$Code$
	inheritsFrom ( configFile "CfgUIColors" "IGUI" "Presets" "PresetA1" "Variables");
	//return: Nothing
	$/Code$
	</Note>
	<ReturnValue>
		Config
	</ReturnValue>

</NextListItem>

	<Keyword>
		vehicleVarName
	</Keyword>
	<Description>
		Returns the name of the variable which contains a primary editor reference to this object. This is the variable given in the Insert Unit dialog / name field, in the editor. It can be changed using setVehicleVarName.
	If object refers to a vehicle that wasn't given a name in the editor, the return value is an empty string, "".
	Since it is possible to setVehicleVarName individually on each PC, the value of vehicleVarName returned will be local to the PC on which command is executed.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/vehicleVarName
	</WikiPage>
	<Syntax>
		vehicleVarName Object
	</Syntax>
	<RawSyntax>
		vehicleVarName object
	</RawSyntax>
	<Example>
		$Code$hint vehicleVarName player ;$/Code$
	</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
		(April 19, 2015)
	To get variable names referencing an object in mission namespace:
	$Code$KK_fnc_objectVarNames = {
	private "_names";
	_names = [];
	{
	if ( missionNamespace getVariable _x isEqualTo _this) then {
	_names pushBack _x;
	};
	} forEach allVariables missionNamespace ;
	_names
	};
	//example
	myGroup = group player ;
	aGroup = group player ;
	hint str ( group player call KK_fnc_objectVarNames); //["agroup","mygroup"]$/Code$
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		reversedMouseY
	</Keyword>
	<Description>
		Return if mouse vertical axe is inverted.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/reversedMouseY
	</WikiPage>
	<Syntax>
		reversedMouseY
	</Syntax>
	<RawSyntax>
		reversedMouseY
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		diag_resetShapes
	</Keyword>
	<Description>
		Reload models on-the-fly without the need of restarting the game. Changes applied by diag_resetShapes are applied to all new entities so restart of mission is not necessarily required - spawning vehicle again or changing back forth weapon should usually do the trick. It works only with "-FilePatching" in combination with local data. Command will reload only models present in local data.
	Limitation - you can't reload cfgSkeletons (Which is inside model.cfg)
	Command is only available when using Arma 3 Diagnostics Exe on Dev-Branch.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/diag_resetShapes
	</WikiPage>
	<Syntax>
		diag_resetShapes
	</Syntax>
	<RawSyntax>
		diag_resetShapes
	</RawSyntax>
	<Example>
		$Code$diag_resetShapes$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		isSteamMission
	</Keyword>
	<Description>
		Returns true if the current mission is a Steam Workshop mission.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isSteamMission
	</WikiPage>
	<Syntax>
		isSteamMission
	</Syntax>
	<RawSyntax>
		isSteamMission
	</RawSyntax>
	<Example>
		$Code$if ( isSteamMission ) then
	{
	hint "Thank you for subscribing to my mission on Steam!";
	}
	else
	{
	hint "Thank you for downloading my mission off the Internet!";
	};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		removeEventHandler
	</Keyword>
	<Description>
		Removes event handler added by addEventHandler.
	When any handler is removed, all handler indices higher than the deleted one should be decremented.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/removeEventHandler
	</WikiPage>
	<Syntax>
		Object removeEventHandler Array
	</Syntax>
	<RawSyntax>
		objectName removeEventHandler [type, index]
	</RawSyntax>
	<Example>
		$Code$player removeEventHandler ["killed", 0]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		selectBestPlaces
	</Keyword>
	<Description>
		Find the places with the maximum value of expression in the given area. Places can be on water. Results are sorted by value. Search pattern is randomised every command execution.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/selectBestPlaces
	</WikiPage>
	<Syntax>
		selectBestPlaces Array
	</Syntax>
	<RawSyntax>
		selectBestPlaces [position, radius, expression, precision, sourcesCount]
	</RawSyntax>
	<Example>
		$Code$myPlaces = selectBestPlaces [ position player, 50, "meadow + 2*hills", 1, 5];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(Jul 17, 2010)
	see http://forums.bistudio.com/showthread.php?t=93897 for some more information (though neither official, nor complete). The most important information is the list of useable keywords for the expression which is: forest, trees, meadow, hills, houses, sea, night, rain, windy and deadBody. The keyword will be replaced by the actual value at the given sample position and thus the expression gets evaluated. For example the following expression (which returns high values in forest) "forest + trees - meadow - houses - (10 * sea)" might be transformed to 0 + 0.1 - 0.7 - 0 - (10 * 0) which is - with it's result of -0.6 - not in the forest, though there are some tree(s) around. You get the idea.
	Also note that you may aswell check such an expression value at a single position by passing a low radius and a sourceCount of 1, which is often just as useful as retrieving multiple (and already sorted) positions.
	Also do not underestimate the keywords night, rain or windy, for if you couple them with the other keywords, you can easily get a highly dynamic system at a very low cost. (this, btw., is how animals "choose" where and when to spawn)
	</NextNote>
		(Apr 3, 2014)
	In ArmA3 ver 1.14 Two new expressions are available: waterDepth (0-1) and camDepth (0-1), along with three simple operators: interpolate, randomGen and factor that can be used together with expressions. E.g.
	$Code$
	p = selectBestPlaces [
	position player,
	500,
	"(2 * (waterDepth interpolate [1,16,0,1]) * ((0.1+houses factor [0.1,0.8]) * (randomGen 1 + houses)))",
	1,
	1];
	$/Code$
	A lgorithm randomGen:
	$Code$
	randomGen A(number): randomly generate a float number from 0 - A
	$/Code$
	A lgorithm factor:
	$Code$
	A(number) factor [p,q] =
	p A q: [(A -p)/(q-p)]
	$/Code$
	A lgorithm interpolate:
	$Code$
	A(number) interpolate [p,q,r,s] =
	A =p:r
	A =q:s
	p A q: [(A -p)/(q-p)]*(s-r) +r
	$/Code$
	</NextNote>
		(June 15, 2015)
	precision seems to have range 0 - 100. At very low values the command is extremely slow. 100 makes it quite fast. It looks like precision is some kind of grid search size. Large chunks make the search faster but less accurate.
	Resulting array is [] if sourcesCount is 0 or expression is "". In all other cases it seems that result is array of arrays of the set max count. The sole indication of successful search is expressionResult value when it is 0.
	</NextNote>
		(June 4, 2017)
	Results are sorted by value, that is, the result of the expression.
	They are sorted in descending order, so in the case of waterdepth, the deepest water will be found at the locations at the start of the returned array and the shallowest water will be found at the locations at the end.
	</NextNote>
		(September 22, 2017)
	The sourcesCount parameter is capped to 50. Asking for any more is capped to 50.
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		difficulty
	</Keyword>
	<Description>
		Returns high-level selected difficulty mode.
	Returned value will be: 0 (Recruit), 1 (Regular), 2 (Veteran) or 3 (Elite)
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/difficulty
	</WikiPage>
	<Syntax>
		difficulty
	</Syntax>
	<RawSyntax>
		difficulty
	</RawSyntax>
	<Example>
		$Code$value = difficulty ;$/Code$
	</NextExample>
		$Code$// The command returns the index of selected difficulty as they appear in CfgDifficulties
	hint str difficulty ; //Result: 4$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		add3DENConnection
	</Keyword>
	<Description>
		Connect entities together.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/add3DENConnection
	</WikiPage>
	<Syntax>
		add3DENConnection Array
	</Syntax>
	<RawSyntax>
		add3DENConnection [type, from, to]
	</RawSyntax>
	<Example>
		$Code$add3DENConnection ["RandomStart", get3DENSelected "Object","marker_0"]
	// Set random start on marker "marker_0" for all selected objects.$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		moonPhase
	</Keyword>
	<Description>
		Returns the phase of the in-game Moon on the given date in range 0...1, where 0 - new Moon, 1 - full Moon. According to this command the fullest Moon in Arma 3 at midnight is on setDate [4804,7,13,0,0]; Use Moon Phase Utility to find out date for a mission with desired moon.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/moonPhase
	</WikiPage>
	<Syntax>
		moonPhase Array
	</Syntax>
	<RawSyntax>
		moonPhase date
	</RawSyntax>
	<Example>
		$Code$_currentMoonPhase = moonPhase date ;$/Code$
	</NextExample>
		$Code$// Returns array of dates for given year when moon is at its fullest
	fnc_fullMoonDates =
	{
	private _year = param [0, 2035];
	private ["_date", "_phase", "_fullMoonDate"];
	private _fullMoonPhase = 1;
	private _waxing = false ;
	private _fullMoonDates = [];
	for "_i" from dateToNumber [_year, 1, 1, 0, 0] to dateToNumber [_year, 12, 31, 23, 59] step 1 / 365 do
	{
	_date = numberToDate [_year, _i];
	_phase = moonPhase _date;
	call
	{
	if (_phase _fullMoonPhase) exitWith
	{
	_waxing = true ;
	_fullMoonDate = _date;
	};
	if (_waxing) exitWith
	{
	_waxing = false ;
	_fullMoonDates pushBack _fullMoonDate;
	};
	};
	_fullMoonPhase = _phase;
	};
	_fullMoonDates
	};
	//set random full moon date in year 1970
	setDate selectRandom (1970 call fnc_fullMoonDates);$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		currentMagazineTurret
	</Keyword>
	<Description>
		Returns the name of the type of the currently using magazine on specified turret. Use turret path [-1] for driver's turret. Note that a turret is not loaded until unit enters it, so this command will return "".
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/currentMagazineTurret
	</WikiPage>
	<Syntax>
		Object currentMagazineTurret Array
	</Syntax>
	<RawSyntax>
		vehicle currentMagazineTurret [turret path]
	</RawSyntax>
	<Example>
		$Code$_magazine = MBT_Kuma currentMagazineTurret [0];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		lnbSetValue
	</Keyword>
	<Description>
		Sets the additional integer value in the item with the position index of the 2D listbox.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lnbSetValue
	</WikiPage>
	<Syntax>
		lnbSetValue Array
	</NextSyntax>
		Control lnbSetValue Array
	</Syntax>
	<RawSyntax>
		lnbSetValue [idc, [row, column], value]
	</NextRawSyntax>
		control lnbSetValue [[row, column], value]
	</RawSyntax>
	<Example>
		$Code$_ctrl lnbSetValue [[0,0],1];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(Sep 9 2014)
	(A3 1.28)As for invisible data processing, lnbAddArray, lnbAddColumn, lnbData, lnbGetColumnsPosition, lnbSetColumnsPos, lnbSetData, lnbSetText, lnbSetValue, lnbText and lnbValue store data types into exact position of the listNbox with different spaces. Accessing data with coordinate command at nearly the same syntax:
	$Code$
	//Set same value to one position of a Control
	_ctrl lnbSetData [ [0,0],"#1"];
	lnbSetColumnsPos [102, [0,1], 1];
	_ctrl lnbSetText [ [0,1], "#1"];
	_ctrl lnbSetValue [ [0,0],1];
	//Accessing the value disregard affecting one another.
	_ctrl lnbData [0,0]; //"#1"
	lnbGetColumnsPosition _ctrl //[1];
	_ctrl lnbText [0,0];//"#1"
	_ctrl lnbValue [0,0];//1
	$/Code$
	For a direct visible control over CT_LISTNBOX:
	$Code$
	0 = [_CT_LISTNBOX] spawn {
	private ["_CT_LISTNBOX","_color","_current","_pic"];
	disableSerialization ;
	_CT_LISTNBOX = _this select 0;
	{
	_CT_LISTNBOX lnbAddRow [ getText (_x "displayNameShort"), getText (_x "displayName")];
	_CT_LISTNBOX lnbSetPicture [ [_foreachIndex,0], getText (_x "texture")];
	} forEach (" isClass _x" configClasses ( configFile "CfgRanks"));
	_CT_LISTNBOX lnbSetCurSelRow 0;
	_current = lnbCurSelRow _CT_LISTNBOX;
	_color = _CT_LISTNBOX lnbColor [_current,0];
	_CT_LISTNBOX lnbSetColor [ [_current,1], [(_color select 0)/2,0,0,1] ];
	_CT_LISTNBOX lnbDeleteColumn 0;
	_CT_LISTNBOX lnbDeleteRow 1;
	sleep 1;
	lnbClear _CT_LISTNBOX;//Clear all items but control still remains just invisible.
	};
	$/Code$
	A combined use of both invisible and visible data processing commands alive the Control.
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		name
	</Keyword>
	<Description>
		When argument is Object, the command returns the name given to a unit using the setIdentity instruction or selected randomly by the game engine if setIdentity has not been used on the unit. If used on vehicle, name of first crew member (in order commander, driver, gunner). If used on an object, "Error: No unit" is being returned.
	When argument is Location, the location's name is returned. To return the textual value of a location use text command instead.
	NOTE: In Arma 3 setName can be used on a person to set name. However in multiplayer name always returns profileName.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/name
	</WikiPage>
	<Syntax>
		name Object
	</NextSyntax>
		name Location
	</Syntax>
	<RawSyntax>
		name object
	</NextRawSyntax>
		name location
	</RawSyntax>
	<Example>
		$Code$_name = name player ;$/Code$
	</NextExample>
		$Code$_locationName = name myLocation;$/Code$
	</NextExample>
		$Code$name nearestLocation [ position player, "Hill"]; //""
	text nearestLocation [ position player, "Hill"]; //"Lesnoy Khrebet"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		Location variant appears to be only for the 3d editor.
	</NextNote>
		(August 4, 2006)
	Notes from before the conversion:
	Name will return an error for units that have been dead for more than a few seconds.
	</NextNote>
		(December 15, 2006)
	To return the name of the unit that was given in the editor's "name" field, call up the unit's object in a format statement:
	hint format["Unit's name: %1",_unitobject]
	</NextNote>
		(April 14, 2009)
	Will return
	Error: No vehicle
	for JIP players in init.sqf, if no sleep were performed
	</Note>
	<ReturnValue>
		String - String
	</ReturnValue>

</NextListItem>

	<Keyword>
		set3DENGrid
	</Keyword>
	<Description>
		Sets the grid increment for the given transformation type.
	Transformation types:
	Rotation - "r"
	Translation - "t"
	Scale - "s"
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/set3DENGrid
	</WikiPage>
	<Syntax>
		set3DENGrid Array
	</Syntax>
	<RawSyntax>
		set3DENGrid [type,value]
	</RawSyntax>
	<Example>
		$Code$set3DENGrid ["t",100];// 100m movement increment$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setSpeech
	</Keyword>
	<Description>
		Add speech to location.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setSpeech
	</WikiPage>
	<Syntax>
		Location setSpeech String
	</Syntax>
	<RawSyntax>
		location setSpeech speech
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		cameraEffect
	</Keyword>
	<Description>
		Sets the given effect on the given camera. If you want to switch the screen directly to the first-person, aiming, third-person or group view of an object, use switchCamera instead. The effect type "Terminate" is used to exit the current camera view and switch back to the player's view. Does not need camCommit.
	Since Arma 3 v1.73.142217, it is possible to terminate individual r2t source. For example: $Code$cam cameraEffect ["terminate", "back", "rtt1"]; // would terminate "rtt1" r2t source
	cam cameraEffect ["terminate", "back"]; // would terminate all r2t sources$/Code$
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/cameraEffect
	</WikiPage>
	<Syntax>
		Object cameraEffect Array
	</Syntax>
	<RawSyntax>
		camera cameraEffect [effectName, effectPosition, r2tName]
	</RawSyntax>
	<Example>
		$Code$_cam cameraEffect ["internal", "BACK"];$/Code$
	</NextExample>
		$Code$_cam cameraEffect ["internal", "back", "rendersurface"];$/Code$
	</NextExample>
		$Code$cam = "seagull" camCreate ( player modelToWorld [0,0,100]);
	cam cameraEffect ["FIXED", "LEFT TOP"];
	cam camCommand "MANUAL ON";$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
		(October 30, 2016)
	Types of camera for CfgCameraEffects config:
	CamExternal (CamInterpolated) type = 0; // linked directly with object
	CamStatic type = 1; // fixed point in space
	CamStaticWithZoom type = 2; // fixed point in space
	CamChained type = 3; // chained
	CamTerminate type = 4; // terminate
	CamInternal type = 5; // internal view
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		weaponsTurret
	</Keyword>
	<Description>
		Returns all weapons of given turret. Use turret path [-1] for driver's turret.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/weaponsTurret
	</WikiPage>
	<Syntax>
		Object weaponsTurret Array
	</Syntax>
	<RawSyntax>
		vehicle weaponsTurret turretPath
	</RawSyntax>
	<Example>
		$Code$_weapons = vehicle player weaponsTurret [0,0]$/Code$
	</NextExample>
		$Code$_weapons = _tank weaponsTurret [0]$/Code$
	</NextExample>
		$Code$_driverWeapon = _ka50pilot weaponsTurret [-1]$/Code$
	</NextExample>
		$Code$_weaponsForAnyTurrentPosition = (vehicle player) weaponsTurret ((assignedVehicleRole player) select 1)$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(11 March 2011)
	Use assignedVehicleRole in combination to easily determine the weapons for any vehicle position. You need to check for -1 if the unit is in the driver/pilot position. See example 3 and 4.
	</NextNote>
		(11 March 2011)
	funcGetTurretsWeapons = {
	private ["_result", "_getAnyMagazines", "_findRecurse", "_class"];
	_result = [];
	_getAnyMagazines = {
	private ["_weapon", "_mags"];
	_weapon = configFile "CfgWeapons" _this;
	_mags = [];
	{
	_mags = _mags + getArray (
	(if (_x == "this") then { _weapon } else { _weapon _x }) "magazines"
	)
	} foreach getArray (_weapon "muzzles");
	_mags
	};
	_findRecurse = {
	private ["_root", "_class", "_path", "_currentPath"];
	_root = (_this select 0);
	_path = +(_this select 1);
	for "_i" from 0 to count _root -1 do {
	_class = _root select _i;
	if (isClass _class) then {
	_currentPath = _path + [_i];
	{
	_result set [count _result, [_x, _x call _getAnyMagazines, _currentPath, str _class]];
	} foreach getArray (_class "weapons");
	_class = _class "turrets";
	if (isClass _class) then {
	[_class, _currentPath] call _findRecurse;
	};
	};
	};
	};
	_class = (
	configFile "CfgVehicles" (
	switch (typeName _this) do {
	case "STRING" : {_this};
	case "OBJECT" : {typeOf _this};
	default {nil}
	}
	) "turrets"
	);
	[_class, []] call _findRecurse;
	_result;
	};
	This call:
	"M1A2_US_TUSK_MG_EP1" call funcGetTurretsWeapons
	will return all turrets weapons, its magazines and its paths:
	[
	["M256", ["20Rnd_120mmSABOT_M1A2", "20Rnd_120mmHE_M1A2"], [0], "bin\config.bin/CfgVehicles/M1A2_US_TUSK_MG_EP1/Turrets/MainTurret"],
	["M240_veh", ["100Rnd_762x51_M240", "1200Rnd_762x51_M240"], [0], "bin\config.bin/CfgVehicles/M1A2_US_TUSK_MG_EP1/Turrets/MainTurret"],
	["M2BC", ["100Rnd_127x99_M2"], [0, 0], "bin\config.bin/CfgVehicles/M1A2_US_TUSK_MG_EP1/Turrets/MainTurret/Turrets/CommanderOptics"],
	["SmokeLauncher", ["SmokeLauncherMag"], [0, 0], "bin\config.bin/CfgVehicles/M1A2_US_TUSK_MG_EP1/Turrets/MainTurret/Turrets/CommanderOptics"],
	["M240_veh_2", ["100Rnd_762x51_M240", "1200Rnd_762x51_M240"], [0, 1], "bin\config.bin/CfgVehicles/M1A2_US_TUSK_MG_EP1/Turrets/MainTurret/Turrets/LoaderTurret"]
	]
	denisko.redisko (denvdmj)
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		checkVisibility
	</Keyword>
	<Description>
		Checks if one position is visible from another position and how much. The results can be affected by getTerrainGrid value, especially if position is near the ground. Particle effects such as smoke can also affect the results.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/checkVisibility
	</WikiPage>
	<Syntax>
		Array checkVisibility Array
	</Syntax>
	<RawSyntax>
		[ignore, LOD, ignore2] checkVisibility [beg, end]
	</RawSyntax>
	<Example>
		$Code$_cansee = [ objNull, "VIEW"] checkVisibility [ eyePos player, eyePos unit1];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(August 8, 2016)
	Particles that have blockAIVisibility set to 1 will influence the result, but will not make checkVisibility return 0. Instead an extremly small number will be returned.
	Distance, fog, overcast, rain and nighttime have no effect on the result.
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		listObjects
	</Keyword>
	<Description>
		Return the list of all objects of given type.
	i
	Some Old Editor Command
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/listObjects
	</WikiPage>
	<Syntax>
		Control listObjects String
	</Syntax>
	<RawSyntax>
		map listObjects type
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		simulCloudDensity
	</Keyword>
	<Description>
		Returns density of clouds at given position.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/simulCloudDensity
	</WikiPage>
	<Syntax>
		simulCloudDensity Position
	</Syntax>
	<RawSyntax>
		simulCloudDensity pos
	</RawSyntax>
	<Example>
		$Code$simulCloudDensity (getPos player)$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		distance
	</Keyword>
	<Description>
		Returns a distance in meters between Objects, Positions or Locations.
	NOTE: If positions are supplied as arguments, the coordinates are treated as PositionATL if over the land and as PositionASLW if over the sea. If 2D position is supplied, z is assumed 0.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/distance
	</WikiPage>
	<Syntax>
		Object/Array distance Object/Array
	</NextSyntax>
		Location/Array distance Location/Array
	</Syntax>
	<RawSyntax>
		param1 distance param2
	</NextRawSyntax>
		location1 distance location2
	</RawSyntax>
	<Example>
		$Code$_meters = player distance _object;$/Code$
	</NextExample>
		$Code$_meters = player distance [1,2,3];$/Code$
	</NextExample>
		$Code$_meters = [1,2,3] distance [4,5,6];$/Code$
	</NextExample>
		$Code$_meters = position player distance nearestLocation [ position player, "hill"];$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(Feb 14, 2007)
	distance to position3D (array) doesnt work with OFP, only objects
	Armed Assault:
	position3D (array) and object works
	</NextNote>
		(Mar 10, 2010)
	This returns the map distance, not the vector distance, [0,0,0] distance [0,0,1] can be 1 or 1, not exactly 1; unlike the vector math.
	</NextNote>
		(Aug 03, 2012)
	If a position in format [x, y, z] is provided for both arguments, distance also checks the z dimension as well. Ie:
	player distance [0,0,200]
	will return 200, if the player is at this position at ground/sea level.
	</NextNote>
		(March 22, 2014)
	When objects are supplied as arguments, distance is calculated from their model center (object modelToWorld [0,0,0]), and not the position returned by getPos/ATL/ASL.
	However, this is not relevant for units, as their model center matches their world position.
	</Note>
	<ReturnValue>
		Number - Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		findEmptyPositionReady
	</Keyword>
	<Description>
		Check if findEmptyPosition command can be called without waiting for files.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/findEmptyPositionReady
	</WikiPage>
	<Syntax>
		Array findEmptyPositionReady Array
	</Syntax>
	<RawSyntax>
		center findEmptyPositionReady [radius,maxDistance]
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		setCenterOfMass
	</Keyword>
	<Description>
		Changes the center of mass of an object smoothly during the given time (in seconds). A time of zero (or using the alternative syntax) means an immediate change.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setCenterOfMass
	</WikiPage>
	<Syntax>
		Object setCenterOfMass Array
	</Syntax>
	<RawSyntax>
		myObject setCenterOfMass [com, time]
	</NextRawSyntax>
		myObject setCenterOfMass com
	</RawSyntax>
	<Example>
		$Code$myObject setCenterOfMass [[0,-1,0],0.5];$/Code$
	</NextExample>
		$Code$myObject setCenterOfMass [0,-1,0];$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		(20 Jun, 2014)
	(ArmA3 1.22) A quick reference:
	category
	setMass
	setCenterOfMass
	unit
	The larger the mass is, the easier a unit will physically fatigued
	N/A
	aircraft
	The larger the mass is, the more sensitive an aircraft will react to joystick, vice versa.
	Aircraft slant due to center change accordingly, and the position of the camera view will be altered relatively at the same time. (3rd person view)
	vehicle
	The larger the mass is, the slower a vehicle drives (Ships will sink), vice versa. (Land vehicle performs like a bouncing ball while ships accelerated pretty speedy.)
	Vehicle slant due to center change accordingly.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setFormation
	</Keyword>
	<Description>
		Set group formation.
	Formation is one of:
	"COLUMN"
	"STAG COLUMN"
	"WEDGE"
	"ECH LEFT"
	"ECH RIGHT"
	"VEE"
	"LINE"
	"FILE" (ArmA)
	"DIAMOND" (ArmA)
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setFormation
	</WikiPage>
	<Syntax>
		Object/Group setFormation String
	</Syntax>
	<RawSyntax>
		group setFormation formation
	</RawSyntax>
	<Example>
		$Code$_groupOne setFormation "LINE"$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		lnbSort
	</Keyword>
	<Description>
		Sorts given multicolumn listbox by lnbText in given column in ascending or descending order.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lnbSort
	</WikiPage>
	<Syntax>
		lnbSort Array
	</NextSyntax>
		control lnbSort Array
	</Syntax>
	<RawSyntax>
		lnbSort [idc, column, reversed]
	</NextRawSyntax>
		control lnbSort [column, reversed]
	</RawSyntax>
	<Example>
		$Code$lnbSort [1800, 1, false ];$/Code$
	</NextExample>
		$Code$_ctl lnbSort [1, true ]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setRepairCargo
	</Keyword>
	<Description>
		Set amount of repair resources in cargo space of repair vehicle.
	Amount 1 is full cargo.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setRepairCargo
	</WikiPage>
	<Syntax>
		Object setRepairCargo Number
	</Syntax>
	<RawSyntax>
		vehicleName setRepairCargo amount
	</RawSyntax>
	<Example>
		$Code$_repairTruck1 setRepairCargo 0$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		(July 10, 2015)
	(ArmA 3 1.44) setRepairCargo will have no effect if the vehicle doesn't support getRepairCargo.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setMousePosition
	</Keyword>
	<Description>
		Moves mouse pointer to specified position on the screen. x and y could be any number, but will be clipped so mouse never leaves the screen area.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setMousePosition
	</WikiPage>
	<Syntax>
		setMousePosition Array
	</Syntax>
	<RawSyntax>
		setMousePosition [x, y]
	</RawSyntax>
	<Example>
		$Code$setMousePosition [0.5, 0.5];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		not
	</Keyword>
	<Description>
		not a.
	Exactly the same as ! a
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/not
	</WikiPage>
	<Syntax>
		not Boolean
	</Syntax>
	<RawSyntax>
		not a
	</RawSyntax>
	<Example>
		$Code$not false 
	// Result is true.$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		setArmoryPoints
	</Keyword>
	<Description>
		Stores passed number into [USERNAME].ArmaXProfile file, where it assigns it as a value to armoryPoints entry. If entry doesn't exist, it is created.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setArmoryPoints
	</WikiPage>
	<Syntax>
		setArmoryPoints Number
	</Syntax>
	<RawSyntax>
		setArmoryPoints points
	</RawSyntax>
	<Example>
		$Code$setArmoryPoints ( armoryPoints + 20);$/Code$
	</NextExample>
		$Code$setArmoryPoints 3.14;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctAddRow
	</Keyword>
	<Description>
		Adds one row of controls according to the RowTemplate class. It returns an array containing row index and array of created controls in a format [ rowIndex, [ control0, control1... control n ]].
	Note that rows and headers are indexed separately.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctAddRow
	</WikiPage>
	<Syntax>
		ctAddRow Control
	</Syntax>
	<RawSyntax>
		ctAddRow Control
	</RawSyntax>
	<Example>
		$Code$_array = ctAddRow _control;$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		isObjectRTD
	</Keyword>
	<Description>
		Returns true if RTD model is loaded
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isObjectRTD
	</WikiPage>
	<Syntax>
		isObjectRTD Object
	</Syntax>
	<RawSyntax>
		isObjectRTD helicopter
	</RawSyntax>
	<Example>
		$Code$_heliRTD = isObjectRTD vehicle player ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		lightAttachObject
	</Keyword>
	<Description>
		Attach light to given object at given position on object.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lightAttachObject
	</WikiPage>
	<Syntax>
		Object lightAttachObject Array
	</Syntax>
	<RawSyntax>
		light lightAttachObject [object, position]
	</RawSyntax>
	<Example>
		$Code$myLight lightAttachObject [myVehicle, [-0.5,-0.25,1]];$/Code$
	</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
		(Dec 1, 2006)
	Light can be created with command createVehicleLocal with special vehicle class "#lightpoint"
	for example:
	$Code$_light = "#lightpoint" createVehicleLocal pos;
	_light setLightBrightness 1.0;
	_light setLightAmbient [0.0, 1.0, 0.0];
	_light setLightColor [0.0, 1.0, 0.0];
	_light lightAttachObject [_object, [0,0,0]];
	$/Code$
	</NextNote>
		(March 31, 2015)
	When attached, movement is slow to update (jumpy). Use attachTo when attaching a light to moving objects.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		serverCommandExecutable
	</Keyword>
	<Description>
		Returns true if the serverCommand can be performed on the machine and in this exact environment, otherwise false. serverCommand can be executed only from User Interface Event Handlers, and this command also checks if that's the case.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/serverCommandExecutable
	</WikiPage>
	<Syntax>
		serverCommandExecutable String
	</Syntax>
	<RawSyntax>
		serverCommandExecutable command
	</RawSyntax>
	<Example>
		$Code$_canKick = serverCommandAvailable "#kick";$/Code$
	</NextExample>
		$Code$// Add button to the main map to lock server, which could only be activated by admin:
	with uiNamespace do {
	ctrl = findDisplay 12 ctrlCreate ["RscButton", -1];
	ctrl ctrlSetPosition [0,0,0.5,0.1];
	ctrl ctrlCommit 0;
	ctrl ctrlSetText "LOCK SERVER";
	ctrl ctrlAddEventHandler ["ButtonDown",
	{
	if ( serverCommandExecutable "#lock") then {
	serverCommand "#lock";
	} else {
	hint "You need to be logged in as admin to do this";
	};
	}];
	};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		animationPhase
	</Keyword>
	<Description>
		Returns the phase of the given animation on the given object. Animation can be scripted ( animate, animateSource, animateDoor ) or engine driven. Animation names for an object could be found out with animationNames command. When animation is rotation, like with "MainTurret" for example, the output is in radians, to convert to degrees use deg command.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/animationPhase
	</WikiPage>
	<Syntax>
		Object animationPhase String
	</Syntax>
	<RawSyntax>
		object animationPhase animationName
	</RawSyntax>
	<Example>
		$Code$_building animate ["maindoor",1];
	sleep 1;
	_p = _building animationPhase "maindoor";
	// returns 1 (if the animation speed is = 2 seconds)$/Code$
	</NextExample>
		$Code$_flagPole animationPhase "flag";$/Code$
	</NextExample>
		$Code$_tank animationPhase "MainTurret";$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		isClass
	</Keyword>
	<Description>
		Check if config entry represents config class.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isClass
	</WikiPage>
	<Syntax>
		isClass Config
	</Syntax>
	<RawSyntax>
		isClass config
	</RawSyntax>
	<Example>
		$Code$_ok = isClass ( configFile "CfgVehicles");
	// Result is true.$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(March 2, 2007)
	This command allows you to check for the presence of an addon.
	isClass (configFile "cfgVehicles" "MyCustomCar")
	will return true if the addon "MyCustomCar" is installed, and false if it is not installed.
	You will have to know under which class the addon is categorized (in this case "cfgVehicles") to be able to use the right config path.
	</NextNote>
		(Mar 31, 2014)
	(ArmA3 ver 1.14) According to BI Dev Karel Mořický, BIS_fnc_getCfgIsClass provides a comfortable workaround with custom config under description.ext compared with isClass. (But as a function created specifically for A3 campaign, it is in no way intended as a replacement for isClass. So it is not suggested to use it for configFile classes. But isClass instead.)
	E.g.
	$Code$["Something1","Something2","Something3"] call bis_fnc_getCfgIsClass //Same as isClass (missionconfigfile "Something1" "Something2" "Something3")$/Code$
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlSetActiveColor
	</Keyword>
	<Description>
		Sets text color of given control when control is selected.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlSetActiveColor
	</WikiPage>
	<Syntax>
		Control ctrlSetActiveColor Array
	</Syntax>
	<RawSyntax>
		display ctrlSetActiveColor color
	</RawSyntax>
	<Example>
		$Code$_control ctrlSetActiveColor [1, 0, 0, 1]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		allTurrets
	</Keyword>
	<Description>
		Returns array of available turret paths from vehicle object. To look up turrets from config, use BIS_fnc_allTurrets
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/allTurrets
	</WikiPage>
	<Syntax>
		allTurrets Object
	</NextSyntax>
		allTurrets Array
	</Syntax>
	<RawSyntax>
		allTurrets vehicle
	</NextRawSyntax>
		allTurrets [vehicle, personTurrets]
	</RawSyntax>
	<Example>
		$Code$_turretPaths = allTurrets SlammerUP; //[[0],[0,0]]
	_turretPaths = allTurrets [SlammerUP, true ]; //[[0],[0,0]] - Commander turret is also FFV turret
	_turretPaths = allTurrets [SlammerUP, false ]; //[[0]]$/Code$
	</NextExample>
		$Code$// Return FFV turrets only:
	_FFVTurrets = allTurrets [tank, true ] - allTurrets [tank, false ];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(April 13, 2016)
	The first syntax (vehicle only without boolean) will include commander turrets like in the example, and does not include actual FFV turrets like offroad back seats, as expected.
	Also, the driver turret [-1] is never included in the results, which can be solved as follows:
	$Code$_paths = [[-1]] + allTurrets _vehicle;$/Code$
	</Note>
	<ReturnValue>
		Array - Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		inGameUISetEventHandler
	</Keyword>
	<Description>
		Sets given event handler of in-game UI. If EH function returns true, performed action is overridden. Event handlers available are:
	"PrevAction" - mouse scroll up
	"Action" - action key press
	"NextAction" - mouse scroll down
	This is "set" type EH, which means it will replace previously set EH of the same type. So to remove EH, set another one with empty string "" for the function.
	Since Arma 3 v1.49.131743 this EH returns array of params for selected/activated action in _this variable:
	0: Object - target object to which action is attached
	1: Object - caller object, basically player
	2: Number - index of the action in action menu (0 - top most)
	3: String - engine based action name ("User" for user added actions)
	4: String - localized action plain text as seen by the caller
	5: Number - action priority value
	6: Boolean - action showWindow value
	7: Boolean - action hideOnUse value
	8: String - action shortcut name or ""
	9: Boolean - action menu visibility (on first scroll or action press the menu is still invisible, so no action is performed, only menu is shown)
	10: String - EH event name
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/inGameUISetEventHandler
	</WikiPage>
	<Syntax>
		inGameUISetEventHandler Array
	</Syntax>
	<RawSyntax>
		inGameUISetEventHandler [handlerName, function]
	</RawSyntax>
	<Example>
		$Code$inGameUISetEventHandler ["Action","hint 'Lights, Camera, Action!'; true "];$/Code$
	</NextExample>
		$Code$inGameUISetEventHandler ["PrevAction", " hint str _this; false "];
	inGameUISetEventHandler ["NextAction", " hint str _this; false "];
	inGameUISetEventHandler ["Action", " hint str _this; false "];$/Code$
	</NextExample>
		$Code$// Deny any weapon disassembly:
	inGameUISetEventHandler ["Action", "
	if (_this select 3 == 'DisAssemble') then {
	hint 'You are not allowed to do this';
	true
	}
	"];$/Code$
	</NextExample>
		$Code$// Detect explosive/mine placement:
	onMagazineUse = '
	params ["_target", "", "", "_action", "", "", "", "", "", "", "_event"];
	if (_action == "UseMagazine") then {
	if (_event == "Action") then {
	0 = _target spawn {
	waitUntil {!(all_magazines isEqualTo magazines _this)};
	{
	0 = all_magazines deleteAt (all_magazines find _x);
	} count magazines _this;
	hint format ["Magazine Used: %1", all_magazines select 0];
	}
	} else {
	all_magazines = magazines _target;
	};
	};
	false
	';
	inGameUISetEventHandler ["PrevAction", onMagazineUse];
	inGameUISetEventHandler ["NextAction", onMagazineUse];
	inGameUISetEventHandler ["Action", onMagazineUse];$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
		(May 12, 2016)
	In case of the "Action" event, (param 6 || param 9) also denotes if the action is performed or not. For example, if the action menu is closed or fading off, pressing Spacebar will bring it up and trigger an "Action" event; in that case, param 9 (action menu visibility) is false. But if the action menu is open, and Spacebar is pressed to perform the selected action, then param 9 will be true. If param 6 (showWindow) is true, then it means the action was performed, regardless of param 9.
	</NextNote>
		(February 08, 2017)
	This powerful command can override the actions (previous/next/action), depending on true/false return. But, the command overrides itself, no matter of the returned value. That means, if two mods or scripts are using the same command parameter, say 'action', the last inGameUISetEventHandler 'action' will override the first one. Example: trigger1 :
	$Code$inGameUISetEventHandler ["Action","hint 'action for mod 1';true "];// true or false doesn't matter here$/Code$
	trigger2 (delayed):
	$Code$inGameUISetEventHandler ["Action","false "];// true or false doesn't matter here$/Code$
	trigger2 will run after trigger1, then, you'll never see the hint, what ever the trigger2 action code could be. What ever could be the last code, it will override all previous ones. You have to group these codes in a same event handler. But, beyond this, inGameUISetEventHandler is not stackable and implies a competition between scripts (or mods) using it.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		fogForecast
	</Keyword>
	<Description>
		Returns the forecast fog value. A value of 0 means no fog, 1 means maximum fog.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/fogForecast
	</WikiPage>
	<Syntax>
		fogForecast
	</Syntax>
	<RawSyntax>
		fogForecast
	</RawSyntax>
	<Example>
		$Code$_level = fogForecast ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		headgear
	</Keyword>
	<Description>
		Returns headgear of unit.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/headgear
	</WikiPage>
	<Syntax>
		headgear Object
	</Syntax>
	<RawSyntax>
		headgear unit
	</RawSyntax>
	<Example>
		$Code$hint headgear player ; //H_HelmetB$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		getMarkerSize
	</Keyword>
	<Description>
		Returns the size of the given marker. A getter for setMarkerSize and an alias of markerSize.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getMarkerSize
	</WikiPage>
	<Syntax>
		getMarkerSize String
	</Syntax>
	<RawSyntax>
		getMarkerSize markerName
	</RawSyntax>
	<Example>
		$Code$"MarkerOne" setMarkerSize [100,200];
	_size = getMarkerSize "MarkerOne"; //returns [100,200]$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		radioChannelCreate
	</Keyword>
	<Description>
		Create a custom radio channel with the given color, label, call sign and registered characters. The index returned can be used to manipulate the created channel later. There are 10 slots for custom radio channels which would correspond to channels 6-15 (see getPlayerChannel ). The command will find an unused index in this range and create it when found. Server only.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/radioChannelCreate
	</WikiPage>
	<Syntax>
		radioChannelCreate Array
	</Syntax>
	<RawSyntax>
		radioChannelCreate [color, label, callSign, units, sentenceType]
	</RawSyntax>
	<Example>
		$Code$_index = radioChannelCreate [[0.96, 0.34, 0.13, 0.8], "Q-dance Radio", "%UNIT_NAME", [player1, player2]];$/Code$
	</NextExample>
		$Code$_index = radioChannelCreate [[0.96, 0.34, 0.13, 0.8], "Q-dance Radio", "%UNIT_NAME", [player1, player2], false ];
	// disable automatic quotes for chat in channel (ArmA 3)$/Code$
	</NextExample>
		$Code$// Create custom channel and add all players to it, present and JIP:
	if ( isServer ) then
	{
	private _channelName = "Q-dance Radio";
	private _channelID = radioChannelCreate [[0.96, 0.34, 0.13, 0.8], _channelName, "%UNIT_NAME", []];
	if (_channelID == 0) exitWith { diag_log format ["Custom channel '%1' creation failed!", _channelName]};
	[_channelID, {_this radioChannelAdd [ player ]}] remoteExec ["call", [0, -2] select isDedicated, _channelName];
	};$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
		This scripting command must be executed on the server to work properly in multiplayer
	</NextNote>
		(January 21, 2016)
	Make sure you add all units you intend to speak or receive messages on created custom channel to the channel.
	</NextNote>
		(October 12, 2017)
	WARNING : Be aware that created channels order and count are different between server and client. Example 3 shown that server-side channel ID is actually 4, while client currentChannel on the same channel results in 9.
	Behaviour is yet unknown for me.
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		isAbleToBreathe
	</Keyword>
	<Description>
		If unit is diving and doesn't have a re-breather, it returns false. Diving means the unit's head is underwater. If unit is underwater and has a re-breather, the command returns true.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isAbleToBreathe
	</WikiPage>
	<Syntax>
		isAbleToBreathe Object
	</Syntax>
	<RawSyntax>
		isAbleToBreathe unit
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		tvSetPictureRightColor
	</Keyword>
	<Description>
		Sets color of the right picture on the tree view item defined by path
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/tvSetPictureRightColor
	</WikiPage>
	<Syntax>
		tvSetPictureRightColor Array
	</NextSyntax>
		Control tvSetPictureRightColor Array
	</Syntax>
	<RawSyntax>
		tvSetPictureRightColor [idc, path, color]
	</NextRawSyntax>
		control tvSetPictureRightColor [path, color]
	</RawSyntax>
	<Example>
		$Code$tvSetPictureRightColor [101, [0], [1,0,1,1]];$/Code$
	</NextExample>
		$Code$_ctrl tvSetPictureRightColor [[0], [1,0,1,1]];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		remoteExecCall
	</Keyword>
	<Description>
		Asks server to execute given scripted function or script command on given target PC. The environment chosen for the execution is as follows:
	Scripted function - unscheduled environment ( suspension is NOT allowed).
	Script command - unscheduled environment ( suspension is NOT allowed).
	remoteExecCall can also be used in SP (the same restrictions apply both to SP and MP). For more information about the usage, security features and advanced jip techniques check the remote execution dedicated section.
	While it is true that this function executes the desired scripted command/function by calling it, it does not mean remoteExecCall itself will be executed right away. Therefore, calling remoteExecCall is by no means a replacement for calling scripted commands/functions directly.
	Example:
	remoteExecCall ["func1"]; call func2; // func2 can be executed sooner than func1
	call func1; call func2; // func2 will always execute after func1.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/remoteExecCall
	</WikiPage>
	<Syntax>
		Anything remoteExecCall Array
	</NextSyntax>
		remoteExecCall Array
	</Syntax>
	<RawSyntax>
		params remoteExecCall [functionName, targets, JIP]
	</NextRawSyntax>
		remoteExecCall [functionName, targets, JIP]
	</RawSyntax>
	<Example>
		$Code$// runs hint "hello" on each connected client
	"hello" remoteExecCall [" hint "];$/Code$
	</NextExample>
		$Code$// runs hint "hello" on first connected client
	"hello" remoteExecCall [" hint ", 3];$/Code$
	</NextExample>
		$Code$// runs hint "hello" everywhere but server
	"hello" remoteExecCall [" hint ", -2];$/Code$
	</NextExample>
		$Code$// runs hint "hello" everywhere but server, JIPs the message
	// and returns e.g. "3_1" as a unique JIP id
	myJipID = "hello" remoteExecCall [" hint ", -2, true ];$/Code$
	</NextExample>
		$Code$// runs hint "hello" everywhere but server, JIPs the message under ID "some_JIP_ID"
	// replacing any previous message with this ID in the JIP queue.
	"hello" remoteExecCall [" hint ", -2, "some_JIP_ID"];$/Code$
	</NextExample>
		$Code$// runs "someFuncWithNoArgs" on each connected client
	remoteExecCall ["someFuncWithNoArgs"];$/Code$
	</NextExample>
		$Code$// removes a message identified by "IamUnique" from the JIP queue
	remoteExecCall ["", "IamUnique"];$/Code$
	</NextExample>
		$Code$// all clients will have their ammo set to 1 for their current weapon
	{ player setAmmo [ primaryWeapon player, 1];} remoteExecCall [" bis_fnc_call ", 0];$/Code$
	</NextExample>
		$Code$// Object obj will have its ammo set to 1 where it is local
	[obj,[ primaryWeapon obj, 1]] remoteExecCall [" setAmmo ", obj];$/Code$
	</NextExample>
		$Code$myJipID = "hello" remoteExecCall ["", 0];
	if ( isNil "myJipID") then { hint "empty function name is not allowed"; };$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(July 16, 2015)
	Removal of persistent call must be in the following format no argument remoteExecCall [ empty string, JIP id ]. For example:
	$Code$ remoteExecCall ["", "5:8"];$/Code$
	</NextNote>
		(December 29, 2015)
	remoteExec and remoteExecCall are currently filtered by BattlEye's remoteexec.txt, the string analyzed by BE is formatted the same way as the following example's output:
	$Code$ format ["%1 %2", functionName, str params]$/Code$
	If CfgRemoteExec class Functions is set to mode = 1;, the following remoteexec.txt exclusion can be used to safely allow all whitelisted *_fnc_* functions taking an array as parameter to go through:
	$Code$!="\w+?_fnc_\w+? \[.*\]"$/Code$
	Any attempt to exploit this exclusion using other RE methods like createUnit will run into "Error Missing ;" without any malicious code being executed. Mod makers should refrain from remote-executing raw commands from clients, as they require individual exclusions, and instead use *_fnc_* functions taking an array as parameter, which are covered by the above exclusion.
	</NextNote>
		(May 10, 2017)
	To remoteExecCall :
	$Code$ titleText ["Test Message", "PLAIN", 1];$/Code$
	Use
	$Code$[["Test Message", "PLAIN", 1]] remoteExecCall ["titleText"];$/Code$
	</Note>
	<ReturnValue>
		Anything - Anything
	</ReturnValue>

</NextListItem>

	<Keyword>
		setSimulWeatherLayers
	</Keyword>
	<Description>
		Sets number of simul weather layers, affects quality of simul weather clouds.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setSimulWeatherLayers
	</WikiPage>
	<Syntax>
		setSimulWeatherLayers Number
	</Syntax>
	<RawSyntax>
		setSimulWeatherLayers layers
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setUnitAbility
	</Keyword>
	<Description>
		Sets skill of given unit. Unlike setSkill, setUnitAbility can set values 1. Even though the skill command will correctly return set value, the actual unit ability will be capped to max available.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setUnitAbility
	</WikiPage>
	<Syntax>
		Object setUnitAbility Number
	</Syntax>
	<RawSyntax>
		unit setUnitAbility value
	</RawSyntax>
	<Example>
		$Code$_unit setUnitAbility 1;$/Code$
	</NextExample>
		$Code$bob setUnitAbility - log 0;
	hint str skill bob; //1.#INF$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(October 8, 2014)
	AFAIK not used in Arma 3 anymore (or equals to setSkill)
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		enableCollisionWith
	</Keyword>
	<Description>
		Enable collision between vehicles.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/enableCollisionWith
	</WikiPage>
	<Syntax>
		Object enableCollisionWith Object
	</Syntax>
	<RawSyntax>
		vehicle enableCollisionWith vehicle
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		(April 5, 2015)
	enableCollisionWith is a script that when you apply it to an object, it will be solid and the player will not be able to go through it. However, if you want your unit to go through it, you may want to use the disableCollisionWith command. An example for this is:
	$Code$//name of unit in editor such as player1
	//name of object in editor such as car1
	car1 enableCollisionWith player1;
	//to make your unit go through the car, use the below and make sure you know what your doing!
	car1 disableCollisionWith player1;
	$/Code$
	Both commands enableCollisionWith and disableCollisionWith, are very handy codes and could be used for example: map testing, mission editing and even animation cutscenes.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		useAudioTimeForMoves
	</Keyword>
	<Description>
		Switch between elapsed game time and audio time being used as animation timer. Used for audio/animation synchronization.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/useAudioTimeForMoves
	</WikiPage>
	<Syntax>
		Object useAudioTimeForMoves Boolean
	</Syntax>
	<RawSyntax>
		soldier useAudioTimeForMoves toggle
	</RawSyntax>
	<Example>
		$Code$player useAudioTimeForMoves true$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		commandSuppressiveFire
	</Keyword>
	<Description>
		Order the given unit to suppress a given position or target (via the radio).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/commandSuppressiveFire
	</WikiPage>
	<Syntax>
		Object/Array commandSuppressiveFire Object/Array
	</Syntax>
	<RawSyntax>
		unitName commandSuppressiveFire target
	</RawSyntax>
	<Example>
		$Code$_soldier commandSuppressiveFire [1869.508,5760.962,0.000]$/Code$
	</NextExample>
		$Code$_soldier commandSuppressiveFire cursorTarget$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
		(October 8, 2016)
	Command expects position as second argument in format ASL in A3 1.64.138497.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		waypointFormation
	</Keyword>
	<Description>
		Gets the waypoint formation.
	Possible values are:
	"NO CHANGE"
	"COLUMN"
	"STAG COLUMN"
	"WEDGE"
	"ECH LEFT"
	"ECH RIGHT"
	"VEE"
	"LINE"
	"FILE"
	"DIAMOND"
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/waypointFormation
	</WikiPage>
	<Syntax>
		waypointFormation Array
	</Syntax>
	<RawSyntax>
		waypointFormation waypoint
	</RawSyntax>
	<Example>
		$Code$waypointFormation [groupOne,1]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		toString
	</Keyword>
	<Description>
		Converts the supplied Array of Numbers into a String.
	The numbers in the array to be converted are the decimal Unicode representations of characters.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/toString
	</WikiPage>
	<Syntax>
		toString Array
	</Syntax>
	<RawSyntax>
		toString array
	</RawSyntax>
	<Example>
		$Code$hint toString [65,97,338];
	// returns "AaŒ"$/Code$
	</NextExample>
		$Code$["test","test"] joinString toString [12345] splitString toString [12345]; // ["test","test"]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(February 10, 2015)
	Tabs and new lines can be created with toString [9] and toString [10], respectively. Alternatively, a new line can also be created with toString [92,110] ("\n"). If you save these strings into a variable, they can be manipulated like any other string. For example, the following code will work just fine and return the expected output:
	$Code$_tab = toString [9];
	for "_i" from 0 to 3 do
	{
	_tab = _tab + ( toString [9]);
	};
	copyToClipboard format ["x%1x",tab];$/Code$
	</NextNote>
		(August 25, 2015)
	While you can convert any String to Array with toArray command, only numbers from 1 to 55295 (not 65535 as expected) can be successfully converted to String with toString and then back to Array with toArray without loss of data.
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		formatText
	</Keyword>
	<Description>
		Creates a structured text by replacing %1, %2, etc. in format with plain or structured texts given as arguments.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/formatText
	</WikiPage>
	<Syntax>
		formatText Array
	</Syntax>
	<RawSyntax>
		formatText [format, arg1, arg2,]
	</RawSyntax>
	<Example>
		$Code$_text = formatText ["Image: %1", image "data\isniper.paa"];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Structured_Text
	</ReturnValue>

</NextListItem>

	<Keyword>
		teamName
	</Keyword>
	<Description>
		Return a name of given team.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/teamName
	</WikiPage>
	<Syntax>
		teamName Team_Member
	</Syntax>
	<RawSyntax>
		teamName team
	</RawSyntax>
	<Example>
		$Code$_name = teamName _team;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		setWaypointScript
	</Keyword>
	<Description>
		Attaches a script to a scripted waypoint. In early versions of Arma, command consisted of a script name and additional script arguments and the script had to use SQS -Syntax. The script receives the following arguments in _this variable: [group, position, target] + [the optional passed arguments]. The optional arguments are appended to the end of the return array.
	In Arma 3, command argument can be a String with code, a reference to.sqf script (it will have to explicitly end with.sqf ) or a reference to.sqs script.
	See Mission editor Description for more information about scripted waypoints.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setWaypointScript
	</WikiPage>
	<Syntax>
		Array setWaypointScript String
	</Syntax>
	<RawSyntax>
		waypoint setWaypointScript command
	</RawSyntax>
	<Example>
		$Code$[_grp, 2] setWaypointScript "find.sqs player ";$/Code$
	</NextExample>
		$Code$[_grp, 2] setWaypointScript "somescript.sqf [1,2,3,4,5,6,7,8]";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		leader
	</Keyword>
	<Description>
		Returns the group leader for the given unit or group. For dead units, objNull is returned.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/leader
	</WikiPage>
	<Syntax>
		leader Object/Group
	</Syntax>
	<RawSyntax>
		leader unitName
	</RawSyntax>
	<Example>
		$Code$leader group player == leader player$/Code$
	</NextExample>
		$Code$_GroupLeader = leader ( group ( vehicle player ))$/Code$
	</NextExample>
		$Code$_UnitLeader = leader player$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Object
	</ReturnValue>

</NextListItem>

	<Keyword>
		setConvoySeparation
	</Keyword>
	<Description>
		Sets the distance to keep to the vehicle which is in front.
	This command has to be applied to all vehicles in a convoy in order to have a separation of, for example, 50 m.
	Vehicles in a convoy can also have different distances.
	It's recommended that small values ( 10m) should only be used for slowly moving convoys, otherwise AI driven vehicles will leave the road frequently to avoid collisions
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setConvoySeparation
	</WikiPage>
	<Syntax>
		Object setConvoySeparation Number
	</Syntax>
	<RawSyntax>
		vehicle setConvoySeparation distance
	</RawSyntax>
	<Example>
		$Code$vehicle setConvoySeparation 20;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		getCenterOfMass
	</Keyword>
	<Description>
		Returns center of mass of an object.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getCenterOfMass
	</WikiPage>
	<Syntax>
		getCenterOfMass Object
	</Syntax>
	<RawSyntax>
		getCenterOfMass object
	</RawSyntax>
	<Example>
		$Code$_com = getCenterOfMass _myCar;$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		handsHit
	</Keyword>
	<Description>
		Checks if a soldier's hands are hit, which results in inaccurate aiming.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/handsHit
	</WikiPage>
	<Syntax>
		handsHit Object
	</Syntax>
	<RawSyntax>
		handsHit unitName
	</RawSyntax>
	<Example>
		$Code$? (handsHit player == 1) : player globalChat "Ouch! Don't shoot at my hands dammit!"$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		deleteVehicleCrew
	</Keyword>
	<Description>
		Deletes a member of the crew of a vehicle. Human players cannot be deleted.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/deleteVehicleCrew
	</WikiPage>
	<Syntax>
		Object deleteVehicleCrew Object
	</Syntax>
	<RawSyntax>
		vehicle deleteVehicleCrew unit
	</RawSyntax>
	<Example>
		$Code$heli deleteVehicleCrew driver heli;$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
		(August 31, 2014)
	Not quite sure of the exact use of this command. You can delete AI pilot for example with $Code$ deleteVehicle driver heli;$/Code$ but co-pilot will then jump out. If you use $Code$heli deleteVehicleCrew driver heli;$/Code$ co-pilot stays.
	</NextNote>
		(April 10, 2015)
	Using the following code will remove ALL crew from the given vehicle.
	$Code${_myvehicle deleteVehicleCrew _x} forEach crew _myvehicle;$/Code$
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		loadUniform
	</Keyword>
	<Description>
		Returns current sum of mass from items stored in a uniform.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/loadUniform
	</WikiPage>
	<Syntax>
		loadUniform Object
	</Syntax>
	<RawSyntax>
		loadUniform unit
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		scriptDone
	</Keyword>
	<Description>
		Check if a script is finished running using the Script_(Handle) returned by execVM or spawn.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/scriptDone
	</WikiPage>
	<Syntax>
		scriptDone Script_Handle
	</Syntax>
	<RawSyntax>
		scriptDone handle
	</RawSyntax>
	<Example>
		$Code$// SQS Syntax:
	@ scriptDone _Handle$/Code$
	</NextExample>
		$Code$// SQF Syntax:
	script_handler = [parameters] execVM "scriptname.sqf";
	waitUntil { scriptDone script_handler };$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(03:54, 11 September 2009)
	A Null Script handle can be created in this manner:
	$Code$_handle = 0 spawn {};$/Code$
	That is what any Script_(Handle) becomes when a script is finished running, meaning it will test as true with:
	$Code$ scriptDone _handle $/Code$ and it returns " NULL-script " when converted to string. This in turn lets you initialize the variable with a completed Script_(Handle) and lets you test the variable even though nothing else may have set the handle by creating a script with spawn or execVM. It also lets you store and manage script handles in arrays, and a few other sexy things.
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		weaponsItems
	</Keyword>
	<Description>
		Returns an array with subarrays contains class names and also names of connected items of all the vehicle's weapons.
	Since Arma 3 v1.21.124406 it is possible to query weapon holders and ammo crates with this command. If weapon has no magazine, an empty array [] is returned instead of magazine info.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/weaponsItems
	</WikiPage>
	<Syntax>
		weaponsItems Object
	</Syntax>
	<RawSyntax>
		weaponsItems vehicle
	</RawSyntax>
	<Example>
		$Code$hint str weaponsItems player ;[
	[//=PRIMARY=
	"arifle_MX_ACO_pointer_F",//weapon
	"muzzle_snds_H",//suppressor
	"acc_pointer_IR",//laser
	"optic_Aco",//optics
	[//loaded magazine
	"30Rnd_65x39_caseless_mag",//mag type
	30//mag ammo count
	],
	"bipod_01_F_blk"//bipod
	],
	[//=SECONDARY=
	"launch_NLAW_F",
	"",
	"",
	"",
	[
	"NLAW_F",
	1
	],
	""
	],
	[//=HANDGUN=
	"hgun_P07_F",
	"muzzle_snds_L",
	"",
	"",
	[
	"16Rnd_9x21_Mag",
	11
	],
	""
	]
	]$/Code$
	</NextExample>
		$Code$hint str weaponsItems vehicle player ;[
	[
	"gatling_30mm",
	"",
	"",
	"",
	[
	"250Rnd_30mm_HE_shells",
	250
	],
	""
	],
	[
	"missiles_SCALPEL",
	"",
	"",
	"",
	[
	"8Rnd_LG_scalpel",
	8
	],
	""
	],
	[
	"rockets_Skyfire",
	"",
	"",
	"",
	[
	"38Rnd_80mm_rockets",
	38
	],
	""
	]
	]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(August 17, 2013)
	Be careful with this function. The weapons are listed in the order they were taken by the unit, with the most recent at the bottom of the array. Therefore, do not assume the first one is always the primary weapon, and so on.
	Also, here's how the primary weapon looks if it has a grenade launcher with a loaded grenade:
	$Code$[
	"arifle_MX_GL_F",
	"muzzle_snds_H",
	"acc_pointer_IR",
	"optic_Aco",
	[
	"30Rnd_65x39_caseless_mag",
	30
	],
	[
	"1Rnd_HE_Grenade_shell",
	1
	],
	""
	]$/Code$
	</NextNote>
		(October 25, 2014)
	The output of this command is an array of arrays and is as follows: (If the unit only has 1 weapon, output is an array within an array.)
	$Code$[
	[
	((_arr select 0) select 0) //STRING - The weapon's classname
	((_arr select 0) select 1) //STRING - Classname of the unit's equipped 'Muzzle/Barrel Accessory'
	((_arr select 0) select 2) //STRING - Classname of the unit's equipped 'Side Accessory'
	((_arr select 0) select 3) //STRING - Classname of the unit's equipped 'Top/Optic Accessory'
	((_arr select 0) select 4) //ARRAY - Magazine information
	[
	(((_arr select 0) select 4) select 0) //STRING - Classname of the loaded magazine
	(((_arr select 0) select 4) select 1) //SCALAR(Number) - Amount of bullets in the mag
	]
	] //If unit has more than one weapon, the output will follow the same pattern as above except with a new element
	]$/Code$
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		titleObj
	</Keyword>
	<Description>
		Shows object defined in global config in CfgTitles
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/titleObj
	</WikiPage>
	<Syntax>
		titleObj Array
	</Syntax>
	<RawSyntax>
		titleObj [class, type, speed, showInMap]
	</RawSyntax>
	<Example>
		$Code$titleObj ["BISLogo", "PLAIN"]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		magazinesDetailUniform
	</Keyword>
	<Description>
		Returns an array with the type names of all the unit's uniform magazines.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/magazinesDetailUniform
	</WikiPage>
	<Syntax>
		magazinesDetailUniform Object
	</Syntax>
	<RawSyntax>
		magazinesDetailUniform unit
	</RawSyntax>
	<Example>
		$Code$magazinesDetailUniform player$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlSetFontH2B
	</Keyword>
	<Description>
		Sets H2 bold font of given HTML control.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlSetFontH2B
	</WikiPage>
	<Syntax>
		Control ctrlSetFontH2B String
	</Syntax>
	<RawSyntax>
		controlName ctrlSetFontH2B fontName
	</RawSyntax>
	<Example>
		$Code$_control ctrlSetFontH2B "TahomaB"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setPlayerRespawnTime
	</Keyword>
	<Description>
		Sets the time interval to wait on player respawn. It resets to mission default on mission start. In Single Player or when respawn type is GROUP or SIDE in Multiplayer, setting player respawn time has no effect and is always -1.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setPlayerRespawnTime
	</WikiPage>
	<Syntax>
		setPlayerRespawnTime Number
	</Syntax>
	<RawSyntax>
		setPlayerRespawnTime interval
	</RawSyntax>
	<Example>
		$Code$setPlayerRespawnTime 5;$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		accTime
	</Keyword>
	<Description>
		Returns the current time acceleration factor
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/accTime
	</WikiPage>
	<Syntax>
		accTime
	</Syntax>
	<RawSyntax>
		accTime
	</RawSyntax>
	<Example>
		$Code$_acc = accTime$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(August 2, 2006)
	Use setAccTime to change the time acceleration factor. Not to be confused with skipTime.
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		catch
	</Keyword>
	<Description>
		Processes code when an exception is thrown in a try block. The exception caught can be found in the _exception variable.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/catch
	</WikiPage>
	<Syntax>
		Exception catch Code
	</Syntax>
	<RawSyntax>
		try-block catch code
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Anything
	</ReturnValue>

</NextListItem>

	<Keyword>
		hcSelectGroup
	</Keyword>
	<Description>
		Select given group in high command bar.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/hcSelectGroup
	</WikiPage>
	<Syntax>
		Object hcSelectGroup Array
	</Syntax>
	<RawSyntax>
		unit hcSelectGroup array
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		case
	</Keyword>
	<Description>
		This command is used inside a switch do construct. Although the syntax below states that this operator takes only one argument, that is most likely not true. It seems like it needs two arguments of which the left one is some sort of hidden variable that gets defined inside a switch do construct. That is the reason why this operator can not be used outside a switch do construct. (see https://foxhound.international/arma-3-sqf-grammar.html for further explaination)
	Also note that it is not possible to store the returned Switch Type in a variable and use that variable in another switch do construct. It will never lead to an execution of the corresponding code block.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/case
	</WikiPage>
	<Syntax>
		case Anything
	</Syntax>
	<RawSyntax>
		case b
	</RawSyntax>
	<Example>
		$Code$switch (_condition) do {
	case 1: { hint "1" };
	case 2: { hint "2" };
	default { hint "default" };
	};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Switch_Type
	</ReturnValue>

</NextListItem>

	<Keyword>
		targetsAggregate
	</Keyword>
	<Description>
		Aggregate candidates.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/targetsAggregate
	</WikiPage>
	<Syntax>
		Array targetsAggregate Array
	</Syntax>
	<RawSyntax>
		[speaker, side, unit, place, time] targetsAggregate candidates
	</RawSyntax>
	<Example>
		$Code$_aggregation = [_this,"","","",""] targetsAggregate _selected;//ca\characters\scripts\reactCore_Full.fsm$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		tvSetPicture
	</Keyword>
	<Description>
		Sets picture to item selected by path. IDC means id of parent Tree View. Name is picture name. The picture is searched in the mission directory.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/tvSetPicture
	</WikiPage>
	<Syntax>
		tvSetPicture Array
	</NextSyntax>
		Control tvSetPicture Array
	</Syntax>
	<RawSyntax>
		tvSetPicture [idc, path, name]
	</NextRawSyntax>
		control tvSetPicture [path, name]
	</RawSyntax>
	<Example>
		$Code$tvSetPicture [101, [0], "picture"];$/Code$
	</NextExample>
		$Code$_ctrl tvSetPicture [[0,0,0], getText ( configFile "CfgWeapons" "optic_NVS" "picture")];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(Sep 11 2014)
	(A3 1.28)tv command family overview
	$Code$
	//tv command family available for CT_TREE (type 12)
	private ["_count","_current","_data","_text","_value","_pic"];
	_CT_TREE tvAdd [ [],"Parent_A"];
	_CT_TREE tvAdd [ [0],"Child_A"];
	_CT_TREE tvAdd [ [0,0],"Grandchild_A"];
	_CT_TREE tvAdd [ [],"Parent_B"];
	_CT_TREE tvAdd [ [1],"Child_B"];
	_count = _CT_TREE tvCount []; //return 2
	_CT_TREE tvSetCurSel [0,0,0]; //select grandchild_A
	_current = tvCurSel _CT_TREE; //return [0,0,0]
	_CT_TREE tvSetData [_current,"I'm grandchild_A"];
	_data = _CT_TREE tvData _current; // "I'm grandchild_A"
	_text = _CT_TREE tvText _current; //"Grandchild_A"
	_CT_TREE tvSetValue [_current,14];
	_value = _CT_TREE tvValue _current; // 14
	_CT_TREE tvSetPicture [_current, getText ( configFile "CfgWeapons" "optic_NVS" "picture")];
	_pic = _CT_TREE tvPicture _current;
	_CT_TREE tvExpand [1];
	_CT_TREE tvSort [[], false ];
	_CT_TREE tvSortByValue [[], false ];
	_CT_TREE tvDelete [0,0]; //remove child_b
	tvClear 12;
	_CT_TREE tvCollapse [];
	$/Code$
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		clearMagazineCargo
	</Keyword>
	<Description>
		Remove all magazines from the given vehicle's magazine cargo space.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/clearMagazineCargo
	</WikiPage>
	<Syntax>
		clearMagazineCargo Object
	</Syntax>
	<RawSyntax>
		clearMagazineCargo vehicleName
	</RawSyntax>
	<Example>
		$Code$clearMagazineCargo _truck;$/Code$
	</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
		(11:02, 24 October 2009 (CEST))
	Effect is local, run on each client for global effect.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		restartEditorCamera
	</Keyword>
	<Description>
		Restarts the mission editor camera (if it was deleted by a script,for example).
	i
	Some Old Editor Command
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/restartEditorCamera
	</WikiPage>
	<Syntax>
		restartEditorCamera Control
	</Syntax>
	<RawSyntax>
		restartEditorCamera map
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		formationDirection
	</Keyword>
	<Description>
		Return the direction in degrees of the 'unit' watching in formation.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/formationDirection
	</WikiPage>
	<Syntax>
		formationDirection Object
	</Syntax>
	<RawSyntax>
		formationDirection unitName
	</RawSyntax>
	<Example>
		$Code$_degrees = FormationDirection _unit$/Code$
	</Example>
	<Locality>
		local / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		binocular
	</Keyword>
	<Description>
		Returns class name of currently used binocular weapon.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/binocular
	</WikiPage>
	<Syntax>
		binocular Object
	</Syntax>
	<RawSyntax>
		binocular unit
	</RawSyntax>
	<Example>
		$Code$_binocs = binocular player ; //Rangefinder$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		weightRTD
	</Keyword>
	<Description>
		Returns weight of RTD helicopter.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/weightRTD
	</WikiPage>
	<Syntax>
		weightRTD Object
	</Syntax>
	<RawSyntax>
		weightRTD helicopter
	</RawSyntax>
	<Example>
		$Code$_taruWeight = weightRTD taru// Returns [7000,300,1990.56,0,0]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		buttonSetAction
	</Keyword>
	<Description>
		Set the action of a control of the currently active user dialog. Can be used for buttons and active texts. See Dialog Control for more information about user dialogs. Works with:
	CT_BUTTON
	CT_XBUTTON
	CT_ACTIVETEXT
	CT_SHORTCUTBUTTON
	The action code is expected to be in SQS format
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/buttonSetAction
	</WikiPage>
	<Syntax>
		buttonSetAction Array
	</NextSyntax>
		Control buttonSetAction String
	</Syntax>
	<RawSyntax>
		buttonSetAction [idc, action]
	</NextRawSyntax>
		control buttonSetAction action
	</RawSyntax>
	<Example>
		$Code$buttonSetAction [100, " player exec ""reply.sqs"""];$/Code$
	</NextExample>
		$Code$_ctrl buttonSetAction " if ( alive bob) then { hint 'alive'} else { hint 'dead'}"; // SQF but SQS compatible, see SQS$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
		(October 5, 2009)
	When using buttonSetAction for an ActiveText control from a script, you cannot use any variables local to the script in it.
	/* This will print 'any bar' in the hint box,
	since _foo has no value according to buttonSetAction */
	_foo = "foo";
	buttonSetAction [100, "hint format[""%1 bar"", _foo];"];
	</NextNote>
		(February 15, 2016)
	This command does not overwride the buttonaction which was set via "action" in the hpp of the dialog
	</NextNote>
		(June 11, 2016)
	To use variables local to the defining script, a syntax like the one below needs to be used:
	$Code$_foo = "foo";
	buttonSetAction [100, format["hint '%1 bar'", _foo]];
	$/Code$
	works! thanks to Kronzky for commenting this workaround in the VBS wiki
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setUserMFDvalue
	</Keyword>
	<Description>
		When MFD is using user controllers, this command can set values on them. For example, MFD config for Blackfoot has an entry
	...
	class Draw
	{
	alpha = "user3" ;
	color [] = { "user0", "user1", "user2" };
	...
	which could control color of the MFD. See Example 2-3-4 on how to set different colors of the Blackfoot MFD
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setUserMFDvalue
	</WikiPage>
	<Syntax>
		Object setUserMFDvalue Array
	</Syntax>
	<RawSyntax>
		vehicle setUserMFDvalue [index, value]
	</RawSyntax>
	<Example>
		$Code$BIS_Plane setUserMFDvalue [0,1]; // user0 in MFD will return 1$/Code$
	</NextExample>
		$Code$// Set MFD Red:
	Blackfoot setUserMFDvalue [0, 1]; // "user0" - 1
	Blackfoot setUserMFDvalue [1, 0]; // "user1" - 0
	Blackfoot setUserMFDvalue [2, 0]; // "user2" - 0
	Blackfoot setUserMFDvalue [3, 1]; // "user3" - 1$/Code$
	</NextExample>
		$Code$// Set MFD pale Blue:
	Blackfoot setUserMFDvalue [0, 0]; // "user0" - 0
	Blackfoot setUserMFDvalue [1, 0]; // "user1" - 0
	Blackfoot setUserMFDvalue [2, 1]; // "user2" - 1
	Blackfoot setUserMFDvalue [3, 0.1]; // "user3" - 0.1$/Code$
	</NextExample>
		$Code$// Hide MFD:
	Blackfoot setUserMFDvalue [3, 0]; // "user3" - 0$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		activateKey
	</Keyword>
	<Description>
		Activates the given keyname for the current user profile. The keys are used to unlock missions or campaigns.
	See keys, keysLimit and doneKeys in the description.ext file of the missions.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/activateKey
	</WikiPage>
	<Syntax>
		activateKey String
	</Syntax>
	<RawSyntax>
		activateKey keyname
	</RawSyntax>
	<Example>
		$Code$activateKey "Mission04Key";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		unregisterTask
	</Keyword>
	<Description>
		Unregister a task type.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/unregisterTask
	</WikiPage>
	<Syntax>
		Team_Member unregisterTask String
	</Syntax>
	<RawSyntax>
		teamMember unregisterTask name
	</RawSyntax>
	<Example>
		$Code$player unregisterTask taskName;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		isDamageAllowed
	</Keyword>
	<Description>
		A getter for allowDamage command. The command indicates if damage is allowed at current locality, hence local effect of the command. A complete solution for being able to tell whether or not an object can be damaged at current locality looks like this:
	$Code$_canBeDamaged = local _obj && isDamageAllowed _obj;$/Code$
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isDamageAllowed
	</WikiPage>
	<Syntax>
		isDamageAllowed Object
	</Syntax>
	<RawSyntax>
		isDamageAllowed object
	</RawSyntax>
	<Example>
		$Code$_isGod = ! isDamageAllowed player ;$/Code$
	</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		canUnloadInCombat
	</Keyword>
	<Description>
		Check if cargo of this vehicle want to get out when in combat.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/canUnloadInCombat
	</WikiPage>
	<Syntax>
		canUnloadInCombat Object
	</Syntax>
	<RawSyntax>
		canUnloadInCombat vehicle
	</RawSyntax>
	<Example>
		$Code$if (canUnloadInCombat _vehicle) then {...};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlAutoScrollRewind
	</Keyword>
	<Description>
		Returns true if auto-scroll should move back to start after it reaches the end.
	Autorscroll is available for CT_LISTBOX and CT_CONTROLS_GROUP types of controls only. Autoscroll will wait ctrlAutoScrollDelay seconds (must be 0) and then will scroll the scroll bar down to the bottom. ctrlAutoScrollSpeed defines the speed with which scrollbar is scrolled. If ctrlAutoScrollRewind is true, the control will fade out, immediately rewind to the top, then fade in, wait ctrlAutoScrollDelay seconds and then repeat the scrolling in a loop. If user focuses on the control, autoscrolling is interrupted.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlAutoScrollRewind
	</WikiPage>
	<Syntax>
		ctrlAutoScrollRewind Control
	</Syntax>
	<RawSyntax>
		ctrlAutoScrollRewind control
	</RawSyntax>
	<Example>
		$Code$_ctrlRewind = ctrlAutoScrollRewind _ctrlGroup;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		getObjectMaterials
	</Keyword>
	<Description>
		Gets all custom materials associated with the object.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getObjectMaterials
	</WikiPage>
	<Syntax>
		getObjectMaterials Object
	</Syntax>
	<RawSyntax>
		getObjectMaterials obj
	</RawSyntax>
	<Example>
		$Code$_materials = getObjectMaterials car;$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		playerRespawnTime
	</Keyword>
	<Description>
		Return the player remaining time to respawn or -1 if it is not available.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/playerRespawnTime
	</WikiPage>
	<Syntax>
		playerRespawnTime
	</Syntax>
	<RawSyntax>
		playerRespawnTime
	</RawSyntax>
	<Example>
		$Code$waitUntil { playerRespawnTime = 0};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(June 21, 2007)
	When playerRespawnTime reaches zero the player respawns as expected. When the player has completed respawning this command returns -1.
	</NextNote>
		(February 25, 2009)
	Also note that spawning doesn't create a body to use, but allows a player to choose an already
	existing one as defined either in the mission editor or in a script as player or playable.
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		vectorUp
	</Keyword>
	<Description>
		Return object's up vector in world Position coordinates ( [x, y, z] ).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/vectorUp
	</WikiPage>
	<Syntax>
		vectorUp Object
	</Syntax>
	<RawSyntax>
		vectorUp objectName
	</RawSyntax>
	<Example>
		$Code$objVector = vectorUp myObject;$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(28 Jun, 2014)
	(ArmA3 1.22) Returns the pitch and bank of an object in degrees, use BIS_fnc_getPitchBank instead.
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlSetFontH1B
	</Keyword>
	<Description>
		Sets H1 bold font of given HTML control.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlSetFontH1B
	</WikiPage>
	<Syntax>
		Control ctrlSetFontH1B String
	</Syntax>
	<RawSyntax>
		controlName ctrlSetFontH1B fontName
	</RawSyntax>
	<Example>
		$Code$_control ctrlSetFontH1B "TahomaB"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setVectorDirAndUp
	</Keyword>
	<Description>
		Sets orientation of an object. The command takes 2 vector arrays, one for vectorDir and one for vectorUp. Default object orientation will always have vectorDir pointing forward (North) along Y axis and vectorUp pointing up along Z axis - [[0,1,0],[0,0,1]], as shown on the diagram below.
	When attaching object to an object the axes are relative to the object that gets the attachment. If it is player object for example, then X goes from left to right, Y goes from back to front, and Z goes from down up.
	The setDir command is incompatible with setVectorDirAndUp and should not be used together on the same object. Using setVectorDirAndUp alone should be sufficient for any orientation.
	In Multiplayer, setVectorDirAndUp must be executed on the machine where the object it applied to is local.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setVectorDirAndUp
	</WikiPage>
	<Syntax>
		Object setVectorDirAndUp Array
	</Syntax>
	<RawSyntax>
		vehicle setVectorDirAndUp [[x1, y1, z1],[x2, y2, z2]]
	</RawSyntax>
	<Example>
		$Code$// set exact yaw, pitch, and roll
	_y = 45; _p = -80; _r = 0;
	BRICK setVectorDirAndUp [
	[ sin _y * cos _p, cos _y * cos _p, sin _p],
	[ [ sin _r,- sin _p, cos _r * cos _p],-_y] call BIS_fnc_rotateVector2D
	];$/Code$
	</NextExample>
		$Code$// To rotate BRICK on Z axis 90 degrees clockwise, change its vectorDir but leave vectorUp unchanged.
	BRICK setVectorDirAndUp [[1,0,0],[0,0,1]];$/Code$
	</NextExample>
		$Code$// To rotate BRICK on Y axis 90 degrees clockwise, change its vectorUp but leave vectorDir unchanged.
	BRICK setVectorDirAndUp [[0,1,0],[1,0,0]];$/Code$
	</NextExample>
		$Code$// To rotate BRICK on X axis 90 degrees (tilt forward), change both vectorDir and vectorUp accordingly.
	BRICK setVectorDirAndUp [[0,0,-1],[0,1,0]];$/Code$
	</NextExample>
		$Code$// More complex orientations
	//tilt forward 90 + rotate left 90
	BRICK setVectorDirAndUp [[1,0,0],[0,1,0]];
	//tilt backward 45 degrees
	BRICK setVectorDirAndUp [[0,0.5,0.5],[0,-0.5,0.5]];
	//tilt forward 30 degrees
	BRICK setVectorDirAndUp [[0,0.66,-0.33],[0,0.33,0.66]];$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		(March 16, 2008)
	Command can be also used to rotate camera in all three axis (which also mean it's possible to set camera bank).
	</NextNote>
		(May 9, 2008)
	The object's vectorDir can only control its pitch, while its vectorUp can only control its bank. To set an object's yaw (direction), use the setdir command, before using this command.
	You would think vectorUp would control pitch as well, but any pitch that would be set due to vectorUp is ignored. The same is true with vectorDir and yaw; any vectorDir that would adjust yaw is also ignored. If this doesn't make sense, try to visualize it with a box or soda can.
	This command does NOT work with values relative to a unit, but rather it works with world vectors (think world coordinates as opposed to model coordinates). As a result, this command can be difficult to use in many situations, because the input values needed to get a certain pitch / bank for an object vary, depending on what direction the object is facing (yaw).
	A function to set an object's pitch / bank can be found here
	</NextNote>
		(October 23rd, 2009)
	Note this odd command may now be better understood. There's a thread about it here:
	BI Studios Forum Thread
	</NextNote>
		(1 Jun, 2014)
	(ArmA3 ver 1.20) setDir overwrites setVectorDirAndUp (P.S. setVectorDirAndUp also affects setVelocity.), so use setDir before BIS_fnc_setPitchBank, which is an easier workaround on vector, if changing yaw, pitch and bank are needed. setVectorDirAndUp is CCW, so if we wanna to set an obj 40 degrees CW, 170 degrees pitch and 85 degrees bank:
	$Code$_obj setDir (40 - 180); [_obj, 170, 85] call BIS_fnc_setPitchBank ;$/Code$
	Same as:
	$Code$_obj setVectorDirAndUp [[0.63,0.75,0.17],[-0.75,0.65,-0.084]];$/Code$
	Be aware that attachTo may flip vectorDir if pitch beyond 90 degrees and cause unexpected behavior to BIS_fnc_setPitchBank, e.g.
	$Code$[_obj, 100, 0] call BIS_fnc_setPitchBank ; //vector: [-0.14,-0.09,0.98],[-0.83,-0.51,-0.17]$/Code$
	$Code$_obj attachTo [_logic,[0,0,2]];
	[_obj, 100, 0] call BIS_fnc_setPitchBank ; //vector: [0.11,0.33,0.93],[-0.06,0.94,-0.32]
	compass direction algorism failed if obj was attached at present.$/Code$
	To overcome such limitation we can use fallowing function for a better workaround. (code originated from bapedibupa, remodified)
	$Code$
	_obj attachTo [_logic,[0,0,2]];
	[_obj,[120,-78,37]] call fnc_SetPitchBankYaw; // pitch: 120, bank: -78, yaw: 37$/Code$
	$Code$
	fnc_SetPitchBankYaw = {
	private ["_object","_rotations","_aroundX","_aroundY","_aroundZ","_dirX","_dirY",
	"_dirZ","_upX","_upY","_upZ","_dir","_up","_dirXTemp","_upXTemp"];
	_object = _this select 0;
	_rotations = _this select 1;
	_aroundX = _rotations select 0;
	_aroundY = _rotations select 1;
	_aroundZ = (360 - (_rotations select 2)) - 360;
	_dirX = 0;
	_dirY = 1;
	_dirZ = 0;
	_upX = 0;
	_upY = 0;
	_upZ = 1;
	if (_aroundX != 0) then {
	_dirY = cos _aroundX;
	_dirZ = sin _aroundX;
	_upY = - sin _aroundX;
	_upZ = cos _aroundX;
	};
	if (_aroundY != 0) then {
	_dirX = _dirZ * sin _aroundY;
	_dirZ = _dirZ * cos _aroundY;
	_upX = _upZ * sin _aroundY;
	_upZ = _upZ * cos _aroundY;
	};
	if (_aroundZ != 0) then {
	_dirXTemp = _dirX;
	_dirX = (_dirXTemp* cos _aroundZ) - (_dirY * sin _aroundZ);
	_dirY = (_dirY * cos _aroundZ) + (_dirXTemp * sin _aroundZ);
	_upXTemp = _upX;
	_upX = (_upXTemp * cos _aroundZ) - (_upY * sin _aroundZ);
	_upY = (_upY * cos _aroundZ) + (_upXTemp * sin _aroundZ);
	};
	_dir = [_dirX,_dirY,_dirZ];
	_up = [_upX,_upY,_upZ];
	_object setVectorDirAndUp [_dir,_up];
	};
	$/Code$
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		activateAddons
	</Keyword>
	<Description>
		Activates the listed addons. The list of active addons is initialized during this function.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/activateAddons
	</WikiPage>
	<Syntax>
		activateAddons Array
	</Syntax>
	<RawSyntax>
		activateAddons [addon1,]
	</RawSyntax>
	<Example>
		$Code$activateAddons ["BISOFP"];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(Jan 21, 2009)
	Be aware that "Addon1" is the cfgPatches class of the desired addon to preload.
	</NextNote>
		(May 10, 2009)
	This command will activate addons that are referenced via scripts but not included in a missions required addons section. If executed from a configs init event with the call command, it will effectively override a missions required addons, preventing them from being activated (Appears to only happen in multi player).
	To activate the passed addons along with those defined in the mission.sqm, execute the command from a configs init event using spawn or execVM. UNN
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		enableSaving
	</Keyword>
	<Description>
		Enable / disable saving of the game.
	When disabled, the autosave is created (if not forbidden by save == false).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/enableSaving
	</WikiPage>
	<Syntax>
		enableSaving Boolean
	</NextSyntax>
		enableSaving Array
	</Syntax>
	<RawSyntax>
		enableSaving enable
	</NextRawSyntax>
		enableSaving [enable, save]
	</RawSyntax>
	<Example>
		$Code$enableSaving false ; // Saving disabled and make autosave.
	enableSaving true ; // Saving enabled without autosave.
	enableSaving [ false, false ]; // Saving disabled without autosave.
	enableSaving [ false, true ]; // Saving disabled and make autosave.
	enableSaving [ true, false ]; // Saving enabled without autosave.
	enableSaving [ true, true ]; // Saving enabled and make autosave.$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		progressSetPosition
	</Keyword>
	<Description>
		Sets progress position of the progress bar ( DialogControls-ProgressBar )
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/progressSetPosition
	</WikiPage>
	<Syntax>
		Control progressSetPosition Number
	</Syntax>
	<RawSyntax>
		control progressSetPosition pos
	</RawSyntax>
	<Example>
		$Code$_control progressSetPosition 0.5$/Code$
	</NextExample>
		$Code$with uiNamespace do {
	bar = findDisplay 46 ctrlCreate ["RscProgress", -1];
	bar ctrlSetPosition [0,0,1,0.01];
	bar ctrlCommit 0;
	bar progressSetPosition 0.75;
	};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setObjectArguments
	</Keyword>
	<Description>
		Set object arguments in mission editor.
	i
	Some Old Editor Command
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setObjectArguments
	</WikiPage>
	<Syntax>
		Control setObjectArguments Array
	</Syntax>
	<RawSyntax>
		map setObjectArguments [object,[name1,value1,]]
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Any_Value
	</ReturnValue>

</NextListItem>

	<Keyword>
		nextWeatherChange
	</Keyword>
	<Description>
		Return the remaining time (in seconds) over which the current weather change will occur.
	When a weather change finishes, the game engine will automatically generate a new random weather change over a realistic time period (minimum of 90 minutes).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/nextWeatherChange
	</WikiPage>
	<Syntax>
		nextWeatherChange
	</Syntax>
	<RawSyntax>
		nextWeatherChange
	</RawSyntax>
	<Example>
		$Code$_seconds = nextWeatherChange ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		setFuel
	</Keyword>
	<Description>
		Sets fuel percentage from 0 (empty) to 1 (full). The vehicle must be local to the computer where command is executed.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setFuel
	</WikiPage>
	<Syntax>
		Object setFuel Number
	</Syntax>
	<RawSyntax>
		vehicle setFuel amount
	</RawSyntax>
	<Example>
		$Code$_jeepOne setFuel 0.5;$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		damage
	</Keyword>
	<Description>
		Return the damage value of an object.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/damage
	</WikiPage>
	<Syntax>
		damage Object
	</Syntax>
	<RawSyntax>
		damage object
	</RawSyntax>
	<Example>
		$Code$? (( damage player ) 0.1) : player groupChat "I'm hurt! Medic!"$/Code$
	</NextExample>
		$Code$_health = (1 - damage player ) * 100 //Health in % from 0 to 100$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(February 13, 2015)
	The returned value depends on the couple target/ammo fired. This value has no correlation with the sum of all hitpoints damage status and the effective status of the object. Firing bullets on cars often lead to weird results. For example: damage returns zero while a Hunter is fired at will with an.50 HMG! Hunter can be almost destroyed with zero damage for this function. If you script, use instead the getHitPointDamage function.
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		isShowing3DIcons
	</Keyword>
	<Description>
		Returns true if the editor is set to draw 3D icons.
	i
	Some Old Editor Command
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isShowing3DIcons
	</WikiPage>
	<Syntax>
		isShowing3DIcons Control
	</Syntax>
	<RawSyntax>
		isShowing3DIcons map
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		setMarkerTextLocal
	</Keyword>
	<Description>
		Sets the text label of an existing marker.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setMarkerTextLocal
	</WikiPage>
	<Syntax>
		String setMarkerTextLocal String
	</Syntax>
	<RawSyntax>
		markerName setMarkerTextLocal text
	</RawSyntax>
	<Example>
		$Code$"Marker1" setMarkerTextLocal "You are here.";$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		get3DENIconsVisible
	</Keyword>
	<Description>
		Get visibility state of Eden Editor icons.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/get3DENIconsVisible
	</WikiPage>
	<Syntax>
		get3DENIconsVisible
	</Syntax>
	<RawSyntax>
		get3DENIconsVisible
	</RawSyntax>
	<Example>
		$Code$if ( get3DENIconsVisible select 0) then { hint "Icons are visible in the map.";};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		titleText
	</Keyword>
	<Description>
		Displays text across the screen. If used along with cutText two different texts (in different type styles) can be shown at once. The text can be displayed on multiple lines by using "\n" new line characters:
	titleText ["line1\nline2\nline3", "PLAIN"];. Since Arma 3 v1.73.142260 this command supports Structured Text formatting.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/titleText
	</WikiPage>
	<Syntax>
		titleText Array
	</Syntax>
	<RawSyntax>
		titleText [text, type, speed, showInMap, isStructuredText]
	</RawSyntax>
	<Example>
		$Code$titleText ["Show this text", "PLAIN"];$/Code$
	</NextExample>
		$Code$titleText ["Your message", "BLACK", 2];$/Code$
	</NextExample>
		$Code$// Since Arma 3 v1.73.142260:
	titleText [" t color='#ff0000' size='5' RED ALERT! /t br/ ***********", "PLAIN", -1, true, true ];$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
		(November 21, 2014)
	The third parameter or 'speed', as it's called in the description, refers to the amount of time the message will be shown on-screen. Multiply each number by 10 to get the number of seconds it will be shown. You can even use floats as input, like 0.1, to show a message for only 1 second.
	Note : Calculating the time with that method does not include the time it takes to fade in/out, which is about 1 second unless you use numbers lower than 1.
	Note : Using anything lower than 0.001 seems to have no effect, or the effect is so little it's negligible.
	(A3 1.34.128075)
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		environmentEnabled
	</Keyword>
	<Description>
		Returns status of enableEnvironment command
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/environmentEnabled
	</WikiPage>
	<Syntax>
		environmentEnabled
	</Syntax>
	<RawSyntax>
		environmentEnabled
	</RawSyntax>
	<Example>
		$Code$_enabled = environmentEnabled ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		curatorWaypointCost
	</Keyword>
	<Description>
		Return current price for placing waypoints (curator specific).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/curatorWaypointCost
	</WikiPage>
	<Syntax>
		curatorWaypointCost Object
	</Syntax>
	<RawSyntax>
		curatorWaypointCost curatorObj
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		runInitScript
	</Keyword>
	<Description>
		Launch init.sqs or init.sqf scripts.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/runInitScript
	</WikiPage>
	<Syntax>
		runInitScript
	</Syntax>
	<RawSyntax>
		runInitScript
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		vehicle
	</Keyword>
	<Description>
		Vehicle in which given unit is mounted. If none, unit is returned. Alternatively, use objectParent
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/vehicle
	</WikiPage>
	<Syntax>
		vehicle Object
	</Syntax>
	<RawSyntax>
		vehicle unitName
	</RawSyntax>
	<Example>
		$Code$// SQS
	? vehicle player != player : hint "Player is in a vehicle"$/Code$
	</NextExample>
		$Code$// SQF
	if ( vehicle player != player ) then { hint "Player is in a vehicle"};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Object
	</ReturnValue>

</NextListItem>

	<Keyword>
		terrainIntersectASL
	</Keyword>
	<Description>
		Checks for intersection of terrain between two ASL positions. Returns true if intersects with terrain. For AGL variant, see terrainIntersect
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/terrainIntersectASL
	</WikiPage>
	<Syntax>
		terrainIntersectASL Array
	</Syntax>
	<RawSyntax>
		terrainIntersectASL [pos1, pos2]
	</RawSyntax>
	<Example>
		$Code$_intersects = terrainIntersectASL [ getPosASL player, getPosASL chopper];$/Code$
	</NextExample>
		$Code$_intersects = terrainIntersectASL [ eyePos player, eyePos enemy1];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(may 31, 2012)
	Please note the difference :
	terrainIntersect
	terrainIntersectASL
	lineIntersect s
	lineIntersect s With
	lineIntersect s Objs
	intersect
	</NextNote>
		(may 31, 2012)
	This command is CPU intensive on the engine, be careful with its use.
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		getWingsOrientationRTD
	</Keyword>
	<Description>
		Returns orientation of horizontal stabilizers.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getWingsOrientationRTD
	</WikiPage>
	<Syntax>
		getWingsOrientationRTD Object
	</Syntax>
	<RawSyntax>
		getWingsOrientationRTD RTD_helicopter
	</RawSyntax>
	<Example>
		$Code$_orientation = getWingsOrientationRTD myHelicopter;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		clearWeaponPool
	</Keyword>
	<Description>
		Remove all weapons from the weapon pool, of which the player may choose in the following missions. Available in campaigns only.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/clearWeaponPool
	</WikiPage>
	<Syntax>
		clearWeaponPool
	</Syntax>
	<RawSyntax>
		clearWeaponPool
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlSetFontH4B
	</Keyword>
	<Description>
		Sets H4 bold font of given HTML control.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlSetFontH4B
	</WikiPage>
	<Syntax>
		Control ctrlSetFontH4B String
	</Syntax>
	<RawSyntax>
		controlName ctrlSetFontH4B fontName
	</RawSyntax>
	<Example>
		$Code$_control ctrlSetFontH4B "TahomaB"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		leaderboardInit
	</Keyword>
	<Description>
		Initialize the leaderboard structure for board with given name. Returns true if board is already initialized.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/leaderboardInit
	</WikiPage>
	<Syntax>
		leaderboardInit String
	</Syntax>
	<RawSyntax>
		leaderboardInit boardName
	</RawSyntax>
	<Example>
		$Code$leaderboardInit "TT01"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		remoteExecutedOwner
	</Keyword>
	<Description>
		Returns clientOwner of the PC, which initiated Remote Execution call. If used in SP or outside of remote executed context, the command returns 0. To check if the context was remote executed or remote executed from JIP queue, use isRemoteExecuted and isRemoteExecutedJIP
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/remoteExecutedOwner
	</WikiPage>
	<Syntax>
		remoteExecutedOwner
	</Syntax>
	<RawSyntax>
		remoteExecutedOwner
	</RawSyntax>
	<Example>
		$Code$_callerRE = remoteExecutedOwner ;$/Code$
	</NextExample>
		$Code$// Send request to the server and get immediate response:
	{
	// in this scope, the remoteExecutedOwner equals clientOwner of the sender
	// so using it as target in remoteExec will send response right back at him
	[
	time, // mission time value on the server
	{
	hint format
	[
	"Request recieved!\nMission time value on the server is: %1",
	_this
	];
	}
	]
	remoteExec ["call", remoteExecutedOwner ]; // server response to the sender
	}
	remoteExec ["call", 2]; // send request to server$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(September 11, 2017)
	NOTE : Always be sure to check if the remoteExecutedOwner is not equal to 0 when sending a remoteExec / remoteExecCall packet back, as this will result in sending packet to ANYONE (0):
	$Code$if (remoteExecutedOwner isEqualTo 0) exitWith {}; // Not valid RE owner
	_gearArray remoteExecCall ['someGearFunction',remoteExecutedOwner];
	$/Code$
	Will prevent from code being accidentaly sent for everyone on the server.
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		allowDammage
	</Keyword>
	<Description>
		Allow or prevent an object being damaged (or injured, or killed). Alias of allowDamage.
	The command does not prevent object from taking scripted damage such as setDamage or setHit.
	!
	Command has to be executed where object is local and as long as object does not change locality the effect of this command will be global.
	If object changes locality, the command needs to be executed again on the new owner 's machine to maintain the effect.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/allowDammage
	</WikiPage>
	<Syntax>
		Object allowDammage Boolean
	</Syntax>
	<RawSyntax>
		object allowDammage allow
	</RawSyntax>
	<Example>
		$Code$player allowDammage false ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(October 24, 2014)
	This command is still working in A3 1.32.127785, at least in single player. I didn't test multiplayer.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		getPlayerUID
	</Keyword>
	<Description>
		Return an uniqueID of the given unit as string if it's player and empty value if it's AI. The unique ID may be up to 100 characters long and may contain numbers, uppercase letters and underscores (the value can be used to construct a valid variable name by appending to another valid variable name).
	Note: while for ArmA 2 or ArmA 2: Operation Arrowhead until version 1.60 the result always contains a number, it should be always handled as an opaque string. Converting it to a Number can cause precision problems, as Number cannot accurately represent integers above 16777216 (2^24). Moreover, game versions since ArmA 2: Operation Arrowhead 1.61 provide a non-numeric value as a result.
	In some cases, the identity of certain player units might fail to propagate to other clients and the server, which causes isPlayer and getPlayerUID to incorrectly return false and "", respectively, where the affected units are not local. [1] Therefore, beware of false negatives.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getPlayerUID
	</WikiPage>
	<Syntax>
		getPlayerUID Object
	</Syntax>
	<RawSyntax>
		getPlayerUID unit
	</RawSyntax>
	<Example>
		$Code$_uid = getPlayerUID player ;$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(April 17, 2014)
	In Arma 3 the returned string is the steamID64 of the player. $Code$ _steamProfileUrl = "http://steamcommunity.com/profiles/" + ( getPlayerUID player );$/Code$
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		onPlayerConnected
	</Keyword>
	<Description>
		This command will execute attached code whenever a player is connected to a MP session. The code will receive a number of special variables:
	_id : Number - is the unique DirectPlay ID. Quite useless as the number is too big for in-built string representation and gets rounded. It is also the same id used for user placed markers.
	_uid : String - is getPlayerUID of the joining player. In Arma 3 it is also the same as Steam ID.
	_name : String - is profileName of the joining player.
	_jip : ( since Arma 3 v1.49 ) Boolean - is a flag that indicates whether or not the player joined after the mission has started ( J oined I n P rogress). true - when the player is JIP, otherwise false.
	_owner : ( since Arma 3 v1.49 ) Number - is owner id of the joining player. Can be used for kick or ban purposes or just for publicVariableClient.
	i
	Since Arma 3 v1.57 a stackable version of this EH is available: PlayerConnected
	In order to keep compatibility between official and community content the functions BIS_fnc_addStackedEventHandler and BIS_fnc_removeStackedEventHandler should be used instead.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/onPlayerConnected
	</WikiPage>
	<Syntax>
		onPlayerConnected String/Code
	</Syntax>
	<RawSyntax>
		onPlayerConnected code
	</RawSyntax>
	<Example>
		$Code$onPlayerConnected "[_id, _name] execVM ""PlayerConnected.sqf""";$/Code$
	</NextExample>
		$Code$onPlayerConnected { diag_log [_id, _uid, _name]};$/Code$
	</NextExample>
		$Code$// From Arma 3 v1.49:
	onPlayerConnected {
	somevar = random 123;
	_owner publicVariableClient "somevar";
	//this will set somevar on
	//joining player PC to a random value
	};$/Code$
	</NextExample>
		$Code$// From Arma 3 v1.49:
	onPlayerConnected {isJip = _jip; _owner publicVariableClient "isJip"};
	//Each player will now have variable isJip containing individual JIP info$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		This scripting command must be executed on the server to work properly in multiplayer
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setMagazineTurretAmmo
	</Keyword>
	<Description>
		Sets ammo count to given amount for given turret.
	Broken when vehicle has multiple magazines of the same type
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setMagazineTurretAmmo
	</WikiPage>
	<Syntax>
		Object setMagazineTurretAmmo Array
	</Syntax>
	<RawSyntax>
		vehicle setMagazineTurretAmmo [magazineClass, ammoCount, turretPath]
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		sendTask
	</Keyword>
	<Description>
		Create a new AI task (subtask of parentTask). Type is name of registered task type.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/sendTask
	</WikiPage>
	<Syntax>
		Team_Member sendTask Array
	</Syntax>
	<RawSyntax>
		sender sendTask [receiver,[type] or [type,parentTask],priority,name1,value1,name2,value2,]
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Task
	</ReturnValue>

</NextListItem>

	<Keyword>
		setMarkerColor
	</Keyword>
	<Description>
		Sets marker color. Marker color names and their corresponding RGBA values for Arma 3 could be found in here: CfgMarkerColors_Arma_3
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setMarkerColor
	</WikiPage>
	<Syntax>
		String setMarkerColor String
	</Syntax>
	<RawSyntax>
		markerName setMarkerColor color
	</RawSyntax>
	<Example>
		$Code$"MarkerOne" setMarkerColor "ColorBlack";$/Code$
	</Example>
	<Locality>
		undefined / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setDynamicSimulationDistanceCoef
	</Keyword>
	<Description>
		Sets activation distance multiplier of Arma_3_Dynamic_Simulation for the given class
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setDynamicSimulationDistanceCoef
	</WikiPage>
	<Syntax>
		String setDynamicSimulationDistanceCoef Number
	</Syntax>
	<RawSyntax>
		class setDynamicSimulationDistanceCoef multiplier
	</RawSyntax>
	<Example>
		$Code$"IsMoving" setDynamicSimulationDistanceCoef 3;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		cameraView
	</Keyword>
	<Description>
		Returns mode of active camera view. Mode is one of:
	"INTERNAL" (1st person)
	"EXTERNAL" (3rd person)
	"GUNNER" (optics / sights)
	"GROUP" (commander view)
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/cameraView
	</WikiPage>
	<Syntax>
		cameraView
	</Syntax>
	<RawSyntax>
		cameraView
	</RawSyntax>
	<Example>
		$Code$if ( cameraOn == _vehicle && cameraView == "External") then
	{
	_vehicle switchCamera "Internal";
	};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlSetFontH1
	</Keyword>
	<Description>
		Sets H1 font of given HTML control.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlSetFontH1
	</WikiPage>
	<Syntax>
		Control ctrlSetFontH1 String
	</Syntax>
	<RawSyntax>
		controlName ctrlSetFontH1 fontName
	</RawSyntax>
	<Example>
		$Code$_control ctrlSetFontH1 "TahomaB"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		exitWith
	</Keyword>
	<Description>
		Exits current scope {...} it is executed from if condition evaluates true, creates new scope {...code...} and executes the given code in it. Often used for exiting do, for, count or forEach. Simply exiting waitUntil or onEachFrame scopes with exitWith will have no effect as these scopes are called repeatedly by the engine and require different handling to terminate (see Example 3).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/exitWith
	</WikiPage>
	<Syntax>
		If_Type exitWith Code
	</Syntax>
	<RawSyntax>
		ifType exitWith code
	</RawSyntax>
	<Example>
		$Code$if (_x 5) exitWith { echo "_x is too big"; _x}
	// When _x is greater than 5, outputs message and terminates code in current level with value of _x.$/Code$
	</NextExample>
		$Code$for "_j" from 1 to 10 do
	{
	player sideChat format ["%1",_j];
	if (_j==5) exitWith { player sideChat "5 is enough"};
	};
	player sideChat "Complete";
	// Only the "for" loop will exit when the exitWith condition has been fulfilled (not the whole script). Execution will continue after the end of the loop (player sideChat "Complete").$/Code$
	</NextExample>
		$Code$// Most loops will also terminate when their scope exited. To exit and terminate scopes which are called every frame such as onEachFrame and waitUntil use the following examples:
	onEachFrame {
	if (! alive player ) exitWith {
	onEachFrame {}
	}
	}
	_time = time + 10;
	waitUntil {
	if ( time _time) exitWith {
	true
	}
	}$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(May 28, 2010)
	Since ArmA2 uses Blocks in FSM as any ordinary Handle like while, for etc. in Scripts, ExitWith also only closes the Block in the FSM.
	</NextNote>
		(August 04, 2013)
	The command will exit the current scope - no ifs no buts. If the current scope is a loop, it will exit the loop. If the current scope is the main body of a script, it will exit the script. For more understanding of scopes and exitWith have a look at this resource.
	</NextNote>
		(January 06, 2014)
	To further explain Killzone_Kid 's above statement, exitWith does not work as described within any subsequent inner scopes of a loop - it will only simply exit the current scope. For example, this code will not exit the while loop:
	$Code$ while { true } do { // 'while' scope
	if ( player == ( leader player )) then { // 'if-then' scope
	if ( time (5 * 60)) exitWith {}; // This will only exit the 'if-then' scope
	};
	sleep 1;
	};
	hint "Mission Started"; // This code will never execute$/Code$
	</NextNote>
		(March 10, 2016)
	exitWith cannot be used in event handlers with override ability to simply exit with override value. The following is incorrect:
	$Code$// INCORRECT USAGE
	onMapSingleClick { if (! isServer ) exitWith { true }};$/Code$
	The override value must be returned in the main scope of EH, but since it is exited with exitWith, it never happens. The correct way in this case would be:
	$Code$// CORRECT USAGE
	onMapSingleClick { call { if (! isServer ) exitWith { true }}};$/Code$
	exitWith will exit current call scope only and override value therefore will appear in the main scope of the EH, right where we want it.
	</NextNote>
		(October 12, 2016)
	exitWith does not use standard "if-then" syntax, but a unique "if-exitWith" structure.
	</Note>
	<ReturnValue>
		Anything
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlSetFontH5
	</Keyword>
	<Description>
		Sets H5 font of given HTML control.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlSetFontH5
	</WikiPage>
	<Syntax>
		Control ctrlSetFontH5 String
	</Syntax>
	<RawSyntax>
		controlName ctrlSetFontH5 fontName
	</RawSyntax>
	<Example>
		$Code$_control ctrlSetFontH5 "TahomaB"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlSetFontH4
	</Keyword>
	<Description>
		Sets H4 font of given HTML control.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlSetFontH4
	</WikiPage>
	<Syntax>
		Control ctrlSetFontH4 String
	</Syntax>
	<RawSyntax>
		controlName ctrlSetFontH4 fontName
	</RawSyntax>
	<Example>
		$Code$_control ctrlSetFontH4 "TahomaB"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlSetFontH3
	</Keyword>
	<Description>
		Sets H3 font of given HTML control.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlSetFontH3
	</WikiPage>
	<Syntax>
		Control ctrlSetFontH3 String
	</Syntax>
	<RawSyntax>
		controlName ctrlSetFontH3 fontName
	</RawSyntax>
	<Example>
		$Code$_control ctrlSetFontH3 "TahomaB"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlSetFontH2
	</Keyword>
	<Description>
		Sets H2 font of given HTML control
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlSetFontH2
	</WikiPage>
	<Syntax>
		Control ctrlSetFontH2 String
	</Syntax>
	<RawSyntax>
		controlName ctrlSetFontH2 fontName
	</RawSyntax>
	<Example>
		$Code$_control ctrlSetFontH2 "TahomaB"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		displayNull
	</Keyword>
	<Description>
		A non-existing Display. To compare non-existent displays use isNull or isEqualTo :
	displayNull == displayNull ; // false
	isNull displayNull ; // true
	displayNull isEqualTo displayNull ; // true
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/displayNull
	</WikiPage>
	<Syntax>
		displayNull
	</Syntax>
	<RawSyntax>
		displayNull
	</RawSyntax>
	<Example>
		$Code$! isNull displayNull ; // false$/Code$
	</NextExample>
		$Code$str displayNull ; // No display$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Display
	</ReturnValue>

</NextListItem>

	<Keyword>
		vehicleReceiveRemoteTargets
	</Keyword>
	<Description>
		Gets whether the vehicle can acquire targets via datalink from the Side center.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/vehicleReceiveRemoteTargets
	</WikiPage>
	<Syntax>
		vehicleReceiveRemoteTargets Object
	</Syntax>
	<RawSyntax>
		vehicleReceiveRemoteTargets vehicle
	</RawSyntax>
	<Example>
		$Code$vehicleReceiveRemoteTargets ( vehicle player );$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlSetFontH6
	</Keyword>
	<Description>
		Sets H6 font of given HTML control.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlSetFontH6
	</WikiPage>
	<Syntax>
		Control ctrlSetFontH6 String
	</Syntax>
	<RawSyntax>
		controlName ctrlSetFontH6 fontName
	</RawSyntax>
	<Example>
		$Code$_control ctrlSetFontH6 "TahomaB"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlSetFontH3B
	</Keyword>
	<Description>
		Sets H3 bold font of given HTML control.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlSetFontH3B
	</WikiPage>
	<Syntax>
		Control ctrlSetFontH3B String
	</Syntax>
	<RawSyntax>
		controlName ctrlSetFontH3B fontName
	</RawSyntax>
	<Example>
		$Code$_control ctrlSetFontH3B "TahomaB"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		vectorModelToWorldVisual
	</Keyword>
	<Description>
		Converts vector from model to world space in render time scope.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/vectorModelToWorldVisual
	</WikiPage>
	<Syntax>
		Object vectorModelToWorldVisual Array
	</Syntax>
	<RawSyntax>
		object vectorModelToWorldVisual modelDir
	</RawSyntax>
	<Example>
		$Code$// Convert model space vector [0,-10,4] to world space; vector gets rotated according to _airplane:
	_airplane vectorModelToWorldVisual [0,-10,4];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		typeName
	</Keyword>
	<Description>
		Returns the data type of an expression.
	The type is returned as on of the following all-uppercase strings:
	" ARRAY "
	" BOOL "
	" CODE "
	" CONFIG "
	" CONTROL "
	" DISPLAY "
	" GROUP "
	" LOCATION "
	" OBJECT "
	" SCALAR "
	" SCRIPT "
	" SIDE "
	" STRING "
	" TEXT "
	" TEAM_MEMBER "
	" NAMESPACE "
	They represent the available data types in ArmA.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/typeName
	</WikiPage>
	<Syntax>
		typeName Anything
	</Syntax>
	<RawSyntax>
		typeName anything
	</RawSyntax>
	<Example>
		$Code$_msg = "hello"; _result = typeName _msg; //_result will be "STRING"$/Code$
	</NextExample>
		$Code$_unit = player ; _result = typeName _unit; //_result becomes "OBJECT"$/Code$
	</NextExample>
		$Code$// Values representing direct Data Types :
	hint typeName 0; //SCALAR
	hint typeName ""; //STRING
	hint typeName true ; //BOOL
	hint typeName []; //ARRAY
	hint typeName {}; //CODE
	hint typeName objNull ; //OBJECT
	hint typeName grpNull ; //GROUP
	hint typeName controlNull ; //CONTROL
	hint typeName teamMemberNull ; //TEAM_MEMBER
	hint typeName displayNull ; //DISPLAY
	hint typeName taskNull ; //TASK
	hint typeName locationNull ; //LOCATION
	hint typeName sideUnknown ; //SIDE
	hint typeName text ""; //TEXT
	hint typeName configFile ; //CONFIG
	hint typeName configNull ; //CONFIG (Since Arma 3 v1.53.133130)
	hint typeName missionNamespace ; //NAMESPACE$/Code$
	</NextExample>
		$Code$if ( typeName _this != "ARRAY") exitWith {
	hint "_this is not an array!"
	}
	//is the same as
	if ( typeName _this != typeName []) exitWith {
	hint "_this is not an array!"
	}
	//is the same as
	if !(_this isEqualType []) exitWith {
	hint "_this is not an array!"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(September 25, 2016)
	typeName of nil is ANY, however this is not possible to test as script command is just ignored when any argument is nil
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		dynamicSimulationSystemEnabled
	</Keyword>
	<Description>
		A getter for enableDynamicSimulationSystem
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/dynamicSimulationSystemEnabled
	</WikiPage>
	<Syntax>
		dynamicSimulationSystemEnabled
	</Syntax>
	<RawSyntax>
		dynamicSimulationSystemEnabled
	</RawSyntax>
	<Example>
		$Code$hint str dynamicSimulationSystemEnabled ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		allAirports
	</Keyword>
	<Description>
		Returns all map airports, both static and dynamic
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/allAirports
	</WikiPage>
	<Syntax>
		allAirports
	</Syntax>
	<RawSyntax>
		allAirports
	</RawSyntax>
	<Example>
		$Code$_allAirports = allAirports ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		missionNamespace
	</Keyword>
	<Description>
		Returns the global namespace attached to mission.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/missionNamespace
	</WikiPage>
	<Syntax>
		missionNamespace
	</Syntax>
	<RawSyntax>
		missionNamespace
	</RawSyntax>
	<Example>
		$Code$missionNamespace setVariable ["YourString",3];//Same as: YourString = 3;
	_yourString = missionNamespace getVariable "YourString";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Namespace
	</ReturnValue>

</NextListItem>

	<Keyword>
		roadAt
	</Keyword>
	<Description>
		Returns road segment at given position, objNull otherwise. Same as isOnRoad only returns the actual road object instead of boolean.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/roadAt
	</WikiPage>
	<Syntax>
		roadAt Object/Array
	</Syntax>
	<RawSyntax>
		roadAt position
	</RawSyntax>
	<Example>
		$Code$_road = roadAt ASLToAGL getPosASL player ;$/Code$
	</NextExample>
		$Code$_isOnRoad = ! isNull roadAt player ;$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(December 30, 2016)
	This command does not nessecarly return the segment which center is the closest to the given position.
	In order to get such segment use nearRoads.
	$Code$_closest_road = (_pos nearRoads 0.1) select 0;$/Code$
	</Note>
	<ReturnValue>
		Object
	</ReturnValue>

</NextListItem>

	<Keyword>
		getMagazineCargo
	</Keyword>
	<Description>
		Returns all magazines types and count from the cargo space
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getMagazineCargo
	</WikiPage>
	<Syntax>
		getMagazineCargo Object
	</Syntax>
	<RawSyntax>
		getMagazineCargo object
	</RawSyntax>
	<Example>
		$Code$_content = getMagazineCargo carName;$/Code$
	</NextExample>
		$Code$_content = getMagazineCargo ammoBoxName;$/Code$
	</NextExample>
		$Code$hint str getMagazineCargo unitBackpack cursorTarget ;$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlSetFontH6B
	</Keyword>
	<Description>
		Sets H6 bold font of given HTML control.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlSetFontH6B
	</WikiPage>
	<Syntax>
		Control ctrlSetFontH6B String
	</Syntax>
	<RawSyntax>
		controlName ctrlSetFontH6B fontName
	</RawSyntax>
	<Example>
		$Code$_control ctrlSetFontH6B "TahomaB"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		formLeader
	</Keyword>
	<Description>
		Returns the formation leader of a given unit. This is often the same as the group leader, but not always, for example in cases when a unit is ordered to follow another unit.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/formLeader
	</WikiPage>
	<Syntax>
		formLeader Object
	</Syntax>
	<RawSyntax>
		formLeader unitName
	</RawSyntax>
	<Example>
		$Code$? (formLeader player != leader player) :
	hint "The formation leader is different to the group leader!"
	returns X$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Object
	</ReturnValue>

</NextListItem>

	<Keyword>
		sendSimpleCommand
	</Keyword>
	<Description>
		Sends a simple command to the vehicle's driver / gunner. The player executing command should be in the vehicle.
	Gunner commands
	"FIRE"
	"CEASE FIRE"
	"MANUAL FIRE"
	"CANCEL MANUAL FIRE"
	"KEY FIRE"
	Driver commands
	"FORWARD" - move forward
	"FAST" - move forward, fast
	"SLOW" - move forward, slow
	"STOP" - stop moving forward or backward
	"BACK" - move backward
	"LEFT" - turn left, while moving or not
	"RIGHT" - turn right, while moving or not
	"STOPTURNING" - cancel turning (special case, normally would be called by the engine when LEFT or RIGHT turn key is released by the player) ( since Arma 3 v1.77 )
	"KEY UP"
	"KEY DOWN"
	"KEY FAST"
	"KEY SLOW"
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/sendSimpleCommand
	</WikiPage>
	<Syntax>
		Object sendSimpleCommand String
	</Syntax>
	<RawSyntax>
		vehicleName sendSimpleCommand command
	</RawSyntax>
	<Example>
		$Code$vehicle player sendSimpleCommand "STOP";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		Valid commands include: "FORWARD", "SLOW", "FAST" "BACK", "LEFT", "RIGHT", "STOP", "FIRE", "CEASE FIRE", "MANUAL FIRE", "CANCEL MANUAL FIRE". There may be more.
	Only vehicles crewed by a player can use sendSimpleCommand.
	</NextNote>
		Other commands that work: "KEY FIRE", "KEY FAST", "KEY SLOW", "KEY DOWN", "KEY UP". These will simulate key presses.
	In Arma 3 player doesn't always need to be in the vehicle to give commands.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		addCuratorCameraArea
	</Keyword>
	<Description>
		Adds or changes curator camera area (depends on if ID is already used).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/addCuratorCameraArea
	</WikiPage>
	<Syntax>
		Object addCuratorCameraArea Array
	</Syntax>
	<RawSyntax>
		curatorObj addCuratorCameraArea [cameraAreaID,position,radius]
	</RawSyntax>
	<Example>
		$Code$myCurator addCuratorCameraArea [3, position mySoldier,300];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		isFilePatchingEnabled
	</Keyword>
	<Description>
		Returns true if file patching is enabled otherwise false
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isFilePatchingEnabled
	</WikiPage>
	<Syntax>
		isFilePatchingEnabled
	</Syntax>
	<RawSyntax>
		isFilePatchingEnabled
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		isEngineOn
	</Keyword>
	<Description>
		Returns true if engine is on, false if it is off.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isEngineOn
	</WikiPage>
	<Syntax>
		isEngineOn Object
	</Syntax>
	<RawSyntax>
		isEngineOn vehicle
	</RawSyntax>
	<Example>
		$Code$_carEngineIsOn = isEngineOn _carOne;$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(March 20, 2015)
	isEngineOn returns true for static objects without an engine
	</NextNote>
		(April 6, 2015)
	Bind Engine action to User Action 1
	$Code$this addAction ["",
	{
	_this select 1 action
	[
	["EngineOn", "EngineOff"] select isEngineOn (_this select 0),
	_this select 0
	];
	}, "", -10, false, true, "User1", "_this == driver _target"];$/Code$
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		screenToWorld
	</Keyword>
	<Description>
		Returns the position on landscape ( PositionAGL ) corresponding to the given point on screen (in UI coordinates).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/screenToWorld
	</WikiPage>
	<Syntax>
		screenToWorld Array
	</Syntax>
	<RawSyntax>
		screenToWorld screen
	</RawSyntax>
	<Example>
		$Code$_wPos = screenToWorld [0.5,0.5];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		setFaceAnimation
	</Keyword>
	<Description>
		Set facial animation phase (eye blinking), blink is in the range from 0 to 1.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setFaceAnimation
	</WikiPage>
	<Syntax>
		Object setFaceAnimation Number
	</Syntax>
	<RawSyntax>
		person setFaceAnimation blink
	</RawSyntax>
	<Example>
		$Code$_soldier1 setFaceAnimation 0.5;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(09:01, 23 December 2008 (CET))
	Setting face animation to 4 will give "devilish" features (ArmA)
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		removeBackpack
	</Keyword>
	<Description>
		Removes unit's backpack
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/removeBackpack
	</WikiPage>
	<Syntax>
		removeBackpack Object
	</Syntax>
	<RawSyntax>
		removeBackpack unit
	</RawSyntax>
	<Example>
		$Code$removeBackpack this ;$/Code$
	</NextExample>
		$Code$removeBackpack mySoldierDude;$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		shownScoretable
	</Keyword>
	<Description>
		Returns the state of the score table set with showScoretable command.
	Since Arma 3 v1.63.137869, the previous functionality of this command (score table visibility check) is moved to visibleScoretable command. Please update your scripts and sorry for any inconvinience.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/shownScoretable
	</WikiPage>
	<Syntax>
		shownScoretable
	</Syntax>
	<RawSyntax>
		shownScoretable
	</RawSyntax>
	<Example>
		$Code$_state = shownScoretable ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		nearestLocationWithDubbing
	</Keyword>
	<Description>
		Find the nearest location (to the given position) having it speech non-empty.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/nearestLocationWithDubbing
	</WikiPage>
	<Syntax>
		nearestLocationWithDubbing Object/Array
	</Syntax>
	<RawSyntax>
		nearestLocationWithDubbing position
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Location
	</ReturnValue>

</NextListItem>

	<Keyword>
		assignedTeam
	</Keyword>
	<Description>
		Returns the team the unit belongs to. Possible values:
	MAIN (default and white)
	RED
	GREEN
	BLUE
	YELLOW
	This command will return nil if given unit is objNull, remoteControling another unit or is not local
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/assignedTeam
	</WikiPage>
	<Syntax>
		assignedTeam Object
	</Syntax>
	<RawSyntax>
		assignedTeam unitName
	</RawSyntax>
	<Example>
		$Code$_team = assignedTeam player ;$/Code$
	</Example>
	<Locality>
		local / undefined
	</Locality>
	<Note>
		(December 13, 2014)
	As of Arma 3 version 1.36. assignedTeam might return nil instead of any of the STRINGs above if the player is currently remote controlling a unit.
	$Code$ assignedTeam player
	- $/Code$
	</NextNote>
		(May 23, 2017)
	Executed on server also nothing is returned... so arguments need to be local.
	</Note>
	<ReturnValue>
		String/Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		dissolveTeam
	</Keyword>
	<Description>
		Dissolves the given team. All members become members of the main team. Possible team values are: "RED", "GREEN", "BLUE" or "YELLOW".
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/dissolveTeam
	</WikiPage>
	<Syntax>
		dissolveTeam String
	</Syntax>
	<RawSyntax>
		dissolveTeam teamColor
	</RawSyntax>
	<Example>
		$Code$dissolveTeam "RED"$/Code$
	</Example>
	<Locality>
		local / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		forceWeatherChange
	</Keyword>
	<Description>
		Forces saved wanted settings for weather to be actual (BEWARE: Will cause lag).
	NOTE The engine has own idea about the weather and will interfere with your scripted weather at every opportunity it gets. So don't give it the opportunity. In the editor's Intel there are Manual Override setting for many aspects of the weather. Select them to disable engine interference. Some commands such as setWaves and setLightnings will not even work until their respective settings are set to manual.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/forceWeatherChange
	</WikiPage>
	<Syntax>
		forceWeatherChange
	</Syntax>
	<RawSyntax>
		forceWeatherChange
	</RawSyntax>
	<Example>
		$Code$240 setOvercast 1;
	360 setRain 1;
	forceWeatherChange ; comment "force immediate change overriding smooth transition";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		This scripting command must be executed on the server to work properly in multiplayer
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctSetCurSel
	</Keyword>
	<Description>
		Selects the line with the given index. Will take only rows, but not headers into account. -1 deselects all. Returns Nothing.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctSetCurSel
	</WikiPage>
	<Syntax>
		Control ctSetCurSel Number
	</Syntax>
	<RawSyntax>
		Control ctSetCurSel Number
	</RawSyntax>
	<Example>
		$Code$_control ctSetCurSel 0;$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		getMousePosition
	</Keyword>
	<Description>
		Returns mouse position in UI coordinates.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getMousePosition
	</WikiPage>
	<Syntax>
		getMousePosition
	</Syntax>
	<RawSyntax>
		getMousePosition
	</RawSyntax>
	<Example>
		$Code$_pos = getMousePosition ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		setMusicEventHandler
	</Keyword>
	<Description>
		Sets given music track event handler. Will overwrite other music event handlers. Use addMusicEventHandler if you want to stack them.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setMusicEventHandler
	</WikiPage>
	<Syntax>
		setMusicEventHandler Array
	</Syntax>
	<RawSyntax>
		setMusicEventHandler [type, function]
	</RawSyntax>
	<Example>
		$Code$_ehID = setMusicEventHandler ["MusicStart", " hint str _this"];$/Code$
	</NextExample>
		$Code$_ehID = setMusicEventHandler ["MusicStop", " hint str _this"];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		allowDamage
	</Keyword>
	<Description>
		Allow or prevent an object being damaged (or injured, or killed). The command does not prevent object from taking scripted damage such as setHit, setHitIndex, setHitPointDamage or setDamage. To check if damage is allowed at current locality, see isDamageAllowed.
	!
	This command has to be executed where object is local and as long as object does not change locality the effect of this command will be global. If object changes locality, the command needs to be executed again on the new owner 's machine to maintain the effect
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/allowDamage
	</WikiPage>
	<Syntax>
		Object allowDamage Boolean
	</Syntax>
	<RawSyntax>
		object allowDamage allow
	</RawSyntax>
	<Example>
		$Code$player allowDamage false ;$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		(September 2, 2013)
	$Code$_object allowDamage false$/Code$
	has the same effect as
	$Code$_object addEventHandler ["HandleDamage", {0}]$/Code$
	(except for buildings that are native to the map; for those, the effects of HandleDamage will not sync properly across all clients, even if added to the building on every client and the server)
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		diarySubjectExists
	</Keyword>
	<Description>
		Checks whether given subject is present in the diary of given person.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/diarySubjectExists
	</WikiPage>
	<Syntax>
		Object diarySubjectExists String
	</Syntax>
	<RawSyntax>
		person diarySubjectExists name
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		getHitIndex
	</Keyword>
	<Description>
		Return current level of damage for a specific Hit Point (specified by its hit part index). All hit points can be obtained with getAllHitPointsDamage command.
	0: no damage
	1: full damage
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getHitIndex
	</WikiPage>
	<Syntax>
		Object getHitIndex Number
	</Syntax>
	<RawSyntax>
		vehicle getHitIndex hitPartIndex
	</RawSyntax>
	<Example>
		$Code$vehicle player getHitIndex 3;$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number/Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		hostMission
	</Keyword>
	<Description>
		Host the mp mission described by config class. Should be called as reaction to some UI action in some dialog.
	For example you can start a MP scenario from a button. It creates a host and takes you to the lobby with the scenario loaded.
	You need to provide the display which is active when the hostMission command is called.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/hostMission
	</WikiPage>
	<Syntax>
		hostMission Array
	</Syntax>
	<RawSyntax>
		hostMission [pConfig, pDisplay]
	</RawSyntax>
	<Example>
		$Code$hostMission [configMissionName, display];$/Code$
	</NextExample>
		$Code$hostMission [ configFile /"CfgMissions"/"MPMissions"/_scenarioClassName, _currentlyActiveDisplay];$/Code$
	</NextExample>
		$Code$// Launch host mission dialog in Arma 3 from a client on dedicated server
	hostMission [
	configFile "CfgMissions" "MPmissions" "MP_COOP_m01",
	findDisplay 46
	];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(January 03, 2011)
	The command must be called in the main menu or something similar menu it seems.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		isCopilotEnabled
	</Keyword>
	<Description>
		Returns true if copilots actions are enabled.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isCopilotEnabled
	</WikiPage>
	<Syntax>
		isCopilotEnabled Object
	</Syntax>
	<RawSyntax>
		isCopilotEnabled vehicle
	</RawSyntax>
	<Example>
		$Code$if (! isCopilotEnabled myHeli) then {
	myHeli enableCopilot true ;
	};$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(February 17, 2014)
	Only returns whether or not the actions are enabled and shown to the pilot and co-pilot. This will still return TRUE if the pilot uses the 'Lock Controls' action to disable co-pilot controls.
	You can use the Arma 3 Event Handler - Controls Shifted to detect 'Take Controls' or 'Release Controls' actions
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		rain
	</Keyword>
	<Description>
		Returns the current value of rain density in range 1...0
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/rain
	</WikiPage>
	<Syntax>
		rain
	</Syntax>
	<RawSyntax>
		rain
	</RawSyntax>
	<Example>
		$Code$_rainLevel = rain ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		magazinesDetailVest
	</Keyword>
	<Description>
		Returns an array with the type names of all the unit's vest magazines.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/magazinesDetailVest
	</WikiPage>
	<Syntax>
		magazinesDetailVest Object
	</Syntax>
	<RawSyntax>
		magazinesDetailVest unit
	</RawSyntax>
	<Example>
		$Code$magazinesDetailVest player$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		serverCommandAvailable
	</Keyword>
	<Description>
		Returns true if given serverCommand is available on current machine, false if not. Here is the general table of availability of Arma 3 server commands:
	Available to anyone
	#login, #userlist, #beclient, #vote
	Available to any admin (voted in / logged in) or server host
	#kick, #debug
	Available to logged in admin or server host
	#lock, #unlock, #maxping, #maxdesync, #maxpacketloss
	Available to any admin (voted in / logged in)
	#logout, #restart, #mission, #missions, #reassign, #monitor, #init
	Available to logged in admin
	#shutdown, #restartserver, #exec, #beserver, #monitords, #logentities, #exportjipqueue
	Available to logged in admin on certain game builds
	#captureframe, #enabletest, #disabletest
	To check if server command could be executed in current environment use serverCommandExecutable. For more information on what each server command does, see Multiplayer Server Commands.
	NOTE : When password variant of serverCommand is used on dedicated server, the table above does not apply as everything is available to it.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/serverCommandAvailable
	</WikiPage>
	<Syntax>
		serverCommandAvailable String
	</Syntax>
	<RawSyntax>
		serverCommandAvailable command
	</RawSyntax>
	<Example>
		$Code$_can = serverCommandAvailable "#kick";$/Code$
	</NextExample>
		$Code$if ( serverCommandAvailable "#logout") then
	{
	hint "You are a some sort of admin";
	};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlSetFontH5B
	</Keyword>
	<Description>
		Sets H5 bold font of given HTML control.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlSetFontH5B
	</WikiPage>
	<Syntax>
		Control ctrlSetFontH5B String
	</Syntax>
	<RawSyntax>
		controlName ctrlSetFontH5B fontName
	</RawSyntax>
	<Example>
		$Code$_control ctrlSetFontH5B "TahomaB"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		sizeOf
	</Keyword>
	<Description>
		Returns the diameter of bounding sphere of the object of given type in meters. Size returned is usually bigger than the biggest size of the object along any of the axes. For example if object is 10 x 4 x 5 the sizeOf value returned expected to be around 10. If you need to estimate the size of the object more precisely, use boundingBox or boundingBoxReal.
	NOTE: The object has to be present in current mission to be able to read its size (otherwise zero will be returned).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/sizeOf
	</WikiPage>
	<Syntax>
		sizeOf String
	</Syntax>
	<RawSyntax>
		sizeOf type
	</RawSyntax>
	<Example>
		$Code$_dimension = sizeOf "M1Abrams"; //returns 10.7833$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		serverTime
	</Keyword>
	<Description>
		Server time synchronized to clients. Returns always 0 in Singleplayer.
	Note that in ArmA2 1.05 Final, this command only returns the time since the Server was actually started.
	NOTE: serverTime is available to both server and clients and shows the same value when synced. The only time it is not synced is on the server, right after server restart and only for the first 300 seconds. Client side serverTime is synced from the start. serverTime is also different from server time and server diag_tickTime
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/serverTime
	</WikiPage>
	<Syntax>
		serverTime
	</Syntax>
	<RawSyntax>
		serverTime
	</RawSyntax>
	<Example>
		$Code$hint format ["Synced server time : %1", serverTime ];$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(Sep 8, 2010(CEST) 19:31)
	There is a bug in this command, about 3 minutes after missionstart this command returns something completely different.
	See http://dev-heaven.net/issues/13581 for further infomation.
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		removeMagazines
	</Keyword>
	<Description>
		Remove all magazines of given type from the unit.
	Note: You may create invalid combinations with this function. When doing so, application behaviour is undefined.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/removeMagazines
	</WikiPage>
	<Syntax>
		Object removeMagazines String
	</Syntax>
	<RawSyntax>
		unitName removeMagazines magazineName
	</RawSyntax>
	<Example>
		$Code$player removeMagazines "M16";$/Code$
	</Example>
	<Locality>
		local / undefined
	</Locality>
	<Note>
		Though BIS did not provide a command to remove all magazines of every type, it can still be accomplished using forEach magazines. example:
	{player removeMagazine _x} forEach magazines player
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		pixelW
	</Keyword>
	<Description>
		Returns width of one pixel for current resolution.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/pixelW
	</WikiPage>
	<Syntax>
		pixelW
	</Syntax>
	<RawSyntax>
		pixelW
	</RawSyntax>
	<Example>
		$Code$_pixelWidth = pixelW ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		getMarkerType
	</Keyword>
	<Description>
		Returns the type of a given marker. See cfgMarkers for a list of standard markers.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getMarkerType
	</WikiPage>
	<Syntax>
		getMarkerType String
	</Syntax>
	<RawSyntax>
		getMarkerType markerName
	</RawSyntax>
	<Example>
		$Code$"MarkerOne" setMarkerType "Destroy"
	_type = getMarkerType "MarkerOne"
	returns "Destroy"$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		getGroupIcons
	</Keyword>
	<Description>
		Returns all group icons. [id,icon,[offsetx,offsety],[..],..]
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getGroupIcons
	</WikiPage>
	<Syntax>
		getGroupIcons Group
	</Syntax>
	<RawSyntax>
		getGroupIcons group
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		ropes
	</Keyword>
	<Description>
		Returns a vehicle's rope objects in an Array.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ropes
	</WikiPage>
	<Syntax>
		ropes Object
	</Syntax>
	<RawSyntax>
		ropes vehicle
	</RawSyntax>
	<Example>
		$Code$hint str ( ropes vehicle player );$/Code$
	</NextExample>
		$Code$_rope1 = ( ropes heli1) select 0;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(05 April, 2014)
	The ropes command seems to return each individual sling load rope. ropes will return an empty Array if the sling load ropes are not deployed. Ropes as of A3 1.33 have a cfgVehicles classname of "Rope".
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		camUseNVG
	</Keyword>
	<Description>
		Set / clear using of night vision during cutscenes. This command only works with camCreate created camera that is currently the main camera for the player (see example).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/camUseNVG
	</WikiPage>
	<Syntax>
		camUseNVG Boolean
	</Syntax>
	<RawSyntax>
		camUseNVG set
	</RawSyntax>
	<Example>
		$Code$camUseNVG true ;$/Code$
	</NextExample>
		$Code$setDate [2000,12,31,0,0];
	_cam = "camera" camCreate [0,0,0];
	_cam camSetTarget player ;
	_cam camSetRelPos [0,-5,3];
	_cam cameraEffect ["Internal","Back"];
	_cam camCommit 0;
	camUseNVG true ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		getClientState
	</Keyword>
	<Description>
		Returns client state in network game. Works on both, client and dedicated server. The following states are possible:
	getClientStateNumber
	getClientState
	0
	"NONE"
	No client (or singleplayer)
	1
	"CREATED"
	Client is created
	2
	"CONNECTED"
	Client is connected to server, message formats are registered
	3
	"LOGGED IN"
	Identity is created
	4
	"MISSION SELECTED"
	Mission is selected
	5
	"MISSION ASKED"
	Server was asked to send / not send mission
	6
	"ROLE ASSIGNED"
	Role was assigned (and confirmed)
	7
	"MISSION RECEIVED"
	Mission received
	8
	"GAME LOADED"
	Island loaded, vehicles received
	9
	"BRIEFING SHOWN"
	Briefing was displayed
	10
	"BRIEFING READ"
	Ready to play mission
	11
	"GAME FINISHED"
	Game was finished
	12
	"DEBRIEFING READ"
	Debriefing read, ready to continue with next mission
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getClientState
	</WikiPage>
	<Syntax>
		getClientState
	</Syntax>
	<RawSyntax>
		getClientState
	</RawSyntax>
	<Example>
		$Code$_state = getClientState ;$/Code$
	</NextExample>
		$Code$if ( getClientState == "BRIEFING READ") then { hint "Let the show begin!"};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		pixelH
	</Keyword>
	<Description>
		Returns the height of one pixel for current resolution.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/pixelH
	</WikiPage>
	<Syntax>
		pixelH
	</Syntax>
	<RawSyntax>
		pixelH
	</RawSyntax>
	<Example>
		$Code$_pixelHeight = pixelH ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		setPiPEffect
	</Keyword>
	<Description>
		Sets Render Target's visual effect (Picture-in-Picture).
	0: Normal - [0]
	1: Night Vision - [1]
	2: Thermal - [2]
	3: Color Correction - [3, enabled, brightness, contrast, offset, blend [r,g,b,a], lerp [r,g,b,a], rgb [r,g,b,a]]
	4: Mirror - [4] currently not working
	5: Chromatic Aberration - [5, enabled, powerx, powery, (bool) aspectCorrection] currently not working
	6: Film Grain - [6, enabled, intensity, sharpness, grainsize, intensityx1, intensityx2, (bool) monochromatic] currently not working
	7: Thermal Inverted [7]
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setPiPEffect
	</WikiPage>
	<Syntax>
		String setPiPEffect Array
	</Syntax>
	<RawSyntax>
		name setPiPEffect [effect, optionalParam1,, optionalParamN]
	</RawSyntax>
	<Example>
		$Code$"rendersurface" setPiPEffect [0];$/Code$
	</NextExample>
		$Code$"rendertarget0" setPiPEffect [3, 1.0, 1.0, 1.0, 0.0, [0.0, 1.0, 0.0, 0.25], [1.0, 0.0, 1.0, 1.0], [0.199, 0.587, 0.114, 0.0]];$/Code$
	</NextExample>
		$Code$cam = "camera" camCreate ( player modelToWorld [0,-5,2]);
	cam cameraEffect ["internal","back","rtt"];
	"rtt" setPiPEffect [2];
	with uiNamespace do {
	pic = findDisplay 46 ctrlCreate ["RscPicture", -1];
	pic ctrlSetPosition [0,0,1,1];
	pic ctrlCommit 0;
	pic ctrlSetText "#(argb,512,512,1)r2t(rtt,1.0)";
	};$/Code$
	</NextExample>
		$Code$// Black&White:
	"rtt" setPiPEffect [3,1,1,0.4,0,[0,0,0,0],[1,1,1,0],[1,1,1,1]];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(July 9, 2017)
	If Color Corrections effect has been used, going back to Normal will have no effect. In order to unset Color Corrections, set 2nd param in it (enable) to 0.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		lbSetData
	</Keyword>
	<Description>
		Sets the additional text (invisible) in the item with the given index of the listbox or combobox with id idc of the topmost user dialog to the given data.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lbSetData
	</WikiPage>
	<Syntax>
		lbSetData Array
	</NextSyntax>
		Control lbSetData Array
	</Syntax>
	<RawSyntax>
		lbSetData [idc, index, data]
	</NextRawSyntax>
		control lbSetData [index, data]
	</RawSyntax>
	<Example>
		$Code$lbSetData [101, 1, "#1"];$/Code$
	</NextExample>
		$Code$_control lbSetData [1, "#1"];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		More information on the LB command family can be found here
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		cursorObject
	</Keyword>
	<Description>
		Returns the object under cursor. This command is quite different from cursorTarget as it is more precise in determining the boundaries of the pointed at object and can detect a larger variety of objects including map objects and trees.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/cursorObject
	</WikiPage>
	<Syntax>
		cursorObject
	</Syntax>
	<RawSyntax>
		cursorObject
	</RawSyntax>
	<Example>
		$Code$hint str [ getModelInfo cursorObject, typeOf cursorObject ];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(March 23, 2015)
	If you point at the primary weapon of an infantry unit, cursorObject will return the p3d of the weapon instead of the unit itself (B Alpha 1-2:1.. or its variable name ). That doesn't occur for anything else (backpack or headgear).
	</Note>
	<ReturnValue>
		Object
	</ReturnValue>

</NextListItem>

	<Keyword>
		primaryWeapon
	</Keyword>
	<Description>
		Returns name of unit's primary weapon (empty string if none).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/primaryWeapon
	</WikiPage>
	<Syntax>
		primaryWeapon Object
	</Syntax>
	<RawSyntax>
		primaryWeapon unit
	</RawSyntax>
	<Example>
		$Code$_pWeap = primaryWeapon player ;$/Code$
	</NextExample>
		$Code$hint primaryWeapon player ; //"arifle_MX_ACO_pointer_F"$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(August 4, 2006)
	primaryWeapon tells you what weapon the unit has irrespective of the status of the weapon. For example a unit that has an M16 on his back will still report an M16 as its primary weapon.
	</NextNote>
		(October 11, 2015)
	To directly detect the active weapon use currentWeapon command.
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		playSound3D
	</Keyword>
	<Description>
		Plays positional sound with given filename on every computer on network. At least 2 parameters must be specified.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/playSound3D
	</WikiPage>
	<Syntax>
		playSound3D Array
	</Syntax>
	<RawSyntax>
		playSound3D [filename, soundSource, isInside, soundPosition, volume, soundPitch, distance]
	</RawSyntax>
	<Example>
		$Code$playSound3D ["A3\Sounds_F\sfx\blip1.wav", player ]$/Code$
	</NextExample>
		$Code$playSound3D ["A3\Sounds_F\sfx\blip1.wav", player, false, getPosASL player, 1, 1, 0]$/Code$
	</NextExample>
		$Code$// Sound file extension must be specified even if a config entry has none:
	playSound3D ["A3\Sounds_F\sfx\alarm_independent", player ]; //no sound
	playSound3D ["A3\Sounds_F\sfx\alarm_independent.wss", player ]; //alarm$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
		(September 23, 2013)
	This command works well with addon sounds, however getting it to play mission sound files is a bit tricky. Follow this guide
	</NextNote>
		(September 26, 2014)
	Currently, playSound3D is not JIP compatible, so joining players will not hear the sound if is started before and is still playing when player joins.
	</NextNote>
		(October 16, 2013)
	You need to get the correct path for custom mission sounds. Use missionConfigFile with BIS_fnc_trimString (to trim off " description.ext "), then add your mission's sound directory and sound file:
	$Code$_soundPath = [( str missionConfigFile ), 0, -15] call BIS_fnc_trimString;
	_soundToPlay = _soundPath + "sounds\some_sound_file.ogg";
	playSound3D [_soundToPlay, _sourceObject, false, getPos _sourceObject, 10, 1, 50];
	//Volume db+10, volume drops off to 0 at 50 meters from _sourceObject$/Code$
	</NextNote>
		(November 8, 2014)
	When object is supplied but not a position, the position is taken from object, otherwise the position is taken from supplied position. That doesn't mean that when position is taken from object it is going to follow object when it changes position. The sound is generated at object position and it stays there.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setLightAttenuation
	</Keyword>
	<Description>
		Sets attenuation of light. Standard method of attenuation (1 / (constant + linear*dist + quadratic*dist*dist)). start param represents distance, where the attenuation starts to take effects (dist = distance - start).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setLightAttenuation
	</WikiPage>
	<Syntax>
		Object setLightAttenuation Array
	</Syntax>
	<RawSyntax>
		light setLightAttenuation [start, constant, linear, quadratic, hardlimitstart, hardlimitend]
	</RawSyntax>
	<Example>
		$Code$myLight setLightAttenuation [2,4,4,0,9,10];$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
		(Mar 25, 2014)
	(A3 1.14) setLightAttenuation array will present fallowing visual effects:
	[start(SCALAR), constant(SCALAR), linear (SCALAR), quadratic(SCALAR)]
	start(SCALAR) – Number can be unlimited, this parameter determines the range that the light source takes effect. Terrain environmental color will be bathed by ‎setLightAmbient within the range and its covered objects will reflect the color by ‎setLightColor.
	constant(SCALAR) – Support signed number, this parameter determines the brightness proportion of the light source, higher the number is, less the brightness will be, vice versa. Any minus value passed will be treated as 0 (100% brightness). In other words, this parameter is related with ‎‎setLightBrightness and ‎setLightIntensity.
	linear (SCALAR) – Support signed number, effective range is from 0 ~ 100 (passed minus value will be treated as 0), this parameter determines the concentration of the light source, higher the number is, more will the light concentrate, vice versa. In other words, this parameter will turn the source into spotlight and sharpens its light circle border.
	Please pay attention to a special value: 4.31918e-005
	e.g.
	$Code$
	_light setLightAttenuation [2,4, 4.31918e-005,0]; //This value will make the light source reach an ultra high effect range. Any initial param set before will be discarded and overwritten.
	$/Code$
	quadratic(SCALAR) – Support signed number (range unlimited, passed minus number will be treated as 0), this parameter determines the range that the light source is visible and its visual presentation looks similar to linear. 0 means the maximum visible range. In further explanation, a less bright source can’t be seen out of the range on the land but still visible on the sea, and a bright enough source won’t be effected by the passed range who is still visible out of the range.
	Please pay attention to a special value: 4.31918e-005
	e.g.
	$Code$
	_light setLightAttenuation [6,0,0, 4.31918e-005 ]; //This value will make the light source reach an ultra high effect range. Any initial param set before will be discarded and overwritten.
	$/Code$
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		removeItemFromBackpack
	</Keyword>
	<Description>
		Removes item from soldier's backpack.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/removeItemFromBackpack
	</WikiPage>
	<Syntax>
		Object removeItemFromBackpack String
	</Syntax>
	<RawSyntax>
		unit removeItemFromBackpack item
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		breakTo
	</Keyword>
	<Description>
		Breaks block to scope named name. Nil is returned.
	Scope name can be assigned using scopeName command.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/breakTo
	</WikiPage>
	<Syntax>
		breakTo String
	</Syntax>
	<RawSyntax>
		breakTo name
	</RawSyntax>
	<Example>
		$Code$scopeName "main";
	while { true } do {
	scopeName "loop1";
	while { true } do {
	scopeName "loop2";
	if (condition1) then { breakTo "main"}; // Breaks all scopes and return to "main"
	if (condition2) then { breakOut "loop2"}; // Breaks scope named "loop2"
	sleep 1;
	};
	sleep 1;
	};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(May 18, 2017)
	This command can not be used to re-execute scopes in which command is inside of. Example:
	$Code$scopeName "whatever";
	if true then {
	breakTo "whatever"
	};
	$/Code$
	The example above will not make the engine jump back to line 1 and re-execute the 2nd line. Instead, it will just jump across line 2 to line 5 if it [ line 5 ] exists.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		lockWP
	</Keyword>
	<Description>
		Disable switching to next waypoint (current waypoint will never complete while lockwp is used). Sometimes used during cut-scenes.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lockWP
	</WikiPage>
	<Syntax>
		Object/Group lockWP Boolean
	</Syntax>
	<RawSyntax>
		groupName lockWP lock
	</RawSyntax>
	<Example>
		$Code$_groupOne lockWP true ;$/Code$
	</NextExample>
		$Code$_Soldier lockWP true ;$/Code$
	</NextExample>
		$Code$_MyTank lockWP false ;$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		getAllEnvSoundControllers
	</Keyword>
	<Description>
		Returns an array containing the names and values of environmental variables that can be used in simple expressions when configuring sounds.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getAllEnvSoundControllers
	</WikiPage>
	<Syntax>
		getAllEnvSoundControllers Position
	</Syntax>
	<RawSyntax>
		getAllEnvSoundControllers position
	</RawSyntax>
	<Example>
		$Code$getAllEnvSoundControllers position player ;
	// Result:
	//[["rain",0],["night",0],["wind",0.161588],...]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(March 25, 2018)
	This command will return data on the following attributes;
	rain, night, wind, daytime, meadows, trees, houses, forest, sea, coast, altitudeGround. alititudeSea, shooting, deadbody and fog
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		diag_fps
	</Keyword>
	<Description>
		Returns average framerate calculated over last 16 frames.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/diag_fps
	</WikiPage>
	<Syntax>
		diag_fps
	</Syntax>
	<RawSyntax>
		diag_fps
	</RawSyntax>
	<Example>
		$Code$diag_log diag_fps;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(November 19, 2014)
	The engine will always calculate the last 16 frames without caring if they are frames in which the loading screen was drawn, or actual mission frames.
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		getPlayerChannel
	</Keyword>
	<Description>
		Returns channel number for given player, provided that player is speaking, otherwise -1. Having mic on is not enough, player has to make a sound. There are several limitations to this command:
	It does not work on dedicated server, the return is always -1, only client can detect other client talking.
	It does not detect when someone talks on direct chat at all anywhere.
	The client on which command is executed has to able to receive transmission before the transmission channel can be detected. For example if a player is not in the same group as a speaker and the speaker speaks on Group Channel, the player cannot hear the speaker and therefore cannot detect what channel the speaker is on.
	In short, this command mimics the speaking icon from the UI. Correspondence between channel and number:
	0 = Global
	1 = Side
	2 = Command
	3 = Group
	4 = Vehicle
	5 = Direct (Is not detected by getPlayerChannel )
	6-15 = Custom Radio (see radioChannelCreate )
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getPlayerChannel
	</WikiPage>
	<Syntax>
		getPlayerChannel Object
	</Syntax>
	<RawSyntax>
		getPlayerChannel player
	</RawSyntax>
	<Example>
		$Code$_channel = getPlayerChannel player ;$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		lbSetTooltip
	</Keyword>
	<Description>
		Sets tooltip for item with given index of the listbox or combobox with id idc of the topmost user dialog to the given data.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lbSetTooltip
	</WikiPage>
	<Syntax>
		lbSetTooltip Array
	</NextSyntax>
		Control lbSetTooltip Array
	</Syntax>
	<RawSyntax>
		lbSetTooltip [idc, index, tooltip]
	</NextRawSyntax>
		control lbSetTooltip [index, tooltip]
	</RawSyntax>
	<Example>
		$Code$lbSetTooltip [101, 1, "tooltip"];$/Code$
	</NextExample>
		$Code$_control lbSetTooltip [0, "another tooltip"];$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
		More information on the LB command family can be found here
	</NextNote>
		(August 9, 2017)
	[ ArmA 3 v1.75.142535 ] if you want to put linebreaks into a tooltip, use this method:
	$Code$format [ "%1,%2%3", "hi", parseText "\n", "my name is Will" ]$/Code$
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		doFollow
	</Keyword>
	<Description>
		Order the given unit(s) to follow the given other unit or vehicle eg (without radio messages). Also is used to resume unit formation after doStop, just doFollow leader even if it is the leader himself you want to resume (see Example 2).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/doFollow
	</WikiPage>
	<Syntax>
		Object/Array doFollow Object
	</Syntax>
	<RawSyntax>
		unitName doFollow unitName2
	</RawSyntax>
	<Example>
		$Code$_soldier1 doFollow _soldier2$/Code$
	</NextExample>
		$Code$units _group doFollow leader _group;$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		These commands ( doFollow or commandFollow ) work only if the two units are in the same group.
	</NextNote>
		(August 29, 2016)
	The name of this command is a bit misleading, it is used to make a unit return to the formation of its group or subformation.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlTextWidth
	</Keyword>
	<Description>
		Returns the control text width. Supported control types are:
	CT_STATIC 0
	CT_EDIT 2
	CT_STRUCTURED_TEXT 13
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlTextWidth
	</WikiPage>
	<Syntax>
		ctrlTextWidth Control
	</Syntax>
	<RawSyntax>
		ctrlTextWidth control
	</RawSyntax>
	<Example>
		$Code$_w = ctrlTextWidth _ctrl;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		allControls
	</Keyword>
	<Description>
		Returns a list of all controls for desired existing display. Returned controls also include controls from control groups
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/allControls
	</WikiPage>
	<Syntax>
		allControls Display
	</Syntax>
	<RawSyntax>
		allControls display
	</RawSyntax>
	<Example>
		$Code$_allCtrls = allControls findDisplay 46;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		disableSerialization
	</Keyword>
	<Description>
		Disable saving of script containing this command. After this, the script can work with data types which do not support serialization (UI types).
	NOTE : When using spawn command, if the argument passed to it is Display or Control, an error will show asking to consider to disable serialization because of use of _this variable. What's more neither disableSerialization no use of uiNamespace will solve this. Passing Display or Control as part of an array however, will do the job:
	$Code$ findDisplay 46 spawn { hint str _this}; // serialization error
	[ findDisplay 46] spawn { hint str (_this select 0)}; // OK $/Code$
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/disableSerialization
	</WikiPage>
	<Syntax>
		disableSerialization
	</Syntax>
	<RawSyntax>
		disableSerialization
	</RawSyntax>
	<Example>
		$Code$disableSerialization ;
	_display = findDisplay 46;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(19 June, 2010)
	Can be used to detecting load. Scope with disabled serialization is discontinued after load, even if there's endless loop inside.
	_loaded = [] spawn { disableSerialization ; waitUntil { false };};
	waitUntil { scriptDone _loaded;};
	hint "Game was loaded!"
	Works for all possible load types - loading user save, loading autosave and resuming mission from main menu.
	Use with caution, as it handles two threads in memory, having impact at overall scripting time.
	</NextNote>
		(23 October, 2013)
	If you do not store UI elements ( Display, Control ) in variables, you do not need disableSerialization ; UI elements are usually returned by scripting commands such as findDisplay or passed as params in UI event handler scripts ( displayAddEventHandler, ctrlAddEventHandler ).
	This code will require disableSerialization : $Code$ disableSerialization ;
	_display = findDisplay 123;
	_ctrl = _display displayCtrl -1;
	_ctrl ctrlSetText "LOL";$/Code$
	This code will not: $Code$ findDisplay 123 displayCtrl -1 ctrlSetText "LOL";$/Code$
	</NextNote>
		(July 25, 2017)
	In ArmA 3 1.72.142223, a scripted FSM does somehow not work with disableSerialization. As a workaround, store a display inside an array.
	Example: $Code$_d = [ findDisplay idd ];$/Code$
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		move
	</Keyword>
	<Description>
		Let group move to given position (format Position or Position2D ) without waypoint. Active waypoints will be ignored when command is used.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/move
	</WikiPage>
	<Syntax>
		Object/Group move Array
	</Syntax>
	<RawSyntax>
		group move position
	</RawSyntax>
	<Example>
		$Code$_groupOne move position player ;$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		estimatedEndServerTime
	</Keyword>
	<Description>
		Estimated end of MP game in seconds converted to serverTime.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/estimatedEndServerTime
	</WikiPage>
	<Syntax>
		estimatedEndServerTime
	</Syntax>
	<RawSyntax>
		estimatedEndServerTime
	</RawSyntax>
	<Example>
		$Code$// Estimated minutes left:
	_min = ( ceil ( estimatedEndServerTime - serverTime ) / 60);$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		assignAsCargoIndex
	</Keyword>
	<Description>
		Assigns the character to a specific cargo / passenger index of the given vehicle.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/assignAsCargoIndex
	</WikiPage>
	<Syntax>
		Object assignAsCargoIndex Array
	</Syntax>
	<RawSyntax>
		character assignAsCargoIndex [vehicle, index]
	</RawSyntax>
	<Example>
		$Code$player assignAsCargoIndex [myHelicopter, 1];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		removeAllWeapons
	</Keyword>
	<Description>
		Remove all weapons and magazines of the unit.
	On vehicles only ammo is removed
	Does not remove map, compass, radio. Use
	unitname removeweapon "itemmap"
	for that purpose.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/removeAllWeapons
	</WikiPage>
	<Syntax>
		removeAllWeapons Object
	</Syntax>
	<RawSyntax>
		removeAllWeapons unitName
	</RawSyntax>
	<Example>
		$Code$removeAllWeapons player ;$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		(October 14, 2014)
	removeAllWeapons doesn't quite work with vehicles. If you need to remove all weapons from a vehicle, remove each weapon individually:
	$Code${tank removeWeapon _x} forEach weapons tank;$/Code$
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		terrainIntersect
	</Keyword>
	<Description>
		Checks for intersection of terrain between two AGL positions. Returns true if intersects with terrain. For ASL variant see terrainIntersectASL
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/terrainIntersect
	</WikiPage>
	<Syntax>
		terrainIntersect Array
	</Syntax>
	<RawSyntax>
		terrainIntersect [pos1, pos2]
	</RawSyntax>
	<Example>
		$Code$_intersects = terrainIntersect [ getPos player, getPos chopper];$/Code$
	</NextExample>
		$Code$_intersects = terrainIntersect [ position player, position enemy1];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(may 31, 2012)
	Please note the difference :
	terrainIntersect
	terrainIntersectASL
	lineIntersect s
	lineIntersect s With
	lineIntersect s Objs
	intersect
	</NextNote>
		(may 31, 2012)
	This command is CPU intensive on the engine, be careful with its use.
	</NextNote>
		(Jun 23, 2012)
	This command was changed to ATL and counterpart for ASL was added in build 94049.
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		say
	</Keyword>
	<Description>
		Unit will say given sound.
	When the Unit is a Person, it will also perform corresponding lipsync effect provided an appropriate.lip file has been created for this sound.
	A unit that has been killed or does not exist will not say anything.
	Compare this with playSound which will always play a sound at the location of the player.
	If the camera is not within given range, title is not shown and the sound will not be heard.
	Sound is defined in CfgSound of the Description.ext.
	NOTE: say will mimic either say2D or say3D depending on whether it is there executed in a cut scene or in a game scene.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/say
	</WikiPage>
	<Syntax>
		Object say String
	</NextSyntax>
		Object say Array
	</NextSyntax>
		Array say String
	</NextSyntax>
		Array say Array
	</Syntax>
	<RawSyntax>
		from say sound
	</NextRawSyntax>
		from say [sound, maxTitlesDistance, speed]
	</NextRawSyntax>
		[from, to] say sound
	</NextRawSyntax>
		[from, to] say [sound, maxTitlesDistance, speed]
	</RawSyntax>
	<Example>
		$Code$( units player select 1) say ["whisper1",5];$/Code$
	</NextExample>
		$Code$// Arma 3:
	player say "scuba_breath";$/Code$
	</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
		(7 March 2013)
	Say will occur in 3D when the player is active, during cutscenes it will not. Use say3D for cutscenes.
	</Note>
	<ReturnValue>
		Nothing - Nothing - Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		ropeAttachedTo
	</Keyword>
	<Description>
		Returns the object it is attached to by rope
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ropeAttachedTo
	</WikiPage>
	<Syntax>
		ropeAttachedTo Object
	</Syntax>
	<RawSyntax>
		ropeAttachedTo vehicle
	</RawSyntax>
	<Example>
		$Code$_heli = ropeAttachedTo veh1;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Object
	</ReturnValue>

</NextListItem>

	<Keyword>
		queryItemsPool
	</Keyword>
	<Description>
		Returns the number of items of type in the weapon pool (used in campaigns to transfer weapons to the next mission).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/queryItemsPool
	</WikiPage>
	<Syntax>
		queryItemsPool String
	</Syntax>
	<RawSyntax>
		queryItemsPool name
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		showSubtitles
	</Keyword>
	<Description>
		Enables / disables showing of subtitles in a chat. Only scripted/engine chatter is affected, player manual chat is unaffected. Returns the previous state.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/showSubtitles
	</WikiPage>
	<Syntax>
		showSubtitles Boolean
	</Syntax>
	<RawSyntax>
		showSubtitles enable
	</RawSyntax>
	<Example>
		$Code$showSubtitles false;$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		isUniformAllowed
	</Keyword>
	<Description>
		Check whether given uniform can be dressed by target soldier.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isUniformAllowed
	</WikiPage>
	<Syntax>
		Object isUniformAllowed String
	</Syntax>
	<RawSyntax>
		unit isUniformAllowed type
	</RawSyntax>
	<Example>
		$Code$_canUse = _unit isUniformAllowed "U_B_CombatUniform_mcam";$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		assignedVehicle
	</Keyword>
	<Description>
		Returns the vehicle a unit is assigned to. If no vehicle is assigned objNull is returned.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/assignedVehicle
	</WikiPage>
	<Syntax>
		assignedVehicle Object
	</Syntax>
	<RawSyntax>
		assignedVehicle unit
	</RawSyntax>
	<Example>
		$Code$_vehicle = assignedVehicle player ;$/Code$
	</Example>
	<Locality>
		local / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Object
	</ReturnValue>

</NextListItem>

	<Keyword>
		positionCameraToWorld
	</Keyword>
	<Description>
		Transforms position from camera coordinate space to world coordinate space.
	Camera axes are relative to camera orientation. x axis goes from left of the camera to right of the camera, z axis goes from underneath the camera to above the camera and y axis goes from back of the camera to where the camera is looking.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/positionCameraToWorld
	</WikiPage>
	<Syntax>
		positionCameraToWorld PositionRelative
	</Syntax>
	<RawSyntax>
		positionCameraToWorld cameraPos
	</RawSyntax>
	<Example>
		$Code$_worldPos = positionCameraToWorld _cameraPos;$/Code$
	</NextExample>
		$Code$// Example demonstrating reversed y and z:
	player setDir 0; //assuming player is looking forward
	hint str [ positionCameraToWorld [0,0,0], positionCameraToWorld [0,0,1]];
	//[[2481.35,567 1.21,1.51395],[2481.35,567 2.21,1.46955]]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(October 17, 2008)
	By measuring the distance between the camera and the player one can determine whether 1st-person or 3rd-person view is being used:
	$Code$ if (( positionCameraToWorld [0,0,0] distance player ) 2) then { hint "3rd person"} else { hint "1st person"};$/Code$
	</NextNote>
		(22:45, 17 October 2010 (CEST))
	The camera coordinate system is different from the model coordinate system: when modelToWorld uses [x, y, z] then positionCameraToWorld uses [x, z, y]. So for a steady camera the following is true:
	$Code$ positionCameraToWorld [5,10,15] == _camera modelToWorld [5,15,10];$/Code$
	</NextNote>
		(July 20, 2014)
	When over land, the position returned is in format PositionATL, and over sea, PositionASLW.
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctSetHeaderTemplate
	</Keyword>
	<Description>
		Takes config path to the new header template. Clears the whole RscControlsTable and sets the new header template.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctSetHeaderTemplate
	</WikiPage>
	<Syntax>
		Control ctSetHeaderTemplate Config
	</Syntax>
	<RawSyntax>
		Control ctSetHeaderTemplate Config
	</RawSyntax>
	<Example>
		$Code$_control ctSetHeaderTemplate _configPath;$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		delete3DENEntities
	</Keyword>
	<Description>
		Delete given entities in Eden Editor, including anything that can be placed in editor.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/delete3DENEntities
	</WikiPage>
	<Syntax>
		delete3DENEntities Array
	</Syntax>
	<RawSyntax>
		delete3DENEntities entities
	</RawSyntax>
	<Example>
		$Code$delete3DENEntities ( all3DENEntities select 0);
	// removes all objects$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		removeFromRemainsCollector
	</Keyword>
	<Description>
		Removes vehicles/units from disposal manager, added earlier with addToRemainsCollector
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/removeFromRemainsCollector
	</WikiPage>
	<Syntax>
		removeFromRemainsCollector Array
	</Syntax>
	<RawSyntax>
		removeFromRemainsCollector remains
	</RawSyntax>
	<Example>
		$Code$removeFromRemainsCollector [unit1, unit2, vehicle1];$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		get3DENConnections
	</Keyword>
	<Description>
		Return all connections currently present on an entity.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/get3DENConnections
	</WikiPage>
	<Syntax>
		get3DENConnections EdenEntity
	</Syntax>
	<RawSyntax>
		get3DENConnections entity
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		showChat
	</Keyword>
	<Description>
		Shows/hides the whole chat window.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/showChat
	</WikiPage>
	<Syntax>
		showChat Boolean
	</Syntax>
	<RawSyntax>
		showChat bool
	</RawSyntax>
	<Example>
		$Code$showChat false ;$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		diag_toggle
	</Keyword>
	<Description>
		Used to enable/disabled various diagnostics.
	Only available in the Arma 3 Diagnostic exe
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/diag_toggle
	</WikiPage>
	<Syntax>
		diag_toggle String
	</Syntax>
	<RawSyntax>
		diag_toggle diag_mode
	</RawSyntax>
	<Example>
		$Code$diag_toggle "Animation";//enable
	diag_toggle "Animation";//disable$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		nMenuItems
	</Keyword>
	<Description>
		Returns the total number of user-added menu items belonging to the given menu.
	i
	Some Old Editor Command
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/nMenuItems
	</WikiPage>
	<Syntax>
		Control nMenuItems String
	</NextSyntax>
		Control nMenuItems Number
	</Syntax>
	<RawSyntax>
		map nMenuItems menuName
	</NextRawSyntax>
		map nMenuItems index
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number - Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		setTriggerTimeout
	</Keyword>
	<Description>
		Defines the time between condition satisfaction and trigger activation (randomly from min to max, with an average value mid). If the last argument is true, the condition must be fullfilled all the time.
	For a normal trigger, min, mid and max are used to generate random duration according to Gaussian Distribution. For a "Seized" type of trigger, the duration value is generated using side ruling power
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setTriggerTimeout
	</WikiPage>
	<Syntax>
		Object setTriggerTimeout Array
	</Syntax>
	<RawSyntax>
		trigger setTriggerTimeout [min, mid, max, interruptable]
	</RawSyntax>
	<Example>
		$Code$_trigger setTriggerTimeout [5, 10, 7, false ];$/Code$
	</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setWPPos
	</Keyword>
	<Description>
		Set waypoint position
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setWPPos
	</WikiPage>
	<Syntax>
		Array setWPPos Array
	</Syntax>
	<RawSyntax>
		waypoint setWPPos pos
	</RawSyntax>
	<Example>
		$Code$[_groupOne, 1] setWPPos markerPos "MarkerOne";$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		isInRemainsCollector
	</Keyword>
	<Description>
		Checks if unit or vehicle is queued for disposal after death.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isInRemainsCollector
	</WikiPage>
	<Syntax>
		isInRemainsCollector Object
	</Syntax>
	<RawSyntax>
		isInRemainsCollector remain
	</RawSyntax>
	<Example>
		$Code$if ( isInRemainsCollector unit1) then { hint "unit1 is queued for disposal"};$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		formationPosition
	</Keyword>
	<Description>
		Return position of unit in the formation
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/formationPosition
	</WikiPage>
	<Syntax>
		formationPosition Object
	</Syntax>
	<RawSyntax>
		formationPosition person
	</RawSyntax>
	<Example>
		$Code$_pos=FormationPosition _person$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		getNumber
	</Keyword>
	<Description>
		Extract number from config entry.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getNumber
	</WikiPage>
	<Syntax>
		getNumber Config
	</Syntax>
	<RawSyntax>
		getNumber config
	</RawSyntax>
	<Example>
		$Code$_value = getNumber ( configFile "CfgVehicles" "Thing" "maxSpeed");$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(04:45, 3 March 2007 (CET))
	Use getNumber to get boolean values from a config file. 1 equals true, 0 equals false and if no value is found (when a valid variable is undefined) 0.67 is returned.
	</NextNote>
		(13 September 2011)
	With an not existing entry, getNumber returns 0.
	</NextNote>
		(Mar 28, 2014)
	(ArmA3 1.14), It's recommended to use BIS_fnc_getCfgData or BIS_fnc_returnConfigEntry to get variable cfg data rather than conditioning via isNumber, isText, isArray, getNumber, getText and getArray combination.
	Traditional workaround:
	$Code$
	_cfg = configFile "CfgVehicles" _SomeAddonClassName "DestructionEffects" "Smoke1" "type"
	switch ( true ) do
	{
	case ( isNumber _cfg): { getNumber _cfg};
	case ( isText _cfg): { getText _cfg};
	case ( isArray _cfg): { getArray _cfg;};
	default {nil};
	};
	$/Code$
	Recommended workaround:
	$Code$
	( configFile "CfgVehicles" _SomeAddonClassName "DestructionEffects" "Smoke1" "type") call BIS_fnc_getCfgData ;
	$/Code$
	To return default value once entry was not found, we can use BIS_fnc_returnConfigEntry instead of BIS_fnc_getCfgData.
	$Code$
	[( configFile "CannonFire" "LightExp"),"lifeTime",0] call BIS_fnc_returnConfigEntry ;//0.5
	$/Code$
	To compose collected Number into Array, use BIS_fnc_getCfgDataArray instead.
	$Code$
	( configFile "CfgVehicles" _SomeAddonClassName "DestructionEffects" "Smoke1" "type") call BIS_fnc_getCfgDataArray ;
	$/Code$
	To retype collected Number into Boolean, use BIS_fnc_getCfgDataBool. Anything bigger than 0 is true, otherwise false.
	$Code$
	( configFile "CfgVehicles" _SomeAddonClassName "DestructionEffects" "Smoke1" "type") call BIS_fnc_getCfgDataBool ;
	$/Code$
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		setVehicleAmmoDef
	</Keyword>
	<Description>
		Sets how much ammunition (compared to the configuration of magazines defined in the vehicle's class) the vehicle has. Note that the ammo will only be added to local turrets. To check the locality of turret use turretLocal.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setVehicleAmmoDef
	</WikiPage>
	<Syntax>
		Object setVehicleAmmoDef Number
	</Syntax>
	<RawSyntax>
		unit setVehicleAmmoDef value
	</RawSyntax>
	<Example>
		$Code$player setVehicleAmmoDef 0;$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		(December 20, 2014)
	For vehicles this command operates relative to its stock magazine loadout (i.e. its CfgVehicles magazines[] values). Thus setVehicleAmmoDef 1 will fully restore a vehicle to its default ammunition capacity, resetting any changes made by intentionally/implicitly adding/removing magazines.
	Use setVehicleAmmo to operate in relation to a vehicle's current magazine loadout.
	-- Actium ( talk ) 22:49, 20 December 2014 (CET)
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		synchronizeTrigger
	</Keyword>
	<Description>
		Synchronizes the trigger with zero or more waypoints.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/synchronizeTrigger
	</WikiPage>
	<Syntax>
		Object synchronizeTrigger Array
	</Syntax>
	<RawSyntax>
		trigger synchronizeTrigger [waypoint1, waypoint2,]
	</RawSyntax>
	<Example>
		$Code$_trigger synchronizeTrigger []$/Code$
	</NextExample>
		$Code$_trigger synchronizeTrigger [_waypoint1]$/Code$
	</NextExample>
		$Code$_trigger synchronizeTrigger [_waypoint1, [_group5, 7], _waypoint3]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		displayCtrl
	</Keyword>
	<Description>
		Return child control with specified idc.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/displayCtrl
	</WikiPage>
	<Syntax>
		Display displayCtrl Number
	</Syntax>
	<RawSyntax>
		display displayCtrl idc
	</RawSyntax>
	<Example>
		$Code$_ChildControl = _ParentDisplay displayCtrl 101;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(May 1, 2017)
	Since Arma 3 1.42 you can also return a control inside a controls group using controlsGroupCtrl (created with ctrlCreate or inside a controls[] of a control config). Example:
	$Code$((uiNamespace getVariable "RscUnitInfo") displayCtrl 2303) controlsGroupCtrl 154; // Display - Controls Group - Control$/Code$
	Note that control inside controls group having -1 IDC currently cannot be returned in any way.
	</Note>
	<ReturnValue>
		Control
	</ReturnValue>

</NextListItem>

	<Keyword>
		humidity
	</Keyword>
	<Description>
		Returns the current humidity value. 0 is no humidity and 1 is 100% humidity. Humidity value quickly changes from 0 to 1 when rain starts, then slowly changes from 1 to 0 when rain stops.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/humidity
	</WikiPage>
	<Syntax>
		humidity
	</Syntax>
	<RawSyntax>
		humidity
	</RawSyntax>
	<Example>
		$Code$currentHumidity = humidity ;$/Code$
	</NextExample>
		$Code$skipTime -24;
	86400 setOvercast 1;
	skipTime 24;
	[] spawn {
	10 setRain 1;
	sleep 10;
	10 setRain 0;
	};
	onEachFrame {
	hintSilent str [ round ( rain * 10) / 10, round ( humidity * 10) / 10];
	};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		rank
	</Keyword>
	<Description>
		Returns the rank of the given unit. Rank can be one of the following:
	"PRIVATE"
	"CORPORAL"
	"SERGEANT"
	"LIEUTENANT"
	"CAPTAIN"
	"MAJOR"
	"COLONEL"
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/rank
	</WikiPage>
	<Syntax>
		rank Object
	</Syntax>
	<RawSyntax>
		rank unitName
	</RawSyntax>
	<Example>
		$Code$_rank = rank player;$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		scoreSide
	</Keyword>
	<Description>
		Returns score for the given side. MP Only.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/scoreSide
	</WikiPage>
	<Syntax>
		scoreSide Side
	</Syntax>
	<RawSyntax>
		scoreSide side
	</RawSyntax>
	<Example>
		$Code$_number = scoreSide west ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		diag_tickTime
	</Keyword>
	<Description>
		Real time spent from the start of the game. Expressed in fractions of second. Resolution of 1 tick is 1 ms.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/diag_tickTime
	</WikiPage>
	<Syntax>
		diag_tickTime
	</Syntax>
	<RawSyntax>
		diag_tickTime
	</RawSyntax>
	<Example>
		$Code$_start = diag_tickTime ;
	//code
	_stop = diag_tickTime ;
	diag_log format ["%1",_stop - _start];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(8 Sept, 2010)
	In Arma 2 Operation Arrowhead 1.54.0.72888 this returns the time in seconds since the game was started.
	</NextNote>
		(25 Jan, 2014)
	This command will return time since last client restart as float. However because of Number format used in Arma, the more time has past since restart the less precise the returned value will be.
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		selectWeapon
	</Keyword>
	<Description>
		Selects the given weapon.
	Note: For weapons that have more than one muzzle, you have to input the muzzlename and not the weaponName.
	The only weapons that have muzzleNames seem to be rifles with grenade launchers, handgrenades, smokeshells and satchels.
	In all other cases the weaponName must be used.
	Fortunately, in OFP, in most cases, both names are the same. But check.
	In ArmA the weaponNames and muzzleNames are different.
	For muzzle names see cfgWeapons.
	NOTE: The unit must be local to the PC on which command is executed.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/selectWeapon
	</WikiPage>
	<Syntax>
		Object selectWeapon String
	</Syntax>
	<RawSyntax>
		unitName selectWeapon muzzleName
	</RawSyntax>
	<Example>
		$Code$_soldier1 selectWeapon "LAWLauncher";$/Code$
	</NextExample>
		$Code$player selectWeapon "M203Muzzle";$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		(5 Aug, 2008)
	Rather than simply using selectWeapon to select your default weapon after adding them to your player, it is recommended you use a script instead similar to the following, which caters for multiple muzzles:
	SelectWeapon.sqf
	// Desc: select default weapon & handle multiple muzzles
	if (count weapons player 0) then
	{
	private['_type', '_muzzles'];
	_type = ((weapons player) select 0);
	// check for multiple muzzles (eg: GL)
	_muzzles = getArray(configFile "cfgWeapons" _type "muzzles");
	if (count _muzzles 1) then
	{
	player selectWeapon (_muzzles select 0);
	}
	else
	{
	player selectWeapon _type;
	};
	};
	</NextNote>
		(22 Mar, 2010)
	Can be used with primaryWeapon to select the primary weapon.
	An example with muzzle care (see Dr_EyeBall note) :
	if ( (primaryWeapon player) != "") then
	{
	private['_type', '_muzzles'];
	_type = primaryWeapon player;
	// check for multiple muzzles (eg: GL)
	_muzzles = getArray(configFile "cfgWeapons" _type "muzzles");
	if (count _muzzles 1) then
	{
	player selectWeapon (_muzzles select 0);
	}
	else
	{
	player selectWeapon _type;
	};
	};
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		diag_setLightNew
	</Keyword>
	<Description>
		Overrides currently used scene lightning. The operand is config that is placed as a string (not file). The changes may not be applied immediately, but can be forced by the call of simulWeatherSync.
	Command is only available when using Arma 3 Diagnostics Exe on Dev-Branch.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/diag_setLightNew
	</WikiPage>
	<Syntax>
		diag_setLightNew String
	</Syntax>
	<RawSyntax>
		diag_setLightNew config
	</RawSyntax>
	<Example>
		$Code$diag_setLightNew "sunOrMoon = 1; diffuse[] = { 0, 0, 0, 0 }; diffuseCloud[] = { 0, 0, 0, 0 }; ambient[] = { 0, 0, 0, 0 };... "$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		isServer
	</Keyword>
	<Description>
		Returns true if the machine (executing the command) is the server in a multiplayer game or is running single player. isServer will return true for both, dedicated server and player hosted. Dedicated server could be detected with isDedicated command. Hosted by player server can be detected by presense of UI: isServer && hasInterface
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isServer
	</WikiPage>
	<Syntax>
		isServer
	</Syntax>
	<RawSyntax>
		isServer
	</RawSyntax>
	<Example>
		$Code$if (! isServer ) exitWith {};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(April 8, 2011)
	You can use isServer inside the condition of a trigger to have the trigger activate only for the server. All other conditions for the trigger will be checked across all machines, but it will only activate the trigger created on the server. For example: $Code$this && isServer $/Code$
	</NextNote>
		(December 21, 2014)
	$Code$ if ( isDedicated ) then {
	//run on dedicated server only
	};
	if ( isServer ) then {
	//run on dedicated server or player host
	};
	if ( hasInterface ) then {
	//run on all player clients incl. player host
	};
	if (! isDedicated ) then {
	//run on all player clients incl. player host and headless clients
	};
	if (! isServer ) then {
	//run on all player clients incl. headless clients but not player host
	};
	if (! hasInterface ) then {
	//run on headless clients and dedicated server
	};
	if (! hasInterface && ! isDedicated ) then {
	//run on headless clients only
	};$/Code$
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		isAgent
	</Keyword>
	<Description>
		Check if team member is an agent.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isAgent
	</WikiPage>
	<Syntax>
		isAgent Team_Member
	</Syntax>
	<RawSyntax>
		isAgent teamMember
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(May 19, 2017)
	One can check if a unit is an agent via
	$Code$ isAgent teamMember _unit$/Code$
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		allVariables
	</Keyword>
	<Description>
		Returns a list of all variables from desired namespace. Namespaces supported:
	Control
	Team_Member
	Namespace
	Object
	Group
	Task
	Location
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/allVariables
	</WikiPage>
	<Syntax>
		allVariables Control/Team_Member
	</Syntax>
	<RawSyntax>
		allVariables namespace
	</RawSyntax>
	<Example>
		$Code$_allVarsUINamespace = allVariables uiNamespace ;$/Code$
	</NextExample>
		$Code$_allVarsTrigger = allVariables trigger1;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(June 11, 2016)
	Using profileNamespace and uiNamespace with this command has been disabled in multiplayer. [1]
	</NextNote>
		(October 1, 2016)
	One still can use allVariables in Multiplayer against profileNamespace and uiNamespace using config parser. In Description.ext
	$Code$_EXEC(somevar = allVariables profileNamespace)$/Code$
	in code
	$Code$_allprofilevars = parsingNamespace getVariable "somevar"$/Code$
	but list will be valid only at the moment of parsing config.
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		taskParent
	</Keyword>
	<Description>
		Return the parent task of the specified task.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/taskParent
	</WikiPage>
	<Syntax>
		taskParent Task
	</Syntax>
	<RawSyntax>
		taskParent task
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Task
	</ReturnValue>

</NextListItem>

	<Keyword>
		landResult
	</Keyword>
	<Description>
		Return the result of helicopter landing position searching (performed, after land command). The value can be "Found" (position found),"NotFound" (position not found), "NotReady" (position searching is,still in progress) or empty string when wrong argument given.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/landResult
	</WikiPage>
	<Syntax>
		landResult Object
	</Syntax>
	<RawSyntax>
		landResult helicopter
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlSetAutoScrollDelay
	</Keyword>
	<Description>
		Sets number of second before auto-scroll starts/rewinds. Setter for ctrlAutoScrollDelay.
	Autorscroll is available for CT_LISTBOX and CT_CONTROLS_GROUP types of controls only. Autoscroll will wait ctrlAutoScrollDelay seconds (must be 0) and then will scroll the scroll bar down to the bottom. ctrlAutoScrollSpeed defines the speed with which scrollbar is scrolled. If ctrlAutoScrollRewind is true, the control will fade out, immediately rewind to the top, then fade in, wait ctrlAutoScrollDelay seconds and then repeat the scrolling in a loop. If user focuses on the control, autoscrolling is interrupted.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlSetAutoScrollDelay
	</WikiPage>
	<Syntax>
		Control ctrlSetAutoScrollDelay Number
	</Syntax>
	<RawSyntax>
		control ctrlSetAutoScrollDelay delay
	</RawSyntax>
	<Example>
		$Code$_ctrlGroup ctrlSetAutoScrollDelay 5;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		vestContainer
	</Keyword>
	<Description>
		Returns a cargo container of a unit's vest.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/vestContainer
	</WikiPage>
	<Syntax>
		vestContainer Object
	</Syntax>
	<RawSyntax>
		vestContainer unit
	</RawSyntax>
	<Example>
		$Code$hint str vestContainer player ; //2df7d600# 163942: dummyweapon.p3d$/Code$
	</NextExample>
		$Code$hint str getMagazineCargo vestContainer player ;
	// [
	//[
	//"30Rnd_65x39_caseless_mag",
	//"16Rnd_9x21_Mag",
	//"HandGrenade",
	//"APERSMine_Range_Mag",
	//"SmokeShell",
	//"SmokeShellGreen",
	//"Chemlight_green"
	//],[
	//2,
	//2,
	//2,
	//3,
	//1,
	//1,
	//2
	//]
	//]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Object
	</ReturnValue>

</NextListItem>

	<Keyword>
		deleteCollection
	</Keyword>
	<Description>
		Delete a collection. As example, used with a soldier, it'll hide the ingame model.
	When targetting ArmA 2 1.06 or newer, use hideObject instead. This function is a relic from dynamic building destruction development. It is left only for compatibility with scripts created before ArmA 2 1.06, and its functionality may be changed or removed in the future.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/deleteCollection
	</WikiPage>
	<Syntax>
		deleteCollection Object
	</Syntax>
	<RawSyntax>
		deleteCollection object
	</RawSyntax>
	<Example>
		$Code$deleteCollection unitName;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(August 20, 2014)
	In Arma 3 deleteCollection is alias for hideObject
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		ropeUnwind
	</Keyword>
	<Description>
		Unwind rope to target length. Use relative parameter for changing rope length +/- from current length
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ropeUnwind
	</WikiPage>
	<Syntax>
		ropeUnwind Array
	</Syntax>
	<RawSyntax>
		ropeUnwind [rope, speed, targetLength, relative]
	</RawSyntax>
	<Example>
		$Code$ropeUnwind [ ropes heli1 select 0, 3, 10];//set rope length to 10m at 3m/s$/Code$
	</NextExample>
		$Code$ropeUnwind [ ropes heli1 select 0, 3, -5, true];//decrease rope length by 5m at 3m/s$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(November 8, 2014)
	Unwinding speed is not linear but instead automatically accelerates at the beginning and slows down at the end.
	The speed also only seems to have no effect when pulling the rope in. (unless the end of the rope is not attached to anything)
	High unwinding speeds (over ~250) can cause your cargo to get stuck in midair.
	</NextNote>
		(January 4, 2015)
	Rope length limits are between 0.5 and 100 meters.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		lbSetPictureRightColorDisabled
	</Keyword>
	<Description>
		Sets the disabled color of second (right aligned) picture of the item with the given index of the listbox with id idc of the topmost user dialog to the given color. Color is in format Color. Color which consists from only zeros means disable this override.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lbSetPictureRightColorDisabled
	</WikiPage>
	<Syntax>
		lbSetPictureRightColorDisabled Array
	</NextSyntax>
		Control lbSetPictureRightColorDisabled Array
	</Syntax>
	<RawSyntax>
		lbSetPictureRightColorDisabled [idc, index, color]
	</NextRawSyntax>
		control lbSetPictureRightColorDisabled [index, color]
	</RawSyntax>
	<Example>
		$Code$lbSetPictureRightColorDisabled [101, 0, [1, 1, 1, 0.25]];$/Code$
	</NextExample>
		$Code$_ctrl lbSetPictureRightColorDisabled [0, [1, 1, 1, 0.25]];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		More information on the LB command family can be found here
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setTaskState
	</Keyword>
	<Description>
		Set the state of a given task.
	State value may be one of:
	"None"
	"Created"
	"Assigned"
	"Succeeded"
	"Failed"
	"Canceled"
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setTaskState
	</WikiPage>
	<Syntax>
		Task setTaskState String
	</Syntax>
	<RawSyntax>
		task setTaskState state
	</RawSyntax>
	<Example>
		$Code$_tskKillSpongebob setTaskState "Succeeded";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		getVehicleCargo
	</Keyword>
	<Description>
		Get a list of vehicles loaded as cargo inside this vehicle. The returned array is in the order the cargo vehicles were added to containing vehicle.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getVehicleCargo
	</WikiPage>
	<Syntax>
		getVehicleCargo Object
	</Syntax>
	<RawSyntax>
		getVehicleCargo storingVehicle
	</RawSyntax>
	<Example>
		$Code$_vehicleCargo = getVehicleCargo blackfish; // returns [] if empty$/Code$
	</NextExample>
		$Code$_vehicleCargo = getVehicleCargo blackfish; // returns [quad_3, quad_1, quad_2] as they were loaded in this order$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		showCommandingMenu
	</Keyword>
	<Description>
		Create the commanding menu described by the given config class or menu name. When the name is empty, the current menu is hidden.
	If commanding menu has "expression" set up, the expression will receive the following arguments when user activated the menu item:
	Local variable _target : Object - Target under the cursor. This works in both 3D and 2D (when cursor is over the unit icon on the map).
	Local variable _pos : Array - Cursor position.
	Local variable _is3D : Boolean - false if cursor is over the map, otherwise true.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/showCommandingMenu
	</WikiPage>
	<Syntax>
		showCommandingMenu String
	</Syntax>
	<RawSyntax>
		showCommandingMenu name
	</RawSyntax>
	<Example>
		$Code$showCommandingMenu "";$/Code$
	</NextExample>
		$Code$showCommandingMenu "MyClassName";$/Code$
	</NextExample>
		$Code$showCommandingMenu "#USER:Tag_Menu_myMenu_0";$/Code$
	</NextExample>
		$Code$showCommandingMenu "RscMainMenu";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(July 22nd, 2012)
	//This script will create a custom menu, and display it once.
	MY_SUBMENU_inCommunication =
	[
	["User submenu",true],
	["Option-1", [2], "", -5, [["expression", "player sidechat ""-1"" "]], "0", "0", "\ca\ui\data\cursor_support_ca"],
	["Option 0", [3], "", -5, [["expression", "player sidechat "" 0"" "]], "1", "0", "\ca\ui\data\cursor_support_ca"],
	["Option 1", [4], "", -5, [["expression", "player sidechat "" 1"" "]], "1", "CursorOnGround", "\ca\ui\data\cursor_support_ca"]
	];
	MY_MENU_inCommunication =
	[
	// First array: "User menu" This will be displayed under the menu, bool value: has Input Focus or not.
	// Note that as to version Arma2 1.05, if the bool value set to false, Custom Icons will not be displayed.
	["User menu",false],
	// Syntax and semantics for following array elements:
	// ["Title_in_menu", [assigned_key], "Submenu_name", CMD, [["expression",script-string]], "isVisible", "isActive", optional icon path ]
	// Title_in_menu: string that will be displayed for the player
	// Assigned_key: 0 - no key, 1 - escape key, 2 - key-1, 3 - key-2,..., 10 - key-9, 11 - key-0, 12 and up... the whole keyboard
	// Submenu_name: User menu name string (eg "#USER:MY_SUBMENU_NAME" ), "" for script to execute.
	// CMD: (for main menu:) CMD_SEPARATOR -1; CMD_NOTHING -2; CMD_HIDE_MENU -3; CMD_BACK -4; (for custom menu:) CMD_EXECUTE -5
	// script-string: command to be executed on activation. (no arguments passed)
	// isVisible - Boolean 1 or 0 for yes or no, - or optional argument string, eg: "CursorOnGround"
	// isActive - Boolean 1 or 0 for yes or no - if item is not active, it appears gray.
	// optional icon path: The path to the texture of the cursor, that should be used on this menuitem.
	["First", [0], "", -5, [["expression", "player sidechat ""First"" "]], "1", "1"],
	["Second", [2], "", -5, [["expression", "player sidechat ""Second"" "]], "1", "1"],
	["Submenu", [3], "#USER:MY_SUBMENU_inCommunication", -5, [["expression", "player sidechat ""Submenu"" "]], "1", "1"]
	];
	showCommandingMenu "#USER:MY_MENU_inCommunication";
	// Appendix, list of optional argument strings
	HasRadio
	CanAnswer
	IsLeader
	IsAlone
	IsAloneInVehicle
	IsCommander
	VehicleCommander
	CommandsToGunner
	CommandsToPilot
	NotEmpty
	NotEmptySoldiers
	NotEmptyCommanders
	NotEmptyMainTeam
	NotEmptyRedTeam
	NotEmptyGreenTeam
	NotEmptyBlueTeam
	NotEmptyYellowTeam
	NotEmptySubgroups
	NotEmptyInVehicle
	SelectedTeam
	SelectedUnit
	FuelLow
	AmmoLow
	Injured
	Multiplayer
	AreActions
	CursorOnGroupMember
	CursorOnHoldingFire
	CursorOnEmptyVehicle
	CursorOnVehicleCanGetIn
	CursorOnFriendly
	CursorOnEnemy
	CursorOnGround
	CanSelectUnitFromBar
	CanDeselectUnitFromBar
	CanSelectVehicleFromBar
	CanDeselectVehicleFromBar
	CanSelectTeamFromBar
	CanDeselectTeamFromBar
	FormationLine
	FormationDiamond
	SomeSelectedHoldingFire
	PlayableLeader
	PlayableSelected
	IsWatchCommanded
	IsSelectedToAdd
	HCIsLeader
	HCCursorOnIcon
	HCCursorOnIconSelectable
	HCCanSelectUnitFromBar
	HCCanDeselectUnitFromBar
	HCCanSelectTeamFromBar
	HCCanDeselectTeamFromBar
	HCNotEmpty
	PlayerVehicleCanGetIn
	IsXbox
	IsTeamSwitch
	CursorOnNotEmptySubgroups
	SomeSelectedHaveTarget
	CursorOnGroupMemberSelected
	HCCursorOnIconSelectableSelected
	HCCursorOnIconenemy
	PlayerOwnRadio
	CursorOnNeedFirstAID
	CursorOnNeedHeal
	</NextNote>
		(July 23, 2016)
	You can combine the argument strings (see the above note) together to create OR conditions.
	Hence $Code$"HasRadioIsLeader"$/Code$ is true when the unit is a leader or has a radio.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		confirmSensorTarget
	</Keyword>
	<Description>
		Sets for which Side the entity becomes a "confirmed hostile" target - a target that becomes highlighted red on the sensors display.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/confirmSensorTarget
	</WikiPage>
	<Syntax>
		Object confirmSensorTarget Array
	</Syntax>
	<RawSyntax>
		vehicle confirmSensorTarget [side, isConfirmed]
	</RawSyntax>
	<Example>
		$Code$( vehicle player ) confirmSensorTarget [ west, true ];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		listRemoteTargets
	</Keyword>
	<Description>
		Return list of datalink targets and time for which they will be/were known
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/listRemoteTargets
	</WikiPage>
	<Syntax>
		listRemoteTargets Side
	</Syntax>
	<RawSyntax>
		listRemoteTargets side
	</RawSyntax>
	<Example>
		$Code$listRemoteTargets east;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		addCuratorPoints
	</Keyword>
	<Description>
		Adds or removes curator points. Points can be only in range from 0 to 1.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/addCuratorPoints
	</WikiPage>
	<Syntax>
		Object addCuratorPoints Number
	</Syntax>
	<RawSyntax>
		curatorObj addCuratorPoints points
	</RawSyntax>
	<Example>
		$Code$curatorModule addCuratorPoints 0.5$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		isStreamFriendlyUIEnabled
	</Keyword>
	<Description>
		Returns the status of STREAM FRIENDLY UI setting in UI (OPTIONS GAME GENERAL STREAM FRIENDLY UI).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isStreamFriendlyUIEnabled
	</WikiPage>
	<Syntax>
		isStreamFriendlyUIEnabled
	</Syntax>
	<RawSyntax>
		isStreamFriendlyUIEnabled
	</RawSyntax>
	<Example>
		$Code$hint str isStreamFriendlyUIEnabled ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		triggerTimeoutCurrent
	</Keyword>
	<Description>
		Returns trigger timeout or -1 if countdown is not in progress.
	Note: The trigger could be local or remote but the result returned by this command will be for the trigger condition set up locally on the client that executed the command. See createTrigger for more info.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/triggerTimeoutCurrent
	</WikiPage>
	<Syntax>
		triggerTimeoutCurrent Object
	</Syntax>
	<RawSyntax>
		triggerTimeoutCurrent trigger
	</RawSyntax>
	<Example>
		$Code$_remaining = triggerTimeoutCurrent _trigger;$/Code$
	</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
		(November 26, 2013)
	Triggers have their own schedule. If you create a trigger with timeout and try to read triggerTimeoutCurrent immediately it will return -1. This is because the countdown will not start until the next scheduled trigger check is due, and this could take up to 0.5 seconds.
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		waypointTimeout
	</Keyword>
	<Description>
		Gets the waypoint timeout values.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/waypointTimeout
	</WikiPage>
	<Syntax>
		waypointTimeout Array
	</Syntax>
	<RawSyntax>
		waypointTimeout waypoint
	</RawSyntax>
	<Example>
		$Code$waypointTimeout [groupOne,1]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		clearMagazinePool
	</Keyword>
	<Description>
		Remove all magazines from the magazine pool, of which the player may choose in the following missions. Available in campaigns only.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/clearMagazinePool
	</WikiPage>
	<Syntax>
		clearMagazinePool
	</Syntax>
	<RawSyntax>
		clearMagazinePool
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		lnbCurSelRow
	</Keyword>
	<Description>
		Returns the index of the selected row id 2D listbox.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lnbCurSelRow
	</WikiPage>
	<Syntax>
		lnbCurSelRow Number
	</NextSyntax>
		lnbCurSelRow Control
	</Syntax>
	<RawSyntax>
		lnbCurSelRow idc
	</NextRawSyntax>
		lnbCurSelRow ctrl
	</RawSyntax>
	<Example>
		$Code$lnbCurSelRow _ctrl;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(Sep 9 2014)
	(A3 1.28)As for invisible data processing, lnbAddArray, lnbAddColumn, lnbData, lnbGetColumnsPosition, lnbSetColumnsPos, lnbSetData, lnbSetText, lnbSetValue, lnbText and lnbValue store data types into exact position of the listNbox with different spaces. Accessing data with coordinate command at nearly the same syntax:
	$Code$
	//Set same value to one position of a Control
	_ctrl lnbSetData [ [0,0],"#1"];
	lnbSetColumnsPos [102, [0,1], 1];
	_ctrl lnbSetText [ [0,1], "#1"];
	_ctrl lnbSetValue [ [0,0],1];
	//Accessing the value disregard affecting one another.
	_ctrl lnbData [0,0]; //"#1"
	lnbGetColumnsPosition _ctrl //[1];
	_ctrl lnbText [0,0];//"#1"
	_ctrl lnbValue [0,0];//1
	$/Code$
	For a direct visible control over CT_LISTNBOX:
	$Code$
	0 = [_CT_LISTNBOX] spawn {
	private ["_CT_LISTNBOX","_color","_current","_pic"];
	disableSerialization ;
	_CT_LISTNBOX = _this select 0;
	{
	_CT_LISTNBOX lnbAddRow [ getText (_x "displayNameShort"), getText (_x "displayName")];
	_CT_LISTNBOX lnbSetPicture [ [_foreachIndex,0], getText (_x "texture")];
	} forEach (" isClass _x" configClasses ( configFile "CfgRanks"));
	_CT_LISTNBOX lnbSetCurSelRow 0;
	_current = lnbCurSelRow _CT_LISTNBOX;
	_color = _CT_LISTNBOX lnbColor [_current,0];
	_CT_LISTNBOX lnbSetColor [ [_current,1], [(_color select 0)/2,0,0,1] ];
	_CT_LISTNBOX lnbDeleteColumn 0;
	_CT_LISTNBOX lnbDeleteRow 1;
	sleep 1;
	lnbClear _CT_LISTNBOX;//Clear all items but control still remains just invisible.
	};
	$/Code$
	A combined use of both invisible and visible data processing commands alive the Control.
	</Note>
	<ReturnValue>
		Number - Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		drawIcon3D
	</Keyword>
	<Description>
		Draws an ingame icon at a given position. Command has to be executed each frame. Use onEachFrame or addMissionEventHandler "Draw3D"
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/drawIcon3D
	</WikiPage>
	<Syntax>
		drawIcon3D Array
	</Syntax>
	<RawSyntax>
		drawIcon3D [texture, color, pos, width, height, angle, text, shadow, textSize, font, textAlign, drawSideArrows]
	</RawSyntax>
	<Example>
		$Code$// Icon and text:
	onEachFrame {
	drawIcon3D ["targetIcon.paa", [1,1,1,1], getPos cursorTarget, 1, 1, 45, "Target", 1, 0.05, "TahomaB"];
	};$/Code$
	</NextExample>
		$Code$// Just text:
	addMissionEventHandler ["Draw3D", {
	drawIcon3D ["", [1,0,0,1], position cursorTarget, 0, 0, 0, "Target", 1, 0.05, "PuristaMedium"];
	}];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(August 31, 2013)
	As command syntax indicates, this command expects icon position in format PositionAGL meaning that over the land it expects PositionATL and over the sea PositionASLW. Use additional ASLToAGL if needed.
	To draw smooth moving icon for a moving object use visiblePosition and visiblePositionASL accordingly.
	This command works well with addon textures, however getting it to display mission textures is a bit tricky. Follow this guide.
	</NextNote>
		(April 19, 2014)
	You should rely exclusively on modelToWorldVisual for a moving object's icon position if you want it to accurately stay at the correct height over the sea.
	Width, height, and textSize are proportional to the user's interface size, which can optionally be compensated against via size / ( getResolution select 5)
	Additionally, width and height are inversely proportional to the fovLeft and fovTop parameters from the user's ArmaProfile, and AFAIK those parameters are not retrievable via scripting. For example, a fovTop higher than the default value of 0.75 will make all 3D icons smaller vertically. I'm not sure if this is a bug or by design, however it is definitely annoying to take into account.
	</NextNote>
		(October 23, 2014)
	drawIcon3D and BIS_fnc_addStackedEventHandler work well together.
	Using formatting commands with drawIcon3D will not work, instead, they will be added to the string.
	$Code$["uniqueID", "onEachFrame",
	{
	drawIcon3D["myIcon.jpg", [1,1,1,0.5], getPos player, 1, 1, 0, format["%1\n%2", "Dreaded", "Entity"]];
	}] call BIS_fnc_addStackedEventHandler;$/Code$
	Shown text will be Dreaded\nEntity. (A3 1.32.127785)
	The "text" parameter must be a string. You cannot use Structured_Text.
	$Code$["uniqueID", "onEachFrame",
	{
	drawIcon3D
	[
	"myIcon.jpg",
	[1,1,1,0.5],
	getPos player,
	1,
	1,
	0,
	parseText format[" t size='1.25' font='PuristaLight' color='#ff0000' %1%2 /t ", Dreaded, Entity]
	];
	}] call BIS_fnc_addStackedEventHandler;$/Code$
	(A3 1.32.127785)
	</NextNote>
		(November 13 (2014))
	Here's a practical example combining both drawLine3D and drawIcon3D. Note: You may want to use visiblePosition instead of getPos for moving objects.
	$Code$DEADPILOTS = [];
	{
	if (getText (configfile "CfgVehicles" typeOf _x "textSingular") == "pilot") then {
	DEADPILOTS pushBack _x;
	};
	} forEach allDeadMen;
	addMissionEventHandler ["Draw3D", {
	if (
	{
	player distance _x = 15
	} count DEADPILOTS 0
	) then {
	{
	_corpsePos = getPos _x;
	if (player distance _corpsePos = 15) then {
	_line1_start = _corpsePos;
	_line1_end = [(_line1_start select 0), (_line1_start select 1), 0.5];
	_line2_start = [(_line1_end select 0), (_line1_end select 1) + 0.5, (_line1_end select 2)];
	drawLine3D [_line1_start, _line1_end, [0,0,0,0.5]];
	drawLine3D [_line1_end, _line2_start, [0,0,0,0.5]];
	drawIcon3D ["\a3\ui_f\data\gui\cfg\hints\BasicLook_ca.paa", [0,0,0,0.5], _line2_start, 0.75, 0.75, 0];
	};
	} forEach DEADPILOTS;
	};
	}];
	$/Code$
	</NextNote>
		(April 11, 2015)
	Doesn't work when showHUD false, textAlign is broken, drawSideArrows will turn if angle is not 0 [1]
	</NextNote>
		(February 11, 2016)
	You can also use getPosWorld (for X and Y only, but not Z), which works splendid in script performance. Here is an example:
	$Code$addMissionEventHandler ["Draw3D", { _pos = getPosWorld player; drawIcon3D ["a3\ui_f\data\gui\Rsc\RscDisplayArsenal\radio_ca.paa", [1,1,1,1], [(_pos select 0),(_pos select 1), 1], 0.8, 0.8, 0, (name player), 1, 0.0315, "EtelkaMonospacePro"]; }];$/Code$
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		shownUAVFeed
	</Keyword>
	<Description>
		Returns true if video feed transmitted from UAV is shown. A getter for showUAVFeed
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/shownUAVFeed
	</WikiPage>
	<Syntax>
		shownUAVFeed
	</Syntax>
	<RawSyntax>
		shownUAVFeed
	</RawSyntax>
	<Example>
		$Code$_bool = shownUAVFeed ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		vectorMagnitude
	</Keyword>
	<Description>
		Magnitude of a 3D vector.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/vectorMagnitude
	</WikiPage>
	<Syntax>
		vectorMagnitude Array
	</Syntax>
	<RawSyntax>
		vectorMagnitude vector
	</RawSyntax>
	<Example>
		$Code$_size = vectorMagnitude [0,3,4]; //5$/Code$
	</NextExample>
		$Code$_speed = vectorMagnitude velocity player ; // return velocity of player in m/s
	_speed = ( vectorMagnitude velocity player ) * 3.6; // return velocity of player in Km/h
	_speed = ( vectorMagnitude velocity player ) * 2.23694; // return velocity of player in mph$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(28 Jun, 2014)
	(ArmA3 1.22)Algorithm:
	$Code$
	Vector = [x,y,z];
	Result = sqrt ((x ^ 2) + (y ^ 2) + (z ^ 2))
	$/Code$
	It is recommended to use vectorMagnitude instead of BIS_fnc_magnitude.
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		handgunWeapon
	</Keyword>
	<Description>
		Returns the name of a unit's handgun (an empty string if there is none).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/handgunWeapon
	</WikiPage>
	<Syntax>
		handgunWeapon Object
	</Syntax>
	<RawSyntax>
		handgunWeapon unit
	</RawSyntax>
	<Example>
		$Code$hint handgunWeapon player ; //"hgun_P07_F"$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		set
	</Keyword>
	<Description>
		Changes the element at the given (zero-based) index of the array.
	If the element does not exist, resize index+1 is called to create it.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/set
	</WikiPage>
	<Syntax>
		Array set Array
	</Syntax>
	<RawSyntax>
		array set [index, value]
	</RawSyntax>
	<Example>
		$Code$_arrayOne set [0, "Hello"];$/Code$
	</NextExample>
		$Code$_arrayTwo set [ count _arrayTwo, "Bye"];
	// appends "Bye" as last element to _arrayTwo$/Code$
	</NextExample>
		$Code$_arrayThree set [( count _arrayThree) - 1, 23];
	// replaces the last element of _arrayTwo with 23$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		set3DENLogicType
	</Keyword>
	<Description>
		Sets the new type of Logic object(s). For other objects use set3DENObjectType
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/set3DENLogicType
	</WikiPage>
	<Syntax>
		Array set3DENLogicType String
	</Syntax>
	<RawSyntax>
		objects set3DENLogicType classname
	</RawSyntax>
	<Example>
		$Code$[ get3DENSelected "logic" select 0] set3DENLogicType "MiscOR_F";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setAmmo
	</Keyword>
	<Description>
		Sets custom ammo count in the currently loaded magazine of the specified weapon. The unit must be local to the computer where command is executed.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setAmmo
	</WikiPage>
	<Syntax>
		Object setAmmo Array
	</Syntax>
	<RawSyntax>
		unit setAmmo [weapon, count]
	</RawSyntax>
	<Example>
		$Code$// Set player's handgun magazine ammo count to 10 rounds:
	player setAmmo [ handgunWeapon player, 10];$/Code$
	</NextExample>
		$Code$// Set player's current weapon magazine ammo count to 1 round:
	player setAmmo [ currentWeapon player, 1];$/Code$
	</NextExample>
		$Code$// If player is a gunner in a vehicle, set current weapon magazine ammo count to 5 rounds:
	if ( local vehicle player ) then {
	vehicle player setAmmo [ currentWeapon vehicle player, 5];
	} else {
	hint "Vehicle must be local to this machine for 'setAmmo' to work";
	};$/Code$
	</NextExample>
		$Code$// If you try to set more ammo than the magazine can hold, it will be clipped at default magazine capacity:
	player setAmmo [ primaryWeapon player, 1000000]; //full mag with default ammo count$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		assignedTarget
	</Keyword>
	<Description>
		Returns the target assigned to the vehicle/unit. To unassign the target use doWatch objNull or commandWatch objNull.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/assignedTarget
	</WikiPage>
	<Syntax>
		assignedTarget Object
	</Syntax>
	<RawSyntax>
		assignedTarget vehicleName
	</RawSyntax>
	<Example>
		$Code$_target = assignedTarget _T72$/Code$
	</Example>
	<Locality>
		local / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Object
	</ReturnValue>

</NextListItem>

	<Keyword>
		createGearDialog
	</Keyword>
	<Description>
		Opens gear dialog for given unit. Alternatively use action command:
	$Code$ player action ["Gear", player ];$/Code$
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/createGearDialog
	</WikiPage>
	<Syntax>
		createGearDialog Array
	</Syntax>
	<RawSyntax>
		createGearDialog [unit, resource]
	</RawSyntax>
	<Example>
		$Code$createGearDialog [player];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		leaderboardsRequestUploadScoreKeepBest
	</Keyword>
	<Description>
		Starts async. operation to upload score to board with given name, value is only stored to board if it's better than one already in the board. The details array is optional. The board has to be initialized before the call.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/leaderboardsRequestUploadScoreKeepBest
	</WikiPage>
	<Syntax>
		leaderboardsRequestUploadScoreKeepBest Array
	</Syntax>
	<RawSyntax>
		leaderboardsRequestUploadScoreKeepBest [boardName, score, [details]]
	</RawSyntax>
	<Example>
		$Code$leaderboardsRequestUploadScoreKeepBest ["TT01", 1234, [5,6,7,8]]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		fadeSound
	</Keyword>
	<Description>
		Changes the sound volume smoothly within the given time.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/fadeSound
	</WikiPage>
	<Syntax>
		Number fadeSound Number
	</Syntax>
	<RawSyntax>
		time fadeSound volume
	</RawSyntax>
	<Example>
		$Code$5 fadeSound 0$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
		(January 19, 2010)
	This command doesn't work, in Arma 2 1.05.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		tvValue
	</Keyword>
	<Description>
		Returns scalar data from item on given path. IDC means id of parent Tree View.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/tvValue
	</WikiPage>
	<Syntax>
		tvValue Array
	</NextSyntax>
		Control tvValue Array
	</Syntax>
	<RawSyntax>
		tvValue [idc, [path]]
	</NextRawSyntax>
		_ctrl tvValue [path]
	</RawSyntax>
	<Example>
		$Code$tvValue [101, [0]];$/Code$
	</NextExample>
		$Code$_ctrl tvValue [0,0,0];$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
		(Sep 11 2014)
	(A3 1.28)tv command family overview
	$Code$
	//tv command family available for CT_TREE (type 12)
	private ["_count","_current","_data","_text","_value","_pic"];
	_CT_TREE tvAdd [ [],"Parent_A"];
	_CT_TREE tvAdd [ [0],"Child_A"];
	_CT_TREE tvAdd [ [0,0],"Grandchild_A"];
	_CT_TREE tvAdd [ [],"Parent_B"];
	_CT_TREE tvAdd [ [1],"Child_B"];
	_count = _CT_TREE tvCount []; //return 2
	_CT_TREE tvSetCurSel [0,0,0]; //select grandchild_A
	_current = tvCurSel _CT_TREE; //return [0,0,0]
	_CT_TREE tvSetData [_current,"I'm grandchild_A"];
	_data = _CT_TREE tvData _current; // "I'm grandchild_A"
	_text = _CT_TREE tvText _current; //"Grandchild_A"
	_CT_TREE tvSetValue [_current,14];
	_value = _CT_TREE tvValue _current; // 14
	_CT_TREE tvSetPicture [_current, getText ( configFile "CfgWeapons" "optic_NVS" "picture")];
	_pic = _CT_TREE tvPicture _current;
	_CT_TREE tvExpand [1];
	_CT_TREE tvSort [[], false ];
	_CT_TREE tvSortByValue [[], false ];
	_CT_TREE tvDelete [0,0]; //remove child_b
	tvClear 12;
	_CT_TREE tvCollapse [];
	$/Code$
	</Note>
	<ReturnValue>
		Number - Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		isObjectHidden
	</Keyword>
	<Description>
		Checks visibility of a given object on the local machine.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isObjectHidden
	</WikiPage>
	<Syntax>
		isObjectHidden Object
	</Syntax>
	<RawSyntax>
		isObjectHidden object
	</RawSyntax>
	<Example>
		$Code$_bobIsHidden = isObjectHidden bob;$/Code$
	</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		get3DENCamera
	</Keyword>
	<Description>
		Returns the camera Object used by the Eden Editor.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/get3DENCamera
	</WikiPage>
	<Syntax>
		get3DENCamera
	</Syntax>
	<RawSyntax>
		get3DENCamera
	</RawSyntax>
	<Example>
		$Code$// set exact yaw, pitch, and roll
	_y = 45; _p = -80; _r = 0;
	get3DENCamera setVectorDirAndUp [
	[ sin _y * cos _p, cos _y * cos _p, sin _p],
	[ [ sin _r,- sin _p, cos _r * cos _p],-_y] call BIS_fnc_rotateVector2D
	];$/Code$
	</NextExample>
		$Code$//Look at player
	_a = positionCameraToWorld [0,0,0] vectorFromTo ( getPosATL player );
	_y = asin (_a select 0);
	_b = [_a,_y] call BIS_fnc_rotateVector2D ;
	_z = _b select 2;
	_p = asin (_z / sqrt ((_b select 1)^2 + _z^2));
	get3DENCamera setVectorDirAndUp [
	_a,
	[ [0,- sin _p, cos _p],-_y] call BIS_fnc_rotateVector2D
	];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Object
	</ReturnValue>

</NextListItem>

	<Keyword>
		setStaminaScheme
	</Keyword>
	<Description>
		Set stamina bar color. The scheme can be "Normal", "FastDrain", "Exhausted" or "Default".
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setStaminaScheme
	</WikiPage>
	<Syntax>
		setStaminaScheme String
	</Syntax>
	<RawSyntax>
		setStaminaScheme scheme
	</RawSyntax>
	<Example>
		$Code$setStaminaScheme "Default";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		cbChecked
	</Keyword>
	<Description>
		Returns the current state of a checkbox (CT_CHECKBOX type 77 of Dialog Control ).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/cbChecked
	</WikiPage>
	<Syntax>
		cbChecked Control
	</Syntax>
	<RawSyntax>
		cbChecked control
	</RawSyntax>
	<Example>
		$Code$_checked = cbChecked _myCheckBox;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		showScoretable
	</Keyword>
	<Description>
		Forces the score table to be shown, hidden or reset to default functionality. Forcing score table will make it show even in SP. When score table is forced opened it cannot be closed manually, when it is force closed, it cannot be opened manually.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/showScoretable
	</WikiPage>
	<Syntax>
		showScoretable Number
	</Syntax>
	<RawSyntax>
		showScoretable force
	</RawSyntax>
	<Example>
		$Code$showScoretable 1;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		unassignTeam
	</Keyword>
	<Description>
		Unassigns the unit (in the case of a vehicle its commander unit) from his team. This is equal to unit assignTeam "MAIN".
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/unassignTeam
	</WikiPage>
	<Syntax>
		unassignTeam Object
	</Syntax>
	<RawSyntax>
		unassignTeam vehicleName
	</RawSyntax>
	<Example>
		$Code$unassignTeam _soldier2$/Code$
	</Example>
	<Locality>
		local / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		language
	</Keyword>
	<Description>
		Returns current game language.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/language
	</WikiPage>
	<Syntax>
		language
	</Syntax>
	<RawSyntax>
		language
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		do
	</Keyword>
	<Description>
		Executes code. Used as part of construct, such as while, with, for and switch. The code is always executed in missionNamespace unless do is used with with as an argument.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/do
	</WikiPage>
	<Syntax>
		While_Type/With_Type/For_Type/Switch_Type do Code
	</Syntax>
	<RawSyntax>
		construct do code
	</RawSyntax>
	<Example>
		$Code$while {b a} do {a = a + 1};$/Code$
	</NextExample>
		$Code$// A practical example: Repair all members of a group to such a level that they are able to stand up:
	{
	while {! canStand _x && alive _x } do {
	_x setDamage ( damage _x - 0.01);
	};
	} forEach units group unitname;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Anything
	</ReturnValue>

</NextListItem>

	<Keyword>
		setTerrainGrid
	</Keyword>
	<Description>
		Operation Flashpoint, VBS1 : Set desired terrain resolution (in meters).
	For default landscapes, supported resolutions are:
	50 - smoothest, less lag
	25 - default in multiplayer
	12.5 - default in singleplayer
	6.25
	3.125 - bumpiest, higher lag
	If you select unsupported resolutions, nearest supported value is used instead.
	Armed Assault, VBS2 : Terrain resolution is fixed, determined by the world created. This function controls terrain LOD instead (the distance in which the terrain mesh resolution starts to degrade). Higher number means less vertices are used for terrain rendering, making distant hills less smooth. Value 12.5 corresponds to selecting Terrain Detail Normal in Video options, 50 to Very Low, 3.125 to Very High.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setTerrainGrid
	</WikiPage>
	<Syntax>
		setTerrainGrid Number
	</Syntax>
	<RawSyntax>
		setTerrainGrid grid
	</RawSyntax>
	<Example>
		$Code$setTerrainGrid 12.5$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
		(August 4, 2006)
	Notes from before the conversion:
	This is like opening up your video preferences and changing "terrain detail", i.e.: setTerrainGrid 50 = lowest detail
	setTerrainGrid 3.125 = highest detail It is similar to the command setViewDistance.
	</NextNote>
		(August 18, 2007)
	Effects on grass:
	50: disables/removes grass altogether.
	25: grass is visible.
	Lower values make grass drawn a bit further at distance. However the effect is decreasing rapidly: Grass radius of 25 is 100%. 12.5 is now like 100% + 20%, 6.25 is like 100% + 20% + 5% and 3.125 is 100% + 20% + 5% + 1%. Note these are estimates!
	Demo Mission Test_VD_TD.Sara.rar : ViewDistance and TerrainGrid can be changed via RadioTriggers
	</NextNote>
		(December 15, 2019)
	ArmA2 Supported Reso:
	In ArmA2 you are not stuck to 50, 25, 12 etc. 45 is a lower setting then 25!
	</NextNote>
		(March 13, 2013)
	ArmA 3 Multiplayer default:
	Some testing indicates that the default value for Arma 3 multiplayer is 10 - just like before. 10 is between "Normal" and "High".
	An user's terrain detail setting is ignored in multiplayer just like in ArmA 2.
	</NextNote>
		(November 19, 2014)
	TerrainGrid values for Arma 3 1.34:
	Low = 50 (NoGrass)
	Standard = 25
	High = 12.5
	Very High = 6.25
	Ultra = 3.125
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		openDLCPage
	</Keyword>
	<Description>
		Opens a Steam page of the app with given appId. Only works for known appId (game + linked DLCs)
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/openDLCPage
	</WikiPage>
	<Syntax>
		openDLCPage Number
	</Syntax>
	<RawSyntax>
		openDLCPage dlcID
	</RawSyntax>
	<Example>
		$Code$openDLCPage 288520$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		getResolution
	</Keyword>
	<Description>
		Returns an array containing all information about resolution.
	The returned Array is as follow: [width, height, 2D viewport width, 2D viewport height, aspect ratio, UI scale]
	Note: aspect ratio and UI scale are returned as coefficients and not 16:9 for example.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getResolution
	</WikiPage>
	<Syntax>
		getResolution
	</Syntax>
	<RawSyntax>
		getResolution
	</RawSyntax>
	<Example>
		$Code$_res = getResolution ; //some single monitor setup[
	1360,//width
	768,//height
	867,//2D viewport width
	653,//2D viewport height
	1.77778,//aspect ratio
	0.85//UI scale
	]$/Code$
	</NextExample>
		$Code$_res = getResolution ; //dedicated server[
	160,//width
	120,//height
	136,//2D viewport width
	102,//2D viewport height
	1.33333,//aspect ratio
	0.85//UI scale
	]$/Code$
	</NextExample>
		$Code$_res = getResolution ; //some triple monitor setup[
	5760,//width
	1080,//height
	792,//2D viewport width
	594,//2D viewport height
	5.33333,//aspect ratio
	0.55//UI scale
	]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(05:38, 20 December 2010)
	This command can be usefull to play a video (see this function BIS_fnc_playVideo ) in the given format if you've compiled it for different UI scale.
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		isUIContext
	</Keyword>
	<Description>
		Returns true if the script originated from some UI control event, for example from "onButtonDown" EH. Exists within parent scope and immediate child scopes.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isUIContext
	</WikiPage>
	<Syntax>
		isUIContext
	</Syntax>
	<RawSyntax>
		isUIContext
	</RawSyntax>
	<Example>
		$Code$if ( isUIContext ) then { hint "UI control event"};$/Code$
	</NextExample>
		$Code$_button ctrlSetEventHandler ['ButtonDown'," call { diag_log isUIContext }"]; // Outputs true$/Code$
	</NextExample>
		$Code$_button ctrlSetEventHandler ['ButtonDown',"[] spawn { diag_log isUIContext }"]; // Outputs false$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		lbClear
	</Keyword>
	<Description>
		Clear all items in listbox or combobox with id idc of topmost user dialog.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lbClear
	</WikiPage>
	<Syntax>
		lbClear Number
	</NextSyntax>
		lbClear Control
	</Syntax>
	<RawSyntax>
		lbClear idc
	</NextRawSyntax>
		lbClear control
	</RawSyntax>
	<Example>
		$Code$lbClear 101;$/Code$
	</NextExample>
		$Code$lbClear _ctrl;$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
		More information on the LB command family can be found here
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		vehicleReportOwnPosition
	</Keyword>
	<Description>
		Gets whether the vehicle shares its own position via datalink with the Side center.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/vehicleReportOwnPosition
	</WikiPage>
	<Syntax>
		vehicleReportOwnPosition Object
	</Syntax>
	<RawSyntax>
		vehicleReportOwnPosition vehicle
	</RawSyntax>
	<Example>
		$Code$vehicleReportOwnPosition ( vehicle player );$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		doorPhase
	</Keyword>
	<Description>
		Return animation phase of door on vehicle.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/doorPhase
	</WikiPage>
	<Syntax>
		Object doorPhase String
	</Syntax>
	<RawSyntax>
		object doorPhase door
	</RawSyntax>
	<Example>
		$Code$_phase = heli doorPhase "door_L";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		clearItemPool
	</Keyword>
	<Description>
		Removes all items from ammo box (or any general weapon holder container)
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/clearItemPool
	</WikiPage>
	<Syntax>
		clearItemPool Object
	</Syntax>
	<RawSyntax>
		clearItemPool box
	</RawSyntax>
	<Example>
		$Code$clearItemPool jeepOne$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setVehicleReceiveRemoteTargets
	</Keyword>
	<Description>
		Sets that the vehicle will be able to receive targets acquired by someone else via datalink from the Side center.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setVehicleReceiveRemoteTargets
	</WikiPage>
	<Syntax>
		Object setVehicleReceiveRemoteTargets Boolean
	</Syntax>
	<RawSyntax>
		vehicle setVehicleReceiveRemoteTargets bool
	</RawSyntax>
	<Example>
		$Code$( vehicle player ) setVehicleReceiveRemoteTargets true;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		set3DENAttributes
	</Keyword>
	<Description>
		Set entity attributes.
	An attribute is identified by its property ( data when it's engine-drive attribute) value in config. For the list of all attributes with their properties, see Setting Attributes.
	!
	Attributes are available only within the Eden Editor workspace. You cannot access them in scenario preview or exported scenario!
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/set3DENAttributes
	</WikiPage>
	<Syntax>
		set3DENAttributes Array
	</Syntax>
	<RawSyntax>
		set3DENAttributes [[ entities1, class1, value1 ],, [ entitiesN, classN, valueN ]]
	</RawSyntax>
	<Example>
		$Code$set3DENAttributes [[ get3DENSelected "Object","ControlMP", true ]];
	// Set all selected objects as playable$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		findIf
	</Keyword>
	<Description>
		Searches for an element within array for which the code evaluates to true. Returns the 0 based index on success or -1 if not found. Code on the right side of the command is evaluated for each element of the array, processed element can be referenced in code as _x.
	NOTE: Because command findIf terminates as soon as it finds an element that fulfills the condition, it is more efficient then count in scenarios where you need to check for presence / absence of at least one element that evaluates to true.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/findIf
	</WikiPage>
	<Syntax>
		Array findIf Code
	</Syntax>
	<RawSyntax>
		array findIf code
	</RawSyntax>
	<Example>
		$Code$[unit1,unit2,unit3] findIf { ! alive _x }; //return index of first dead unit$/Code$
	</NextExample>
		$Code$//two ways how to 'wait for all units to be dead':
	waitUntil {[unit1,unit2,unit3] findIf { alive _x } == -1}; //fast, terminates as soon as it finds alive unit
	waitUntil {[unit1,unit2,unit3] count { alive _x } == 0}; //slow, always goes through all array elements$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		image
	</Keyword>
	<Description>
		Creates a structured text containing the given image.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/image
	</WikiPage>
	<Syntax>
		image String
	</Syntax>
	<RawSyntax>
		image filename
	</RawSyntax>
	<Example>
		$Code$_txt1 = image "data\isniper.paa";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(March 21, 2009)
	Although there is a dedicated image command, parseText gives more options:
	$Code$_imageText = parseText " img size='5' color='#ff0000' image='fish.paa'/ "$/Code$
	</Note>
	<ReturnValue>
		Structured_Text
	</ReturnValue>

</NextListItem>

	<Keyword>
		showCinemaBorder
	</Keyword>
	<Description>
		Forces drawing of cinema borders when using custom camera camCreate. This is normally used in cutscenes to indicate player has no control.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/showCinemaBorder
	</WikiPage>
	<Syntax>
		showCinemaBorder Boolean
	</Syntax>
	<RawSyntax>
		showCinemaBorder show
	</RawSyntax>
	<Example>
		$Code$showCinemaBorder false ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(13 October 2007)
	This command does only work when Mission is started. Use waitUntil { time 0}; to be sure it works.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		updateObjectTree
	</Keyword>
	<Description>
		Update the editor object tree.
	i
	Some Old Editor Command
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/updateObjectTree
	</WikiPage>
	<Syntax>
		updateObjectTree Control
	</Syntax>
	<RawSyntax>
		updateObjectTree map
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		parseText
	</Keyword>
	<Description>
		Creates a structured text by parsing the given XML description. Do not use parseText when displaying a localized text from stringtable.xml (see notes below).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/parseText
	</WikiPage>
	<Syntax>
		parseText String
	</Syntax>
	<RawSyntax>
		parseText text
	</RawSyntax>
	<Example>
		$Code$_Stxt = parseText "First line img image='data\isniper.paa'/ br/ Second line";$/Code$
	</NextExample>
		$Code$hintSilent parseText format [" t size='1.25' font='Zeppelin33' color='#ff0000' %1 lives remaining. /t ", 12];$/Code$
	</NextExample>
		$Code$_clickableLink = parseText " a href='http://arma3.com' A3 /a ";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(22:07, 11 May 2007 (CEST))
	You can also colorate your text. You just have to use following tag:
	t color='#ffff00' Your yellow text! /t
	To change the size of your text, use this command:
	t size='2.2' Your bigger text! /t
	To change text font, use:
	t font='Zeppelin33' Bold Text /t
	To change horizontal alignment, use (parameter can be 'left', 'center', 'right'):
	t align='center' Centered Text /t
	To change vertical alignment within a line, use (parameter can be 'top', 'middle', 'bottom'):
	t valign='bottom' Text at Line Bottom /t
	To underline text, use:
	t underline='true' Underlined Text /t
	To put shadow under text, use:
	t shadow='true' t shadowColor='#ff0000' Text with Red Shadow /t /t
	Following statements are valid too:
	t underline='1' Underlined Text /t
	t shadow='1'shadowColor='#ff0000' Green shadow text /t
	Following fonts are valid (got from config):
	t font='Zeppelin32' Zeppelin32 (normal text) /t
	t font='Zeppelin33' Zeppelin33 (bold text) /t
	t font='Zeppelin33Italic' Zeppelin33Italic (bold italic text) /t
	t font='Bitstream' Bitstream (same as Zeppelin32) /t
	t font='TahomaB' TahomaB (same as Zeppelin32) /t
	t font='LucidaConsoleB' LucidaConsoleB (like Courier) /t
	</NextNote>
		(21 March 2009)
	Although there is a dedicated image command, parseText gives more options:
	img size='5' color='#ff0000' image='fish.paa'/
	</NextNote>
		(1 September 2016)
	To convert a structured text back to a string type, just use:
	_str = str parseText _structuredText;
	</NextNote>
		(September 1, 2017)
	If you are parsing user-defined strings like player names, you may want to convert special characters to their XML entities as a precaution beforehand:
	$Code$private _encodeText =
	{
	private _specialChars = [38, 60, 62, 34, 39]; // & " '
	private _convertTo = [[38,97,109,112,59], [38,108,116,59], [38,103,116,59], [38,113,117,111,116,59], [38,97,112,111,115,59]]; //
	private _chars = [];
	private "_i";
	{
	_i = _specialChars find _x;
	if (_i isEqualTo -1) then { _chars pushBack _x } else { _chars append (_convertTo select _i) };
	} forEach toArray param [0,"",[""]];
	toString _chars
	};
	private _encodedName = _name call _encodeText;
	private _redName = parseText format [" t color='#ff0000' %1 /t ", _encodedName]; $/Code$
	</Note>
	<ReturnValue>
		Structured_Text
	</ReturnValue>

</NextListItem>

	<Keyword>
		camSetFocus
	</Keyword>
	<Description>
		Sets camera focus range in format [distance, blur]. blur param - sets the camera focus blur. It does not automatically commit changes (see camCommit ). Use [-1, -1] to disable focus completely.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/camSetFocus
	</WikiPage>
	<Syntax>
		Object camSetFocus Array
	</Syntax>
	<RawSyntax>
		camera camSetFocus focusRange
	</RawSyntax>
	<Example>
		$Code$_camera camSetFocus [50, 1];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlSetPosition
	</Keyword>
	<Description>
		Sets wanted position and size for 2D control animation. Width and height are optional. ctrlCommit is required to complete the operation. For 3D control, param is relative [x,y,z] and no ctrlCommit is required as it cannot be animated.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlSetPosition
	</WikiPage>
	<Syntax>
		Control ctrlSetPosition Array
	</Syntax>
	<RawSyntax>
		controlName ctrlSetPosition [x, y]
	</NextRawSyntax>
		controlName ctrlSetPosition [x, y, w, h]
	</NextRawSyntax>
		controlName ctrlSetPosition [x, y, z]
	</RawSyntax>
	<Example>
		$Code$// Move control:
	_control2D ctrlSetPosition [0, 0];
	_control2D ctrlCommit 0;$/Code$
	</NextExample>
		$Code$// Move control and resize:
	_control2D ctrlSetPosition [0, 0, 1, 1];
	_control2D ctrlCommit 0;$/Code$
	</NextExample>
		$Code$_control3D ctrlSetPosition [0.5, 1, 0.5]; //centered and 1m away from screen$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(January 27, 2007)
	IMPORTANT
	You have to use ctrlCommit command to apply this effect(Arma v1.02.5103GER)
	</NextNote>
		(May 22, 2017)
	If the target ctrl is part of a ctrlGroup, the position needs to be relative to the ctrlGroup position.
	</NextNote>
		(July 20, 2017)
	If the target control is a controls' group, all the child controls of that group will be moved automatically (as their position is relative to the control group rather than the display)
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		vectorWorldToModel
	</Keyword>
	<Description>
		Converts vector direction from world to model space.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/vectorWorldToModel
	</WikiPage>
	<Syntax>
		Object vectorWorldToModel Array
	</Syntax>
	<RawSyntax>
		object vectorWorldToModel worldDir
	</RawSyntax>
	<Example>
		$Code$// Convert world space vector [0,-10,4] to model space of object _airplane:
	_airplane vectorWorldToModel [0,-10,4];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		missionConfigFile
	</Keyword>
	<Description>
		Return root of mission Description.ext entries hierarchy.
	!
	Since introduction of the Eden Editor, scenario attributes can be configured in the editor itself, not only in the external Description.ext file. To access desired value independently on where it's stored, use the following commands instead:
	getMissionConfigValue
	getMissionConfig
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/missionConfigFile
	</WikiPage>
	<Syntax>
		missionConfigFile
	</Syntax>
	<RawSyntax>
		missionConfigFile
	</RawSyntax>
	<Example>
		$Code$for "_i" from (0) to (( count paramsArray ) - 1) do {
	missionNamespace setVariable [ configName (( missionConfigFile /"Params") select _i), paramsArray select _i];
	};$/Code$
	</NextExample>
		$Code$// To define custom values in description.ext :
	class myMissionConfig
	{
	class mySetup
	{
	myNumber = 3;
	myArray[] = { 1, 2, 3 };
	myText = "LOL";
	};
	};
	// To read defined custom values from a script:_myNumber = getNumber ( missionConfigFile "myMissionConfig" "mySetup" "myNumber");
	_myArray = getArray ( missionConfigFile "myMissionConfig" "mySetup" "myArray");
	_myText = getText ( missionConfigFile "myMissionConfig" "mySetup" "myText");$/Code$
	</NextExample>
		$Code$// To get file path with description.ext to play sound via playSound3D :
	_filePath = [( str missionConfigFile ), 0, -15] call BIS_fnc_trimString ;$/Code$
	</NextExample>
		$Code$// Obtaining mission root using A3 substring functionality
	MISSION_ROOT = str missionConfigFile select [0, count str missionConfigFile - 15];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(February 17, 2015)
	missionConfigFile can be used to parse mission.sqm file data as well if it is included into description.ext :
	class MissionSQM
	{
	#include "mission.sqm"
	};
	Then mission.sqm data can be accessed like this:
	$Code$ getNumber ( missionConfigFile "MissionSQM" "version"); //12 - version param in mission.sqm $/Code$
	(courtesy of Master85 )
	</Note>
	<ReturnValue>
		Config
	</ReturnValue>

</NextListItem>

	<Keyword>
		enableFatigue
	</Keyword>
	<Description>
		Enables/Disables the person's fatigue.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/enableFatigue
	</WikiPage>
	<Syntax>
		Object enableFatigue Boolean
	</Syntax>
	<RawSyntax>
		unit enableFatigue enable
	</RawSyntax>
	<Example>
		$Code$player enableFatigue false ;$/Code$
	</NextExample>
		$Code${ _x enableFatigue false ; } forEach ( units group player );$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		(March 24, 2015)
	When the player dies enableFatigue is set to true after the respawn
	</NextNote>
		(January 27, 2016)
	To precise the note of Harmdhast, this command is not persistent (after respawn). So, in MP, you'll have to enableFatigue false, also in onPlayerRespawn.sqf or through the MP eventHandler MPRespawn.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		configHierarchy
	</Keyword>
	<Description>
		Returns hierarchy of the given config class. Just like with inheritsFrom, only complete config classes are supported
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/configHierarchy
	</WikiPage>
	<Syntax>
		configHierarchy Config
	</Syntax>
	<RawSyntax>
		configHierarchy configClass
	</RawSyntax>
	<Example>
		$Code$_hierarchy = configHierarchy ( configFile "CfgVehicles" "Car");
	//[bin\config.bin,bin\config.bin/CfgVehicles,bin\config.bin/CfgVehicles/Car]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		mapAnimAdd
	</Keyword>
	<Description>
		Add next frame to map animation.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/mapAnimAdd
	</WikiPage>
	<Syntax>
		mapAnimAdd Array
	</Syntax>
	<RawSyntax>
		mapAnimAdd [time, zoom, position]
	</RawSyntax>
	<Example>
		$Code$mapAnimAdd [1, 0.1, markerPos "anim1"];
	mapAnimCommit ;$/Code$
	</NextExample>
		$Code$mapAnimAdd [3, 0.01, player ];
	mapAnimCommit ;$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
		(05:26, 2 February 2007)
	In OFP v1.96, the mapAnim series of commands, together with forceMap can only be used in the intro and mission, as it is not possible to access the map from the outro. (not checked, sourced from an old copy of the OFPEC comref)
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		addEventHandler
	</Keyword>
	<Description>
		Adds event handler (EH) to the given object and returns EH handle. If EH has some data to return upon event (e.g. the "killed" EH will return an array with 2 elements: the killed unit, and the killer), it is passed in _this variable. Since Arma 3 v.1.63.137807 the EH handle is also stored in _thisEventHandler variable and is available during EH code execution. For more information about event handlers and their types check the scripting topic Event handlers in this reference. You may add as many event handlers of any type as you like to every unit. For instance, if you add an event handler of type "killed" and one already exists, the old one doesn't get overwritten. Use removeEventHandler to delete event handlers.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/addEventHandler
	</WikiPage>
	<Syntax>
		Object addEventHandler Array
	</Syntax>
	<RawSyntax>
		object addEventHandler [type, command]
	</RawSyntax>
	<Example>
		$Code$_EHkilledIdx = player addEventHandler ["killed", {_this exec "playerKilled.sqs"}]$/Code$
	</NextExample>
		$Code$this addEventHandler ["killed", " hint format ['Killed by %1',_this select 1]"]$/Code$
	</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
		(July 7, 2015)
	When using overridable EH, such as "InventoryOpened" and similar, where returning true allows to override default action, exitWith cannot be used to return value. So:
	$Code$ if (whatever) exitWith { true }; false ;$/Code$
	Forget about it, will not work. Instead use:
	$Code$ if (whatever) then { true } else { false };$/Code$
	100% satisfaction guaranteed!
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		setTaskResult
	</Keyword>
	<Description>
		Set a result of the task.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setTaskResult
	</WikiPage>
	<Syntax>
		Task setTaskResult Array
	</Syntax>
	<RawSyntax>
		task setTaskResult [state,result]
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		fog
	</Keyword>
	<Description>
		A getter for setFog. Returns the current value of the fog in range 0...1.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/fog
	</WikiPage>
	<Syntax>
		fog
	</Syntax>
	<RawSyntax>
		fog
	</RawSyntax>
	<Example>
		$Code$_foglevel = fog ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		setWaypointName
	</Keyword>
	<Description>
		Changes the waypoint name.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setWaypointName
	</WikiPage>
	<Syntax>
		Waypoint setWaypointName String
	</Syntax>
	<RawSyntax>
		waypoint setWaypointName name
	</RawSyntax>
	<Example>
		$Code$[_grp,2] setWaypointName "myName";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		addItemToUniform
	</Keyword>
	<Description>
		Create new item and store it to soldier's uniform. The item can also be a weapon or a magazine.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/addItemToUniform
	</WikiPage>
	<Syntax>
		Object addItemToUniform String
	</Syntax>
	<RawSyntax>
		unit addItemToUniform item
	</RawSyntax>
	<Example>
		$Code$player addItemToUniform "itemGPS";$/Code$
	</NextExample>
		$Code$player addItemToUniform "hgun_Rook40_F";$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setPosition
	</Keyword>
	<Description>
		Sets the position of a location.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setPosition
	</WikiPage>
	<Syntax>
		Location setPosition Array
	</Syntax>
	<RawSyntax>
		location setPosition pos
	</RawSyntax>
	<Example>
		$Code$myLocation setPosition [1000,5320,10]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		lnbSortByValue
	</Keyword>
	<Description>
		Sorts given multicolumn listbox by lnbValue in given column in ascending or descending order.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lnbSortByValue
	</WikiPage>
	<Syntax>
		lnbSortByValue Array
	</NextSyntax>
		control lnbSortByValue Array
	</Syntax>
	<RawSyntax>
		lnbSortByValue [idc, column, reversed]
	</NextRawSyntax>
		control lnbSortByValue [column, reversed]
	</RawSyntax>
	<Example>
		$Code$lnbSortByValue [1800, 1, false ];$/Code$
	</NextExample>
		$Code$_ctl lnbSortByValue [1, true ]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setType
	</Keyword>
	<Description>
		Changes a location to the specified class. Location classes are defined in CfgLocationTypes.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setType
	</WikiPage>
	<Syntax>
		Location setType String
	</Syntax>
	<RawSyntax>
		location setType name
	</RawSyntax>
	<Example>
		$Code$myLocation setType "RockArea"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		getClientStateNumber
	</Keyword>
	<Description>
		Returns client state in network game. Works on both, client and dedicated server. The following states are possible:
	getClientStateNumber
	getClientState
	0
	"NONE"
	No client (or singleplayer)
	1
	"CREATED"
	Client is created
	2
	"CONNECTED"
	Client is connected to server, message formats are registered
	3
	"LOGGED IN"
	Identity is created
	4
	"MISSION SELECTED"
	Mission is selected
	5
	"MISSION ASKED"
	Server was asked to send / not send mission
	6
	"ROLE ASSIGNED"
	Role was assigned (and confirmed)
	7
	"MISSION RECEIVED"
	Mission received
	8
	"GAME LOADED"
	Island loaded, vehicles received
	9
	"BRIEFING SHOWN"
	Briefing was displayed
	10
	"BRIEFING READ"
	Ready to play mission
	11
	"GAME FINISHED"
	Game was finished
	12
	"DEBRIEFING READ"
	Debriefing read, ready to continue with next mission
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getClientStateNumber
	</WikiPage>
	<Syntax>
		getClientStateNumber
	</Syntax>
	<RawSyntax>
		getClientStateNumber
	</RawSyntax>
	<Example>
		$Code$_state = getClientStateNumber ;$/Code$
	</NextExample>
		$Code$_inGame = getClientStateNumber 8;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		vectorDir
	</Keyword>
	<Description>
		Return object's normalized direction vector in world space ( [x,y,z] ).
	A unit facing North would return [0,1,0]
	A unit facing East would return [1,0,0]
	A unit facing South would return [0,-1,0]
	A unit facing West would return [-1,0,0]
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/vectorDir
	</WikiPage>
	<Syntax>
		vectorDir Object
	</Syntax>
	<RawSyntax>
		vectorDir objectName
	</RawSyntax>
	<Example>
		$Code$_dirVector = vectorDir _unit;$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		setPilotCameraDirection
	</Keyword>
	<Description>
		Sets the direction of object airplane or helicopter pilotCamera (vector in model space).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setPilotCameraDirection
	</WikiPage>
	<Syntax>
		Object setPilotCameraDirection Array
	</Syntax>
	<RawSyntax>
		object setPilotCameraDirection Vector3D
	</RawSyntax>
	<Example>
		$Code$vehicle player setPilotCameraDirection [0,1,0] //re-centers the camera$/Code$
	</Example>
	<Locality>
		local / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		for
	</Keyword>
	<Description>
		This operator creates a For Type which is used in the for-constructs (There is the for forspec and the for var syntax available for this construct)
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/for
	</WikiPage>
	<Syntax>
		for String/Array
	</Syntax>
	<RawSyntax>
		for arg
	</RawSyntax>
	<Example>
		$Code$for "_i" from 1 to 10 do { debugLog _i;};$/Code$
	</NextExample>
		$Code$for "_i" from 9 to 1 step -2 do { debugLog _i;};$/Code$
	</NextExample>
		$Code$for [{_i=0}, {_i 10}, {_i = _i + 1}] do {hint str _i};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		For_Type
	</ReturnValue>

</NextListItem>

	<Keyword>
		isManualFire
	</Keyword>
	<Description>
		Returns true if manual fire is on. Manual fire could either be selected in vehicle action menu (if available) or with action "ManualFire" and "ManualFireCancel". Always returns false for a soldier.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isManualFire
	</WikiPage>
	<Syntax>
		isManualFire Object
	</Syntax>
	<RawSyntax>
		isManualFire vehicleName
	</RawSyntax>
	<Example>
		$Code$_bool = isManualFire vehicle player ;$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(February 5, 2017)
	Manual fire means the effectiveCommander of the vehicle controls firing (but not aiming) of the gunner turret weapons (usually path [0]), while unable to fire his own weapons.
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		everyBackpack
	</Keyword>
	<Description>
		Returns array of backpacks stored in given crate or vehicle. Used for accessing backpack content of a backpack on ground.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/everyBackpack
	</WikiPage>
	<Syntax>
		everyBackpack Object
	</Syntax>
	<RawSyntax>
		everyBackpack box
	</RawSyntax>
	<Example>
		$Code$everyBackpack cursorTarget ;$/Code$
	</NextExample>
		$Code$_vehicleBackpacks = everyBackpack vehicle player ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(Apr 29, 2014)
	(ArmA3 ver 1.16), here's a quick reference to backpack command family.
	Command
	Operand type
	Return
	Example
	firstBackpack
	Object (WeaponHolder, AmmoCrate, VehicleCrate)
	Object (eg 2bba9d00# 163957: backpack_compact.p3d)
	firstBackpack ( getPos player nearestObject "weaponholder")
	backpackContainer
	Unit( Object )
	Object (eg 2bba9d00# 163957: backpack_compact.p3d)
	backpackContainer player //Currently same as unitBackpack
	unitBackpack
	Unit( Object )
	Object (eg 2bba9d00# 163957: backpack_compact.p3d)
	unitBackpack player //Currently same as backpackContainer
	backpack
	Unit( Object )
	String (eg 2bba9d00# 163957: backpack_compact.p3d)
	backpack player //See also ( typeOf backpackContainer player ) or ( typeOf unitBackpack player )
	backpackCargo
	Object (WeaponHolder, AmmoCrate, VehicleCrate)
	Array of String (eg ["Backpack0","Backpack1"])
	backpackCargo _AmmoCrate
	getBackpackCargo
	Object (WeaponHolder, AmmoCrate, VehicleCrate)
	Array of Array (eg [["Backpack0","Backpack1"],[1,1]])
	getBackpackCargo _AmmoCrate
	everyBackpack
	Object (WeaponHolder, AmmoCrate, VehicleCrate)
	Array of Object (eg [22504f00# 163960: backpack_fast.p3d...])
	everyBackpack _AmmoCrate
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		addMagazineGlobal
	</Keyword>
	<Description>
		Adds a magazine to the unit.
	Note: You may create invalid combinations by adding more magazines than the free space in unit's inventory allows. When doing so, application behaviour is undefined.
	This command is broken in MP as it dupes inventory items. Use addMagazine array for now, it takes global argument and has global effect too.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/addMagazineGlobal
	</WikiPage>
	<Syntax>
		Object addMagazineGlobal String
	</Syntax>
	<RawSyntax>
		unit addMagazineGlobal magazineName
	</RawSyntax>
	<Example>
		$Code$player addMagazineGlobal "30Rnd_65x39_caseless_mag";$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		productVersion
	</Keyword>
	<Description>
		Returns the product's friendly name, identifier and version. In Arma 3 it also returns branch identifier, whether or not the game was launched using mods, and the platform.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/productVersion
	</WikiPage>
	<Syntax>
		productVersion
	</Syntax>
	<RawSyntax>
		productVersion
	</RawSyntax>
	<Example>
		$Code$hint str productVersion ; // would return ["Arma 2 OA", "arma2oa", 162, 95208] on Arma 2 OA 1.62.95208$/Code$
	</NextExample>
		$Code$hint str productVersion ; // ["Arma 3","Arma3",137,128764,"Development",false,"Windows"]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		safeZoneW
	</Keyword>
	<Description>
		Returns the width of the screen in screen measurement units. Taken from top left corner of the default viewport (0,0) of the screen and going in the same direction as the X axis, the value will be positive but resulting X will end up beyond the right border. Therefore in order to calculate X of the right screen border, the length of safeZoneX must be subtracted from safeZoneW, but because it is negative, it must be added instead. _screenRightBorderX = safeZoneW + safeZoneX. The measurement units depend on the current screen resolution getResolution. See also SafeZone
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/safeZoneW
	</WikiPage>
	<Syntax>
		safeZoneW
	</Syntax>
	<RawSyntax>
		safeZoneW
	</RawSyntax>
	<Example>
		$Code$_screenWidth = safeZoneW ;$/Code$
	</NextExample>
		$Code$_screenRightBorderX = safeZoneW + safeZoneX ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		safeZoneX
	</Keyword>
	<Description>
		Returns the X of the left border of the screen, which is also a distance in screen measurement units from top left corner of the default viewport (0,0) of the screen to the left border of the screen. Since it is going in opposite way of the X axis, the value is negative. The measurement units depend on the current screen resolution getResolution. See also SafeZone
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/safeZoneX
	</WikiPage>
	<Syntax>
		safeZoneX
	</Syntax>
	<RawSyntax>
		SafeZoneX
	</RawSyntax>
	<Example>
		$Code$_screenLeftBorderX = safeZoneX ; // returns a float value 0$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		cameraOn
	</Keyword>
	<Description>
		Returns the vehicle to which the camera is attached.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/cameraOn
	</WikiPage>
	<Syntax>
		cameraOn
	</Syntax>
	<RawSyntax>
		cameraOn
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(November 2, 2015)
	$Code$ _MyScreenPos = getPos cameraOn; code
	This would getPos for the current player or vehicle that the client's camera is attached to.
	code _CameraOnSetPos = cameraOn setPos _pos; code
	This would do setPos for the current player or vehicle that the client's camera is attached to.
	/dd
	/dl
	$/Code$
	</Note>
	<ReturnValue>
		Object
	</ReturnValue>

</NextListItem>

	<Keyword>
		random
	</Keyword>
	<Description>
		Random real (floating point) value from 0 (inclusive) to x (not inclusive).
	Since Arma 3 v1.55.133393 alternative syntax is added, allowing to define Gaussian Distribution params. Uses the same method as setTriggerTimeout command. Quite useful for spawning loot for example, making more valuable items more rare.
	Since Arma 3 v1.67.139663 an alternative syntax is available, allowing to generate semi-random number based on provided seed.
	Since Arma 3 v1.67.139663 an alternative syntax is available, generating pseudo-random noise texture based on provided seed and returning a single number between 0 (included) and 1 (excluded) at supplied x and y coordinates.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/random
	</WikiPage>
	<Syntax>
		random Number
	</NextSyntax>
		random Array
	</NextSyntax>
		Number random Number
	</NextSyntax>
		Number random Array
	</Syntax>
	<RawSyntax>
		random x
	</NextRawSyntax>
		random [min, mid, max]
	</NextRawSyntax>
		seed random x
	</NextRawSyntax>
		seed random [x,y]
	</RawSyntax>
	<Example>
		$Code$_rNumber = random 1;$/Code$
	</NextExample>
		$Code$_rNumber = random -10;$/Code$
	</NextExample>
		$Code$// Generate random position inside a circle
	_center getPos [_radius * sqrt random 1, random 360];$/Code$
	</NextExample>
		$Code$// Compare (each command was executed 100000 times to gather statistics):
	floor random 10;
	// 0 - 10099 (10%)
	// 1 - 10040 (10%)
	// 2 - 10154 (10%)
	// 3 - 9910 (10%)
	// 4 - 10023 (10%)
	// 5 - 9937 (10%)
	// 6 - 10118 (10%)
	// 7 - 9716 (10%)
	// 8 - 9986 (10%)
	// 9 - 10017 (10%)
	floor random [0,5,10];
	// 0 - 109 (0%)
	// 1 - 1604 (2%)
	// 2 - 6839 (7%)
	// 3 - 16671 (17%)
	// 4 - 24706 (25%)
	// 5 - 24702 (25%)
	// 6 - 16626 (17%)
	// 7 - 6925 (7%)
	// 8 - 1702 (2%)
	// 9 - 116 (0%)
	floor random [0,10,0];
	// 0 - 19 (0%)
	// 1 - 209 (0%)
	// 2 - 817 (1%)
	// 3 - 2384 (2%)
	// 4 - 4841 (5%)
	// 5 - 8976 (9%)
	// 6 - 14067 (14%)
	// 7 - 18955 (19%)
	// 8 - 23605 (24%)
	// 9 - 26127 (26%)
	floor random [0,10,5];
	// 0 - 11 (0%)
	// 1 - 98 (0%)
	// 2 - 430 (0%)
	// 3 - 1149 (1%)
	// 4 - 2384 (2%)
	// 5 - 4546 (5%)
	// 6 - 8612 (9%)
	// 7 - 16283 (16%)
	// 8 - 28393 (28%)
	// 9 - 38094 (38%)$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(July 12, 2015)
	Random selections including negative numbers can be obtained via:
	$Code$_Xrnd = round(random 200) -100;$/Code$
	This will yield numbers between -100 and 100.
	Be careful using random numbers in multiplayer, each client will come up with a different result. See multiplayer tutorials for more general information about locality.
	The number returned is unlikely to be a whole number. To return a whole number use either round, ceil or floor together with random :
	x=round(random 5) will return 0,1,2,3,4 or 5. (non-uniform distribution, 0 and 5 are half as likely to be selected than any of the other numbers)
	x=floor(random 5) will return 0,1,2,3 or 4. (uniform distribution, all numbers have the same probability of being selected)
	x=ceil(random 5) will return 0,1,2,3,4 or 5. (0 is very unlikely, but possible, as ceil 0 is 0)
	</Note>
	<ReturnValue>
		Number - Number - Number - Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		getObjectChildren
	</Keyword>
	<Description>
		Return a list of all the children of the specified object.
	i
	Some Old Editor Command
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getObjectChildren
	</WikiPage>
	<Syntax>
		Control getObjectChildren String
	</Syntax>
	<RawSyntax>
		map getObjectChildren object
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		markerAlpha
	</Keyword>
	<Description>
		Gets the marker alpha. See setMarkerAlpha.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/markerAlpha
	</WikiPage>
	<Syntax>
		markerAlpha String
	</Syntax>
	<RawSyntax>
		markerAlpha markerName
	</RawSyntax>
	<Example>
		$Code$AlphaMarker = markerAlpha "myMarker;$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		skill
	</Keyword>
	<Description>
		Returns current level of ability of a unit, in range between 0 and 1, 1 being the highest level of skill.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/skill
	</WikiPage>
	<Syntax>
		skill Object
	</NextSyntax>
		Object skill String
	</Syntax>
	<RawSyntax>
		skill unitName
	</NextRawSyntax>
		unitName skill skillName
	</RawSyntax>
	<Example>
		$Code$_skill = skill unit1;$/Code$
	</NextExample>
		$Code$_myCourage = player skill "courage"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		Skill of AI units set via the slider in unit placement screen varies from 0.2 to 1.0.
	If superAI is enabled all units have skill of 1.0 regardless of the skill slider
	</Note>
	<ReturnValue>
		Number - Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		allow3DMode
	</Keyword>
	<Description>
		Allow/dissallow 3D mode.,
	i
	Some Old Editor Command
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/allow3DMode
	</WikiPage>
	<Syntax>
		Control allow3DMode Boolean
	</Syntax>
	<RawSyntax>
		map allow3DMode bool
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		canSlingLoad
	</Keyword>
	<Description>
		Returns true if it is possible to sling load cargo
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/canSlingLoad
	</WikiPage>
	<Syntax>
		Object canSlingLoad Object
	</Syntax>
	<RawSyntax>
		vehicle canSlingLoad cargo
	</RawSyntax>
	<Example>
		$Code$_slingable = veh1 canSlingLoad veh2;$/Code$
	</NextExample>
		$Code$hint str (( vehicle player ) canSlingLoad veh1);$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		sin
	</Keyword>
	<Description>
		Sine of x, argument in Degrees.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/sin
	</WikiPage>
	<Syntax>
		sin Number
	</Syntax>
	<RawSyntax>
		sin x
	</RawSyntax>
	<Example>
		$Code$_sine = sin 30;//result is 0.5$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		getFatigue
	</Keyword>
	<Description>
		Returns fatigue of given unit.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getFatigue
	</WikiPage>
	<Syntax>
		getFatigue Object
	</Syntax>
	<RawSyntax>
		getFatigue unit
	</RawSyntax>
	<Example>
		$Code$value = getFatigue player ;$/Code$
	</NextExample>
		$Code$if ( getFatigue player 0.5) then { player sideChat "I'm good to go!" };$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		getFatigue can be applied to remote unit however it will not read the changes made to unit's fatigue with setFatigue command. Only natural changes resulting from unit moving will be counted. When applied to local unit, it will read resulting value of natural fatigue combined with artificial changes added locally by setFatigue. In short, the server wouldn't know the correct value of remote unit's fatigue if you used setFatigue on the unit prior.
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		rotorsRpmRTD
	</Keyword>
	<Description>
		Returns rotors RPM
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/rotorsRpmRTD
	</WikiPage>
	<Syntax>
		rotorsRpmRTD Object
	</Syntax>
	<RawSyntax>
		rotorsRpmRTD RTD_helicopter
	</RawSyntax>
	<Example>
		$Code$_mh9_main = ( rotorsRpmRTD _MH9) select 0;//main rotor
	_mh9_tail = ( rotorsRpmRTD _MH9) select 1;//tail rotor$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		canSuspend
	</Keyword>
	<Description>
		Returns true if sleep, uiSleep or waitUntil commands can be used in current scope. Usually when suspension is not allowed but used, for example when code is executed in unscheduled environment, the script engine would ignore any suspension command and throw error: "Suspending not allowed in this context". Using canSuspend command allows to detect the correct environment for the code.
	Note : The definition of scheduled and unscheduled environment is not the same as whether or not the script execution can or cannot be suspended. For example while. sqs and. fsm scripts are scheduled (i.e. added to the scheduler : diag_activeSQSScripts, diag_activeMissionFSMs ), they cannot use sleep or be suspended like execVM or spawn scripts can, therefore canSuspend for these types of scripts will return false.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/canSuspend
	</WikiPage>
	<Syntax>
		canSuspend
	</Syntax>
	<RawSyntax>
		canSuspend
	</RawSyntax>
	<Example>
		$Code$onEachFrame
	{
	systemChat str canSuspend ; //false
	[] spawn { hint str canSuspend }; //true
	onEachFrame {};
	};$/Code$
	</NextExample>
		$Code$// Make sure the function code is always spawned even when called:
	mysleep =
	{
	if (! canSuspend ) exitWith {_this spawn mysleep};
	sleep _this;
	hint ("slept " + str _this);
	};
	5 call mysleep;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		safeZoneH
	</Keyword>
	<Description>
		Returns the height of the screen in screen measurement units. Taken from top left corner of the default viewport (0,0) of the screen and going in the same direction as the Y axis, the value will be positive but resulting Y will end up beyond the bottom border. Therefore in order to calculate Y of the bottom screen border, the length of safeZoneY must be subtracted from safeZoneH, but because it is negative, it must be added instead. _screenBottomBorderY = safeZoneH + safeZoneY. The measurement units depend on the current screen resolution getResolution. See also SafeZone
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/safeZoneH
	</WikiPage>
	<Syntax>
		safeZoneH
	</Syntax>
	<RawSyntax>
		SafeZoneH
	</RawSyntax>
	<Example>
		$Code$_screenHeight = safeZoneH ;$/Code$
	</NextExample>
		$Code$_screenBottomBorderY = safeZoneH + safeZoneY ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		insertEditorObject
	</Keyword>
	<Description>
		Insert an object to the editor and assign arguments. Create script is,not called. Returns the ID of the new EditorObject. Subtype class is,optional.
	i
	Some Old Editor Command
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/insertEditorObject
	</WikiPage>
	<Syntax>
		Control insertEditorObject Array
	</Syntax>
	<RawSyntax>
		map insertEditorObject [type,value,[name1,value1,],subtype class]
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(May 7, 2015)
	"This works only in the old 3D editor" - KM
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		connectTerminalToUAV
	</Keyword>
	<Description>
		Connect person with UAV terminal to UAV unit. UAV Terminal item needs to be assigned to GPS slot. If UAV is already connected to another terminal, this new connection will fail.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/connectTerminalToUAV
	</WikiPage>
	<Syntax>
		Object connectTerminalToUAV Object
	</Syntax>
	<RawSyntax>
		person connectTerminalToUAV uav
	</RawSyntax>
	<Example>
		$Code$bool = player connectTerminalToUAV uav1;$/Code$
	</NextExample>
		$Code$player connectTerminalToUAV objNull ; //disconnect$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		vectorModelToWorld
	</Keyword>
	<Description>
		Converts vector direction from model to world space.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/vectorModelToWorld
	</WikiPage>
	<Syntax>
		Object vectorModelToWorld Array
	</Syntax>
	<RawSyntax>
		object vectorModelToWorld modelDir
	</RawSyntax>
	<Example>
		$Code$// Convert model space vector [0,-10,4] to world space; vector gets rotated according to _airplane:
	_airplane vectorModelToWorld [0,-10,4];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		tvSetText
	</Keyword>
	<Description>
		Sets string text to item on given path. IDC means id of parent Tree View.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/tvSetText
	</WikiPage>
	<Syntax>
		tvSetText Array
	</NextSyntax>
		Control tvSetText Array
	</Syntax>
	<RawSyntax>
		tvSetText [idc, path, text]
	</NextRawSyntax>
		control tvSetText [path, text]
	</RawSyntax>
	<Example>
		$Code$tvSetText [101, [0], "Test data"];$/Code$
	</NextExample>
		$Code$_ctrl tvSetText [[0,0,0], "Test data"];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		false
	</Keyword>
	<Description>
		Always false.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/false
	</WikiPage>
	<Syntax>
		false
	</Syntax>
	<RawSyntax>
		false
	</RawSyntax>
	<Example>
		$Code$_var = false ;
	systemChat str _var; //false$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		setObjectViewDistance
	</Keyword>
	<Description>
		Sets the rendering distance of objects (and shadows).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setObjectViewDistance
	</WikiPage>
	<Syntax>
		setObjectViewDistance Number
	</NextSyntax>
		setObjectViewDistance Array
	</Syntax>
	<RawSyntax>
		setObjectViewDistance distance
	</NextRawSyntax>
		setObjectViewDistance [objectDistance, shadowDistance]
	</RawSyntax>
	<Example>
		$Code$setObjectViewDistance 2000;$/Code$
	</NextExample>
		$Code$setObjectViewDistance [2000,800];$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		commandFollow
	</Keyword>
	<Description>
		Order the given unit to follow the given other unit (via the radio).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/commandFollow
	</WikiPage>
	<Syntax>
		Object/Array commandFollow Object
	</Syntax>
	<RawSyntax>
		unitName commandFollow followedunit
	</RawSyntax>
	<Example>
		$Code$_soldier1 commandFollow _soldier2$/Code$
	</Example>
	<Locality>
		local / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		safeZoneY
	</Keyword>
	<Description>
		Returns the Y of the top border of the screen, which is also a distance in screen measurement units from top left corner of the default viewport (0,0) of the screen to the top border of the screen. Since it is going in opposite way of the Y axis, the value is negative. The measurement units depend on the current screen resolution getResolution. See also SafeZone
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/safeZoneY
	</WikiPage>
	<Syntax>
		safeZoneY
	</Syntax>
	<RawSyntax>
		SafeZoneY
	</RawSyntax>
	<Example>
		$Code$_screenTopBorderY = safeZoneY ; // returns a float value 0$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		drawEllipse
	</Keyword>
	<Description>
		Draws an ellipse on the map. Just like with marker or trigger area, negative a and b will result in hexagon.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/drawEllipse
	</WikiPage>
	<Syntax>
		Control drawEllipse Array
	</Syntax>
	<RawSyntax>
		map drawEllipse [c, a, b, angle, color, fill]
	</RawSyntax>
	<Example>
		$Code$findDisplay 12 displayCtrl 51 ctrlAddEventHandler ["Draw",
	{
	_this select 0 drawEllipse [
	player, 10, 10, 0, [1, 0, 0, 1], ""
	];
	_this select 0 drawEllipse [
	player, -10, -10, 0, [1, 1, 1, 1], "#(rgb,8,8,3)color(1,0.6,0,1)"
	];
	_this select 0 drawEllipse [
	player, -10, -10, 90, [0, 0, 1, 1], ""
	];
	}];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(July 7, 2015)
	Be careful when using this command. Unlike map markers, the draw commands can decrease your framerate.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		pickWeaponPool
	</Keyword>
	<Description>
		Transfer weapons and magazines from cargo of object into weapon pool (used in campaign to transfer weapons into next mission).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/pickWeaponPool
	</WikiPage>
	<Syntax>
		pickWeaponPool Object
	</Syntax>
	<RawSyntax>
		pickWeaponPool object
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setWindStr
	</Keyword>
	<Description>
		Changes the wind strength smoothly during the given time (in seconds). A time of zero means there will be an immediate change.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setWindStr
	</WikiPage>
	<Syntax>
		Number setWindStr Number
	</Syntax>
	<RawSyntax>
		time setWindStr value
	</RawSyntax>
	<Example>
		$Code$60 setWindStr 0.8; // set the wind strength to 0.8 gradually over the next 60 seconds$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		laserTarget
	</Keyword>
	<Description>
		Returns laser target object created by given unit (gunner in vehicle or on foot) when using "Laserdesignator" or another laser targeting device. Laser target object is global and can be retrieved from any PC.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/laserTarget
	</WikiPage>
	<Syntax>
		laserTarget Object
	</Syntax>
	<RawSyntax>
		laserTarget unitName
	</RawSyntax>
	<Example>
		$Code$_target = laserTarget gunner heli;$/Code$
	</NextExample>
		$Code$_designatedPos = position laserTarget player;$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(December 15, 2010)
	Need to be try with a soldier and laser designator
	</NextNote>
		(December 19, 2010)
	Works with either infantry or vehicles. Returns objNull if no target is present
	</Note>
	<ReturnValue>
		Object
	</ReturnValue>

</NextListItem>

	<Keyword>
		get3DENGrid
	</Keyword>
	<Description>
		Returns the grid increment for the given transformation type.
	Transformation types:
	Rotation - "r"
	Translation - "t"
	Scale - "s"
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/get3DENGrid
	</WikiPage>
	<Syntax>
		get3DENGrid String
	</Syntax>
	<RawSyntax>
		get3DENGrid type
	</RawSyntax>
	<Example>
		$Code$currentMovementIncrement = get3DENGrid "t";// returns 1$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		forcedMap
	</Keyword>
	<Description>
		Returns if map was forced by using forceMap command or openMap command with force option
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/forcedMap
	</WikiPage>
	<Syntax>
		forcedMap
	</Syntax>
	<RawSyntax>
		forcedMap
	</RawSyntax>
	<Example>
		$Code$_forceMapForced = forcedMap select 0;
	_openMapForced = forcedMap select 1;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		waypointType
	</Keyword>
	<Description>
		Gets the waypoint type.
	Type can be:
	"MOVE"
	"DESTROY"
	"GETIN"
	"SAD"
	"JOIN"
	"LEADER"
	"GETOUT"
	"CYCLE"
	"LOAD"
	"UNLOAD"
	"TR UNLOAD"
	"HOLD"
	"SENTRY"
	"GUARD"
	"TALK"
	"SCRIPTED"
	"SUPPORT"
	"GETIN NEAREST"
	"DISMISS"
	"AND"
	"OR"
	More details at Waypoint types.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/waypointType
	</WikiPage>
	<Syntax>
		waypointType Array
	</Syntax>
	<RawSyntax>
		waypointType waypoint
	</RawSyntax>
	<Example>
		$Code$waypointType [groupOne,1],$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(August 6, 2015)
	With the new sling loading in Arma 3, 2 new waypoint types are added aswell being:
	Drop Cargo and Lift Cargo.
	The names for these 2 waypoints are:
	"UNHOOK" and "HOOK".
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		waypointAttachObject
	</Keyword>
	<Description>
		Attaches a static object via it's numeric ID to the given waypoint.
	The alternative syntax is (at least) available since Arma 2.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/waypointAttachObject
	</WikiPage>
	<Syntax>
		Array waypointAttachObject Number
	</NextSyntax>
		Array waypointAttachObject Object
	</Syntax>
	<RawSyntax>
		waypoint waypointAttachObject objectID
	</NextRawSyntax>
		waypoint waypointAttachObject object
	</RawSyntax>
	<Example>
		$Code$[_grp, 2] waypointAttachObject 1234$/Code$
	</NextExample>
		$Code$_wp = group player addWaypoint [[1907.5,5746.5,0.00144196],0];
	_wp waypointAttachObject (( waypointPosition _wp) nearestObject 66220);$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(June 20, 2014)
	In Arma 3 1.22 only the alternative syntax is working.
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		lnbSetData
	</Keyword>
	<Description>
		Sets the additional text (invisible) in the item with the given position of the 2D listbox.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lnbSetData
	</WikiPage>
	<Syntax>
		lnbSetData Array
	</NextSyntax>
		Control lnbSetData Array
	</Syntax>
	<RawSyntax>
		lnbSetData [idc, [row, column], data]
	</NextRawSyntax>
		ctrl lnbSetData [[row, column], data]
	</RawSyntax>
	<Example>
		$Code$_ctrl lnbSetData [ [0,0],"#1"];$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
		(Sep 9 2014)
	(A3 1.28)As for invisible data processing, lnbAddArray, lnbAddColumn, lnbData, lnbGetColumnsPosition, lnbSetColumnsPos, lnbSetData, lnbSetText, lnbSetValue, lnbText and lnbValue store data types into exact position of the listNbox with different spaces. Accessing data with coordinate command at nearly the same syntax:
	$Code$
	//Set same value to one position of a Control
	_ctrl lnbSetData [ [0,0],"#1"];
	lnbSetColumnsPos [102, [0,1], 1];
	_ctrl lnbSetText [ [0,1], "#1"];
	_ctrl lnbSetValue [ [0,0],1];
	//Accessing the value disregard affecting one another.
	_ctrl lnbData [0,0]; //"#1"
	lnbGetColumnsPosition _ctrl //[1];
	_ctrl lnbText [0,0];//"#1"
	_ctrl lnbValue [0,0];//1
	$/Code$
	For a direct visible control over CT_LISTNBOX:
	$Code$
	0 = [_CT_LISTNBOX] spawn {
	private ["_CT_LISTNBOX","_color","_current","_pic"];
	disableSerialization ;
	_CT_LISTNBOX = _this select 0;
	{
	_CT_LISTNBOX lnbAddRow [ getText (_x "displayNameShort"), getText (_x "displayName")];
	_CT_LISTNBOX lnbSetPicture [ [_foreachIndex,0], getText (_x "texture")];
	} forEach (" isClass _x" configClasses ( configFile "CfgRanks"));
	_CT_LISTNBOX lnbSetCurSelRow 0;
	_current = lnbCurSelRow _CT_LISTNBOX;
	_color = _CT_LISTNBOX lnbColor [_current,0];
	_CT_LISTNBOX lnbSetColor [ [_current,1], [(_color select 0)/2,0,0,1] ];
	_CT_LISTNBOX lnbDeleteColumn 0;
	_CT_LISTNBOX lnbDeleteRow 1;
	sleep 1;
	lnbClear _CT_LISTNBOX;//Clear all items but control still remains just invisible.
	};
	$/Code$
	A combined use of both invisible and visible data processing commands alive the Control.
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		playMove
	</Keyword>
	<Description>
		When used on person, smooth transition to given move will be done.
	List of moves in ArmA 2 List of moves in Armed Assault List of moves in Operation Flashpoint: Resistance
	The difference between playMove and playMoveNow is that playMove adds another move to the move queue, while playMoveNow replaces the whole move queue with new move:
	$Code$ player switchMove "amovpercmstpsraswrfldnon";
	[] spawn
	{
	sleep 0.5;
	player playMove "amovppnemstpsraswrfldnon"; // player goes prone
	player playMove "amovpknlmstpsraswrfldnon"; // player gets up on one knee
	};$/Code$
	Compared to:
	$Code$ player switchMove "amovpercmstpsraswrfldnon";
	[] spawn
	{
	sleep 0.5;
	player playMove "amovppnemstpsraswrfldnon"; // player never goes prone
	player playMoveNow "amovpknlmstpsraswrfldnon"; // player goes down on one knee straight away
	};$/Code$
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/playMove
	</WikiPage>
	<Syntax>
		Object playMove String
	</Syntax>
	<RawSyntax>
		unitName playMove moveName
	</RawSyntax>
	<Example>
		$Code$soldierOne playMove "Stand"$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		For an immediate transition use switchMove. This command must be executed after mission start. If you place it into init.sqs / init.sqf or in the Init field of some unit, it will not work. Just add a little delay (~0.001) and then place the command.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		vectorCrossProduct
	</Keyword>
	<Description>
		Cross product of two 3D vectors.
	In layman's terms, if you have a polygon (surface) defined by 3 points, you can find a normal to it (just like terrain surfaceNormal ). To invert direction of the normal, swap arguments around.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/vectorCrossProduct
	</WikiPage>
	<Syntax>
		Array vectorCrossProduct Array
	</Syntax>
	<RawSyntax>
		vector1 vectorCrossProduct vector2
	</RawSyntax>
	<Example>
		$Code$_vector = [1,1,1] vectorCrossProduct [2,2,2];$/Code$
	</NextExample>
		$Code$_vectorUp = [0,1,0] vectorCrossProduct [-1,0,0]; //[0,-0,1]$/Code$
	</NextExample>
		$Code$_vectorSide = ( vectorDir player ) vectorCrossProduct ( vectorUp player );$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(28 Jun, 2014)
	(ArmA3 1.22)Algorithm:
	$Code$
	Vector1 = [x1,y1,z1]; Vector2 = [x2,y2,z2];
	Result = [(y1 * z2) – (z1 * y2),(z1 * x2) – (x1 * z2),(x1 * y2) – (y1 * x2)];
	$/Code$
	It is recommended to use vectorCrossProduct instead of BIS_fnc_crossProduct.
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		select
	</Keyword>
	<Description>
		Selects an element from an array, config entry from Config or substring from a string or a range from an array.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/select
	</WikiPage>
	<Syntax>
		Array select Number
	</NextSyntax>
		Array select Boolean
	</NextSyntax>
		Config select Number
	</NextSyntax>
		String select Array
	</NextSyntax>
		Array select Array
	</NextSyntax>
		Array select Code
	</Syntax>
	<RawSyntax>
		array select index
	</NextRawSyntax>
		array select boolean
	</NextRawSyntax>
		config select index
	</NextRawSyntax>
		string select [start, length]
	</NextRawSyntax>
		array select [start, count]
	</NextRawSyntax>
		array select expression
	</RawSyntax>
	<Example>
		$Code$[1,2,3,4] select 2; //result is 3
	position player select 2; //result is Z coordinate of player position$/Code$
	</NextExample>
		$Code$["", currentWeapon player ] select alive player ; //if dead "" is selected$/Code$
	</NextExample>
		$Code$( configFile "cfgVehicles" typeOf vehicle player "Turrets") select 0 "gunnerAction";$/Code$
	</NextExample>
		$Code$hint str ("japa is the man!" select [8]); //the man!
	hint str ("japa is the man!" select [0,7]); //japa is$/Code$
	</NextExample>
		$Code$hint str ([1,2,3,4,5,6] select [1,4]); //[2,3,4,5]$/Code$
	</NextExample>
		$Code$_even = [1,2,3,4,5,6,7,8,9,0] select {_x%2 == 0}; // returns [2, 4, 6, 8, 0]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(3 March 2009)
	When combined with the count command, this can be used to read all entries out of a config; even when you don't know exactly how many entries there will be. See the notes under count for more info.
	</NextNote>
		(27 Sep, 2013)
	Rounding of fractions with select is not the same as when you use round command:
	$Code$_roundThis = 0.5;
	hint str ([0,1] select _roundThis); //0
	hint str round _roundThis; //1$/Code$
	</NextNote>
		(30 May, 2014)
	In ArmA3 ver 1.18, Boolean type supported. Which true defaulted as 1 and false as 0.
	$Code$[0,1] select (56 40) // 1
	[0,1,2] select ((! isNil "v") && false ) // 0$/Code$
	</NextNote>
		(14 juil, 2016)
	You can substract array from array using select:
	$Code$_array = [[1],[2],[3]]; _sub = [2];
	_array - _sub // [[1],[2],[3];
	_array select {!(_x isEqualTo _sub)} // [[1],[3]];
	[[1],[2],[2],[2],[2],[3]] select {!(_x isEqualTo _sub)} // [[1],[3]];
	$/Code$
	</NextNote>
		(June 22, 2015)
	Usually when select tries to pick up element out of range, Arma throws "division by zero" error. However there are exceptions. Basically as long as index of element you are selecting is less then or equal to array size, you will get no error.
	$Code$[] select 0; //ok, result is nil
	[1,2,3] select 3; //ok, result is nil
	[1,2,3] select 4; //division by zero$/Code$
	</NextNote>
		(November 12, 2016)
	It is not safe to escape the code block of alternative syntax #5 with exitWith, breakOut etc.
	$Code$x3 = [1,2,3,4,5] select {
	if (_x == 3) exitWith {
	false;
	};
	true
	};
	// could be expected to be: x3 = [1,2,4,5]
	// actual result: x3 = false
	$/Code$
	</NextNote>
		(February 14, 2017)
	Syntax #5 is the equivalent of passing in a predicate that returns a boolean. In SQF, a piece of code will always return what the last executed command returned.
	$Code$
	myAliveUnits = allunits select {alive _x;}; // alive returns a boolean, the last statement run was alive _x, therefore this piece of code will return a true/false to the select command
	myEastGroups = allgroups select {side _x == EAST;}; // returns all groups that are side EAST
	my4ManGroups = allgroups select { count (units _x) == 4;}; // returns all groups that have 4 men in them
	UnitsThatDetectedMe = allunits select {_x knowsAbout player 0.1;}; // returns a list of units that have detected the player
	$/Code$
	</NextNote>
		(May 28, 2017)
	Very simple example of how to report about the status of the player:
	$Code$[ "Player is dead.", "Player is alive" ] select ( alive player )$/Code$
	returns "Player is alive" because ( alive player ) returned true. If ( alive player ) returned false, the first element (0)
	would have been returned.
	That is a great way of reporting about something without having to write a complicated it then else statement.
	</Note>
	<ReturnValue>
		Anything - Anything - Config - String - Array - Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		sliderSetSpeed
	</Keyword>
	<Description>
		Set speed of slider with id idc of topmost user dialog.
	Click to arrow - move by line
	Click to scale outside thumb - move by page.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/sliderSetSpeed
	</WikiPage>
	<Syntax>
		sliderSetSpeed Array
	</NextSyntax>
		Control sliderSetSpeed Array
	</Syntax>
	<RawSyntax>
		sliderSetSpeed [idc,line,page]
	</NextRawSyntax>
		control sliderSetSpeed [line, page]
	</RawSyntax>
	<Example>
		$Code$sliderSetSpeed [101, 0.5, 2];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setObjectMaterialGlobal
	</Keyword>
	<Description>
		Set the material of the given selection on all computers in a network session.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setObjectMaterialGlobal
	</WikiPage>
	<Syntax>
		Object setObjectMaterialGlobal Array
	</Syntax>
	<RawSyntax>
		obj setObjectMaterialGlobal [selection, material]
	</RawSyntax>
	<Example>
		$Code$player setObjectMaterialGlobal [0, "A3\Structures_F\Data\Windows\window_set.rvmat"];$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setCurrentWaypoint
	</Keyword>
	<Description>
		Sets the currently active waypoint for a group.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setCurrentWaypoint
	</WikiPage>
	<Syntax>
		Object/Group setCurrentWaypoint Array
	</Syntax>
	<RawSyntax>
		groupName setCurrentWaypoint waypoint
	</RawSyntax>
	<Example>
		$Code$_grp setCurrentWaypoint [_grp, 1];$/Code$
	</Example>
	<Locality>
		local / undefined
	</Locality>
	<Note>
		(27 Aug 2007)
	(A1 1.08) Does not seem to work with Game Logic. Crashes to desktop.
	</NextNote>
		(26 Nov 2008)
	Note that a waypoints number as seen in the mission editor is not the same as it's waypoint number using this command. In the mission editor, waypoint 0 refers to the first placed waypoint, whereas waypoint 0 with the setCurrentWaypoint command refers to the unit's initial position waypoint.
	</NextNote>
		(17 Jan 2010)
	(A2 1.05) This command may crash the game to desktop if you call it from the on act field of a waypoint that belongs to that same unit.
	</NextNote>
		(13 Aug 2012)
	Using this command forces the last waypoint to complete. Any code in the on Act of that waypoint will run.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		enableAI
	</Keyword>
	<Description>
		Enables parts of the AI behavior that was disabled by disableAI.
	NOTE: When player switches and leaves behind AI unit, you need to enable "TeamSwitch" AI on it _unit enableAI "TeamSwitch" so that the unit continues with waypoints
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/enableAI
	</WikiPage>
	<Syntax>
		Object enableAI String
	</Syntax>
	<RawSyntax>
		unit enableAI skilltype
	</RawSyntax>
	<Example>
		$Code$_soldierOne enableAI "Move";$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setWind
	</Keyword>
	<Description>
		Set current (forced == false) or permanent (forced == true) wind vector.
	NOTE : The effect is global only if command is executed on the server. Wind set locally will sync back to server value in a while.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setWind
	</WikiPage>
	<Syntax>
		setWind Array
	</Syntax>
	<RawSyntax>
		setWind [x, y, forced]
	</RawSyntax>
	<Example>
		$Code$setWind [10, 10, true];$/Code$
	</Example>
	<Locality>
		undefined / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		inAreaArray
	</Keyword>
	<Description>
		Filters given list of Objects and/or Positions in relation to the given area, defined by a trigger, marker, location or array. Returns array of Objects and/or Positions from the list that are inside the area
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/inAreaArray
	</WikiPage>
	<Syntax>
		Array inAreaArray Object
	</NextSyntax>
		Array inAreaArray String
	</NextSyntax>
		Array inAreaArray Location
	</NextSyntax>
		Array inAreaArray Array
	</Syntax>
	<RawSyntax>
		positions inAreaArray trigger
	</NextRawSyntax>
		positions inAreaArray marker
	</NextRawSyntax>
		positions inAreaArray location
	</NextRawSyntax>
		positions inAreaArray [center, a, b, angle, isRectangle, c]
	</RawSyntax>
	<Example>
		$Code$vehicles inAreaArray trigger_1;$/Code$
	</NextExample>
		$Code$allUnits inAreaArray marker_1;$/Code$
	</NextExample>
		$Code$allPlayers inAreaArray location_1;$/Code$
	</NextExample>
		$Code$allDead inAreaArray [[100, 100, 0], 20, 30, 45, false, 10];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(June 11, 2017)
	The array you send the command can be filtered. For example:
	$Code$ vehicles inAreaArray "mymarker" select {_x isKindOf "StaticWeapon"}$/Code$
	Will return only the statics inside the given marker
	</Note>
	<ReturnValue>
		Array - Array - Array - Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlCreate
	</Keyword>
	<Description>
		Creates new control in given display. Some of the common controls that can be used with this command:
	RscText - simple text box
	RscTextMulti - simple multiline text box
	RscPicture - simple picture box
	RscPictureKeepAspect - picture box that doesn't stretch picture
	RscEdit - input box
	RscEditMulti - multiline input box
	RscTree - tree view control
	RscTreeSearch - searchable tree view control (see Example 4)
	RscVideo - picture control with autostart for video texture (see BIS_fnc_playVideo )
	RscVideoKeepAspect - picture control for video to keep original video aspect ratio
	NOTE : Since Arma 3 v1.69.141213 ctrlCreate will also search for control class in mission config, if search in the main config failed. This means one can now define classes in mission config and use them with ctrlCreate
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlCreate
	</WikiPage>
	<Syntax>
		Display ctrlCreate Array
	</Syntax>
	<RawSyntax>
		display ctrlCreate [class, idc, controlsGroup]
	</RawSyntax>
	<Example>
		$Code$_display ctrlCreate ["RscText", 1234];$/Code$
	</NextExample>
		$Code$_map = findDisplay 46 ctrlCreate ["RscMapControl", -1];
	_multiLineText = findDisplay 46 ctrlCreate ["RscTextMulti", -1];
	_multiLineEdit = findDisplay 46 ctrlCreate ["RscEditMulti", -1];$/Code$
	</NextExample>
		$Code$myControl = findDisplay 0 ctrlCreate ["RscText", 1234, findDisplay 0 displayCtrl 2300];$/Code$
	</NextExample>
		$Code$// Create Tree View control with search. Available RscTreeSearch class is hardcoded to be used with RscEdit with idc 645. Example below demonstrates how to. After tree is generated, try typing something in the top box.
	[] spawn
	{
	disableSerialization ;
	_display = findDisplay 46 createDisplay "RscDisplayEmpty";
	_edit = _display ctrlCreate ["RscEdit", 645];
	_edit ctrlSetPosition [0,0,1,0.04];
	_edit ctrlSetBackgroundColor [0,0,0,1];
	_edit ctrlCommit 0;
	_tv = _display ctrlCreate ["RscTreeSearch", -1];
	_tv ctrlSetFont "EtelkaMonospacePro";
	_tv ctrlSetFontHeight 0.03;
	_tv ctrlSetPosition [0,0.06,1,0.94];
	_tv ctrlSetBackgroundColor [0,0,0,1];
	_tv ctrlCommit 0;
	_classes = "true" configClasses ( configFile "CfgVehicles");
	for "_i" from 0 to 5 do
	{
	_tv tvAdd [[], configName selectRandom _classes];
	for "_j" from 0 to 5 do
	{
	_tv tvAdd [[_i], configName selectRandom _classes];
	for "_k" from 0 to 5 do
	{
	_tv tvAdd [[_i, _j], configName selectRandom _classes];
	for "_n" from 0 to 5 do
	{
	_tv tvAdd [[_i, _j, _k], configName selectRandom _classes];
	};
	};
	};
	};
	};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(February 6, 2016)
	Although you can only dynamically create controls using BIS's configs, there are many commands to change certain aspects of each created control. See GUI Control
	</NextNote>
		(May 29, 2017)
	Since Arma 3 1.70 ListBoxes created thru ctrlCreate are no more encountering problems with max of 7 selections without scrolling the control.
	</Note>
	<ReturnValue>
		Control
	</ReturnValue>

</NextListItem>

	<Keyword>
		addAction
	</Keyword>
	<Description>
		This command syntax is for Arma 3 only. For TKOH and older versions see addAction TKOH
	Adds an entry to the action menu of an object (scroll wheel menu). The action can only be activated when in proximity to the object (eg: building). Adding an action to the player obviously makes that action available to the player at all times. The appearance of onscreen text could be further tweaked with setUserActionText. For event handling of user interaction see inGameUISetEventHandler
	This command has local effect. Created action is only available on the computer where command was executed. To make action available to all players, command must be executed on all connected clients (see remoteExec ). addAction is also ignored on dedicated server, because of no user interface. In Arma 3 addAction does not work on animals. This is intended behavior.
	Since Arma 3 v1.63.136787, two new params are available: radius and unconscious.
	Since Arma 3 v1.69.140846, new param is available: selection.
	Since Arma 3 v1.81.144102, new param is available: memoryPoint & radius param is now always referencing distance between player eye position ( eyePos ) and object selection, memory point or [0,0,0]; in this order, depending on what params are supplied to the command.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/addAction
	</WikiPage>
	<Syntax>
		Object addAction Array
	</Syntax>
	<RawSyntax>
		object addAction [title, script, arguments, priority, showWindow, hideOnUse, shortcut, condition, radius, unconscious, selection, memoryPoint]
	</RawSyntax>
	<Example>
		$Code$// Short and sweet:
	player addAction ["A Useless Action That Does Nothing", {}];
	player addAction [" t color='#FF0000' This Useless Action Is RED /t ", { hint "RED"}];
	player addAction ["Hint Hello!", { hint format ["Hello %1!", _this select 3]}, name player ];
	player addAction ["String Exec", " hint 'this is also compiled'"];$/Code$
	</NextExample>
		$Code$// SQF file example:
	_act = player addAction ["Exec the file", "somescript.sqf"]
	// somescript.sqf: hint str _this;$/Code$
	</NextExample>
		$Code$// SQS file example:
	_genAct = generator addAction ["Switch on generator", "activate_generator.sqs"]
	// activate_generator.sqs:_gen = _this select 0
	_caller = _this select 1
	_id = _this select 2
	; remove the action once it is activated
	_gen removeAction _id
	// This example shows an action called "Switch on generator" added to an object with the name 'generator'. As soon as the player gets close to this object, he can execute the given action via the action menu. Then the script 'activate_generator.sqs' is executed, which in our example only removes the action from the generator.$/Code$
	</NextExample>
		$Code$// Create object on dedicated server and add action to the object on every client:
	if ( isDedicated ) then
	{
	_obj = "some_obj_class" createVehicle [1234, 1234, 0];
	[_obj, ["Greetings!", { hint "Hello!"}]] remoteExec ["addAction", -2, _obj];
	};$/Code$
	</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
		(August 2, 2006)
	An easy way to keep track of and remove actions is to store the IDs of the actions in variables.
	This can be accomplished by doing the following:
	$Code$_myaction = player addAction ["Hello", "hello.sqs"];$/Code$
	This stores the action's ID in the local variable "_myaction" and assists in keeping track of the action ID.
	To remove the above action, you would use the following line:
	$Code$ player removeAction _myaction;$/Code$
	</NextNote>
		(17:35, 24 August 2013 (CEST))
	In Arma 3 addAction does not work on animals. This is intended behavior.
	</NextNote>
		(June 19, 2014)
	If executing actual script code like this:
	$Code$_unit addAction [ "yourAction", { hint "A line of code" } ];$/Code$
	you can have a user action that uses and/or affects variables used elsewhere in the script that adds the action.
	But beware!
	The variable(s) must be global otherwise it won't work! i.e.
	Fail
	$Code$_variable = false ; _unit addAction [ "action", { _variable = true } ];$/Code$
	Succeed
	$Code$variable = false ; _unit addAction [ "action", { variable = true } ];$/Code$
	</NextNote>
		(March 10, 2015)
	Actionception: $Code$actions = [];
	actions set [0, player addAction ["Actionception", {
	if ( count actions == 1) then {
	actions set [1, player addAction [" Actionception ", {
	if ( count actions == 2) then {
	actions set [2, player addAction [" Actionception ", {
	if ( count actions == 3) then {
	actions set [3, player addAction [" Actionception ", {
	{
	player removeAction _x ;
	} forEach actions;
	}, [], 10, false, true ]];
	};
	}, [], 10, false, false ]];
	};
	}, [], 10, false, false ]];
	};
	}, [], 10, false, false ]];$/Code$
	Function to remove user actions with unknown ids:
	$Code$KK_fnc_removeUnknownUserActions = {
	for "_i" from 0 to ( player addAction ["",""]) do {
	if !(_i in _this ) then {
	player removeAction _i;
	};
	};
	};$/Code$
	To test:
	$Code$ for "_i" from 0 to 9 do {
	player addAction ["Action #" + str _i, {
	[0,5,6] call KK_fnc_removeUnknownUserActions;
	}];
	};
	$/Code$
	Removes all user actions but 0, 5 and 6.
	</NextNote>
		(July 18, 2016)
	A3 v1.62.137494 : Condition is not evaluated when map is opened (and probably also true for other displays or opened dialog)
	</NextNote>
		(October 28, 2017)
	addAction with all the default parameters:
	$Code$
	addAction["Cookies",{},nil,1.5,true,true,"","true",15,false,""];
	$/Code$
	/dd
	/dl
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		sqrt
	</Keyword>
	<Description>
		Returns square root of x.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/sqrt
	</WikiPage>
	<Syntax>
		sqrt Number
	</Syntax>
	<RawSyntax>
		sqrt x
	</RawSyntax>
	<Example>
		$Code$_sq = sqrt 9; // Result is 3$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(18:05, 24 August 2014 (EST))
	Alternatively use "x^0.5" or "x^(1/2)". $Code$_sq = 9^0.5; //Result is 3
	_sq = 9^(1/2); //Result is 3$/Code$
	You can use this method to get any root.
	Cubed root = x^(1/3) or x^0.333[repeating].
	Root 4 = x^(1/4) or x^0.25.
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		else
	</Keyword>
	<Description>
		Executes else code when if condition returns false
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/else
	</WikiPage>
	<Syntax>
		Code else Code
	</Syntax>
	<RawSyntax>
		ifCode else elseCode
	</RawSyntax>
	<Example>
		$Code$if (a b) then { c = 0 } else { c = 1 };$/Code$
	</NextExample>
		$Code$if (a b) then {
	hint "B is greater than A";
	} else {
	hint "A is greater than B";
	};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		getMarkerPos
	</Keyword>
	<Description>
		Returns the position of a given marker in format [x,y,0]. Array element 3 (height above ground) is always zero. If a non-existing marker is referenced the values returned are [0,0,0].
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getMarkerPos
	</WikiPage>
	<Syntax>
		getMarkerPos String
	</Syntax>
	<RawSyntax>
		getMarkerPos markerName
	</RawSyntax>
	<Example>
		$Code$"MarkerOne" setMarkerPos [200,100];
	_pos = getMarkerPos "MarkerOne"
	// _pos is [200,100,0]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(September 1, 2016)
	To acomplish getting the altitude of a marker you can do workaround using setMarkerDir as it accepts any number (above 360 or below -360):
	$Code$"Marker" setMarkerPos [200,200];
	"Marker" setMarkerDir 1640;
	$/Code$
	After, setting player position as an example:
	$Code$player setPosASL [(getMarkerPos "Marker") select 0, (getMarkerPos "Marker") select 1,(markerDir "Marker")]$/Code$
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		shownRadio
	</Keyword>
	<Description>
		Check if player has Radio enabled.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/shownRadio
	</WikiPage>
	<Syntax>
		shownRadio
	</Syntax>
	<RawSyntax>
		shownRadio
	</RawSyntax>
	<Example>
		$Code$if ( shownRadio ) then { hint "You have Radio enabled."};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		profileName
	</Keyword>
	<Description>
		Returns profile name.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/profileName
	</WikiPage>
	<Syntax>
		profileName
	</Syntax>
	<RawSyntax>
		profileName
	</RawSyntax>
	<Example>
		$Code$_myProfileName = profileName ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		join
	</Keyword>
	<Description>
		Join all units in the array to given group.
	Maximum number of group members is:
	OFP: 12
	Arma: ?
	Arma 2: ?
	Arma 3: "unlimited" (3000+)
	VBS 2: "unlimited" (260+)
	To have a group member leave a group, join him with the grpNull group (e.g. [guy1] join grpNull ), but beware, as brand new group is created for the leaving unit and this could result in the number of groups in a mission growing out of control.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/join
	</WikiPage>
	<Syntax>
		Array join Group/Object
	</Syntax>
	<RawSyntax>
		unitArray join group
	</RawSyntax>
	<Example>
		$Code$[_unitOne, _unitTwo] join player ;$/Code$
	</NextExample>
		$Code$[_unitOne, _unitTwo] join ( group player );$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		if
	</Keyword>
	<Description>
		This operator creates a If Type which is used in the if-construct as described here.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/if
	</WikiPage>
	<Syntax>
		if Boolean
	</Syntax>
	<RawSyntax>
		if condition
	</RawSyntax>
	<Example>
		$Code$_retVal = if (1 0) then { "It's true" } else { "It's false" };
	hint str _retVal$/Code$
	</NextExample>
		$Code$_val = if ( true ) then [ { "true" }, { "false" } ];
	hint _val;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(Jan 31, 2007)
	Any _local variables you declare within the body of an if / then statement (ie between the curly braces) are local to that 'if' statement, and are destroyed at the end of the statement. If you know you want to use the variable outside the 'if' statement, make sure your declare it before the 'if' statement.
	</NextNote>
		(Jan 17, 2010)
	(A2 1.05) If the condition is nil then neither the "then" nor the "else" section get executed, but the script will proceed with no error messages.
	Example code:
	$Code$
	hint "script started"; //will get executed
	if (nil) then
	{
	hint "true"; // will never get executed
	}
	else
	{
	hint "false"; // will never get executed
	};
	sleep 3;
	hint "script ended"; //will get executed$/Code$
	</NextNote>
		(June 5, 2015)
	If you only need to choose between 2 raw values, it is possible to use the following trick to avoid using code blocks, as required by the if command, which results in greater atomicity and faster execution:
	$Code$_result = [falseValue, trueValue] select condition;$/Code$
	The select command treats "false" as 0 and "true" as 1, therefore you can feed it a condition determining the array index of the value to be returned. Here is another example:
	$Code$_result = [1,-1] select (_this 0); // If _this is less than 0, _result will be equal to -1, otherwise it will be 1$/Code$
	This feature was added in Arma 3.
	</Note>
	<ReturnValue>
		If_Type
	</ReturnValue>

</NextListItem>

	<Keyword>
		getRepairCargo
	</Keyword>
	<Description>
		Returns the amount of repair resources from empty (0) to full (1) in the cargo space of a repair vehicle.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getRepairCargo
	</WikiPage>
	<Syntax>
		getRepairCargo Object
	</Syntax>
	<RawSyntax>
		getRepairCargo vehicle
	</RawSyntax>
	<Example>
		$Code$value = getRepairCargo vehicleName;$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(December 22, 2014)
	If the vehicle is not alive, it always returns Nothing, which you should check for using isNil.
	If the vehicle is unable to carry that type of cargo, it returns -1.#IND, which you should check for using finite.
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		ropeAttachedObjects
	</Keyword>
	<Description>
		Returns list of attached objects on ropes
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ropeAttachedObjects
	</WikiPage>
	<Syntax>
		ropeAttachedObjects Object
	</Syntax>
	<RawSyntax>
		ropeAttachedObjects vehicle
	</RawSyntax>
	<Example>
		$Code$_cargoArray = ropeAttachedObjects heli1;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		createAgent
	</Keyword>
	<Description>
		Creates an (independent) agent (person) of the given type (type is a name of a subclass of CfgVehicles ). An agent does not have a group or leader or the standard soldier FSM associated with it -- for instance, an enemy soldier spawned as an agent has limited AI and will stand stupidly when fired upon -- which can be useful to limit the amount of AI processing being done in a mission with very large numbers of "AI". If the markers array contains several marker names, the position of a random one is used, otherwise, the given position is used. The unit is placed inside a circle with this position as its center and placement as its radius.
	Players assigned to an agent using setPlayable will be able to control the agent, operate weapons and other actions, but will not be able to access their inventory using the gear screen.
	Special properties can be: "NONE", "CAN_COLLIDE" and "FORM".
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/createAgent
	</WikiPage>
	<Syntax>
		createAgent Array
	</Syntax>
	<RawSyntax>
		createAgent [type, position, markers, placement, special]
	</RawSyntax>
	<Example>
		$Code$agent = createAgent ["SoldierWB", position player, [], 0, "FORM"];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(September 29, 2014)
	In Arma 3, default FSM is calling BIS_fnc_animalBehaviour script upon agent creation, which takes on some animal behavioural logic. The problem here is that it is almost impossible to make animal do what is told. Until now. Since Arma 3 v1.31.127383 you can set BIS_fnc_animalBehaviour_disable variable on the agent at the moment of agent creation, to override the function.
	$Code$tr = createTrigger ["EmptyDetector", player modelToWorld [0, 10, 0]];
	tr setTriggerArea [5, 5, 0, true ];
	tr setTriggerActivation ["CIV", "PRESENT", true];
	rabbits = [];
	private "_r";
	for "_i" from 1 to 10 do {
	_r = createAgent ["Rabbit_F", position tr, [], 0, "NONE"];
	_r setVariable ["BIS_fnc_animalBehaviour_disable", true ];
	rabbits pushBack _r;
	};
	tr setTriggerStatements [
	" if (rabbits isEqualTo thisList) exitWith {
	_r = thisList select floor random count thisList;
	_r moveTo (_r modelToWorld [2.5 - random 5, 2.5 - random 5, 0]);
	};
	_esc = rabbits - thisList;
	doStop _esc;
	{_x moveTo position thisTrigger} forEach _esc;
	systemChat str [ time, _esc];
	false ",
	"",
	""
	];$/Code$
	</NextNote>
		(April 18, 2015)
	Agents seem to use the same collision model that the player uses, unlike normal AI. Normal AI don't collide with objects, but agents are physically stopped by obstacles the same way players are. This also probably means agents cost more resources than normal AI.
	</Note>
	<ReturnValue>
		Object
	</ReturnValue>

</NextListItem>

	<Keyword>
		isDLCAvailable
	</Keyword>
	<Description>
		Returns true if the DLC is marked as available. (Steam)
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isDLCAvailable
	</WikiPage>
	<Syntax>
		isDLCAvailable Number
	</Syntax>
	<RawSyntax>
		isDLCAvailable appid
	</RawSyntax>
	<Example>
		$Code$_Karts = 288520;
	isDLCAvailable _Karts;//Returns true$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(October 19, 2014)
	appid can be taken from Steam DLC url.
	Karts url is http://store.steampowered.com/app/ 288520 /
	Zeus url is http://store.steampowered.com/app/ 275700 /
	DLC bundle url is http://store.steampowered.com/app/ 304400 /
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		in
	</Keyword>
	<Description>
		Checks whether value is in array, unit in vehicle or position inside location. In case of value in array check, String values will be compared on CaSEseNsiTIve basis (see Example 2). Note: In Arma 2 you can not test for arrays within arrays using this command.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/in
	</WikiPage>
	<Syntax>
		Anything in Array
	</NextSyntax>
		Object in Object
	</NextSyntax>
		Array in Location
	</Syntax>
	<RawSyntax>
		value in array
	</NextRawSyntax>
		unit in vehicle
	</NextRawSyntax>
		position in location
	</RawSyntax>
	<Example>
		$Code$1 in [0,1,2]; //true$/Code$
	</NextExample>
		$Code$"lol" in ["Lol", "LOL", "loL"]; //false
	"loL" in ["Lol", "LOL", "loL"]; //true$/Code$
	</NextExample>
		$Code$// Arma 3:
	[1,2,3] in [[1,2,3],[4,5,6]]; //true$/Code$
	</NextExample>
		$Code$_isInCar = player in car;$/Code$
	</NextExample>
		$Code$_isInside = [1000,2000,0] in myLocation;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(15:58, 18 January 2007 (CET))
	For a case- insensitive test use count :
	$Code${_x == "lol"} count ["Lol", "LOL", "loL"]; //returns 3.$/Code$
	Checking if an array (for example a position) is in another array doesn't produce an error, but it will always return false. e.g.
	$Code$[0,0,0] in [[0,0,0],[1,4,3],[5,3,1]]; //returns: false.$/Code$
	</NextNote>
		(August 23, 2014)
	As of Arma 3 1.26:
	$Code$[0,0,0] in [[0,0,0],[1,4,3],[5,3,1]]; //returns true
	[1,2,3] in [[1,2,3],[4,5,6]]; //returns true
	$/Code$
	Assuming it is now using comparison as found in isEqualTo
	</NextNote>
		(August 27, 2017)
	The Object syntax of in might not behave as you'd expect (e.g. it would always return true ) when both parameters are the same object. It serves as a quick method of checking if a unit is mounted:
	$Code$ private _onFoot = _unit in _unit;$/Code$
	</Note>
	<ReturnValue>
		Boolean - Boolean - Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		leaderboardState
	</Keyword>
	<Description>
		returns state of the board with given name. 0: Busy (async. operation in progress); 1: Async. operation ended with success; 2: Async. operation ended with error; 3: Invalid board (bad board name, not initialized etc.).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/leaderboardState
	</WikiPage>
	<Syntax>
		leaderboardState String
	</Syntax>
	<RawSyntax>
		leaderboardState boardname
	</RawSyntax>
	<Example>
		$Code$leaderboardState ["TT01", 1234, [5,6,7,8]]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		targetKnowledge
	</Keyword>
	<Description>
		Returns unit's knowledge about target. The returned array includes information whether the target is
	known by group
	known by the unit
	last time the target was seen by the unit
	last time the target endangered the unit
	target side
	position error
	target position
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/targetKnowledge
	</WikiPage>
	<Syntax>
		Object targetKnowledge Object
	</Syntax>
	<RawSyntax>
		unit targetKnowledge target
	</RawSyntax>
	<Example>
		$Code$_allInfo = _soldierOne targetKnowledge _jeepOne;$/Code$
	</NextExample>
		$Code$_posError = (_soldierOne targetKnowledge _jeepOne) select 5;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		allMissionObjects
	</Keyword>
	<Description>
		Returns all mission objects (created by or during a mission) with given type (or its subtype). In some cases allMissionObjects could be substituted with entities, which would be much much faster alternative. Some of the unusual mission objects that can be detected with this command (as well as with nearestObject ):
	"#slop" - blood drop
	"#mark" - unit footprints
	"#track" - vehicle tracks
	"#crater" - explosion crater on the ground
	"#crateronvehicle" - bullet marks on vehicle
	"#explosion" - an explosion
	"#objectdestructed" - building, tree or bush destruction
	"#soundonvehicle" - sound created with say3D for example
	"#dynamicsound" - sound source created using createSoundSource
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/allMissionObjects
	</WikiPage>
	<Syntax>
		allMissionObjects String
	</Syntax>
	<RawSyntax>
		allMissionObjects type
	</RawSyntax>
	<Example>
		$Code$_airObjects = allMissionObjects "Air";$/Code$
	</NextExample>
		$Code${ deleteVehicle _x } forEach ( allMissionObjects "");$/Code$
	</NextExample>
		$Code$_allMObjects = allMissionObjects "All";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(June 22, 2012)
	Be VERY careful with the use of this command. It is very demanding as it must iterate through all mission created objects. Particular care should be taken exercising this often on dedicated servers.
	</NextNote>
		(Decembere 15, 2013)
	For some reason in Arma 3 this command is up to 5 times faster on the dedicated server than on a connected client. In my experiments it took on average 5 ms for the command to complete on a client while under 1 ms on the server.
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		getArtilleryAmmo
	</Keyword>
	<Description>
		Get list of all available magazines of artillery units on the list. Command returns only unique magazine types and doesn't contain any information about which unit has which magazine.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getArtilleryAmmo
	</WikiPage>
	<Syntax>
		getArtilleryAmmo Array
	</Syntax>
	<RawSyntax>
		getArtilleryAmmo [unit1, unit2, unit3]
	</RawSyntax>
	<Example>
		$Code$if ("8Rnd_82mm_Mo_Flare_white" in getArtilleryAmmo [
	_mortar1,
	_mortar2,
	_mortar3,
	_mortar4
	]) then {
	hint "Sir, we have white flares, sir!";
	};$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		setRectangular
	</Keyword>
	<Description>
		Set the shape of a location to be either rectangular or elliptical. Locations default shape is elliptical.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setRectangular
	</WikiPage>
	<Syntax>
		Location setRectangular Boolean
	</Syntax>
	<RawSyntax>
		location setRectangular set
	</RawSyntax>
	<Example>
		$Code$myLocation setRectangular true ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		triggerArea
	</Keyword>
	<Description>
		Returns currently monitored trigger area. The trigger could be local or remote but the result returned by this command will be for the trigger condition set up locally on the client that executed the command. See createTrigger for more info.
	NOTE : Since Arma 3 v1.59.135137, triggerArea returns 3rd dimension for the monitored area. If height is not set, the value for it would be -1;
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/triggerArea
	</WikiPage>
	<Syntax>
		triggerArea Object
	</Syntax>
	<RawSyntax>
		triggerArea trigger
	</RawSyntax>
	<Example>
		$Code$_area = triggerArea sensor1; // result is [200, 120, 45, false]$/Code$
	</NextExample>
		$Code$// Since Arma 3 v1.59.135137:
	_area = triggerArea sensor1; // result is [200, 120, 45, false, -1];$/Code$
	</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		createUnit
	</Keyword>
	<Description>
		Create unit of a class that's defined in CfgVehicles.
	The Group parameter MUST be an existing group or the unit won't be created.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/createUnit
	</WikiPage>
	<Syntax>
		Group createUnit Array
	</NextSyntax>
		String createUnit Array
	</Syntax>
	<RawSyntax>
		group createUnit [type, position, markers, placement, special]
	</NextRawSyntax>
		type createUnit [position, group, init, skill, rank]
	</RawSyntax>
	<Example>
		$Code$_unit = group player createUnit ["B_RangeMaster_F", position player, [], 0, "FORM"];$/Code$
	</NextExample>
		$Code$"B_RangeMaster_F" createUnit [ position player, group player ];$/Code$
	</NextExample>
		$Code$"B_RangeMaster_F" createUnit [ getMarkerPos "barracks", _groupAlpha];$/Code$
	</NextExample>
		$Code$"B_RangeMaster_F" createUnit [ getMarkerPos "marker_1", _groupAlpha, "loon1 = this;
	this addWeapon 'BAF_L85A2_RIS_SUSAT'", 0.6, "corporal"];$/Code$
	</Example>
	<Locality>
		undefined / global
	</Locality>
	<Note>
		(August 13, 2006)
	To give a newly created unit a name, put "newUnit = this" in the init field.
	</NextNote>
		(18:41, 5 April 2007 (CEST))
	The eventhandlers added with addEventHandler in the init parameter will only fire locally on the machine where this creation command is called from.
	</NextNote>
		(December 24, 2007)
	If you do not wish it to be in a group, you can create a gamelogic and group it to that. Note: The unit will deny to move away from the gamelogic.
	</NextNote>
		(August 27, 2015)
	In order to solve the above problem you can simply group it to the game logic as stated, then group it to grpNull
	e.g
	$Code$myUnit join myGroupLogic;
	myUnit join grpNull
	$/Code$
	</NextNote>
		(21 December 2006)
	Although this command takes a group as an argument, you need to use the join command if you want the created units to perform actions such as move. For example:
	$Code$ comment "Create a new soldier within 100m of the player and cause them to run towards the player" ;
	_grp = createGroup west ;
	unit = _grp createUnit ["SoldierWB", position player, [], 100, "FORM"] ;
	[unit] join _grp ;
	unit move position player ;
	$/Code$
	However, some commands such as setUnitPos only work if run before the join.
	</NextNote>
		(11 March 2011)
	Comment above about 'an additional join required' is no longer true for Operation Arrowhead.
	</NextNote>
		(27th Nov 2016)
	(A3 v1.64)The side of created unit by this command fallows the fraction from its config and won’t be affected by the side of the passed group parameter which is created by createGroup on the fly without entities.
	$Code$
	_grp = createGroup east ; // O Alpha 1-1
	_ap = _grp createUnit [ “C_man_p_beggar_F”, position player, [], 0, "FORM"];
	//the side of _ap is still CIV not EAST.
	$/Code$
	We can use join command family or fill the _grp with entities in advance to set _ap to our desired side.
	</Note>
	<ReturnValue>
		Object - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		params
	</Keyword>
	<Description>
		Parses input argument into array of private variables. When used without argument, as shown in main syntax, internal variable _this, which is usually available inside functions and event handlers, is used as argument.
	In addition to simple parsing directly into variables, input can be tested in case it is undefined, of the wrong type or of the wrong size (if array) and substituted if necessary with default values. Since Arma 3 v1.53.132691, onscreen errors are displayed for when the input is of the wrong type or size.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/params
	</WikiPage>
	<Syntax>
		params Array
	</NextSyntax>
		Anything params Array
	</Syntax>
	<RawSyntax>
		params [element1, element2,elementN]
	</NextRawSyntax>
		argument params [element1, element2,elementN]
	</RawSyntax>
	<Example>
		$Code$[1, 2, 3] call {
	private ["_one", "_two", "_three"];
	_one = _this select 0;
	_two = _this select 1;
	_three = _this select 2;
	//.....
	};
	// Same as above, only using params
	[1, 2, 3] call {
	params ["_one", "_two", "_three"];
	//.....
	};$/Code$
	</NextExample>
		$Code$[123] call {
	params ["_myvar"];
	};
	// Below would produce the same result as above
	123 call {
	params ["_myvar"];
	};$/Code$
	</NextExample>
		$Code$position player params ["", "", "_z"];
	if (_z 10) then {
	hint "YOU ARE FLYING!";
	};$/Code$
	</NextExample>
		$Code$[1, nil, 2] params ["_var1", "_var2", "_var3"];
	// All 3 variables are made private but only _var1 and _var3 are defined
	[1, nil, 2] params ["_var1", ["_var2", 23], "_var3"];
	// All 3 variables are private and defined$/Code$
	</NextExample>
		$Code$[1, 2] call {
	if (! params ["_var1", "_var2", ["_var3", true, [ true ]]]) exitWith {
	hint str [_var1, _var2, _var3];
	};
	};
	// The hint shows [1,2,true]
	//Script exits, default value was used due to missing value
	[1, 2, 3] call {
	if (! params ["_var1", "_var2", ["_var3", true, [ true ]]]) exitWith {
	hint str [_var1, _var2, _var3];
	};
	};
	// The hint shows [1,2,true]
	//Script exits, default value was used due incorrect value type$/Code$
	</NextExample>
		$Code$[1, "ok", [1, 2, 3]] call {
	if (! params [
	["_var1", 0, [0]],
	["_var2", "", [""]],
	["_var3", [0,0,0], [[], objNull, 0], [2,3]]
	]) exitWith {};
	hint "ok";
	};
	// Passes validation
	[1, 2, [3, 4, 5]] call {
	if (! params ["_var1", "_var2", ["_var3", [], [[], objNull, 0], 0]]) exitWith {};
	hint "ok";
	};
	// Fails, because passed array is expected to be of 0 length, i.e. empty$/Code$
	</NextExample>
		$Code$position player params ["_x", "_y"];
	player setPos [_x, _y, 100];$/Code$
	</NextExample>
		$Code$[1, 2, 3, [4, 5, 6]] call {
	params ["_one", "_two", "_three"];
	_this select 3 params ["_four", "_five", "_six"];
	};$/Code$
	</NextExample>
		$Code${
	_x params ["_group", "_index"];
	//.....
	} forEach waypoints group player ;
	fn_someFnc = {
	params ["_position", ["_direction", 0], ["_name", ""]];
	// Extract the x, y, and z from "_position" array:
	_position params ["_x", "_y", "_z"];
	//.....
	};
	[ position player, direction player, name player ] call fn_someFnc;$/Code$
	</NextExample>
		$Code$targ addEventHandler ["HitPart", {
	_this select 0 params ["_target", "_shooter", "_projectile"];
	}];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(August 30, 2015)
	Because params doubles as private, instead of:
	$Code$[1, 2, 3] params ["_one", "_two", "_three"];
	private "_four";
	_four = 4;$/Code$
	You can just:
	$Code$[1, 2, 3] params ["_one", "_two", "_three", "_four"];
	_four = 4;$/Code$
	</NextNote>
		(November 3, 2016)
	With a function only taking one Parameter, it doesn't matter whether the parameter is in an array or not:
	Example:
	$Code$1 call {
	params [ ["_number",0, [0]] ];
	};
	or
	[1] call {
	params [ ["_number",0, [0]] ];
	};$/Code$
	But when the one Parameter is an array that parameter has to be inside of an array when the function is called
	Example:
	$Code$[1,2] call {
	params [ ["_array", [], [[]], 2] ];
	};//Fails
	[[1,2]] call {
	params [ ["_array", [], [[]], 2] ];
	};//Succeeds$/Code$
	</Note>
	<ReturnValue>
		Boolean - Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		getArray
	</Keyword>
	<Description>
		Extract array from config entry.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getArray
	</WikiPage>
	<Syntax>
		getArray Config
	</Syntax>
	<RawSyntax>
		getArray config
	</RawSyntax>
	<Example>
		$Code$_array = getArray (configFile "CfgVehicles" "Thing" "threat")$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(Mar 28, 2014)
	(ArmA3 1.14) It's recommended to use BIS_fnc_GetCfgData or BIS_fnc_returnConfigEntry to get variable cfg data rather than conditioning via isNumber, isText, isArray, getNumber, getText and getArray combination.
	Traditional workaround:
	$Code$
	_cfg = configFile "CfgVehicles" _SomeAddonClassName "DestructionEffects" "Smoke1" "type"
	switch ( true ) do
	{
	case ( isNumber _cfg): { getNumber _cfg};
	case ( isText _cfg): { getText _cfg};
	case ( isArray _cfg): { getArray _cfg;};
	default { nil };
	};
	$/Code$
	Recommended workaround:
	$Code$
	( configFile "CfgVehicles" _SomeAddonClassName "DestructionEffects" "Smoke1" "type") call BIS_fnc_GetCfgData ;
	$/Code$
	To return default value once entry was not found, we can use BIS_fnc_returnConfigEntry instead of BIS_fnc_GetCfgData.
	$Code$
	[( configFile "CannonFire" "LightExp"),"lifeTime",0] call BIS_fnc_returnConfigEntry ;//0.5
	$/Code$
	</NextNote>
		(January 12, 2018)
	There is special behaviour if you try to read a description.ext config entry Array that contains a Bool.
	Getting array in MP will result in Number, while SP will return String.
	$Code$// SP with false in array
	getArray ( missionConfigFile "someClass" "someArray") // - "false"
	// MP with false in array
	getArray ( missionConfigFile "someClass" "someArray") // - 0$/Code$
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		setVehicleId
	</Keyword>
	<Description>
		Sets id (integer value) to vehicle. By this id vehicle is referenced by triggers and waypoints.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setVehicleId
	</WikiPage>
	<Syntax>
		Object setVehicleId Number
	</Syntax>
	<RawSyntax>
		vehicleName setVehicleId id
	</RawSyntax>
	<Example>
		$Code$player setVehicleId 1$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		mapAnimClear
	</Keyword>
	<Description>
		Clear map animation.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/mapAnimClear
	</WikiPage>
	<Syntax>
		mapAnimClear
	</Syntax>
	<RawSyntax>
		mapAnimClear
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
		In OFP v1.96, the mapAnim series of commands, together with forceMap can only be used in the intro and mission, as it is not possible to access the map from the outro. (not checked, sourced from an old copy of the OFPEC comref)
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		get3DENLayerEntities
	</Keyword>
	<Description>
		Return all entities and sub-layer in Eden Entity layer.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/get3DENLayerEntities
	</WikiPage>
	<Syntax>
		get3DENLayerEntities Number
	</Syntax>
	<RawSyntax>
		get3DENLayerEntities layerID
	</RawSyntax>
	<Example>
		$Code$_myLayer = -1 add3DENLayer "CTRG";
	player set3DENLayer _myLayer;
	_entities = get3DENLayerEntities _myLayer;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		waypointPosition
	</Keyword>
	<Description>
		Get Waypoint 's Position. Note : This function is identical to getWPPos.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/waypointPosition
	</WikiPage>
	<Syntax>
		waypointPosition Array
	</Syntax>
	<RawSyntax>
		waypointPosition waypoint
	</RawSyntax>
	<Example>
		$Code$_wPos = waypointPosition [_groupOne, 1];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		menuAction
	</Keyword>
	<Description>
		Returns action stored in item on given path.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/menuAction
	</WikiPage>
	<Syntax>
		menuAction Array
	</Syntax>
	<RawSyntax>
		menuAction [idc, path]
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		setSize
	</Keyword>
	<Description>
		Sets the size (radius) of a location.
	The width is 2 * x, the height is 2 * y.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setSize
	</WikiPage>
	<Syntax>
		Location setSize Array
	</Syntax>
	<RawSyntax>
		location setSize size
	</RawSyntax>
	<Example>
		$Code$myLocation setSize [10,30]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		assignAsCommander
	</Keyword>
	<Description>
		Assign a unit as commander of a vehicle. Used together with orderGetIn to order subordinate units to get in as commander of a specific vehicle. Before usage of this command a subordinate unit hasn't got the option to get into the commander place of the vehicle.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/assignAsCommander
	</WikiPage>
	<Syntax>
		Object assignAsCommander Object
	</Syntax>
	<RawSyntax>
		unitName assignAsCommander vehicleName
	</RawSyntax>
	<Example>
		$Code$_soldier1 assignAsCommander _tank
	[_soldier1] orderGetIn true$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setCuratorCameraAreaCeiling
	</Keyword>
	<Description>
		Sets maximal height to which curator camera can move.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setCuratorCameraAreaCeiling
	</WikiPage>
	<Syntax>
		Object setCuratorCameraAreaCeiling Number
	</Syntax>
	<RawSyntax>
		curatorObj setCuratorCameraAreaCeiling height
	</RawSyntax>
	<Example>
		$Code$myCurator setCuratorCameraAreaCeiling 50;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		This scripting command must be executed on the server to work properly in multiplayer
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		alive
	</Keyword>
	<Description>
		Check if given vehicle/person/building is alive (i.e. not dead or destroyed). alive objNull returns false.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/alive
	</WikiPage>
	<Syntax>
		alive Object
	</Syntax>
	<RawSyntax>
		alive object
	</RawSyntax>
	<Example>
		$Code$// SQS:
	?!( alive player ) : exit$/Code$
	</NextExample>
		$Code$// SQF:
	if (! alive player ) exitWith {};$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(October 19, 2015)
	Alive or not could be the question! in multi-player, missions come with respawn module(s). When a player is dead shot, (alive player) will return false, then almost immediately true if the "revive" respawn template is enabled, then could turn on false if time for assistance is elapsed or if the player activates the respawn menu before; and finally true after player respawns. Just be aware that in that case (respawn + revive enabled), the status of the player is toggling: true false true false true. Then, alive status while player is waiting for being rescued could lead to some error scripts as player is supposed to be alive but in limbo and the dead entity "player" passed to server.
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		getDescription
	</Keyword>
	<Description>
		Returns the string representation of unit as an four slots array.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getDescription
	</WikiPage>
	<Syntax>
		getDescription Object
	</Syntax>
	<RawSyntax>
		getDescription unit
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		Return value fixed in revision 0.51.103185.
	</NextNote>
		(September 21, 2014)
	Pretty useless command tbh, return is something like this:
	["B_Soldier_F","Combat Fatigues (MTP)","Carrier Lite (Green)",""] or ["ERROR","ERROR","ERROR","ERROR"]
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		loadBackpack
	</Keyword>
	<Description>
		Returns current sum of mass from items stored in a backpack.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/loadBackpack
	</WikiPage>
	<Syntax>
		loadBackpack Object
	</Syntax>
	<RawSyntax>
		loadBackpack unit
	</RawSyntax>
	<Example>
		$Code$myVariable = loadBackpack myUnit;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		simulWeatherSync
	</Keyword>
	<Description>
		Synchronizes Simul Weather with Arma weather, generates all keyframes.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/simulWeatherSync
	</WikiPage>
	<Syntax>
		simulWeatherSync
	</Syntax>
	<RawSyntax>
		simulWeatherSync
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(May 4, 2016)
	The behavior of this command is similar to forceWeatherChange, however it leaves current weather transitions intact. Its main purpose would be to refresh the cloud cover to properly reflect current overcast, as they can sometime get out of sync, especially when using setTimeMultiplier and setAccTime.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		canAddItemToBackpack
	</Keyword>
	<Description>
		Checks if given object can be stored into soldier's backpack.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/canAddItemToBackpack
	</WikiPage>
	<Syntax>
		Object canAddItemToBackpack String
	</NextSyntax>
		Object canAddItemToBackpack Array
	</Syntax>
	<RawSyntax>
		unit canAddItemToBackpack item
	</NextRawSyntax>
		unit canAddItemToBackpack [item, count]
	</RawSyntax>
	<Example>
		$Code$_item = "HandGrenade";
	_fits = player canAddItemToBackpack _item;
	if (_fits) then {
	player addItemToBackpack _item;
	} else {
	hint "no room!";
	};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean - Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		synchronizedObjects
	</Keyword>
	<Description>
		Return the list of objects synchronized with the given unit.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/synchronizedObjects
	</WikiPage>
	<Syntax>
		synchronizedObjects Object
	</Syntax>
	<RawSyntax>
		synchronizedObjects unit
	</RawSyntax>
	<Example>
		$Code$_objects = synchronizedObjects _logic;$/Code$
	</Example>
	<Locality>
		local / undefined
	</Locality>
	<Note>
		This command only returns the LEADER of a vehicle that is synchronized. You have to use the "vehicle"
	command to select the actual vehicle.
	This command only returns the synchronized objects when used on intelligent objects such as units or
	logic objects. All other objects returns an empty array.
	In MP this command returns only values when the object is local. otherwise it returns an empty array.
	</NextNote>
		(February 26, 2015)
	When returning the synchronized objects, they are returned in the order that they were placed on the map
	</NextNote>
		(October 27, 2016)
	In Eden you can synchronize both units and their vehicles separately by syncing the gamelogic (or whatever) to the vehicle itself, and then the driver (or whatever other passengers) of the vehicle. To use an entire group, just sync all units within that group to the gamelogic (not just the leader or group icon). By doing this you can execute commands on each unit in a group and just the crew/single unit of a vehicle, or just the vehicle and not the crew, or both the vehicle and the crew.
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		countEnemy
	</Keyword>
	<Description>
		Count how many units in the array are considered enemy to the given unit.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/countEnemy
	</WikiPage>
	<Syntax>
		Object countEnemy Array
	</Syntax>
	<RawSyntax>
		unitName countEnemy arrayName
	</RawSyntax>
	<Example>
		$Code$_num = player countEnemy list _triggerOne;$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(August 3, 2006)
	Notes from before the conversion:
	The countEnemy command seem to count the number of units from the array that are considered to be of the given type by the whole side, not just the specified unit.
	</NextNote>
		(December 15, 2006)
	The unit that's checking (left side of the command) needs a certain level of knowledge about the target (about.1) before the enemy units are actually counted. (OFP & ArmA)
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		setDate
	</Keyword>
	<Description>
		Sets the actual mission date and time.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setDate
	</WikiPage>
	<Syntax>
		setDate Array
	</Syntax>
	<RawSyntax>
		setDate [year, month, day, hour, minute]
	</RawSyntax>
	<Example>
		$Code$setDate [1986, 2, 25, 16, 0]; //(4:00pm February 25, 1986)$/Code$
	</NextExample>
		$Code$// Set real date:
	//postInit = 1;
	if ( isServer ) then {
	waitUntil { time 0};
	setDate ( missionStart select [0,5]);
	};$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
		This scripting command must be executed on the server to work properly in multiplayer
	</NextNote>
		This command is special in that it is "smart". If you add 120 minutes, for example, it will actually advance hours by 2, and so on.
	10:00, 7/12/2010 (BST)
	</NextNote>
		This command sets the date for the southern hemisphere only, i.e. when the map is in northern hemisphere a date [2010,12,7,17,0] is in day light and and date [2010,6,7,17,0] is in darkness.
	21:35, 31 October 2011 (EET)
	</NextNote>
		In multiplayer, the effect of this command is local, not global. The date from the server is synchronized with clients when they join the game (including start of the mission and joining in progress). E.g. if this command is executed on server in the init.sqf before the mission starts, every client will be synchronized with server as mission is started. However, if you run this command in the middle of the mission, effect is local.
	10 September 2013 (EET)
	</NextNote>
		This command is JIP compatible. Players joining after mission start will get current server date set up.
	</NextNote>
		(October 4, 2014)
	Since an unknown version of ARMA 3, this command now has global effect when executed on the server.
	</NextNote>
		(February 5, 2015)
	Arma 3 1.38.128937- Leapyear BUG - setdate [2016,12,31,23,59] yields an ingame date of the 1st of January 2017. If left to tick over from the 30th of December it ticks to 1st January skipping the 31st of December entirely.
	Feedback_Link
	</NextNote>
		(April 23, 2017)
	Regarding execution in the middle of a session, the post of MulleDK13 is not entirely true. If you don't change the year, you are perfectly fine when executing the command on the server only. However, the server does not sync the year. Hence, if you do change the year, you have to execute the command on the server, clients and JIP to account for the missing sync. e.g.
	$Code$[[], { setDate [1986, 2, 25, 16, 0]}] remoteExec [" call ",0,"JIP_id_setDate"];$/Code$
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		getPilotCameraTarget
	</Keyword>
	<Description>
		Returns the target of the object airplane or helicopter pilotCamera tracking.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getPilotCameraTarget
	</WikiPage>
	<Syntax>
		getPilotCameraTarget Object
	</Syntax>
	<RawSyntax>
		getPilotCameraTarget object
	</RawSyntax>
	<Example>
		$Code$_pilotCamTrack = ( getPilotCameraTarget vehicle player ) select 0;
	_pilotCamTargetPos = ( getPilotCameraTarget vehicle player ) select 1;
	_pilotCamTarget = ( getPilotCameraTarget vehicle player ) select 2;$/Code$
	</Example>
	<Locality>
		local / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		isMarkedForCollection
	</Keyword>
	<Description>
		Checks whether the object is marked for weapons collection.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isMarkedForCollection
	</WikiPage>
	<Syntax>
		isMarkedForCollection Object
	</Syntax>
	<RawSyntax>
		isMarkedForCollection object
	</RawSyntax>
	<Example>
		$Code$_marked = isMarkedForCollection _truck$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		libraryCredits
	</Keyword>
	<Description>
		Returns the credits for the libraries used by the game.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/libraryCredits
	</WikiPage>
	<Syntax>
		libraryCredits
	</Syntax>
	<RawSyntax>
		libraryCredits
	</RawSyntax>
	<Example>
		$Code$hint str libraryCredits ; // as in Arma2 OA 1.62.95208
	/*
	[
	[
	"Botan",
	"1999-2012 Jack Lloyd, 2001 Peter J Jones, 2004-2007 Justin Karneges, 2004 Vaclav Ovsik, 2005 Matthew Gregan, 2005-2006 Matt Johnston, 2006 Luca Piccarreta, 2007 Yves Jerschow, 2007-2008 FlexSecure GmbH, 2007-2008 Technische Universitat Darmstadt, 2007-2008 Falko Strenzke, 2007-2008 Martin Doering, 2007 Manuel Hartl, 2007 Christoph Ludwig, 2007 Patrick Sona, 2010 Olivier de Gaalon"
	],
	[
	"rapidjson",
	"2011 Milo Yip"
	],
	[
	"libcurl",
	"Copyright (c) 1996 - 2012, Daniel Stenberg"
	],
	[
	"GameSpy",
	"2009 GameSpy Industries, Inc."
	],
	[
	"Theora",
	"2002-2009 by the Xiph.Org Foundation http://www.xiph.org/"
	],
	[
	"OggVorbis",
	"1994-2002 by the Xiph.Org Foundation http://www.xiph.org/"
	],
	[
	"Intel JPEG Library",
	"1998 Intel Corporation"
	],
	[
	"Matrix Template Library",
	"2001-2005 The Trustees of Indiana University"
	],
	[
	"Matrix Template Library",
	"1998-2001 University of Notre Dame"
	],
	[
	"Speex",
	"2002-2006 Jean-Marc Valin"
	],
	[
	"LZO Professional",
	"1996-2011 Markus Franz Xaver Johannes Oberhumer"
	],
	[
	"NVIDIA FXAA by TIMOTHY LOTTES",
	"2010, 2011 NVIDIA CORPORATION"
	],
	[
	"Jimenez's MLAA",
	"2012 2011 by Jorge Jimenez, Belen Masia, Jose I. Echevarria, Fernando Navarro and Diego Gutierrez"
	]
	]
	*/$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		enableAIFeature
	</Keyword>
	<Description>
		Enable/disable given AI feature. Feature may be one of:
	"AwareFormationSoft", "CombatFormationSoft".
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/enableAIFeature
	</WikiPage>
	<Syntax>
		String enableAIFeature Boolean
	</Syntax>
	<RawSyntax>
		feature enableAIFeature enabled
	</RawSyntax>
	<Example>
		$Code$"AwareFormationSoft" enableAIFeature true$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		moveInAny
	</Keyword>
	<Description>
		Moves unit to the first available seat in a vehicle. The order of priorities is the same order used in squad command when you order subordinates to get in vehicle to any position and is the same order used in Zeus when you drag units to a vehicle. Seat assignment seems to use the following priority logic:
	driver ( moveInDriver ) - commander turret ( moveInCommander ) - gunner turret ( moveInGunner ) - remaining turrets ( moveInTurret ) - cargo ( moveInCargo ).
	NOTE : This command will move player into the locked vehicle or seat just as well.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/moveInAny
	</WikiPage>
	<Syntax>
		Object moveInAny Object
	</Syntax>
	<RawSyntax>
		unit moveInAny vehicle
	</RawSyntax>
	<Example>
		$Code$player moveInAny tank;$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlSetFontHeightSecondary
	</Keyword>
	<Description>
		Sets the font size of the secondary text of given control.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlSetFontHeightSecondary
	</WikiPage>
	<Syntax>
		Control ctrlSetFontHeightSecondary Number
	</Syntax>
	<RawSyntax>
		ctrl ctrlSetFontHeightSecondary value
	</RawSyntax>
	<Example>
		$Code$_control ctrlSetFontHeightSecondary 0.05;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		getPlayerScores
	</Keyword>
	<Description>
		In MP: returns the unit's table of scores (infantry kills, soft vehicle kills, armor kills, air kills, deaths, total score). In SP: empty array []
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getPlayerScores
	</WikiPage>
	<Syntax>
		getPlayerScores Object
	</Syntax>
	<RawSyntax>
		getPlayerScores unitName
	</RawSyntax>
	<Example>
		$Code$getPlayerScores BIS_player1;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		configName
	</Keyword>
	<Description>
		Returns name of config entry.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/configName
	</WikiPage>
	<Syntax>
		configName Config
	</Syntax>
	<RawSyntax>
		configName config
	</RawSyntax>
	<Example>
		$Code$_name = configName ( configFile "CfgVehicles");
	// Result is "CfgVehicles"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		modParams
	</Keyword>
	<Description>
		Returns list of mod parameters according to given options, values are in same order as the given options. Available options:
	"name" : String - name to be shown (Arma 3 instead of A3, etc.)
	"picture" : String - picture shown in Mod Launcher
	"logo" : String - logo to be shown in Main Menu
	"logoOver" : String - logo to be shown in Main Menu when mouse is over
	"logoSmall" : String - small version of logo, prepared for drawing small icons
	"tooltip" : String - tooltip to be shown on mouse over
	"tooltipOwned" : String - tooltip to be shown on mouse over the icon when DLC is owned by player
	"action" : String - url to be triggered when mod button is clicked
	"actionName" : String - what to put on Action Button
	"overview" : String - overview text visible in expansion menu
	"hidePicture" : Boolean - do not show mod picture icon in the main menu mod list
	"hideName" : Boolean - do not show mod name in the main menu mod list
	"defaultMod" : Boolean - default mods cannot be moved or disabled by Mod Launcher
	"serverOnly" : Boolean - mod doesn't have to be installed on client in order to play on server with this mod running
	"active" : Boolean - active mod (activated through command line or stored in profile by mod launcher)
	NOTE that "active" does not actually tell you if a mod ( is running / pretends to be running )
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/modParams
	</WikiPage>
	<Syntax>
		modParams Array
	</Syntax>
	<RawSyntax>
		modParams [modClass, options]
	</RawSyntax>
	<Example>
		$Code$_data = modParams ["Kart", ["name", "logo", "picture"]];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(April 24, 2017)
	This command used to spam. rpt when queried mod didn't exist, making it little awkward to use for testing if mod is active. For example:
	$Code$_superDuperModEnabled = modParams ["super_duper", ["active"]] param [0, false];$/Code$
	Since v1.69 the command would fail silently if mod doesn't exist.
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		playActionNow
	</Keyword>
	<Description>
		When used on a person, a smooth transition to the given action will be initiated, but all previous playAction are discarded.
	For Arma 3 actions see: playAction/actions.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/playActionNow
	</WikiPage>
	<Syntax>
		Object playActionNow String
	</Syntax>
	<RawSyntax>
		soldier playActionNow action
	</RawSyntax>
	<Example>
		$Code$soldierOne playActionNow "SitDown";$/Code$
	</NextExample>
		$Code$rabbitTwo playActionNow "WalkF";$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		(October 12, 2010)
	Some other possible playactions:
	"walkf" - walk forward
	"walkb" - walk backwards
	"walkr" - strafe right
	"walkl" - strafe left
	"grabdrag" - initiate First Aid dragging animation
	"stopdrag" - stops First Aid dragging animation
	"reloadMagazine" - reloads the current magazine
	"gestureFreeze" - hand signal "Freeze"
	"GestureGo"
	"GestureCover"
	"GestureAttack"
	"GestureCeaseFire"
	"GestureFollow"
	"GestureUp"
	"GestureAdvance"
	"GesturePoint"
	Note that playAction works regardless of stance (rifle up, down, crouched, prone).
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlParentControlsGroup
	</Keyword>
	<Description>
		Returns the parent control of a given child control
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlParentControlsGroup
	</WikiPage>
	<Syntax>
		ctrlParentControlsGroup Control
	</Syntax>
	<RawSyntax>
		ctrlParentControlsGroup ctrl
	</RawSyntax>
	<Example>
		$Code$_ctrlCombo = _ctrl controlsGroupCtrl 100;//Control
	ctrlParentControlsGroup _ctrlCombo;//Parent control group (_ctrl)$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Control
	</ReturnValue>

</NextListItem>

	<Keyword>
		setMarkerColorLocal
	</Keyword>
	<Description>
		Sets marker color for the given marker locally. Marker color names and their corresponding RGBA values for Arma 3 could be found in here: CfgMarkerColors_Arma_3
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setMarkerColorLocal
	</WikiPage>
	<Syntax>
		String setMarkerColorLocal String
	</Syntax>
	<RawSyntax>
		markerName setMarkerColorLocal color
	</RawSyntax>
	<Example>
		$Code$"MarkerOne" setMarkerColorLocal "ColorBlack";$/Code$
	</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		side
	</Keyword>
	<Description>
		Returns the side of a unit, vehicle, object or location.
	a renegade soldier's side will return a sideEnemy
	an empty vehicle will return civilian
	a crewed vehicle will return, if present, commander's gunner's driver's or cargo's side, in this order
	a captive or dead unit will return civilian. Use side group _unit to get the underlying side
	you can use playerSide to know the real player's side
	converting a side to string ( via str or format } will not return the side command:
	east = "EAST"
	west = "WEST"
	resistance = "GUER"
	civilian = "CIV"
	sideUnknown = "UNKNOWN"
	sideEnemy = "ENEMY"
	sideFriendly = "FRIENDLY"
	sideLogic = "LOGIC"
	sideEmpty = "EMPTY"
	sideAmbientLife = "AMBIENT LIFE"
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/side
	</WikiPage>
	<Syntax>
		side Object/Group/Location
	</Syntax>
	<RawSyntax>
		side object
	</RawSyntax>
	<Example>
		$Code$if ( side player == west ) then { hint "Player is on the West side" };$/Code$
	</NextExample>
		$Code$_sideAlsoWorkingForDead = side group player ;$/Code$
	</NextExample>
		$Code$_sideLocation = side myLocation;$/Code$
	</NextExample>
		$Code$if (side player != playerSide ) then { hint "player is renegade or dead"; };$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		In ArmA, the following objects are on side civilian : dead bodies and vehicles, empty vehicles, all mission editor placed objects (that do not have an inherit side), all objects with interactive components such as ladders and doors, man made structures such as buildings (including classless wrp placed objects), docks, high tension powerlines, see-saws, large rubbish bins, fountains. Basically if an object uses a non-simple damage or physics simulation it is likely to be on the civilian side.
	NOTE: If you need to know the side of a dead body, you can use faction command as a workaround -- Killzone_Kid
	</NextNote>
		In OFP v1.96, the side return value for a vehicle is based on the side of its commander, then gunner, then driver, then cargo. It will retain its side value until it is either empty, or a unit of another side takes over in a equal or higher role, irrespective of the side of other units still on board. This can be used to simulate friendly fire, as a vehicle can be made to appear to be an enemy even though all units on board are actually friendly.
	</NextNote>
		As CEEB says above, in ArmA2, side for a vehicle often depends on who the command or driver is, for example, A KA52, piloted by a USMC guy will have side WEST. For an accurate result of what 'where the vehicle was made', use faction. This ignores the pilot/commander, so in my example here, this KA52 will always return faction "RU". Note that faction returns different values to side though.
	February 4, 2011
	</NextNote>
		Side values for ambient life (animals) are bizarre. side _unit returns "CIV", but playerSide returns "AMBIENT LIFE" when the player is an animal. In that case, playerSide == side player returns false!
	Fortunately, you can easily check if a unit is an animal with _unit isKindOf "ANIMAL"'
	</Note>
	<ReturnValue>
		Side
	</ReturnValue>

</NextListItem>

	<Keyword>
		camSetBank
	</Keyword>
	<Description>
		Sets camera bank angle. Does not commit changes.
	This command is non-functional !
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/camSetBank
	</WikiPage>
	<Syntax>
		Object camSetBank Number
	</Syntax>
	<RawSyntax>
		camera camSetBank bank
	</RawSyntax>
	<Example>
		$Code$_camera camSetBank -0.1$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(Apr 15, 2010)
	Command is non-functional. Instead, use fn vbs setPitchBank in VBS2, or setVectorUp or this user function in Arma.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		hintCadet
	</Keyword>
	<Description>
		Shows a text hint only when in cadetMode.
	The text can contain several lines. \n is used to indicate the end of a line.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/hintCadet
	</WikiPage>
	<Syntax>
		hintCadet String
	</Syntax>
	<RawSyntax>
		hintCadet text
	</RawSyntax>
	<Example>
		$Code$hintCadet "Press W to move forward";$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
		hintCadet can be used with formatting like this:
	$Code$ hintCadet format ["Hello %1", player ]$/Code$
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		overcastForecast
	</Keyword>
	<Description>
		Return the overcast forecast.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/overcastForecast
	</WikiPage>
	<Syntax>
		overcastForecast
	</Syntax>
	<RawSyntax>
		overcastForecast
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		parseSimpleArray
	</Keyword>
	<Description>
		Converts given, formatted as simple array, String into a valid Array. Simple array is array consisting of Numbers, Strings, Booleans and Arrays of all of the above. For example: [1,"2",true,[4,"five",false]]. The string representation of this array compatible with parseSimpleArray will be "[1,""2"",true,[4,""five"",false]]" accordingly.
	This command is built for speed and security and because of this has several limitations. There is limited error reporting about format errors as the command expects well formatted array as argument. To be able to see exact format expected, you can just copy output result of str command applied to an array for reference: copyToClipboard str str [1,"2",true,[4,"five",false]] (notice the use of double str with copyToClipboard ).
	In any case here are the explicit rules:
	no spaces are permitted between array elements: [1,2,3] - correct, [1, 2, 3] - incorrect!
	only double quotes " supported for Strings : ["hello"] - correct, ['hello'] - incorrect!
	use " to escape ", for example ["hello"] converted to string should look like this: "[""hello""]"
	no spaces should exist before or after array brackets: "[1,2,3]" - correct, "[1,2,3] " - incorrect!
	To simplify, your constructed array format should be the same as Arma array converted to string with str :
	$Code$_arr1 = getUnitLoadout player ;
	_arr2 = parseSimpleArray str _arr1;
	hint str (_arr1 isEqualTo _arr2); //true
	$/Code$
	Because of this strictness the command is on average 3x faster than similar call compile string array method. And because call compile is not required, it is also more secure and primarily intended for use with callExtension to parse the String output into Array.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/parseSimpleArray
	</WikiPage>
	<Syntax>
		parseSimpleArray String
	</Syntax>
	<RawSyntax>
		parseSimpleArray stringArray
	</RawSyntax>
	<Example>
		$Code$_arr = parseSimpleArray "[1,2,3]";$/Code$
	</NextExample>
		$Code$_bool = true ;
	_num = 123.45;
	_str = "ok";
	_arr = [1,false,"cool"];
	_res = parseSimpleArray format ["[%1,%2,%3,%4]", _bool, _num, str _str, str _arr];
	// Note how _bool and _num do not need str, however if used anyway, the result in this case would be identical
	hint str _res; // [true,123.45,"ok",[1,false,"cool"]]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		vest
	</Keyword>
	<Description>
		Returns name of vest.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/vest
	</WikiPage>
	<Syntax>
		vest Object
	</Syntax>
	<RawSyntax>
		vest unit
	</RawSyntax>
	<Example>
		$Code$_myVest = vest player;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		actionParams
	</Keyword>
	<Description>
		Returns Array with params for given user action id (similar to addAction param array). The output array is of the following format:
	[title, script, arguments, priority, showWindow, hideOnUse, shortcut, condition, radius, unconscious, textWindowBackground, textWindowForeground, selection], where:
	title: String - action title text
	script: String - script file or script expression assigned to the action
	arguments: Anything or nil - arguments passed to the action
	priority: Number - action priority on the action menu
	showWindow: Boolean - whether the action is shown in the center of the screen too
	hideOnUse: Boolean - whether the action menu should close after selecting the action
	shortcut: String - action bindings to some existing engine action if any
	condition: String - expression returning true or nil for action to appear on the action menu
	radius: Number - max distance to entity at which action becomes available. -1 means it is engine default (~15m)
	unconscious: Boolean - whether the action is available to unconscious person
	textWindowBackground: String - same as textWindowBackground in setUserActionText
	textWindowForeground: String - same as textWindowForeground in setUserActionText
	selection: String - named selection in Geometry LOD to which the action is attached
	New array element selection is available since Arma 3 v1.69.140846
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/actionParams
	</WikiPage>
	<Syntax>
		Object actionParams Number
	</Syntax>
	<RawSyntax>
		entity actionParams id
	</RawSyntax>
	<Example>
		$Code$_params = player actionParams 0;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array/Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		enableEngineArtillery
	</Keyword>
	<Description>
		Enable/disable the artillery engine. This allows the user to use the artillery computer on mortar/artillery, and for AI to use it for indirect fire.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/enableEngineArtillery
	</WikiPage>
	<Syntax>
		enableEngineArtillery Boolean
	</Syntax>
	<RawSyntax>
		enableEngineArtillery enabled
	</RawSyntax>
	<Example>
		$Code$enableEngineArtillery false;$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setDebriefingText
	</Keyword>
	<Description>
		Sets debriefing text for endType defined in CfgDebriefing.
	This command is broken. https://feedback.bistudio.com/T85682
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setDebriefingText
	</WikiPage>
	<Syntax>
		String setDebriefingText Array
	</Syntax>
	<RawSyntax>
		endType setDebriefingText [title, description]
	</RawSyntax>
	<Example>
		$Code$_currentObjective = ( taskDescription ( currentTask player )) select 2;
	"endDeath" setDebriefingText ["You Lose","All of your men were killed while assaulting the " + _currentObjective];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		waypointVisible
	</Keyword>
	<Description>
		Returns the visibility of the waypoint.
	Returns 0 ( Number ) for a non valid waypoint.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/waypointVisible
	</WikiPage>
	<Syntax>
		waypointVisible Array
	</Syntax>
	<RawSyntax>
		waypointVisible waypoint
	</RawSyntax>
	<Example>
		$Code$_visible = waypointVisible [groupOne, 1];$/Code$
	</NextExample>
		$Code$_visible = waypointVisible [group player, currentWayPoint (group player)];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		setSuppression
	</Keyword>
	<Description>
		Sets the person's suppression, from 0 to 1.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setSuppression
	</WikiPage>
	<Syntax>
		Object setSuppression Number
	</Syntax>
	<RawSyntax>
		unit setSuppression value
	</RawSyntax>
	<Example>
		$Code$AI_unit_1 setSuppression 1;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		aimPos
	</Keyword>
	<Description>
		Returns the position of the object other units can aim to.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/aimPos
	</WikiPage>
	<Syntax>
		aimPos Object
	</Syntax>
	<RawSyntax>
		aimPos object
	</RawSyntax>
	<Example>
		$Code$aimPos player$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(July 7, 2015)
	Generally returns the center position of the object (middle of the geometry, not the model's [0,0,0]).
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		removeWeaponGlobal
	</Keyword>
	<Description>
		Remove a weapon from a unit. An attempt to remove a weapon, which is not in unit's possession, is simply ignored.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/removeWeaponGlobal
	</WikiPage>
	<Syntax>
		Object removeWeaponGlobal String
	</Syntax>
	<RawSyntax>
		unit removeWeaponGlobal weapon
	</RawSyntax>
	<Example>
		$Code${
	_x removeWeaponGlobal "Laserdesignator";
	} forEach allUnits ;$/Code$
	</NextExample>
		$Code${
	if ( typeOf _x == "O_Heli_Attack_02_black_F") then {
	_x removeWeaponGlobal "rockets_Skyfire";
	};
	} forEach vehicles ;$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		removeMagazinesTurret
	</Keyword>
	<Description>
		Removes all magazines of the given type from given vehicle. Use turret path [-1] for driver's turret.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/removeMagazinesTurret
	</WikiPage>
	<Syntax>
		Object removeMagazinesTurret Array
	</Syntax>
	<RawSyntax>
		vehicle removeMagazinesTurret [magazineName, turretPath]
	</RawSyntax>
	<Example>
		$Code$vehicle player removeMagazinesTurret ["60rnd_cmflaremagazine",[-1]]$/Code$
	</NextExample>
		$Code$_tank removeMagazinesTurret ["20Rnd_120mmSABOT_M1A2",[0]]$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		(July 30, 2011)
	Here's how you would remove all machine gun ammo from an M1A2 TUSK:
	remove the gunner's M240 ammo.
	$Code$this removeMagazinesTurret ["1200Rnd_762x51_M240",[0]];$/Code$
	remove the commander's M2 ammo.
	$Code$this removeMagazinesTurret ["100Rnd_127x99_M2",[0,0]];$/Code$
	remove the loader's M240 ammo.
	$Code$this removeMagazinesTurret ["100Rnd_762x51_M240",[0,1]];$/Code$
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		addCuratorEditingArea
	</Keyword>
	<Description>
		Adds or changes curator edit area (depends on if ID is already used).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/addCuratorEditingArea
	</WikiPage>
	<Syntax>
		Object addCuratorEditingArea Array
	</Syntax>
	<RawSyntax>
		curatorObj addCuratorEditingArea [editAreaID,position,radius]
	</RawSyntax>
	<Example>
		$Code$myCurator addCuratorEditingArea [4, position player,1000];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		pixelGrid
	</Keyword>
	<Description>
		Returns grid size based on screen resolution, UI size and configs: uiScaleFactor, uiScaleMaxGrids.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/pixelGrid
	</WikiPage>
	<Syntax>
		pixelGrid
	</Syntax>
	<RawSyntax>
		pixelGrid
	</RawSyntax>
	<Example>
		$Code$_gridHeight = pixelH * pixelGrid ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		loadOverlay
	</Keyword>
	<Description>
		Creates the load overlay dialog for the specified type of overlay.
	i
	Some Old Editor Command
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/loadOverlay
	</WikiPage>
	<Syntax>
		Control loadOverlay Config
	</Syntax>
	<RawSyntax>
		map loadOverlay config
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		ln
	</Keyword>
	<Description>
		Natural logarithm of x.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ln
	</WikiPage>
	<Syntax>
		ln Number
	</Syntax>
	<RawSyntax>
		ln x
	</RawSyntax>
	<Example>
		$Code$_nlog = ln 10 
	// Result is 2.302$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		addVehicle
	</Keyword>
	<Description>
		Adds a specified vehicle for use by a specified AI led group taking into account vehicle's cost. The vehicle will be considered as an available vehicle for use by this group.
	When vehicle is added in this way, it can appear as a target for the enemy even if the vehicle is currently free of the crew. Vehicles with crew, which are placed in the editor, get automatically added to the group. To remove vehicle from a group, use leaveVehicle.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/addVehicle
	</WikiPage>
	<Syntax>
		Group addVehicle Object
	</Syntax>
	<RawSyntax>
		groupName addVehicle vehicleName
	</RawSyntax>
	<Example>
		$Code$_grp addVehicle _vehicle$/Code$
	</NextExample>
		$Code$// Using on crewed vehicle:
	group tank addVehicle tank;$/Code$
	</Example>
	<Locality>
		local / undefined
	</Locality>
	<Note>
		(22 Nov, 2008 00:40)
	This command works best when used on empty vehicles. If used on a vehicle already driven by a member of another group, the driver will continue under his own group's orders, which may not benefit the addVehicle group.
	More than one vehicle can be added to a group, and more than one group can be added to a vehicle.
	When deciding whether to board a vehicle, AI leaders seem to only consider the transport benefit of a vehicle, ignoring any combat benefits the vehicle may provide.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		menuPicture
	</Keyword>
	<Description>
		Returns picture set into item on given path
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/menuPicture
	</WikiPage>
	<Syntax>
		menuPicture Array
	</Syntax>
	<RawSyntax>
		menuPicture [idc, path]
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		setCustomAimCoef
	</Keyword>
	<Description>
		Set custom aim precision coefficient for weapon sway
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setCustomAimCoef
	</WikiPage>
	<Syntax>
		Object setCustomAimCoef Number
	</Syntax>
	<RawSyntax>
		unit setCustomAimCoef coef
	</RawSyntax>
	<Example>
		$Code$player setCustomAimCoef 1;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		while
	</Keyword>
	<Description>
		Repeats Code while condition is true. A part of while do construct.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/while
	</WikiPage>
	<Syntax>
		while Code
	</Syntax>
	<RawSyntax>
		while condition
	</RawSyntax>
	<Example>
		$Code$while {a b} do {a = a + 1};$/Code$
	</NextExample>
		$Code$// A practical example: Repair all members of a group to such a level that they are able to stand up:
	{
	while {! canStand _x && alive _x } do {
	_x setDamage ( damage _x - 0.01);
	};
	} forEach units group unitname;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(May 14, 2008)
	The boolean code that's used to evaluate the while condition can be preceded by code that executes a regular command.
	$Code$ while {_a =_a + 1; _a 10} do {...}$/Code$
	</NextNote>
		(August 30, 2014)
	In non-scheduled environment, while do loop is limited to 10,000 iterations, after which it exits even if condition is still true. In scheduled environment no such limit exists.
	</Note>
	<ReturnValue>
		While_Type
	</ReturnValue>

</NextListItem>

	<Keyword>
		setUserActionText
	</Keyword>
	<Description>
		Changes user added action (see addAction ) menu item text.
	Since Arma 3 v1.61.136587 it is possible to set 2 more optional texts, one for background and one for foreground when action is displayed on the screen ( showWindow = true )
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setUserActionText
	</WikiPage>
	<Syntax>
		Object setUserActionText Array
	</Syntax>
	<RawSyntax>
		object setUserActionText [actionIndex, textMenu, textWindowBackground, textWindowForeground]
	</RawSyntax>
	<Example>
		$Code$_id = player addAction ["Hello", ""];
	player setUserActionText [_id, "Good Bye"];$/Code$
	</NextExample>
		$Code$_id = billboard addAction ["Some Action", {}];
	billboard setUserActionText [
	_id,
	"Some Action",
	" t color='#ff0000' Background----------------- /t br/ Multiline br/ Multiline br/ Multiline br/...",
	" t color='#00ff00' -----------------Foreground /t "
	];$/Code$
	</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		waypointAttachedObject
	</Keyword>
	<Description>
		Gets the object attached to the waypoint.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/waypointAttachedObject
	</WikiPage>
	<Syntax>
		waypointAttachedObject Array
	</Syntax>
	<RawSyntax>
		waypointAttachedObject waypoint
	</RawSyntax>
	<Example>
		$Code$waypointAttachedObject [groupOne,1]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Object
	</ReturnValue>

</NextListItem>

	<Keyword>
		cameraEffectEnableHUD
	</Keyword>
	<Description>
		Enable / disable showing of in-game UI during currently active camera effect.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/cameraEffectEnableHUD
	</WikiPage>
	<Syntax>
		cameraEffectEnableHUD Boolean
	</Syntax>
	<RawSyntax>
		cameraEffectEnableHUD enable
	</RawSyntax>
	<Example>
		$Code$cameraEffectEnableHUD true ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(November 3, 2015)
	Must be executed after camCommit.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		currentTask
	</Keyword>
	<Description>
		Return current task of given person.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/currentTask
	</WikiPage>
	<Syntax>
		currentTask Object
	</Syntax>
	<RawSyntax>
		currentTask person
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Task
	</ReturnValue>

</NextListItem>

	<Keyword>
		getStatValue
	</Keyword>
	<Description>
		Returns value of the given stat.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getStatValue
	</WikiPage>
	<Syntax>
		getStatValue String
	</Syntax>
	<RawSyntax>
		getStatValue name
	</RawSyntax>
	<Example>
		$Code$getStatValue "ExpWarlockDown"; //Checks if the "Warlock Down" Achivement was already aquired$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		ppEffectEnable
	</Keyword>
	<Description>
		Enable / disable Post process effects
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ppEffectEnable
	</WikiPage>
	<Syntax>
		String ppEffectEnable Boolean
	</NextSyntax>
		Number ppEffectEnable Boolean
	</NextSyntax>
		Array ppEffectEnable Boolean
	</Syntax>
	<RawSyntax>
		effect ppEffectEnable enable
	</NextRawSyntax>
		effect ppEffectEnable enable
	</NextRawSyntax>
		[effect1,] ppEffectEnable enable
	</RawSyntax>
	<Example>
		$Code$"colorCorrections" ppEffectEnable true ;$/Code$
	</NextExample>
		$Code$_hndl ppEffectEnable true ;$/Code$
	</NextExample>
		$Code$[_hndl1, _hndl2] ppEffectEnable true ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing - Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		locked
	</Keyword>
	<Description>
		Check if vehicle is locked for Persons. If it is locked, Persons cannot mount / dismount without order.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/locked
	</WikiPage>
	<Syntax>
		locked Object
	</Syntax>
	<RawSyntax>
		locked vehicle
	</RawSyntax>
	<Example>
		$Code$_locked = locked _jeepOne;$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(March 4, 2013)
	From Arma 3 version 0.50 is return value Number :
	-1 - Object is null
	0 - Unlocked
	1 - Default
	2 - Locked
	3 - Locked for player
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		setHideBehind
	</Keyword>
	<Description>
		Sets the data for hiding. objectWhereHide can be taken using findCover. hidePosition can be taken using getHideFrom. Command is not functional in ArmA 2.
	This command is not implemented
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setHideBehind
	</WikiPage>
	<Syntax>
		Object setHideBehind Array
	</Syntax>
	<RawSyntax>
		object setHideBehind [objectWhereHide, hidePosition]
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		get3DENMouseOver
	</Keyword>
	<Description>
		Returns the Eden Entity the mouse is hovering over in Eden Editor.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/get3DENMouseOver
	</WikiPage>
	<Syntax>
		get3DENMouseOver
	</Syntax>
	<RawSyntax>
		get3DENMouseOver
	</RawSyntax>
	<Example>
		$Code$systemChat str get3DENMouseOver ;// returns: ["Object",B Alpha 1-1:1]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		createVehicle
	</Keyword>
	<Description>
		Creates an empty object of given classname type (See Arma 3 Assets or createVehicle/vehicles )
	For a class reference from older games see Classes.
	Some special 'Scripted' vehicle classes:
	DemoCharge_Remote_Ammo_Scripted - same as DemoCharge_Remote_Ammo but will explode when destroyed or setDamage 1;
	SatchelCharge_Remote_Ammo_Scripted - same as SatchelCharge_Remote_Ammo but will explode when destroyed or setDamage 1;
	ClaymoreDirectionalMine_Remote_Ammo_Scripted - same as ClaymoreDirectionalMine_Remote_Ammo but will explode when destroyed or setDamage 1;
	GroundWeaponHolder_Scripted - same as GroundWeaponHolder but will not be auto-deleted when empty
	WeaponHolderSimulated_Scripted - same as WeaponHolderSimulated but will not be auto-deleted when empty
	Randomization:
	In Arma 3 many vehicles will get randomized in appearance by default in order to add some variety to the game. It is possible to override this default behavior by setting BIS_enableRandomization variable to false in the vehicle namespace:
	$Code$_veh = "C_Offroad_01_F" createVehicle position player ;
	[_veh, true, true, true ] call bis_fnc_initVehicle;$/Code$
	or
	$Code$[this, true, true, true ] call bis_fnc_initVehicle;$/Code$
	if done in mission editor init field.
	Check Vehicle Customization (VhC) page for more info about the parameters.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/createVehicle
	</WikiPage>
	<Syntax>
		String createVehicle Position
	</NextSyntax>
		createVehicle Array
	</Syntax>
	<RawSyntax>
		type createVehicle position
	</NextRawSyntax>
		createVehicle [type, position, markers, placement, special]
	</RawSyntax>
	<Example>
		$Code$_jeep = "Jeep" createVehicle position player ;$/Code$
	</NextExample>
		$Code$_heli = "AH1Z" createVehicle getMarkerPos "hspawn";$/Code$
	</NextExample>
		$Code$_veh = createVehicle ["ah1w", position player, [], 0, "FLY"];$/Code$
	</NextExample>
		$Code$_veh = createVehicle ["2S6M_Tunguska", getMarkerPos "marker1", ["marker2","marker3"], 0, "NONE"];$/Code$
	</NextExample>
		$Code$// Objects such as
	//test_EmptyObjectForBubbles
	//test_EmptyObjectForFireBig
	//test_EmptyObjectForSmoke
	//create additional emitters, which are stored in "effects" variable on the object. Since Arma 3 v1.71 these emitters are automatically deleted when object is deleted
	[] spawn
	{
	_fire = "test_EmptyObjectForFireBig" createVehicle position player ;
	sleep 5;
	deleteVehicle _fire;
	};$/Code$
	</NextExample>
		$Code$// The following explosives (with ending _Scripted)
	//DemoCharge_Remote_Ammo_Scripted
	//SatchelCharge_Remote_Ammo_Scripted
	//ClaymoreDirectionalMine_Remote_Ammo_Scripted
	//can be set off by applying setDamage 1 to them for ease of scripting:
	_claymore = "ClaymoreDirectionalMine_Remote_Ammo_Scripted" createVehicle position player ;
	0 = _claymore spawn
	{
	uiSleep 5;
	_this setDamage 1;
	};$/Code$
	</NextExample>
		$Code$// How to add inventory to objects without inventory:
	_boxes = "Land_Pallet_MilBoxes_F" createVehicle position player ;
	_cargo = "Supply500" createVehicle [0,0,0];
	_cargo attachTo [_boxes, [0,0,0.85]];
	// optional for objects that can take damage
	_boxes addEventHandler ["Killed",
	{
	{
	detach _x,
	deleteVehicle _x;
	}
	forEach attachedObjects (_this select 0);
	}];$/Code$
	</NextExample>
		$Code$// Drop weapon:
	_wh = "GroundWeaponHolder_Scripted" createVehicle position player ;
	player action ["DropWeapon", _wh, currentWeapon player ];$/Code$
	</Example>
	<Locality>
		undefined / global
	</Locality>
	<Note>
		(August 13, 2006)
	Using main syntax of this command sets the created vehicle not exactly at the given position, you have to setPos it there, if accuracy counts.
	</NextNote>
		(Jan 20, 2006)
	Using main syntax of this command sets the created vehicle in the nearest possible position. You can create a dozen of tanks with it - they will appear side by side.
	</NextNote>
		(December 13, 2006)
	Observe that buildings with the default destrType will not work correctly in multiplayer in Armed Assault when created with this command. The Destruction effect will only be displayed where the building is local.
	</NextNote>
		(Oct 18, 2009)
	As of Arma2, this command cannot be used to create game logics (source). Use createUnit instead.
	</NextNote>
		(January 14, 2011)
	In multiplayer, only run this command on one machine. It will create a the vehicle on all machines every time it is called on any machine.
	</NextNote>
		(January 26 2014)
	Using getPosATL should work, if otherwise you are struggling to get a the proper position coordinates.
	</NextNote>
		(September 12, 2014)
	"vehclass" createVehicle pos is the same if not faster than createVehicle ["vehclass", pos, [], 0, "NONE"]
	</NextNote>
		(August 22, 2015)
	GroundWeaponHolder class is automatically deleted when empty after 0.5 to 1 seconds in A3 1.48. The exact delay is random but never lower than 0.50 secs after creation. You can stop deletion by adding something (cargo) to it within 0.5 seconds.
	</NextNote>
		(December 1, 2015)
	The short syntax creates vehicles at ground level ignoring the Z in pos
	$Code$"vehclass" createVehicle pos$/Code$ This is equivalent to $Code$createVehicle ["vehclass", [pos select 0, pos select 1, 0], [], 0, "NONE"]$/Code$
	</NextNote>
		(May 16, 2017)
	For the alternative syntax, if the vehicle has canFloat = 1; in its config class (e.g. boats and wheeled APCs), the command expects PositionAGL, and otherwise always PositionATL.
	</Note>
	<ReturnValue>
		Object - Object
	</ReturnValue>

</NextListItem>

	<Keyword>
		setVehicleTIPars
	</Keyword>
	<Description>
		Sets the "heat" state of different vehicle parts (for TI detection). This allows simulation of heated up parts of a vehicle without it actually having to utilize them. (0: cold, 1: hot)
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setVehicleTIPars
	</WikiPage>
	<Syntax>
		Object setVehicleTIPars Array
	</Syntax>
	<RawSyntax>
		vehicle setVehicleTIPars [engine, wheels, weapon]
	</RawSyntax>
	<Example>
		$Code$vehicle player setVehicleTIPars [1,1,1];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setAmmoCargo
	</Keyword>
	<Description>
		Set amount of ammo resources in cargo space of a rearm vehicle. Ammo resource is used to resupply vehicles that take ammo. Soldiers use individual magazines instead. Amount: 1 is full cargo.
	The actual quantity to work with is determined by the model's class in CfgVehicles
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setAmmoCargo
	</WikiPage>
	<Syntax>
		Object setAmmoCargo Number
	</Syntax>
	<RawSyntax>
		vehicleName setAmmoCargo ammoCargo
	</RawSyntax>
	<Example>
		$Code$_ammoTruck1 setAmmoCargo 0.5;$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		(31 Aug, 2011)
	While the amount of total 'ammo' that can be reloaded is defined in the truck/supply point's CfgVehicles entry, the amount each round of ammunition takes from that total is defined in the CfgAmmo 'Cost' entry for that round.
	Your typical truck has 300000 ammo capacity, and the tunguska's missiles have a Cost of 50000. So the tunguska can reload a total of 6 missiles from the ammo truck before the ammo capacity is depleted and needs to be set with setAmmoCargo.
	A similar thing applies with a vehicle's cfgVehicle Cost entry for repairing, and the vehicle's fuelCapacity entry when refuelling.
	</NextNote>
		(July 10, 2015)
	(ArmA 3 1.44) setAmmoCargo will have no effect if the vehicle doesn't support getAmmoCargo.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		taskType
	</Keyword>
	<Description>
		Returns the type of the given task
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/taskType
	</WikiPage>
	<Syntax>
		taskType Task
	</Syntax>
	<RawSyntax>
		taskType task
	</RawSyntax>
	<Example>
		$Code$_type = taskType ( currentTask player );$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		waypointTimeoutCurrent
	</Keyword>
	<Description>
		Gets the current waypoint timeout or -1 if countdown is not in progress.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/waypointTimeoutCurrent
	</WikiPage>
	<Syntax>
		waypointTimeoutCurrent Group
	</Syntax>
	<RawSyntax>
		waypointTimeoutCurrent waypoint
	</RawSyntax>
	<Example>
		$Code$_timeout = waypointTimeoutCurrent groupOne;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		removeSecondaryWeaponItem
	</Keyword>
	<Description>
		Removes given weapon item from the secondary weapon cargo space. This command also supports weapon magazines.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/removeSecondaryWeaponItem
	</WikiPage>
	<Syntax>
		Object removeSecondaryWeaponItem String
	</Syntax>
	<RawSyntax>
		unit removeSecondaryWeaponItem item
	</RawSyntax>
	<Example>
		$Code$player removeSecondaryWeaponItem ( secondaryWeaponItems select 0);$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		lbCurSel
	</Keyword>
	<Description>
		Returns the index of the selected item of the listbox or combobox with id idc of the topmost user dialog. For listbox LB_MULTI (multi-selection) use lbSelection.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lbCurSel
	</WikiPage>
	<Syntax>
		lbCurSel Number
	</NextSyntax>
		lbCurSel Control
	</Syntax>
	<RawSyntax>
		lbCurSel idc
	</NextRawSyntax>
		lbCurSel control
	</RawSyntax>
	<Example>
		$Code$_index = lbCurSel 101;$/Code$
	</NextExample>
		$Code$lbCurSel _ctrl;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		More information on the LB command family can be found here
	</NextNote>
		(July 11, 2014)
	If nothing is selected this command returns -1
	</Note>
	<ReturnValue>
		Number - Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		removeWeaponAttachmentCargo
	</Keyword>
	<Description>
		Remove attachment linked to a weapon from the vehicle cargo space.
	This is unoffical documentation. All Information here is as it exists in the Engine. It might not reflect the reality.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/removeWeaponAttachmentCargo
	</WikiPage>
	<Syntax>
		Object removeWeaponAttachmentCargo Array
	</Syntax>
	<RawSyntax>
		vehicle removeWeaponAttachmentCargo [weaponID,creatorID,attachment]
	</RawSyntax>
	<Example>
		$Code$rearmTruckOne removeWeaponAttachmentCargo[weaponID,creatorID,"attachment"]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		controlNull
	</Keyword>
	<Description>
		A non-existing Control. To compare non-existent objects use isNull or isEqualTo :
	controlNull == controlNull ; // false
	isNull controlNull ; // true
	controlNull isEqualTo controlNull ; // true
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/controlNull
	</WikiPage>
	<Syntax>
		controlNull
	</Syntax>
	<RawSyntax>
		controlNull
	</RawSyntax>
	<Example>
		$Code$! isNull controlNull ; // false$/Code$
	</NextExample>
		$Code$str controlNull ; // No control$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Control
	</ReturnValue>

</NextListItem>

	<Keyword>
		lockCargo
	</Keyword>
	<Description>
		Lock all cargo positions of a vehicle or lock by index. This command must be executed where vehicle is local.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lockCargo
	</WikiPage>
	<Syntax>
		Object lockCargo Boolean
	</NextSyntax>
		Object lockCargo Array
	</Syntax>
	<RawSyntax>
		vehicle lockCargo lock
	</NextRawSyntax>
		vehicle lockCargo [index, lock]
	</RawSyntax>
	<Example>
		$Code$vehicleName lockCargo true ;$/Code$
	</NextExample>
		$Code$vehicleName lockCargo [0, true ];$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		eyePos
	</Keyword>
	<Description>
		Returns the object's eyes / main turret position.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/eyePos
	</WikiPage>
	<Syntax>
		eyePos Object
	</Syntax>
	<RawSyntax>
		eyePos object
	</RawSyntax>
	<Example>
		$Code$eyePos player$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		lnbSetColor
	</Keyword>
	<Description>
		Sets the color of the item with the given position of the 2D listbox. Color is in format Color.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lnbSetColor
	</WikiPage>
	<Syntax>
		lnbSetColor Array
	</NextSyntax>
		Control lnbSetColor Array
	</Syntax>
	<RawSyntax>
		lnbSetColor [idc,[row,column],color]
	</NextRawSyntax>
		_ctrl lnbSetColor [ [row,column],color]
	</RawSyntax>
	<Example>
		$Code$_ctrl lnbSetColor [ [0,0], [1,0,0,1] ];$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
		(Sep 9 2014)
	(A3 1.28)As for invisible data processing, lnbAddArray, lnbAddColumn, lnbData, lnbGetColumnsPosition, lnbSetColumnsPos, lnbSetData, lnbSetText, lnbSetValue, lnbText and lnbValue store data types into exact position of the listNbox with different spaces. Accessing data with coordinate command at nearly the same syntax:
	$Code$
	//Set same value to one position of a Control
	_ctrl lnbSetData [ [0,0],"#1"];
	lnbSetColumnsPos [102, [0,1], 1];
	_ctrl lnbSetText [ [0,1], "#1"];
	_ctrl lnbSetValue [ [0,0],1];
	//Accessing the value disregard affecting one another.
	_ctrl lnbData [0,0]; //"#1"
	lnbGetColumnsPosition _ctrl //[1];
	_ctrl lnbText [0,0];//"#1"
	_ctrl lnbValue [0,0];//1
	$/Code$
	For a direct visible control over CT_LISTNBOX:
	$Code$
	0 = [_CT_LISTNBOX] spawn {
	private ["_CT_LISTNBOX","_color","_current","_pic"];
	disableSerialization ;
	_CT_LISTNBOX = _this select 0;
	{
	_CT_LISTNBOX lnbAddRow [ getText (_x "displayNameShort"), getText (_x "displayName")];
	_CT_LISTNBOX lnbSetPicture [ [_foreachIndex,0], getText (_x "texture")];
	} forEach (" isClass _x" configClasses ( configFile "CfgRanks"));
	_CT_LISTNBOX lnbSetCurSelRow 0;
	_current = lnbCurSelRow _CT_LISTNBOX;
	_color = _CT_LISTNBOX lnbColor [_current,0];
	_CT_LISTNBOX lnbSetColor [ [_current,1], [(_color select 0)/2,0,0,1] ];
	_CT_LISTNBOX lnbDeleteColumn 0;
	_CT_LISTNBOX lnbDeleteRow 1;
	sleep 1;
	lnbClear _CT_LISTNBOX;//Clear all items but control still remains just invisible.
	};
	$/Code$
	A combined use of both invisible and visible data processing commands alive the Control.
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		enableVehicleSensor
	</Keyword>
	<Description>
		Enable/disable given sensor
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/enableVehicleSensor
	</WikiPage>
	<Syntax>
		Object enableVehicleSensor Array
	</Syntax>
	<RawSyntax>
		vehicle enableVehicleSensor [componentName, state]
	</RawSyntax>
	<Example>
		$Code$vehicle player enableVehicleSensor ["PassiveRadarSensorComponent",false]; // disables passive radar$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		HUDMovementLevels
	</Keyword>
	<Description>
		Returns movement borders for HUD [min speed, max speed, min alt, max alt, min dir, max dir, position[x,y,z] or target]
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/HUDMovementLevels
	</WikiPage>
	<Syntax>
		HUDMovementLevels
	</Syntax>
	<RawSyntax>
		HUDMovementLevels
	</RawSyntax>
	<Example>
		$Code$HUDMovementLevels;//[0,0,0,0,0,0,[0,0,0]]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		directSay
	</Keyword>
	<Description>
		Sends given audio message to the direct channel. Command operates just like xxxxRadio commands, but the sound is played over direct channel and is independent of fadeRadio. The message is defined in CfgRadio in the description.ext file or config radio protocol or a kbAddTopic. The transmission will play only on the PC where command was executed. If you need the transmission to play on all computers, you have to execute it globally (see remoteExec ).
	Note: When transmitting unit gets killed, transmission will be interrupted, however when receiving unit gets killed, the transmission continues to play.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/directSay
	</WikiPage>
	<Syntax>
		Object directSay String
	</Syntax>
	<RawSyntax>
		unit directSay radioName
	</RawSyntax>
	<Example>
		$Code$player directSay configName selectRandom ("true" configClasses ( configFile "CfgRadio"));$/Code$
	</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
		(December 3, 2016)
	To transmit user custom sounds (see Multiplayer_Custom_Sounds_Tutorial ), prefix the full filename including file extension with #. For example if there is a custom user sound file called MySound.ogg, to play it on the radio use:
	$Code$ player directSay "#MySound.ogg";$/Code$
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		getObjectArgument
	</Keyword>
	<Description>
		Return name of object argument in mission editor.
	i
	Some Old Editor Command
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getObjectArgument
	</WikiPage>
	<Syntax>
		Control getObjectArgument Array
	</Syntax>
	<RawSyntax>
		map getObjectArgument [object, argument]
	</RawSyntax>
	<Example>
		$Code$// returns string "[1009.0351, 1319.4928]"
	( findDisplay 128 displayCtrl 51) getObjectArgument ["_unit_1", "POSITION"]
	// returns array [1009.0351, 1319.4928]
	( findDisplay 128 displayCtrl 51) evalObjectArgument ["_unit_1", "POSITION"]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlSetScale
	</Keyword>
	<Description>
		Sets wanted scale for control animation. Top left corner remains same. This command requires ctrlCommit.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlSetScale
	</WikiPage>
	<Syntax>
		Control ctrlSetScale Number
	</Syntax>
	<RawSyntax>
		control ctrlSetScale scale
	</RawSyntax>
	<Example>
		$Code$_control ctrlSetScale 0.5;
	_control ctrlCommit 0;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setVehicleRadar
	</Keyword>
	<Description>
		Sets the AI rules of Radar usage (Emission Control). Automatic means Radar switched on only when in Combat. The command doesn't affect player-controlled vehicles.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setVehicleRadar
	</WikiPage>
	<Syntax>
		Object setVehicleRadar Number
	</Syntax>
	<RawSyntax>
		vehicle setVehicleRadar rules
	</RawSyntax>
	<Example>
		$Code$_vehicle setVehicleRadar 1;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setWaypointCombatMode
	</Keyword>
	<Description>
		The group combat mode is switched when the waypoint becomes active.
	Possible mode values are:
	"NO CHANGE" (No change)
	" BLUE " (Never fire)
	" GREEN " (Hold fire - defend only)
	" WHITE " (Hold fire, engage at will)
	" YELLOW " (Fire at will)
	" RED " (Fire at will, engage at will)
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setWaypointCombatMode
	</WikiPage>
	<Syntax>
		Array setWaypointCombatMode String
	</Syntax>
	<RawSyntax>
		waypoint setWaypointCombatMode mode
	</RawSyntax>
	<Example>
		$Code$[_grp, 2] setWaypointCombatMode "RED";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		commandChat
	</Keyword>
	<Description>
		Types text to the command radio channel. Must have assigned "ItemRadio" to see or transmit the messages. The text will be visible only on the PC where command was executed. If you need the message to show on all computers, you have to execute it globally (see remoteExec )
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/commandChat
	</WikiPage>
	<Syntax>
		Object commandChat String
	</NextSyntax>
		Array commandChat String
	</Syntax>
	<RawSyntax>
		unitName commandChat chatText
	</NextRawSyntax>
		[side, identity] commandChat chatText
	</RawSyntax>
	<Example>
		$Code$_soldierOne commandChat "Show this text";$/Code$
	</NextExample>
		$Code$[ playerSide, "HQ"] commandChat "Do this! That's an order!";$/Code$
	</NextExample>
		$Code$driver vehicle player sideChat "sideChat";
	driver vehicle player globalChat "globalChat";
	driver vehicle player groupChat "groupChat";
	vehicle player vehicleChat "vehicleChat";
	driver vehicle player commandChat "commandChat";
	driver vehicle player customChat [1, "customChat"];
	systemChat "systemChat";$/Code$
	</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		isFormationLeader
	</Keyword>
	<Description>
		Returns true if the specified unit is subgroup leader.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isFormationLeader
	</WikiPage>
	<Syntax>
		isFormationLeader Object
	</Syntax>
	<RawSyntax>
		isFormationLeader unit
	</RawSyntax>
	<Example>
		$Code$_isLeader = isFormationLeader player ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		lifeState
	</Keyword>
	<Description>
		Returns the life state of the given unit. Can be one of:
	(Pre-Arma 3)
	"ALIVE"
	"DEAD"
	"DEAD-RESPAWN"
	"DEAD-SWITCHING"
	"ASLEEP"
	"UNCONSCIOUS"
	(Arma 3)
	"HEALTHY"
	"DEAD"
	"DEAD-RESPAWN"
	"DEAD-SWITCHING"
	"INCAPACITATED"
	"INJURED"
	In Arma 3 lifeState seems to change to "INJURED" when damage aliveUnit = 0.1 (0.1 seems to be the value defined in config under "InjuredTreshold").
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lifeState
	</WikiPage>
	<Syntax>
		lifeState Object
	</Syntax>
	<RawSyntax>
		lifeState unit
	</RawSyntax>
	<Example>
		$Code$_ls = lifeState loon;$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		switch
	</Keyword>
	<Description>
		Creates a switch type that can be used inside a switch do -block
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/switch
	</WikiPage>
	<Syntax>
		switch Anything
	</Syntax>
	<RawSyntax>
		switch arg
	</RawSyntax>
	<Example>
		$Code$_mySwitch = switch "Test";
	_mySwitch do {/*Something*/};$/Code$
	</NextExample>
		$Code$switch (_a) do { case 1 : { /*...code...*/ }; case 2 : { /*...code...*/ }; default { /*...code...*/ }; }; switch (_condition) do {
	case 1: { hint "1" };
	case 2: { hint "2" };
	default { hint "default" };
	}; switch (_condition) do {
	case "string1";
	case "string2": { hint "string1 or string2" };
	case "string3";
	case "string4": { hint "string3 or string4" };
	default { hint "default" };
	};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Switch_Type
	</ReturnValue>

</NextListItem>

	<Keyword>
		mapAnimDone
	</Keyword>
	<Description>
		Check if map animation is finished.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/mapAnimDone
	</WikiPage>
	<Syntax>
		mapAnimDone
	</Syntax>
	<RawSyntax>
		mapAnimDone
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
		In OFP v1.96, the mapAnim series of commands, together with forceMap can only be used in the intro and mission, as it is not possible to access the map from the outro. (not checked, sourced from an old copy of the OFPEC comref)
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		dialog
	</Keyword>
	<Description>
		Tests whether any user dialog is open.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/dialog
	</WikiPage>
	<Syntax>
		dialog
	</Syntax>
	<RawSyntax>
		dialog
	</RawSyntax>
	<Example>
		$Code$if (! dialog ) then { createDialog "Dialog1";};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		formationLeader
	</Keyword>
	<Description>
		Return leader of the formation.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/formationLeader
	</WikiPage>
	<Syntax>
		formationLeader Object
	</Syntax>
	<RawSyntax>
		formationLeader unitName
	</RawSyntax>
	<Example>
		$Code$? (formationLeader player != leader player) :
	hint "Formation leader is not the group leader."$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(December 2, 2006)
	Return value is NULL-OBJECT if no group members exist.
	</Note>
	<ReturnValue>
		Object
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlRemoveAllEventHandlers
	</Keyword>
	<Description>
		Remove all event handlers from the given control.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlRemoveAllEventHandlers
	</WikiPage>
	<Syntax>
		Control ctrlRemoveAllEventHandlers String
	</Syntax>
	<RawSyntax>
		control ctrlRemoveAllEventHandlers handlerName
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		getArtilleryComputerSettings
	</Keyword>
	<Description>
		Returns settings from artillery computer currently opened by player.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getArtilleryComputerSettings
	</WikiPage>
	<Syntax>
		getArtilleryComputerSettings
	</Syntax>
	<RawSyntax>
		getArtilleryComputerSettings
	</RawSyntax>
	<Example>
		$Code$hint str getArtilleryComputerSettings ; //["Semi (medium)","HE Mortar Shells",0]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		radioChannelSetLabel
	</Keyword>
	<Description>
		Set the custom radio channel's label.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/radioChannelSetLabel
	</WikiPage>
	<Syntax>
		Number radioChannelSetLabel String
	</Syntax>
	<RawSyntax>
		index radioChannelSetLabel label
	</RawSyntax>
	<Example>
		$Code$5 radioChannelSetLabel "Q-dance Radio";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		isBleeding
	</Keyword>
	<Description>
		Returns whether the unit is bleeding.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isBleeding
	</WikiPage>
	<Syntax>
		isBleeding Object
	</Syntax>
	<RawSyntax>
		isBleeding unit
	</RawSyntax>
	<Example>
		$Code$if ( isBleeding player ) then { player groupChat "I'm bleeding!!"; }$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		lnbClear
	</Keyword>
	<Description>
		Clears all items in the given listbox or combobox.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lnbClear
	</WikiPage>
	<Syntax>
		lnbClear Number
	</NextSyntax>
		lnbClear Control
	</Syntax>
	<RawSyntax>
		lnbClear idc
	</NextRawSyntax>
		lnbClear ctrl
	</RawSyntax>
	<Example>
		$Code$lnbClear _ctrl;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(Sep 9 2014)
	(A3 1.28)As for invisible data processing, lnbAddArray, lnbAddColumn, lnbData, lnbGetColumnsPosition, lnbSetColumnsPos, lnbSetData, lnbSetText, lnbSetValue, lnbText and lnbValue store data types into exact position of the listNbox with different spaces. Accessing data with coordinate command at nearly the same syntax:
	$Code$
	//Set same value to one position of a Control
	_ctrl lnbSetData [ [0,0],"#1"];
	lnbSetColumnsPos [102, [0,1], 1];
	_ctrl lnbSetText [ [0,1], "#1"];
	_ctrl lnbSetValue [ [0,0],1];
	//Accessing the value disregard affecting one another.
	_ctrl lnbData [0,0]; //"#1"
	lnbGetColumnsPosition _ctrl //[1];
	_ctrl lnbText [0,0];//"#1"
	_ctrl lnbValue [0,0];//1
	$/Code$
	For a direct visible control over CT_LISTNBOX:
	$Code$
	0 = [_CT_LISTNBOX] spawn {
	private ["_CT_LISTNBOX","_color","_current","_pic"];
	disableSerialization ;
	_CT_LISTNBOX = _this select 0;
	{
	_CT_LISTNBOX lnbAddRow [ getText (_x "displayNameShort"), getText (_x "displayName")];
	_CT_LISTNBOX lnbSetPicture [ [_foreachIndex,0], getText (_x "texture")];
	} forEach (" isClass _x" configClasses ( configFile "CfgRanks"));
	_CT_LISTNBOX lnbSetCurSelRow 0;
	_current = lnbCurSelRow _CT_LISTNBOX;
	_color = _CT_LISTNBOX lnbColor [_current,0];
	_CT_LISTNBOX lnbSetColor [ [_current,1], [(_color select 0)/2,0,0,1] ];
	_CT_LISTNBOX lnbDeleteColumn 0;
	_CT_LISTNBOX lnbDeleteRow 1;
	sleep 1;
	lnbClear _CT_LISTNBOX;//Clear all items but control still remains just invisible.
	};
	$/Code$
	A combined use of both invisible and visible data processing commands alive the Control.
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		menuSetValue
	</Keyword>
	<Description>
		Sets new value into menu entry on given path.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/menuSetValue
	</WikiPage>
	<Syntax>
		menuSetValue Array
	</Syntax>
	<RawSyntax>
		menuSetValue [idc, path, value]
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		or
	</Keyword>
	<Description>
		Returns true only if one or both conditions are true. In case of the alternative syntax, lazy evaluation is used (if left operand is true, evaluation of the right side is skipped completely).
	Identical to: a || b
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/or
	</WikiPage>
	<Syntax>
		Boolean or Boolean
	</NextSyntax>
		Boolean or Code
	</Syntax>
	<RawSyntax>
		a or b
	</NextRawSyntax>
		a or b
	</RawSyntax>
	<Example>
		$Code$if ((OBJ1) or (_enemycount == 0)) then { hint "you win !"}$/Code$
	</NextExample>
		$Code$if (( count _array == 0) or {(_array select 0) != player }) then { hint "It works! Without lazy evaluation it would throw an error if array was empty."}$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(March 29, 2015)
	The examples suggest that you can only use two conditions with or. You can use more if you want.
	It is not recommended to use a lot of conditions because the check will take longer to complete.
	</Note>
	<ReturnValue>
		Boolean - Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		create3DENEntity
	</Keyword>
	<Description>
		Create new Eden Entity. Used for creating individual entities; to create a composition (e.g., infantry squad), use create3DENComposition.
	This is the only way how to add new editable entities to Eden Editor scenario. Other 'create' commands like createVehicle or createUnit will still work, but the resulting entity won't be editable.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/create3DENEntity
	</WikiPage>
	<Syntax>
		create3DENEntity Array
	</NextSyntax>
		Group create3DENEntity Array
	</Syntax>
	<RawSyntax>
		create3DENEntity [mode, class, position, ]
	</NextRawSyntax>
		group create3DENEntity [mode, class, position, ]
	</RawSyntax>
	<Example>
		$Code$dude1 = create3DENEntity ["Object","B_Soldier_F", screenToWorld [0.5,0.5]];$/Code$
	</NextExample>
		$Code$dude2 = ( group dude1) create3DENEntity ["Object","B_Soldier_AR_F", screenToWorld [0.5,0.5]];$/Code$
	</NextExample>
		$Code$myMarker = create3DENEntity ["Marker","mil_warning", position player ];$/Code$
	</NextExample>
		$Code$mytrigger = create3DENEntity ["Trigger","EmptyDetectorArea10x10", position player ];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(March 29, 2016)
	The classnames for triggers can be found in the config class CfgNonAIVehicles
	</NextNote>
		(June 14, 2016)
	Mode can also be "Logic". Not sure if it's a replacement for "System" or a it's a completely separate mode.
	</Note>
	<ReturnValue>
		EdenEntity - EdenEntity
	</ReturnValue>

</NextListItem>

	<Keyword>
		enableStamina
	</Keyword>
	<Description>
		Enable/disable stamina system
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/enableStamina
	</WikiPage>
	<Syntax>
		Object enableStamina Boolean
	</Syntax>
	<RawSyntax>
		unit enableStamina enabled
	</RawSyntax>
	<Example>
		$Code$player enableStamina true;$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlSetBackgroundColor
	</Keyword>
	<Description>
		Sets background color of given control.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlSetBackgroundColor
	</WikiPage>
	<Syntax>
		Control ctrlSetBackgroundColor Array
	</Syntax>
	<RawSyntax>
		control ctrlSetBackgroundColor color
	</RawSyntax>
	<Example>
		$Code$_control ctrlSetBackgroundColor [1, 0, 0, 1]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(May 10, 2017)
	According to https://feedback.bistudio.com/T78904
	This definetly doesn't work with RscButton's. \br
	According to ( https://resources.bisimulations.com/wiki/ctrlSetBackgroundColor ) this "Only affects Comboboxes, Static Text, Structured Text or Maps. "
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		commandTarget
	</Keyword>
	<Description>
		Order the given unit(s) to target the given target (via the radio). Command given to the player, puts a red square with words Target and Distance on player's HUD at target location. If player in vehicle and has radar facilities, it also adds target marker to the radar.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/commandTarget
	</WikiPage>
	<Syntax>
		Object commandTarget Object
	</Syntax>
	<RawSyntax>
		unitName commandTarget target
	</RawSyntax>
	<Example>
		$Code$_ESoldier1 commandTarget _WSoldier1;$/Code$
	</NextExample>
		$Code$player commandTarget bob;$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		visibleScoretable
	</Keyword>
	<Description>
		Checks whether the score table is visible.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/visibleScoretable
	</WikiPage>
	<Syntax>
		visibleScoretable
	</Syntax>
	<RawSyntax>
		visibleScoretable
	</RawSyntax>
	<Example>
		$Code$_visible = visibleScoretable ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		currentMagazine
	</Keyword>
	<Description>
		Returns class name of currently loaded vehicle's magazine.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/currentMagazine
	</WikiPage>
	<Syntax>
		currentMagazine Object
	</Syntax>
	<RawSyntax>
		currentMagazine vehicle
	</RawSyntax>
	<Example>
		$Code$_magazineClass = currentMagazine player ;//Example: "30Rnd_545x39_AK"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(October 4, 2010)
	See notes of currentWeapon.
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlSetFontP
	</Keyword>
	<Description>
		Sets P font of given HTML control or its size.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlSetFontP
	</WikiPage>
	<Syntax>
		Control ctrlSetFontP String/Number
	</Syntax>
	<RawSyntax>
		control ctrlSetFontP fontOrSize
	</RawSyntax>
	<Example>
		$Code$_control ctrlSetFontP "TahomaB"$/Code$
	</NextExample>
		$Code$_control ctrlSetFontP 0.05$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		lockIdentity
	</Keyword>
	<Description>
		Locks the identity of a person. This will disable default identity.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lockIdentity
	</WikiPage>
	<Syntax>
		lockIdentity Object
	</Syntax>
	<RawSyntax>
		lockIdentity unit
	</RawSyntax>
	<Example>
		$Code$_success = lockIdentity player;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		addItemCargo
	</Keyword>
	<Description>
		Creates new items and stores them in given container. Works with items, weapons and magazines. For global variant see addItemCargoGlobal
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/addItemCargo
	</WikiPage>
	<Syntax>
		Object addItemCargo Array
	</Syntax>
	<RawSyntax>
		box addItemCargo [item, count]
	</RawSyntax>
	<Example>
		$Code$supplyBox addItemCargo ["optic_ARCO", 10];$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		isEqualTypeParams
	</Keyword>
	<Description>
		Compares types of all elements of input array to types of all elements of template array. Similar to isEqualTypeArray however this command is designed for fast validation of functions params, so there are differences:
	Input can be anything but will be expected to be an Array, otherwise false is returned
	Input array can be longer but not shorter than template array, will return false if shorter
	nil could be used in template type array as a wild card to allow any type match
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isEqualTypeParams
	</WikiPage>
	<Syntax>
		Anything isEqualTypeParams Array
	</Syntax>
	<RawSyntax>
		input isEqualTypeParams template
	</RawSyntax>
	<Example>
		$Code$[1,2, player,"10"] isEqualTypeParams [0,0, objNull,""]; //true
	123 isEqualTypeParams [0,0, objNull,""]; //false
	[] isEqualTypeParams [0,0, objNull,""]; //false
	[1,2, player ] isEqualTypeParams [0,0, objNull,""]; //false
	[1,2, player,"10", true ] isEqualTypeParams [0,0, nil,""]; //true
	[1,2, getPos player,"10", true ] isEqualTypeParams [0,0, nil,""]; //true$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		joinAs
	</Keyword>
	<Description>
		Joins the unit to the given group, if position id is available, this one is used.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/joinAs
	</WikiPage>
	<Syntax>
		Object joinAs Array
	</Syntax>
	<RawSyntax>
		unit joinAs [group, id]
	</RawSyntax>
	<Example>
		$Code$player joinAs [_group, 4];$/Code$
	</NextExample>
		$Code$// To get the position id:
	getUnitPositionId = {
	private ["_vvn", "_str"];
	_vvn = vehicleVarName _this;
	_this setVehicleVarName "";
	_str = str _this;
	_this setVehicleVarName _vvn;
	parseNumber (_str select [(_str find ":") + 1])
	};
	player joinAs [ createGroup west, 5];
	_id = player call getUnitPositionId;
	hint str _id; //5$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		onDoubleClick
	</Keyword>
	<Description>
		Defines an action performed when the user double clicks on the map. Command receives:,_pos array position,_units array selected units,_shift,_alt bool key state
	i
	Some Old Editor Command
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/onDoubleClick
	</WikiPage>
	<Syntax>
		Control onDoubleClick String
	</Syntax>
	<RawSyntax>
		map onDoubleClick command
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		mapCenterOnCamera
	</Keyword>
	<Description>
		control mapCenterOnCamera boolean syntax enables/disables continuous centering of the main map type control on the camera position. Needs to be executed once.
	mapCenterOnCamera control syntax centers mini map type control on camera. The command returns world position of the camera. Needs to be executed each frame (preferably inside onDraw EH).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/mapCenterOnCamera
	</WikiPage>
	<Syntax>
		Control mapCenterOnCamera Boolean
	</NextSyntax>
		mapCenterOnCamera Control
	</Syntax>
	<RawSyntax>
		mainmap mapCenterOnCamera enable
	</NextRawSyntax>
		mapCenterOnCamera minimap
	</RawSyntax>
	<Example>
		$Code$//--- Minimap update
	(( uiNamespace getVariable "BIS_UAV_DISPLAY") displayCtrl 112410) mapCenterOnCamera true ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing - Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		canAddItemToUniform
	</Keyword>
	<Description>
		Checks if given object can be stored into soldier's uniform.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/canAddItemToUniform
	</WikiPage>
	<Syntax>
		Object canAddItemToUniform String
	</NextSyntax>
		Object canAddItemToUniform Array
	</Syntax>
	<RawSyntax>
		unit canAddItemToUniform item
	</NextRawSyntax>
		unit canAddItemToUniform [item, count]
	</RawSyntax>
	<Example>
		$Code$_item = "HandGrenade";
	_fits = player canAddItemToUniform _item;
	if (_fits) then {
	player addItemToUniform _item;
	} else {
	hint "no room!";
	};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean - Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		enableSimulation
	</Keyword>
	<Description>
		Enable / disable simulation for given entity.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/enableSimulation
	</WikiPage>
	<Syntax>
		Object enableSimulation Boolean
	</Syntax>
	<RawSyntax>
		entity enableSimulation state
	</RawSyntax>
	<Example>
		$Code$player enableSimulation false;$/Code$
	</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
		(15 July, 2009)
	enableSimulation will "freeze" the unit, including animations, eye blinking, etc ; you cannot switchMove or playMove.
	the unit can still take damages and report status and enemies by radio.
	</NextNote>
		(19 July, 2011)
	Nou/Jaynus have discovered something quite important about the Arma2 engine:
	Orient yourself to the enableSimulation command in ARMA 2:
	If simulation is disabled on objects (this enablesimulation false), they do not send updates across the network, drastically reducing traffic across the network by an order of magnitude. What this means in practicality is that it is possible to have huge mission maker created cities with no or negligible impact on mission performance. Mission placed objects is the most common cause of performance woes - so this is huge news, and was previously undocumented, both on the BIS wiki and elsewhere.
	There are some quirks.
	While an object which has enableSimulation false set on it will take damage, it will not display any animations or damage states until enableSimulation is enabled back onto it. If you want to disable simulation on a unit and then show it as dieing once it is hit or damaged, add an eventhandler onto it which enables simulation on the object when it is hit or killed. Hit handler for best visual, killed handler for best performance.
	This discovery will be the basis of a new unit caching script by Jaynus.
	This also has importance in a technical sense: bandwith is the most significant factor in mission performance. The lower the server bandwith, the better the performance.
	</NextNote>
		(9 Sept, 2011)
	Objects with disabled simulation are not calculated for lightsources beyond the global light (moon/sun), so any light sources you create will not light them.
	</NextNote>
		(12 Nov, 2011)
	Contrary to Krause's suggestions above, using "this enableSimulation False" on static objects has no effect on a dedicated server's bandwidth usage or FPS (as per current 1.59 Release version).
	</NextNote>
		(8 May, 2012)
	re: Homer.
	Yep. That's because this functionality is now part of the basic arma netcode. Pretty nice :)
	</NextNote>
		(October 3, 2014)
	Units with disabled simulation will not be affected by gravity.
	</NextNote>
		(October 21, 2014)
	Units that have been previously subjected to enableSimulation false; or enableSimulationGlobal false; may stay unrecognised for a long time even after simulation was re-enabled, returning objNull as cursorTarget. Force revealing units with reveal command usually solves the problem. For example: $Code${ player reveal _x} forEach allUnits ;$/Code$
	</NextNote>
		(May 23, 2015)
	After using enableSimulation false or enableSimulationGlobal false on an object, setPos will still update its position across the network in MP.
	</NextNote>
		(December 2, 2015)
	After using enableSimulation false or enableSimulationGlobal false on a vehicle (car, helo), don't forget to re-enable simulation on this vehicle before a player jumps into it. Otherwise, he will be stick in it, with a black screen and no way to escape!
	</NextNote>
		(February 5, 2016)
	cursorTarget returns a null_object for objects with disabled simulation. But you can find them with other commands such nearEntities.
	</NextNote>
		(September 1, 2016)
	Since Arma 3 1.56 the object can also be returned with cursorObject even if the simulation is not enabled
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		pi
	</Keyword>
	<Description>
		pi (180 degrees converted to Radians ).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/pi
	</WikiPage>
	<Syntax>
		pi
	</Syntax>
	<RawSyntax>
		pi
	</RawSyntax>
	<Example>
		$Code$_radians = 2*pi
	// Result is 6.2830$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		backpackMagazines
	</Keyword>
	<Description>
		Get array with all magazines from backpack of the given unit.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/backpackMagazines
	</WikiPage>
	<Syntax>
		backpackMagazines Object
	</Syntax>
	<RawSyntax>
		backpackMagazines unit
	</RawSyntax>
	<Example>
		$Code$backpackMagazines player ;[
	"Titan AT Missile(1/1)[id/cr:16/0](2x)"
	]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		stance
	</Keyword>
	<Description>
		Returns the stance of the given unit. It can be one of:
	"STAND"
	"CROUCH"
	"PRONE"
	"UNDEFINED" (for example, swimming)
	"" (on non-person object )
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/stance
	</WikiPage>
	<Syntax>
		stance Object
	</Syntax>
	<RawSyntax>
		stance unit
	</RawSyntax>
	<Example>
		$Code$if ( stance player == "STAND") then { hint "I am standing!"};$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		wingsForcesRTD
	</Keyword>
	<Description>
		Returns force produced by wings.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/wingsForcesRTD
	</WikiPage>
	<Syntax>
		wingsForcesRTD Object
	</Syntax>
	<RawSyntax>
		wingsForcesRTD RTD_helicopter
	</RawSyntax>
	<Example>
		$Code$_wingForce = wingsForcesRTD _rtdHelo$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(March 19, 2015)
	Advanced helicopter flight model MUST be enabled for this function to work, otherwise it returns an empty array.
	Returns a 3x3 two-dimensional array. In the editor while climbing in a little bird, it returned this:
	[ [ 0.3993577, 11.72865, -30.21434 ], [ 0.3053164, 11.17272, -30.17695 ], [ 94.33984, 51.3513, -40.4908 ] ]
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		getTerrainHeightASL
	</Keyword>
	<Description>
		Returns the terrain height above the sea for the given position.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getTerrainHeightASL
	</WikiPage>
	<Syntax>
		getTerrainHeightASL Position2D/Position3D
	</Syntax>
	<RawSyntax>
		getTerrainHeightASL position
	</RawSyntax>
	<Example>
		$Code$_height = getTerrainHeightASL ( position player );$/Code$
	</NextExample>
		$Code$_height = getTerrainHeightASL [5213,3245];$/Code$
	</NextExample>
		$Code$_seadepth = abs ( getTerrainHeightASL getPos player ); // sea depth at players position;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(June 6, 2017)
	This command can usefully return the depth of water at the given position when in water. Note that the number it returns is the depth, albiet expressed as a negative number. Use abs to always return a positive number. See example 3
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		removeAllMusicEventHandlers
	</Keyword>
	<Description>
		Removes all music track event handlers of given type.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/removeAllMusicEventHandlers
	</WikiPage>
	<Syntax>
		removeAllMusicEventHandlers String
	</Syntax>
	<RawSyntax>
		removeAllMusicEventHandlers type
	</RawSyntax>
	<Example>
		$Code$removeAllMusicEventHandlers "MusicStart"$/Code$
	</NextExample>
		$Code$removeAllMusicEventHandlers "MusicStop"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		posScreenToWorld
	</Keyword>
	<Description>
		Convert screen coordinates in map to world coordinates.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/posScreenToWorld
	</WikiPage>
	<Syntax>
		Control posScreenToWorld Array
	</Syntax>
	<RawSyntax>
		map posScreenToWorld [x, y]
	</RawSyntax>
	<Example>
		$Code$_WorldCoord = _Control posScreenToWorld _ScreenCoord$/Code$
	</NextExample>
		$Code$_WorldCoord = _Control posScreenToWorld [_x,_y]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(April 7, 2007)
	Notes:
	You can get the screen coordinates by the UI Event Handlers onMouseButtonDown, onMouseButtonUp, onMouseButtonClick, onMouseButtonDblClick.
	The return Array is in 2-D, you can use it with all set-position commands.
	_x = returnArray select 0;
	_y = returnArray select 1;
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		magazinesAmmoCargo
	</Keyword>
	<Description>
		Returns an array of subarrays with the type names and ammo left of all the vehicle's cargo or container magazines.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/magazinesAmmoCargo
	</WikiPage>
	<Syntax>
		magazinesAmmoCargo Object
	</Syntax>
	<RawSyntax>
		magazinesAmmoCargo vehicle
	</RawSyntax>
	<Example>
		$Code$magazinesAmmoCargo vehicle player ;$/Code$
	</NextExample>
		$Code$magazinesAmmoCargo uniformContainer player ;[
	["30Rnd_65x39_caseless_mag",30],
	["30Rnd_65x39_caseless_mag",30],
	["Chemlight_green",1]
	]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		setWaypointCompletionRadius
	</Keyword>
	<Description>
		The completion radius allows units to call the waypoint completed once they are inside of the given circle.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setWaypointCompletionRadius
	</WikiPage>
	<Syntax>
		Array setWaypointCompletionRadius Number
	</Syntax>
	<RawSyntax>
		waypoint setWaypointCompletionRadius radius
	</RawSyntax>
	<Example>
		$Code$[grp, 2] setWaypointCompletionRadius 30;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(29 January 2010‎, 14:12)
	The completion radius is currently important for units moving in the Combat mode.
	With default completion radius = 0 the leader always finishes in the exact location of the waypoint.
	By providing a completion radius you allow him to plan his road to a cover nearby instead.
	This does not necessarily mean the waypoint is complete once they are inside of the circle.
	The way it works now it is complete once unit is inside and does not think it would be reasonable to move any closer.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		configSourceAddonList
	</Keyword>
	<Description>
		Returns an array of addons ( CfgPatches ) in which the given config class is defined.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/configSourceAddonList
	</WikiPage>
	<Syntax>
		configSourceAddonList Config
	</Syntax>
	<RawSyntax>
		configSourceAddonList config
	</RawSyntax>
	<Example>
		$Code$_addons = configSourceAddonList ( configFile "CfgVehicles" "Man");
	hint str _addons; // ["A3_Data_F","A3_Characters_F","A3_Data_F_Curator","A3_Air_F_Heli"]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		tvText
	</Keyword>
	<Description>
		Returns shown text in the item on given path. IDC means id of parent Tree View.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/tvText
	</WikiPage>
	<Syntax>
		tvText Array
	</NextSyntax>
		Control tvText Array
	</Syntax>
	<RawSyntax>
		tvText [idc, path]
	</NextRawSyntax>
		control tvText path
	</RawSyntax>
	<Example>
		$Code$tvText [101, [0]];$/Code$
	</NextExample>
		$Code$_ctrl tvText [0,0,0];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(Sep 11 2014)
	(A3 1.28)tv command family overview
	$Code$
	//tv command family available for CT_TREE (type 12)
	private ["_count","_current","_data","_text","_value","_pic"];
	_CT_TREE tvAdd [ [],"Parent_A"];
	_CT_TREE tvAdd [ [0],"Child_A"];
	_CT_TREE tvAdd [ [0,0],"Grandchild_A"];
	_CT_TREE tvAdd [ [],"Parent_B"];
	_CT_TREE tvAdd [ [1],"Child_B"];
	_count = _CT_TREE tvCount []; //return 2
	_CT_TREE tvSetCurSel [0,0,0]; //select grandchild_A
	_current = tvCurSel _CT_TREE; //return [0,0,0]
	_CT_TREE tvSetData [_current,"I'm grandchild_A"];
	_data = _CT_TREE tvData _current; // "I'm grandchild_A"
	_text = _CT_TREE tvText _current; //"Grandchild_A"
	_CT_TREE tvSetValue [_current,14];
	_value = _CT_TREE tvValue _current; // 14
	_CT_TREE tvSetPicture [_current, getText ( configFile "CfgWeapons" "optic_NVS" "picture")];
	_pic = _CT_TREE tvPicture _current;
	_CT_TREE tvExpand [1];
	_CT_TREE tvSort [[], false ];
	_CT_TREE tvSortByValue [[], false ];
	_CT_TREE tvDelete [0,0]; //remove child_b
	tvClear 12;
	_CT_TREE tvCollapse [];
	$/Code$
	</Note>
	<ReturnValue>
		String - String
	</ReturnValue>

</NextListItem>

	<Keyword>
		animate
	</Keyword>
	<Description>
		Activates given object animation. Animation is defined in CfgModels Animations class of model.cfg or another model config. Since Arma 3 v1.65.138459 speed of animation can be altered with coefficient.
	To animate door of the house from example below: house animate ["Door_1_rot", 1];
	class Animations
	{
	class Door_1_rot
	{
	type = rotation ;
	source = Door_1_source ;
	selection = Door_1 ;
	axis = Door_1_axis ;
	memory = 1 ;
	minValue = 0.1 ;
	maxValue = 1 ;
	angle0 = 0 ;
	angle1 = ( rad 110 );
	};
	class Door_Handle_1_rot_1
	{
	type = rotation ;
	source = Door_1_handle_source ;
	selection = Door_Handle_1 ;
	axis = Door_Handle_1_axis ;
	memory = 1 ;
	minValue = 0 ;
	maxValue = 0.1 ;
	angle0 = 0 ;
	angle1 = ( rad - 50 );
	};
	};
	Since model.cfg is not always available for reference, most animation names could also be obtained from animationNames command. Class names listed in CfgVehicles AnimationSources bound to "Proxy" controller can also be animated with animate command (see createVehicle/vehicles ): offroad animate ["HideBackpacks", 0];
	It is recommended that animateSource command is used instead of animate whenever is possible, as it is more efficient and optimised for MP
	Mixing animateSource command with animate command to animate the same part may produce some undefined behaviour
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/animate
	</WikiPage>
	<Syntax>
		Object animate Array
	</Syntax>
	<RawSyntax>
		objectName animate [animationName, phase, speed]
	</RawSyntax>
	<Example>
		$Code$_building animate ["maindoor", 1];$/Code$
	</NextExample>
		$Code$_building animate ["Door_1_rot", 1, true ];$/Code$
	</NextExample>
		$Code$// Create Offroad and add flashing police light bar:
	offroad = "C_Offroad_01_F" createVehicle ( player getRelPos [5, 0]);
	offroad animate ["HidePolice", 0];
	offroad animate ["BeaconsStart", 1];$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
		(Aug 2007)
	Animations can be used on existing game models such as houses that have doors eg. The general syntax is house animate ["dvere1",1] to 'open' the door and house animate ["dvere1",0] to 'close it'. Whether used on Oem addons, or official ones, an internal working knowledge (via config.cpp) of the model's animated name(s) is required.
	'open' and 'close' are visual perceptions of the state of the model, and are a design decision of the p3d. Open does not, necessarily mean, 1, and close does not mean 0.
	'0' and '1' are better seen as FULLY_OFF and FULLY_ON
	If a door is initially closed in the model, FULLY_ON, will open it. If it is initialy OPEN visually, in the model, FULLY_ON will close it.
	initphase=1; (in config cpp) does not alter open and close meanings, all it does, is, set the model to the 'on' (rather than 'off') state to begin with. Whether on means open or close visually, is a p3d design decision.
	</NextNote>
		(June 2011)
	Also, to animate the object called "Bar Gate" in ArmA, use the following: $Code$myGate animate ["Bargate",1]$/Code$ to close it, and $Code$myGate animate ["Bargate", 0]$/Code$ to open it.
	</NextNote>
		(June 21, 2015)
	With this command you can switch the offroad police lights on like this :
	$Code$_vehicle animate ["BeaconsStart",1];$/Code$
	And switch it off :
	$Code$_vehicle animate ["BeaconsStart",0];$/Code$
	</NextNote>
		(February 16, 2016)
	Aparently "Bargate" was exchainged with "Door_1_rot"
	Doesen't work:
	$Code$object animate ["Bargate", 0];$/Code$
	Works:
	$Code$object animate ["Door_1_rot", 0];$/Code$
	</NextNote>
		(March 14, 2016)
	To animate bargate use animateSource :
	$Code$bargate animateSource ["Door_1_source", 1];$/Code$
	</NextNote>
		(November 25, 2017)
	For pop-up targets, you can keep the target down (until you tell it to pop up) with:
	$Code$target1 animate ["terc", 1];$/Code$
	When you're ready for the target to pop up, you can use:
	$Code$target1 animate ["terc", 0];$/Code$
	With this setting, the target will return to its usual behavior of going down when hit and automatically popping back up again. To make the target stay down after being hit, add the following line:
	$Code$target1 addEventHandler ["HitPart", {target1 animate ["terc", 1];}];$/Code$
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		commandRadio
	</Keyword>
	<Description>
		Sends the audio message to the command radio channel. Must have assigned "ItemRadio" to send or receive the transmission. The message is defined in CfgRadio in the description.ext file or config radio protocol. The transmission will play only on the PC where command was executed. If you need the transmission to play on all computers, you have to execute it globally (see remoteExec ).
	Note: When transmitting unit gets killed, transmission will be interrupted, however when receiving unit gets killed, the transmission continues to play.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/commandRadio
	</WikiPage>
	<Syntax>
		Object commandRadio String
	</NextSyntax>
		Array commandRadio String
	</Syntax>
	<RawSyntax>
		unit commandRadio radioName
	</NextRawSyntax>
		[side, identity] commandRadio radioName
	</RawSyntax>
	<Example>
		$Code$_soldierOne commandRadio "messageOne";$/Code$
	</NextExample>
		$Code$player commandRadio configName selectRandom ("true" configClasses ( configFile "CfgRadio"));$/Code$
	</NextExample>
		$Code$[ west, "Base"] commandRadio configName selectRandom ("true" configClasses ( configFile "CfgRadio"));$/Code$
	</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
		(June 24, 2010)
	example: $Code$ _unit commandRadio "SentCmdHide";$/Code$
	radio command from CA_Dubbing config should work
	</NextNote>
		(December 3, 2016)
	To transmit user custom sounds (see Multiplayer_Custom_Sounds_Tutorial ), prefix the full filename including file extension with #. For example if there is a custom user sound file called MySound.ogg, to play it on the radio use:
	$Code$ player commandRadio "#MySound.ogg";$/Code$
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		getRelPos
	</Keyword>
	<Description>
		Returns position, which is given distance and relative direction away from original object.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getRelPos
	</WikiPage>
	<Syntax>
		Object getRelPos Array
	</Syntax>
	<RawSyntax>
		object getRelPos [distance, direction]
	</RawSyntax>
	<Example>
		$Code$// Find position 100 metres away at player's 3 o'clock:
	_relpos = player getRelPos [100, 90];$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		getPos vs getRelPos: getRelPos operates similarly to getPos except in getRelPos the direction is calculated 'relative' to the current object direction whereas getPos's direction is from North. Thus while getPos can take a position array as it's starting point, getRelPos requires an object with its own azithmus heading.
	</NextNote>
		(3 March, 2016)
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		triggerAttachedVehicle
	</Keyword>
	<Description>
		Returns vehicle attached to the trigger (for example using triggerAttachVehicle ).
	Note: The trigger could be local or remote but the result returned by this command will be for the trigger condition set up locally on the client that executed the command. See createTrigger for more info.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/triggerAttachedVehicle
	</WikiPage>
	<Syntax>
		triggerAttachedVehicle Object
	</Syntax>
	<RawSyntax>
		triggerAttachedVehicle trigger
	</RawSyntax>
	<Example>
		$Code$return = triggerAttachedVehicle triggerName;$/Code$
	</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Object
	</ReturnValue>

</NextListItem>

	<Keyword>
		addMenu
	</Keyword>
	<Description>
		Adds a new menu button. Priority is optional.
	i
	Some Old Editor Command
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/addMenu
	</WikiPage>
	<Syntax>
		Control addMenu Array
	</Syntax>
	<RawSyntax>
		map addMenu [text,priority]
	</RawSyntax>
	<Example>
		$Code$example$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		removeWeapon
	</Keyword>
	<Description>
		Remove weapon from a unit. The unit must be local to the computer where command is executed. For a global version of this command see removeWeaponGlobal.
	Note : It is possible to create invalid combinations with this command (ie, attempting to remove a weapon that a unit does not possess). When doing so, application behaviour is undefined.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/removeWeapon
	</WikiPage>
	<Syntax>
		Object removeWeapon String
	</Syntax>
	<RawSyntax>
		unit removeWeapon weapon
	</RawSyntax>
	<Example>
		$Code$player removeWeapon "BAF_L85A2_RIS_SUSAT";$/Code$
	</NextExample>
		$Code$An_2 removeWeapon "M240_veh";$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		(May 27, 2009)
	CTD may occur in certain conditions: when shooter is AI and is currently shooting at target in some proximity (tested with M136 on ACE 1.08 and Compact Fix 1.14H+). Even "dropweapon" action may cause CTD with AI.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		keyName
	</Keyword>
	<Description>
		Returns the name of a button (on the keyboard, mouse or joystick) with the given code.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/keyName
	</WikiPage>
	<Syntax>
		keyName Number
	</Syntax>
	<RawSyntax>
		keyName dikCode
	</RawSyntax>
	<Example>
		$Code$_name = keyName 28; //result is "Enter"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		taskHint
	</Keyword>
	<Description>
		Shows info about new, changed or failed task. The text can contain several lines. \n is used to indicate the end of a line.
	To maintain Arma 3 visual style, it's recommended to use BIS_fnc_showNotification instead.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/taskHint
	</WikiPage>
	<Syntax>
		taskHint Array
	</Syntax>
	<RawSyntax>
		taskHint [hintText, [r, g, b, a], icon]
	</RawSyntax>
	<Example>
		$Code$taskhint ["Task failed!\nBad job!", [1, 0, 0, 1], "taskFailed"]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		Here are the BIS colors:
	$Code$
	taskHint ["New Task!\nHere's your new task!", [1, 1, 1, 1], "taskNew"];
	taskHint ["Task Assigned!\nDo this now!", [1, 1, 1, 1], "taskCurrent"];
	taskHint ["Task Succeeded!\nGood job!", [0.600000,0.839215,0.466666,1], "taskDone"];
	taskHint ["Task Failed!\nBad job!", [0.972549,0.121568,0,1], "taskFailed"];
	taskHint ["Task Canceled!\nNever mind!", [0.75,0.75,0.75,1], "taskFailed"];
	$/Code$
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		disableNVGEquipment
	</Keyword>
	<Description>
		Enables or disables transport NV (Night Vision). To disable TI (Thermal Imaging) use disableTIEquipment.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/disableNVGEquipment
	</WikiPage>
	<Syntax>
		Object disableNVGEquipment Boolean
	</Syntax>
	<RawSyntax>
		vehicle disableNVGEquipment state
	</RawSyntax>
	<Example>
		$Code$myTank disableNVGEquipment true ;$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		blufor
	</Keyword>
	<Description>
		Pre-defined variable for the blufor side.
	Alias for west.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/blufor
	</WikiPage>
	<Syntax>
		blufor
	</Syntax>
	<RawSyntax>
		blufor
	</RawSyntax>
	<Example>
		$Code$if ( side player == blufor ) then {
	hint "BLUFOR";
	};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Side
	</ReturnValue>

</NextListItem>

	<Keyword>
		shownGPS
	</Keyword>
	<Description>
		Checks if client has GPS reciever enabled in description.ext ( showGPS param) or force enabled with showGPS command.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/shownGPS
	</WikiPage>
	<Syntax>
		shownGPS
	</Syntax>
	<RawSyntax>
		shownGPS
	</RawSyntax>
	<Example>
		$Code$if ( shownGPS ) then { hint "You have GPS reciever enabled"};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		addLiveStats
	</Keyword>
	<Description>
		Adds score to the Xbox Live Statistics score for the given unit (or the commander unit of the given vehicle). (Also available in OFPE & VBS2)
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/addLiveStats
	</WikiPage>
	<Syntax>
		Object addLiveStats Number
	</Syntax>
	<RawSyntax>
		unit addLiveStats score
	</RawSyntax>
	<Example>
		$Code$player addLiveStats 10$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlSetForegroundColor
	</Keyword>
	<Description>
		Sets foreground color of given control. Color is in format Color.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlSetForegroundColor
	</WikiPage>
	<Syntax>
		Control ctrlSetForegroundColor Array
	</Syntax>
	<RawSyntax>
		control ctrlSetForegroundColor color
	</RawSyntax>
	<Example>
		$Code$_control ctrlSetForegroundColor [1, 0, 0, 1]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setSimpleTaskType
	</Keyword>
	<Description>
		Attach type to the simple task. See Default Task Types.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setSimpleTaskType
	</WikiPage>
	<Syntax>
		Task setSimpleTaskType String
	</Syntax>
	<RawSyntax>
		task setSimpleTaskType taskType
	</RawSyntax>
	<Example>
		$Code$( currentTask player ) setSimpleTaskType "attack";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		tvDelete
	</Keyword>
	<Description>
		Removes an item with given Tree View Path from Tree View. The paths of other items on the same branch are updated accordingly and may change.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/tvDelete
	</WikiPage>
	<Syntax>
		tvDelete Array
	</NextSyntax>
		Control tvDelete Array
	</Syntax>
	<RawSyntax>
		tvDelete [idc, path]
	</NextRawSyntax>
		control tvDelete path
	</RawSyntax>
	<Example>
		$Code$tvDelete [101, [0, 0]];$/Code$
	</NextExample>
		$Code$_ctrl tvDelete [0, 0];$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
		(Sep 11 2014)
	(A3 1.28)tv command fmily overview
	$Code$
	//tv command family available for CT_TREE (type 12)
	private ["_count","_current","_data","_text","_value","_pic"];
	_CT_TREE tvAdd [ [],"Parent_A"];
	_CT_TREE tvAdd [ [0],"Child_A"];
	_CT_TREE tvAdd [ [0,0],"Grandchild_A"];
	_CT_TREE tvAdd [ [],"Parent_B"];
	_CT_TREE tvAdd [ [1],"Child_B"];
	_count = _CT_TREE tvCount []; //return 2
	_CT_TREE tvSetCurSel [0,0,0]; //select grandchild_A
	_current = tvCurSel _CT_TREE; //return [0,0,0]
	_CT_TREE tvSetData [_current,"I'm grandchild_A"];
	_data = _CT_TREE tvData _current; // "I'm grandchild_A"
	_text = _CT_TREE tvText _current; //"Grandchild_A"
	_CT_TREE tvSetValue [_current,14];
	_value = _CT_TREE tvValue _current; // 14
	_CT_TREE tvSetPicture [_current, getText ( configFile "CfgWeapons" "optic_NVS" "picture")];
	_pic = _CT_TREE tvPicture _current;
	_CT_TREE tvExpand [1];
	_CT_TREE tvSort [[], false ];
	_CT_TREE tvSortByValue [[], false ];
	_CT_TREE tvDelete [0,0]; //remove child_b
	tvClear 12;
	_CT_TREE tvCollapse [];
	$/Code$
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		activatedAddons
	</Keyword>
	<Description>
		Returns a list of all activated addons.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/activatedAddons
	</WikiPage>
	<Syntax>
		activatedAddons
	</Syntax>
	<RawSyntax>
		activatedAddons
	</RawSyntax>
	<Example>
		$Code$_addons = activatedAddons ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(March 28, 2014)
	This command can return a large array, often too large to be diag_log'd or hinted. At the time of writing, my game returned an array with 389 elements. The code below will ignore all the BI addons (they start with a3_) and writes the rest (ie, all your custom addons) to the RPT.
	$Code${ if (! (["a3_", _x] call BIS_fnc_inString )) then { diag_log _x;} } forEach activatedAddons ;$/Code$
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		deleteGroup
	</Keyword>
	<Description>
		Destroys the given group. Group must be empty and local to the machine executing command.
	NOTE: In Arma 3 you can find out locality of the group with local command, unlike with previous games. However owner and setOwner dont work with groups anywhere. The group will always be local to the client that created it, until the client disconnects, then the group becomes local to the server.
	In Arma 3 when last unit leaves a group, the group gets auto deleted. Manually deleting all units from a group however, does not auto delete the empty group. To force the group to get auto-deleted when empty use deleteGroupWhenEmpty
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/deleteGroup
	</WikiPage>
	<Syntax>
		deleteGroup Group
	</Syntax>
	<RawSyntax>
		deleteGroup group
	</RawSyntax>
	<Example>
		$Code$deleteGroup _groupname$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		(December 17, 2006)
	The deleteGroup Command does not work when there are living members of in the group. It doesn't error, it simply doesn't do anything.
	</NextNote>
		(07:50, 10 July 2007 (CEST))
	Living or not doesn't matter - you can't delete the group while it contains any units - even dead ones. It takes few seconds until a dead unit is automatically removed from its group.
	</NextNote>
		(September 12, 2013)
	deleteGroup will only delete local groups even if called by server. Say we have a situation where client creates a group and puts a unit there and later unit dies\gets deleted, server will not be able to delete that empty group until client leaves the game and group ownership switches to server
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		then
	</Keyword>
	<Description>
		First or second element of array is executed depending on result of if condition. Result of the expression executed is returned as a result (result may be Nothing ).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/then
	</WikiPage>
	<Syntax>
		If_Type then Code/Array
	</Syntax>
	<RawSyntax>
		if then else
	</RawSyntax>
	<Example>
		$Code$if (a b) then { c = 1 };$/Code$
	</NextExample>
		$Code$if (a b) then {
	c = 1;
	} else {
	c = 2;
	};
	hint str c;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		Any variables you declare within the body of an if /then statement (ie between the curly braces) are local to that 'if' statement, and are destroyed at the end of the statement. If you know you want to use the variable outside the 'if' statement, make sure your declare it before the 'if' statement.
	</Note>
	<ReturnValue>
		Anything
	</ReturnValue>

</NextListItem>

	<Keyword>
		getForcedFlagTexture
	</Keyword>
	<Description>
		A getter for forceFlagTexture. Forced texture is different from your normal flag texture, which can be retrieved with flagTexture
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getForcedFlagTexture
	</WikiPage>
	<Syntax>
		getForcedFlagTexture Object
	</Syntax>
	<RawSyntax>
		getForcedFlagTexture object
	</RawSyntax>
	<Example>
		$Code$getForcedFlagTexture player ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		locationNull
	</Keyword>
	<Description>
		A non-existing Location. To compare non-existent locations use isNull or isEqualTo :
	locationNull == locationNull ; // false
	isNull locationNull ; // true
	locationNull isEqualTo locationNull ; // true
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/locationNull
	</WikiPage>
	<Syntax>
		locationNull
	</Syntax>
	<RawSyntax>
		locationNull
	</RawSyntax>
	<Example>
		$Code$! isNull locationNull ; // false$/Code$
	</NextExample>
		$Code$str locationNull ; // No location$/Code$
	</NextExample>
		$Code$position locationNull ; // [0,0,0]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Location
	</ReturnValue>

</NextListItem>

	<Keyword>
		enableDebriefingStats
	</Keyword>
	<Description>
		enable debrifing score table.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/enableDebriefingStats
	</WikiPage>
	<Syntax>
		enableDebriefingStats Array
	</Syntax>
	<RawSyntax>
		enableDebriefingStats [left, top, width, height]
	</RawSyntax>
	<Example>
		$Code$enableDebriefingStats [0.1, 0.1, 0.8, 0.8];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		str
	</Keyword>
	<Description>
		Converts any value into a string by placing " and " around the argument. Since Arma 3 v1.63.137891 this command will correctly escape all " inside a string:
	$Code$// Before the fix:
	hint str "string "" string"; // "string " string" - invalid string
	call compile str "string "" string"; // ERROR
	// After the fix:
	hint str "string "" string"; // "string "" string" - valid string
	call compile str "string "" string"; // OK
	$/Code$
	When used on object, object debug name is returned.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/str
	</WikiPage>
	<Syntax>
		str Anything
	</Syntax>
	<RawSyntax>
		str value
	</RawSyntax>
	<Example>
		$Code$_s = str (2 + 3);
	// The value of _s is the string "5"$/Code$
	</NextExample>
		$Code$a = [];
	ac = 0;
	while {ac 5} do {
	ac = count a;
	a set [ac, format ["Index %1", ac]];
	};
	hintSilent str a;
	// Hints all of ["Index 0","Index 1","Index 2","Index 3","Index 4"] including brackets, quotes and commas.$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(September 29, 2009)
	When applied to a unit, this returns the variable name that was assigned to the unit in the editor. For example, if you have created a playable unit with the name 'thePlayer' then you can use 'str player' to return "thePlayer";
	</NextNote>
		(December 5, 2014)
	If you try to count string, the added quotations marks are valid characters and will be counted.
	</NextNote>
		(July 15, 2017)
	If you want to make empty string with str that doesn't have any quotation marks, but is still a String you can use text :
	$Code$ str ""; // ""
	count str ""; // 2
	str text ""; //
	count str text ""; // 0$/Code$
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		configSourceMod
	</Keyword>
	<Description>
		Returns modDir of the mod that given config class was loaded from.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/configSourceMod
	</WikiPage>
	<Syntax>
		configSourceMod Config
	</Syntax>
	<RawSyntax>
		configSourceMod config
	</RawSyntax>
	<Example>
		$Code$configSourceMod ( configFile "CfgVehicles" "Heli_Transport_04_base_F"); //Returns "heli"$/Code$
	</NextExample>
		$Code$configSourceMod ( configFile "CfgVehicles" "Car"); //Returns "A3"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		camCommitted
	</Keyword>
	<Description>
		Checks if the conduction of the last camCommit call already finished.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/camCommitted
	</WikiPage>
	<Syntax>
		camCommitted Object
	</Syntax>
	<RawSyntax>
		camCommitted camera
	</RawSyntax>
	<Example>
		$Code$// SQS:
	; create a camera object
	_cam = "camera" camCreate [5600,4800,10]
	_cam camSetTarget player
	_cam cameraEffect ["internal", "BACK"]
	_cam camCommit 0
	; smoothly move the camera to its new position in 6 seconds
	_cam camSetPos [5680,4720,20]
	_cam camCommit 6
	@ camCommitted _cam
	; proceed$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		enableDynamicSimulationSystem
	</Keyword>
	<Description>
		Enables or disables the whole Arma_3_Dynamic_Simulation system
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/enableDynamicSimulationSystem
	</WikiPage>
	<Syntax>
		enableDynamicSimulationSystem Boolean
	</Syntax>
	<RawSyntax>
		enableDynamicSimulationSystem enable
	</RawSyntax>
	<Example>
		$Code$enableDynamicSimulationSystem true ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		underwater
	</Keyword>
	<Description>
		Return whether object is fully underwater. From Arma 3 v1.66, this also works for units.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/underwater
	</WikiPage>
	<Syntax>
		underwater Object
	</Syntax>
	<RawSyntax>
		underwater object
	</RawSyntax>
	<Example>
		$Code$_isUnderwater = underwater player ;$/Code$
	</NextExample>
		$Code$_isUnderwater = eyePos player select 2 0;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(February 2, 2017)
	This is still quite buggy and not always reliable. Code in Example 2 is a good alternative.
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		shownPad
	</Keyword>
	<Description>
		Checks if client has Notepad enabled.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/shownPad
	</WikiPage>
	<Syntax>
		shownPad
	</Syntax>
	<RawSyntax>
		shownPad
	</RawSyntax>
	<Example>
		$Code$if ( shownPad ) then { hint "You have Notepad enabled."};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		daytime
	</Keyword>
	<Description>
		Returns the current ingame time in hours.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/daytime
	</WikiPage>
	<Syntax>
		daytime
	</Syntax>
	<RawSyntax>
		daytime
	</RawSyntax>
	<Example>
		$Code$; assumme it is 16:30
	_daytime = daytime
	returns 16.5$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(September 23, 2014)
	To change daytime To 24 hour format with hours, minutes, and seconds use this:
	$Code$// daytime = 1.66046
	_hour = floor daytime ;
	_minute = floor (( daytime - _hour) * 60);
	_second = floor ((((( daytime ) - (_hour))*60) - _minute)*60);
	_time24 = text format ["%1:%2:%3",_hour,_minute,_second];
	//_time24 = 1:39:37$/Code$
	Note: Not perfect method, "12:03:06" will display as "12:3:6", more script needed to remove this. Other methods might exist for basic functionality.
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		getBleedingRemaining
	</Keyword>
	<Description>
		Returns how many seconds injured unit will continue leaving blood trail. If unit damage is 0.1, the return value is 0 and unit doesn't leave any blood trail. Use setBleedingRemaining to set different remaining time.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getBleedingRemaining
	</WikiPage>
	<Syntax>
		getBleedingRemaining Object
	</Syntax>
	<RawSyntax>
		getBleedingRemaining unit
	</RawSyntax>
	<Example>
		$Code$_bleedingRemaining = getBleedingRemaining _unit;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		remove3DENLayer
	</Keyword>
	<Description>
		Remove Eden Editor editing layer.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/remove3DENLayer
	</WikiPage>
	<Syntax>
		remove3DENLayer Number
	</Syntax>
	<RawSyntax>
		remove3DENLayer layerID
	</RawSyntax>
	<Example>
		$Code$_myLayer = -1 add3DENLayer "Enemy Base";
	remove3DENLayer _myLayer ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		getObjectProxy
	</Keyword>
	<Description>
		Return the proxy object associated with the given editor object.
	i
	Some Old Editor Command
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getObjectProxy
	</WikiPage>
	<Syntax>
		Control getObjectProxy String
	</Syntax>
	<RawSyntax>
		map getObjectProxy object
	</RawSyntax>
	<Example>
		$Code$( findDisplay 128 displayCtrl 51) getObjectProxy "_unit_1"
	// returns the object 'B 1-1-A:1 (Sean Johnson)'$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		classWorks in BIS RTE only?
	</Note>
	<ReturnValue>
		Object
	</ReturnValue>

</NextListItem>

	<Keyword>
		countSide
	</Keyword>
	<Description>
		Count how many units in the given array belong to given side. If the object in passed array is a Group, the leader of the group will be counted.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/countSide
	</WikiPage>
	<Syntax>
		Side countSide Array
	</Syntax>
	<RawSyntax>
		side countSide arrayName
	</RawSyntax>
	<Example>
		$Code$_num = west countSide list _triggerOne;$/Code$
	</NextExample>
		$Code$_numCivPlayable = civilian countSide playableUnits ;$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(July 4, 2014)
	The countSide command will also accept an array of groups. Tested in ARMA 3 v1.22
	</NextNote>
		(October 19, 2014)
	This command considers captive units as civilians, regardless of their group's side.
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		setVisibleIfTreeCollapsed
	</Keyword>
	<Description>
		Sets whether or not the object is visible even if the tree is collapsed.
	i
	Some Old Editor Command
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setVisibleIfTreeCollapsed
	</WikiPage>
	<Syntax>
		Control setVisibleIfTreeCollapsed Array
	</Syntax>
	<RawSyntax>
		map setVisibleIfTreeCollapsed [object, visible]
	</RawSyntax>
	<Example>
		$Code$_map setVisibleIfTreeCollapsed ["_unit_0", true]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		deleteSite
	</Keyword>
	<Description>
		Removes the site.
	This command is considered deprecated and is no longer supported
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/deleteSite
	</WikiPage>
	<Syntax>
		deleteSite Object
	</Syntax>
	<RawSyntax>
		deleteSite site
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		save3DENInventory
	</Keyword>
	<Description>
		Saves current state of entitie's inventory to SQM.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/save3DENInventory
	</WikiPage>
	<Syntax>
		save3DENInventory Array
	</Syntax>
	<RawSyntax>
		save3DENInventory entities
	</RawSyntax>
	<Example>
		$Code$save3DENInventory [_soldier1,_solider2]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		lockedDriver
	</Keyword>
	<Description>
		Check whether driver position of the vehicle turret is locked.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lockedDriver
	</WikiPage>
	<Syntax>
		lockedDriver Object
	</Syntax>
	<RawSyntax>
		lockedDriver vehicle
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		unitRecoilCoefficient
	</Keyword>
	<Description>
		Returns recoil coefficient of a soldier.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/unitRecoilCoefficient
	</WikiPage>
	<Syntax>
		unitRecoilCoefficient Object
	</Syntax>
	<RawSyntax>
		unitRecoilCoefficient soldier
	</RawSyntax>
	<Example>
		$Code$_myRecoil = unitRecoilCoefficient player$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(September 7, 2013)
	If the unit doesn't exist / is null, -1 is returned.
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		setMarkerText
	</Keyword>
	<Description>
		Sets the text label of an existing marker.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setMarkerText
	</WikiPage>
	<Syntax>
		String setMarkerText String
	</Syntax>
	<RawSyntax>
		markerName setMarkerText text
	</RawSyntax>
	<Example>
		$Code$"Marker1" setMarkerText "You are here.";$/Code$
	</Example>
	<Locality>
		undefined / global
	</Locality>
	<Note>
		createMarker is GLOBAL in multiplayer, so all markers created with it exist for all clients. But they are not visible. Almost all setMarker commands can then be used for different effects on LOCAL clients.
	BUT if you use the setMarkerText command, then the marker will become visible to all clients since the command is GLOBAL.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		menuSetAction
	</Keyword>
	<Description>
		Sets new action into menu entry on given path.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/menuSetAction
	</WikiPage>
	<Syntax>
		menuSetAction Array
	</Syntax>
	<RawSyntax>
		menuSetAction [idc, path, action]
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		execFSM
	</Keyword>
	<Description>
		Executes scripted FSM and returns the FSM handle or 0 when failed. The FSM file is first searched in the mission folder, then in the campaign scripts folder and finally in the global scripts folder. Argument (if any) are available in _this variable inside FSM. In Arma 3 FSM handle is also available in _thisFSM variable.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/execFSM
	</WikiPage>
	<Syntax>
		Anything execFSM String
	</NextSyntax>
		execFSM String
	</Syntax>
	<RawSyntax>
		arguments execFSM filename
	</NextRawSyntax>
		execFSM filename
	</RawSyntax>
	<Example>
		$Code$_id = player execFSM "test.fsm";$/Code$
	</NextExample>
		$Code$_handle = [_a, _b, _c] execFSM "test.fsm";$/Code$
	</NextExample>
		$Code$_handle = execFSM "test.fsm";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number - Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		ropeAttachEnabled
	</Keyword>
	<Description>
		Returns true if vehicle can be attached to ropes
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ropeAttachEnabled
	</WikiPage>
	<Syntax>
		ropeAttachEnabled Object
	</Syntax>
	<RawSyntax>
		ropeAttachEnabled vehicle
	</RawSyntax>
	<Example>
		$Code$ropeAttachEnabled veh1;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		setSkill
	</Keyword>
	<Description>
		Sets ability level of person (commander unit). Value of skill may vary from 0 to 1.
	Available sub-skills are:
	aimingShake
	aimingSpeed
	endurance
	spotDistance
	spotTime
	courage
	reloadSpeed
	commanding
	general
	The value of a sub-skill is interpolated into a range defined in CfgAISkill.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setSkill
	</WikiPage>
	<Syntax>
		Object setSkill Number
	</NextSyntax>
		Object setSkill Array
	</Syntax>
	<RawSyntax>
		unit setSkill skill
	</NextRawSyntax>
		unit setSkill [skillName, value]
	</RawSyntax>
	<Example>
		$Code$_hero setSkill 1;$/Code$
	</NextExample>
		$Code$_finalBoss setSkill ["reloadSpeed", 0.8]; _finalBoss setSkill ["aimingSpeed", 0.33];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(August 4, 2006)
	Approximate ranges are:
	Novice 0.25
	Rookie = 0.25 and = 0.45
	Recruit 0.45 and = 0.65
	Veteran 0.65 and = 0.85
	Expert 0.85
	</NextNote>
		(June 30, 2007)
	If "SuperAI" is turned on in the Difficulty Menu, the skill level is always 1, no matter what was defined in the editor or via this command.
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		civilian
	</Keyword>
	<Description>
		Pre-defined variable for the civilian side.
	When used in a format statement ( hint format ["%1",civilian] ), the string returned is "CIV".
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/civilian
	</WikiPage>
	<Syntax>
		civilian
	</Syntax>
	<RawSyntax>
		civilian
	</RawSyntax>
	<Example>
		$Code$// SQS:
	?((side _unit) == civilian ) : hint "This is a civilian unit!"$/Code$
	</NextExample>
		$Code$// SQF:
	if (( side _unit) == civilian ) then {
	hint "This is a civilian unit!";
	};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		In OFP v1.96, empty vehicles, objects and dead soldiers are on side civilian.
	</Note>
	<ReturnValue>
		Side
	</ReturnValue>

</NextListItem>

	<Keyword>
		lnbDeleteColumn
	</Keyword>
	<Description>
		Removes column with given index from ListNBox control.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lnbDeleteColumn
	</WikiPage>
	<Syntax>
		lnbDeleteColumn Array
	</NextSyntax>
		Control lnbDeleteColumn Number
	</Syntax>
	<RawSyntax>
		lnbDeleteColumn [idc,index]
	</NextRawSyntax>
		ctrl lnbDeleteColumn index
	</RawSyntax>
	<Example>
		$Code$_ctrl lnbDeleteColumn 1;$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
		(Sep 9 2014)
	(A3 1.28)As for invisible data processing, lnbAddArray, lnbAddColumn, lnbData, lnbGetColumnsPosition, lnbSetColumnsPos, lnbSetData, lnbSetText, lnbSetValue, lnbText and lnbValue store data types into exact position of the listNbox with different spaces. Accessing data with coordinate command at nearly the same syntax:
	$Code$
	//Set same value to one position of a Control
	_ctrl lnbSetData [ [0,0],"#1"];
	lnbSetColumnsPos [102, [0,1], 1];
	_ctrl lnbSetText [ [0,1], "#1"];
	_ctrl lnbSetValue [ [0,0],1];
	//Accessing the value disregard affecting one another.
	_ctrl lnbData [0,0]; //"#1"
	lnbGetColumnsPosition _ctrl //[1];
	_ctrl lnbText [0,0];//"#1"
	_ctrl lnbValue [0,0];//1
	$/Code$
	For a direct visible control over CT_LISTNBOX:
	$Code$
	0 = [_CT_LISTNBOX] spawn {
	private ["_CT_LISTNBOX","_color","_current","_pic"];
	disableSerialization ;
	_CT_LISTNBOX = _this select 0;
	{
	_CT_LISTNBOX lnbAddRow [ getText (_x "displayNameShort"), getText (_x "displayName")];
	_CT_LISTNBOX lnbSetPicture [ [_foreachIndex,0], getText (_x "texture")];
	} forEach (" isClass _x" configClasses ( configFile "CfgRanks"));
	_CT_LISTNBOX lnbSetCurSelRow 0;
	_current = lnbCurSelRow _CT_LISTNBOX;
	_color = _CT_LISTNBOX lnbColor [_current,0];
	_CT_LISTNBOX lnbSetColor [ [_current,1], [(_color select 0)/2,0,0,1] ];
	_CT_LISTNBOX lnbDeleteColumn 0;
	_CT_LISTNBOX lnbDeleteRow 1;
	sleep 1;
	lnbClear _CT_LISTNBOX;//Clear all items but control still remains just invisible.
	};
	$/Code$
	A combined use of both invisible and visible data processing commands alive the Control.
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		commandingMenu
	</Keyword>
	<Description>
		Return the name of the player actual topmost commanding menu.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/commandingMenu
	</WikiPage>
	<Syntax>
		commandingMenu
	</Syntax>
	<RawSyntax>
		commandingMenu
	</RawSyntax>
	<Example>
		$Code$waitUntil { commandingMenu == "RscStatus"}; hint "Press 4, I'm bleeding !";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(July 15, 2009)
	Possible values are :
	"" - means menu is closed
	"RscMainMenu" - Main menu, by pressing backspace
	"RscMoveHigh" - Move menu (1)
	"#WATCH" - Watch menu (2)
	"#WATCH0" - Watch menu - next page (2-0)
	"RscWatchDir" - Engage menu (3)
	"RscWatchMoreDir" - Engage menu - watch a direction (3-8)
	"#GET_IN" - Mount menu (4)
	"RscStatus" - Status menu (5)
	"RscCallSupport" - Mount menu - call support (5-1)
	"#ACTION" - Action menu (6)
	"RscCombatMode" - Combat mode menu (7)
	"RscFormations" - Formation menu(8)
	"RscTeam" - Team menu (9)
	"RscSelectTeam" - Team menu - select team (0-5)
	"RscReply" - Reply menu (0)
	"#User:BIS_Menu_GroupCommunication" - Communication menu (0-8)
	"#CUSTOM_RADIO" - Custom sounds menu (0-9)
	"RscRadio" - Radio menu (0-0)
	"RscGroupRootMenu" - "simplified" menu
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		revealMine
	</Keyword>
	<Description>
		Sets given mine as known to the side. (Knowledge about a mine is always shared across all units in a side.)
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/revealMine
	</WikiPage>
	<Syntax>
		Side revealMine Object
	</Syntax>
	<RawSyntax>
		side revealMine mine
	</RawSyntax>
	<Example>
		$Code$west revealMine _mine;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(September 10, 2017)
	Manual mine detection introduced in A3 v1.76 can be overridden with something like this:
	$Code$0 spawn
	{
	while {true} do
	{
	if ("MineDetector" in items player ) then
	{
	{
	if ( mineActive _x && !(_x mineDetectedBy playerSide )) then
	{
	playerSide revealMine _x;
	};
	} forEach (player nearObjects ["MineBase", 10]);
	uiSleep 0.1;
	}
	else
	{
	uiSleep 3;
	};
	};
	};$/Code$
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		tvClear
	</Keyword>
	<Description>
		Removes all items from Tree View with given idc.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/tvClear
	</WikiPage>
	<Syntax>
		tvClear Number
	</NextSyntax>
		tvClear Control
	</Syntax>
	<RawSyntax>
		tvClear idc
	</NextRawSyntax>
		tvClear control
	</RawSyntax>
	<Example>
		$Code$tvClear 101;$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
		(Sep 11 2014)
	(A3 1.28)tv command family overview
	$Code$
	//tv command family available for CT_TREE (type 12)
	private ["_count","_current","_data","_text","_value","_pic"];
	_CT_TREE tvAdd [ [],"Parent_A"];
	_CT_TREE tvAdd [ [0],"Child_A"];
	_CT_TREE tvAdd [ [0,0],"Grandchild_A"];
	_CT_TREE tvAdd [ [],"Parent_B"];
	_CT_TREE tvAdd [ [1],"Child_B"];
	_count = _CT_TREE tvCount []; //return 2
	_CT_TREE tvSetCurSel [0,0,0]; //select grandchild_A
	_current = tvCurSel _CT_TREE; //return [0,0,0]
	_CT_TREE tvSetData [_current,"I'm grandchild_A"];
	_data = _CT_TREE tvData _current; // "I'm grandchild_A"
	_text = _CT_TREE tvText _current; //"Grandchild_A"
	_CT_TREE tvSetValue [_current,14];
	_value = _CT_TREE tvValue _current; // 14
	_CT_TREE tvSetPicture [_current, getText ( configFile "CfgWeapons" "optic_NVS" "picture")];
	_pic = _CT_TREE tvPicture _current;
	_CT_TREE tvExpand [1];
	_CT_TREE tvSort [[], false ];
	_CT_TREE tvSortByValue [[], false ];
	_CT_TREE tvDelete [0,0]; //remove child_b
	tvClear 12;
	_CT_TREE tvCollapse [];
	$/Code$
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlSetFontHeightH3
	</Keyword>
	<Description>
		Sets H3 font size of given HTML control.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlSetFontHeightH3
	</WikiPage>
	<Syntax>
		Control ctrlSetFontHeightH3 Number
	</Syntax>
	<RawSyntax>
		controlName ctrlSetFontHeightH3 height
	</RawSyntax>
	<Example>
		$Code$_control ctrlSetFontHeightH3 0.05$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		loadMagazine
	</Keyword>
	<Description>
		Initiates the loading action on given weapon of the turret of a transport. So the new magazine is not available instantly, yet according to the reloadTime.
	The turret has to be manned. One can also change the magazine if its respective weapon is not selected.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/loadMagazine
	</WikiPage>
	<Syntax>
		Object loadMagazine Array
	</Syntax>
	<RawSyntax>
		transport loadMagazine [turretPath, weaponName, magazineName]
	</RawSyntax>
	<Example>
		$Code$vehicle player loadMagazine [[0],"m256","20Rnd_120mmHE_M1A2"];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlSetFontHeightH4
	</Keyword>
	<Description>
		Sets H3 font size of given HTML control.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlSetFontHeightH4
	</WikiPage>
	<Syntax>
		Control ctrlSetFontHeightH4 Number
	</Syntax>
	<RawSyntax>
		controlName ctrlSetFontHeightH4 height
	</RawSyntax>
	<Example>
		$Code$_control ctrlSetFontHeightH4 0.05$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlSetFontHeightH5
	</Keyword>
	<Description>
		Sets H5 font size of given HTML control.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlSetFontHeightH5
	</WikiPage>
	<Syntax>
		Control ctrlSetFontHeightH5 Number
	</Syntax>
	<RawSyntax>
		controlName ctrlSetFontHeightH5 height
	</RawSyntax>
	<Example>
		$Code$_control ctrlSetFontHeightH5 0.05$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		stopped
	</Keyword>
	<Description>
		Check if unit is stopped by stop command.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/stopped
	</WikiPage>
	<Syntax>
		stopped Object
	</Syntax>
	<RawSyntax>
		stopped unitName
	</RawSyntax>
	<Example>
		$Code$? (stopped _loon1) : hint "Loon1 is stopped"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlSetFontHeightH6
	</Keyword>
	<Description>
		Sets H6 font size of given HTML control.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlSetFontHeightH6
	</WikiPage>
	<Syntax>
		Control ctrlSetFontHeightH6 Number
	</Syntax>
	<RawSyntax>
		controlName ctrlSetFontHeightH6 height
	</RawSyntax>
	<Example>
		$Code$_control ctrlSetFontHeightH6 0.05$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctHeaderCount
	</Keyword>
	<Description>
		Returns number of headers (rows not included) in the RscControlsTable.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctHeaderCount
	</WikiPage>
	<Syntax>
		ctHeaderCount Control
	</Syntax>
	<RawSyntax>
		ctHeaderCount ctrl
	</RawSyntax>
	<Example>
		$Code$ctHeaderCount _control;$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlMapCursor
	</Keyword>
	<Description>
		Changes the default cursor that appears when interacting with a map control to a custom one. Use an empty string to restore the default cursor. If the specified cursor does not exist, the default is used and no error is produced. ( NOT in case of ArmA 3. Using an empty string will result in an error: "No entry 'bin\config.bin/CfgWrapperUI/Cursors.' ). The cursor is the name of a config entry from CfgWrapperUI / Cursors. This command has the following specifics:
	When used on Main Map ( findDisplay 12 displayCtrl 51) it is possible to override multiple default cursors. For example, while leaving default "Arrow" intact, it is possible to just override "Scroll" with lets say "Wait" (Example 3)
	When used on a custom map, for example user made Mini Map, there is only one single cursor "" for everything, therefore only this cursor can be overridden (see Example 4 on how to override it)
	Some possible class names (for the whole list see ctrlMapCursor/cursors ):
	Arrow
	Track
	Move
	Scroll
	Rotate
	Track3D
	Move3D
	Rotate3D
	Raise3D
	Wait
	HC_move
	HC_overFriendly
	HC_overEnemy
	HC_overMission
	HC_unsel
	NOTE1 : Cursor names are case sensitive.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlMapCursor
	</WikiPage>
	<Syntax>
		Control ctrlMapCursor Array
	</Syntax>
	<RawSyntax>
		control ctrlMapCursor [defaultCursor, newCursor]
	</RawSyntax>
	<Example>
		$Code$_map ctrlMapCursor ["Track", "Arrow"];$/Code$
	</NextExample>
		$Code$uiNamespace setVariable ["_map", findDisplay 12 displayCtrl 51];
	( uiNamespace getVariable "_map") ctrlMapCursor ["Track","HC_overFriendly"];$/Code$
	</NextExample>
		$Code$findDisplay 12 displayCtrl 51 ctrlMapCursor ["Scroll", "Wait"];$/Code$
	</NextExample>
		$Code$// Cycle through all available cursors over custom map:
	0 = [] spawn
	{
	disableSerialization ;
	_map = findDisplay 46 createDisplay "RscCredits" ctrlCreate ["RscMapControl", -1];
	_map ctrlSetPosition [0,0,1,1];
	_map ctrlCommit 0;
	{
	_map ctrlMapCursor ["", configName _x]; // -- the actual usage
	hint format ["Current cursor: %1", configName _x];
	sleep 1;
	}
	forEach ("true" configClasses ( configFile "CfgWrapperUI" "Cursors"));
	};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(February 8, 2016)
	When using this command, the cursor will change for the whole display, resulting in visual glitches. Adding the onMouseMoving event handler can help solve this problem:
	$Code$
	_control ctrlAddEventHandler ["MouseMoving",{
	_this params [
	["_mapCtrl", controlNull,[[[controlNull]]]],
	["_xPos",-1,[0]],
	["_yPos",-1,[0]],
	["_mouseIn", false,[[[true]]]]
	];
	if (_mouseIn) then {
	// Mouse is in control area
	_mapCtrl ctrlMapCursor ["","Track"];
	} else {
	// Mouse is out of control area, goes back to arrow
	_mapCtrl ctrlMapCursor ["","Arrow"];
	};
	}];
	$/Code$
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		AISFinishHeal
	</Keyword>
	<Description>
		Alternative Injury Simulation (AIS) end state. Used to tell engine that script side healing is done when using "HandleHeal" event handler.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/AISFinishHeal
	</WikiPage>
	<Syntax>
		AISFinishHeal Array
	</Syntax>
	<RawSyntax>
		AISFinishHeal [unit, healer, healercanheal]
	</RawSyntax>
	<Example>
		$Code$AISFinishHeal [_wounded, _medic, true ];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		onGroupIconOverLeave
	</Keyword>
	<Description>
		Defines an action performed when pointer, previously positioned over icon, is moved away from it (3D or in a map). The code is executed once.
	i
	Since Arma 3 v1.57 a stackable version of this EH is available: GroupIconOverLeave
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/onGroupIconOverLeave
	</WikiPage>
	<Syntax>
		onGroupIconOverLeave String/Code
	</Syntax>
	<RawSyntax>
		onGroupIconOverLeave command
	</RawSyntax>
	<Example>
		$Code$onGroupIconOverLeave
	{
	// Passed values for _this are:
	_is3D = _this select 0;
	_group = _this select 1;
	_wpID = _this select 2;
	_posx = _this select 3;
	_posy = _this select 4;
	_shift = _this select 5;
	_ctrl = _this select 6;
	_alt = _this select 7;
	_message = format ["____ Info ____"];
	{_message = _message + format ["\n %1",_x]} forEach _this;
	hint _message;
	}$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		camTarget
	</Keyword>
	<Description>
		Returns camera's target.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/camTarget
	</WikiPage>
	<Syntax>
		camTarget Object
	</Syntax>
	<RawSyntax>
		camTarget camera
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Object
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlSetFontHeightH1
	</Keyword>
	<Description>
		Sets H1 font size of given HTML control.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlSetFontHeightH1
	</WikiPage>
	<Syntax>
		Control ctrlSetFontHeightH1 Number
	</Syntax>
	<RawSyntax>
		controlName ctrlSetFontHeightH1 height
	</RawSyntax>
	<Example>
		$Code$_control ctrlSetFontHeightH1 0.05$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlSetFontHeightH2
	</Keyword>
	<Description>
		Sets H2 font size of given HTML control.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlSetFontHeightH2
	</WikiPage>
	<Syntax>
		Control ctrlSetFontHeightH2 Number
	</Syntax>
	<RawSyntax>
		controlName ctrlSetFontHeightH2 height
	</RawSyntax>
	<Example>
		$Code$_control ctrlSetFontHeightH2 0.05$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		diag_list
	</Keyword>
	<Description>
		Returns an array of all diag modes available in the game.
	Command is only available when using Arma 3 Diagnostics Exe on Dev-Branch.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/diag_list
	</WikiPage>
	<Syntax>
		diag_list String
	</Syntax>
	<RawSyntax>
		diag_list name
	</RawSyntax>
	<Example>
		$Code$diag_list "toggle";$/Code$
	</NextExample>
		$Code$diag_list "drawMode"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(October 7, 2016)
	Arma 3 Version 1.65.138660
	$Code$ diag_list "toggle";$/Code$ returns:
	["Force","Animation","Mines","HitPoints","AnimSrcUnit","AnimSrcTarget","Suspension",
	"EPEForce","EPEVehicle","ParticleNames","Particles","SurfaceUnder","AISkill","AIDriving",
	"AIAiming","AIBrain","AIDynamicError","AISuppression"]
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		ppEffectCommit
	</Keyword>
	<Description>
		Commit post process effect in given time.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ppEffectCommit
	</WikiPage>
	<Syntax>
		String ppEffectCommit Number
	</NextSyntax>
		Number ppEffectCommit Number
	</NextSyntax>
		Array ppEffectCommit Number
	</Syntax>
	<RawSyntax>
		effect ppEffectCommit commit
	</NextRawSyntax>
		effect ppEffectCommit commit
	</NextRawSyntax>
		[effect1,] ppEffectCommit commit
	</RawSyntax>
	<Example>
		$Code$"colorCorrection" ppEffectCommit 3;$/Code$
	</NextExample>
		$Code$_hndl ppEffectCommit 3;$/Code$
	</NextExample>
		$Code$[_hndl1, _hndl2] ppEffectCommit 3;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing - Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		onBriefingGroup
	</Keyword>
	<Description>
		Select a sound declared in the Description.ext of the mission to be played the first time the Group tab is selected in the briefing.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/onBriefingGroup
	</WikiPage>
	<Syntax>
		onBriefingGroup String
	</Syntax>
	<RawSyntax>
		onBriefingGroup soundName
	</RawSyntax>
	<Example>
		$Code$onBriefingGroup "GroupVoiceOver"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		tg
	</Keyword>
	<Description>
		Identical to tan
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/tg
	</WikiPage>
	<Syntax>
		tg Number
	</Syntax>
	<RawSyntax>
		tg x
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		waypointAttachedVehicle
	</Keyword>
	<Description>
		Gets the vehicle attached to the waypoint.
	A vehicle can be attached to a waypoint by
	creating the waypoint on top of the vehicle (in the editor)
	using waypointAttachVehicle
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/waypointAttachedVehicle
	</WikiPage>
	<Syntax>
		waypointAttachedVehicle Array
	</Syntax>
	<RawSyntax>
		waypointAttachedVehicle waypoint
	</RawSyntax>
	<Example>
		$Code$waypointAttachedVehicle [groupOne,1]$/Code$
	</NextExample>
		$Code$waypointAttachedVehicle [ group player, currentWaypoint group player ]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Object
	</ReturnValue>

</NextListItem>

	<Keyword>
		selectLeader
	</Keyword>
	<Description>
		Select a group's leader. In MP the group has to be local to the PC executing the command. Locality of the group can be checked with local command and group ownership with groupOwner command.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/selectLeader
	</WikiPage>
	<Syntax>
		Group selectLeader Object
	</Syntax>
	<RawSyntax>
		groupName selectLeader unitName
	</RawSyntax>
	<Example>
		$Code$group player selectLeader player ;$/Code$
	</NextExample>
		$Code$// Make unit a leader from server:
	[ group _unit, _unit] remoteExec ["selectLeader", groupOwner group _unit];$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		vectorNormalized
	</Keyword>
	<Description>
		Returns normalized vector (unit vector, vectorMagnitude = 1) of given vector. If given vector is 0 result is a 0 vector as well.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/vectorNormalized
	</WikiPage>
	<Syntax>
		vectorNormalized Array
	</Syntax>
	<RawSyntax>
		vectorNormalized vector
	</RawSyntax>
	<Example>
		$Code$vectorNormalized [12345,7890,38383]; //[0.300481,0.192045,0.934254]
	vectorMagnitude [0.300481,0.192045,0.934254]; //1$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(19 Jul, 2014)
	(ArmA3 1.26) Algorithm:
	$Code$
	Vector = [x,y,z];
	Result = [x/( sqrt (x ^ 2 + y ^ 2 + z ^ 2)), y/( sqrt (x ^ 2 + y ^ 2 + z ^ 2)), z/( sqrt (x ^ 2 + y ^ 2 + z ^ 2))]
	$/Code$
	In mathematics, a unit vector in a normed vector space is a vector whose length is 1.
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		to
	</Keyword>
	<Description>
		Continue sequence of for var construct. It sets the end value of the index variable
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/to
	</WikiPage>
	<Syntax>
		For_Type to Number
	</Syntax>
	<RawSyntax>
		forType to b
	</RawSyntax>
	<Example>
		$Code$for "_x" from 10 to 20 do {/* Do something*/}$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		For_Type
	</ReturnValue>

</NextListItem>

	<Keyword>
		getCargoIndex
	</Keyword>
	<Description>
		Returns index of the unit in cargo. 0,1,2... or -1 if not in cargo.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getCargoIndex
	</WikiPage>
	<Syntax>
		Object getCargoIndex Object
	</Syntax>
	<RawSyntax>
		vehicle getCargoIndex unit
	</RawSyntax>
	<Example>
		$Code$player moveInCargo heli;
	hint str (heli getCargoIndex player );$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		addBackpackCargo
	</Keyword>
	<Description>
		Add backpack(s) to the cargo space of vehicle. Classname list of available backpacks is here.
	In Arma 3, arguments for this command must be local ( ). For global variant see addBackpackCargoGlobal
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/addBackpackCargo
	</WikiPage>
	<Syntax>
		Object addBackpackCargo Array
	</Syntax>
	<RawSyntax>
		vehicle addBackpackCargo [packClassName,count]
	</RawSyntax>
	<Example>
		$Code$this addBackpackCargo ["TK_RPG_Backpack_EP1",2];$/Code$
	</NextExample>
		$Code$_apc addBackpackCargo ["US_Patrol_Pack_EP1",4];$/Code$
	</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		inflamed
	</Keyword>
	<Description>
		Checks if fireplace is inflamed (burning) or not. To check if a unit is receiving damage from fire, use isBurning command.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/inflamed
	</WikiPage>
	<Syntax>
		inflamed Object
	</Syntax>
	<RawSyntax>
		inflamed fireplace
	</RawSyntax>
	<Example>
		$Code$_inflamed = inflamed _fireplaceOne;$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		addWeaponTurret
	</Keyword>
	<Description>
		Adds a weapon to the turret. Use turret path [-1] for driver's turret.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/addWeaponTurret
	</WikiPage>
	<Syntax>
		Object addWeaponTurret Array
	</Syntax>
	<RawSyntax>
		vehicle addWeaponTurret [weaponName, turretPath]
	</RawSyntax>
	<Example>
		$Code$_tank addWeaponTurret ["LMG_M200",[0,0]];$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setMarkerPosLocal
	</Keyword>
	<Description>
		Moves the marker. Pos format is Position2D.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setMarkerPosLocal
	</WikiPage>
	<Syntax>
		String setMarkerPosLocal Array
	</Syntax>
	<RawSyntax>
		markerName setMarkerPosLocal pos
	</RawSyntax>
	<Example>
		$Code$"MarkerOne" setMarkerPosLocal getMarkerPos "MarkerTwo";$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		sendTaskResult
	</Keyword>
	<Description>
		Send a result of the task to the task sender.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/sendTaskResult
	</WikiPage>
	<Syntax>
		Task sendTaskResult Array
	</Syntax>
	<RawSyntax>
		task sendTaskResult [state,result,sentence]
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		playableSlotsNumber
	</Keyword>
	<Description>
		Returns the number of available slots in mission per side (both empty and taken). In singleplayer mission, it returns number of playable units per side.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/playableSlotsNumber
	</WikiPage>
	<Syntax>
		playableSlotsNumber Side
	</Syntax>
	<RawSyntax>
		playableSlotsNumber side
	</RawSyntax>
	<Example>
		$Code$_maxBluforPlayers = playableSlotsNumber blufor ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		didJIPOwner
	</Keyword>
	<Description>
		Checks if the current owner of supplied Object Joined In Progress. Server execution only. On clients returns false.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/didJIPOwner
	</WikiPage>
	<Syntax>
		didJIPOwner Object
	</Syntax>
	<RawSyntax>
		didJIPOwner object
	</RawSyntax>
	<Example>
		$Code$ownerDidJip = didJIPOwner tank;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		This scripting command must be executed on the server to work properly in multiplayer
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		swimInDepth
	</Keyword>
	<Description>
		Sets the target depth level for swimming soldier. Depth should be a negative number.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/swimInDepth
	</WikiPage>
	<Syntax>
		Object swimInDepth Number
	</Syntax>
	<RawSyntax>
		unit swimInDepth value
	</RawSyntax>
	<Example>
		$Code$soldier swimInDepth -20;$/Code$
	</NextExample>
		$Code$bob swimInDepth -10;
	bob doMove ASLToAGL getPosASL player ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(June 13, 2017)
	Doesn't work with animals.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		addRating
	</Keyword>
	<Description>
		Add a number to the rating of a unit - negative values can be used to reduce the rating.
	This command is usually used to reward for completed mission objectives. The rating is given at the end of the mission and is automatically adjusted when killing enemies or friendlies.
	When the rating gets below -2000, the unit's side switches to "ENEMY" ( sideEnemy ) and the unit is attacked by everyone.(see Rating Values )
	See also: Arma_3:_Event_Handlers#HandleRating
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/addRating
	</WikiPage>
	<Syntax>
		Object addRating Number
	</Syntax>
	<RawSyntax>
		unitName addRating rating
	</RawSyntax>
	<Example>
		$Code$player addRating 2000;$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		(November 16, 2014)
	Since there is no setRating command, its expected behaviour can scripted as such:
	$Code$BNRG_fnc_setRating = {
	_setRating = _this select 0;
	_unit = _this select 1;
	_getRating = rating _unit;
	_addVal = _setRating - _getRating;
	_unit addRating _addVal;
	};
	[1000,player] call BNRG_fnc_setRating//set player rating 1000$/Code$
	Using this example, no matter what the units rating was before, it will always set its rating to 1000.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		removeCuratorEditableObjects
	</Keyword>
	<Description>
		Unregister objects which can be edited by a curator.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/removeCuratorEditableObjects
	</WikiPage>
	<Syntax>
		Object removeCuratorEditableObjects Array
	</Syntax>
	<RawSyntax>
		curatorObj removeCuratorEditableObjects [[objects],removeCrew]
	</RawSyntax>
	<Example>
		$Code$curatorModule removeCuratorEditableObjects [[ cursorTarget ],true]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		This scripting command must be executed on the server to work properly in multiplayer
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		getAnimSpeedCoef
	</Keyword>
	<Description>
		Get coefficient for animation speed.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getAnimSpeedCoef
	</WikiPage>
	<Syntax>
		getAnimSpeedCoef Object
	</Syntax>
	<RawSyntax>
		getAnimSpeedCoef unit
	</RawSyntax>
	<Example>
		$Code$getAnimSpeedCoef player ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		getPylonMagazines
	</Keyword>
	<Description>
		Return array of magazines on pylons
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getPylonMagazines
	</WikiPage>
	<Syntax>
		getPylonMagazines Object
	</Syntax>
	<RawSyntax>
		getPylonMagazines vehicle
	</RawSyntax>
	<Example>
		$Code$getPylonMagazines ( vehicle player )$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(May 12, 2017)
	The indexes of the returned array's elements are relative to the pylon IDs, such that element 0 is pylon 1, element 1 is pylon 2, etc.
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		doArtilleryFire
	</Keyword>
	<Description>
		Orders a unit to reload defined magazine commence fire burst on the given position (silently).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/doArtilleryFire
	</WikiPage>
	<Syntax>
		Object doArtilleryFire Array
	</Syntax>
	<RawSyntax>
		unit doArtilleryFire [position, type, rounds]
	</RawSyntax>
	<Example>
		$Code$mortar1 doArtilleryFire [[3000, 120, 1000], "8Rnd_82mm_Mo_shells", 3];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		execEditorScript
	</Keyword>
	<Description>
		Execute an editor script for the specified object.
	i
	Some Old Editor Command
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/execEditorScript
	</WikiPage>
	<Syntax>
		Control execEditorScript Array
	</Syntax>
	<RawSyntax>
		map execEditorScript [object,script]
	</RawSyntax>
	<Example>
		$Code$_map execEditorScript ["_team_1","create"]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Any_Value
	</ReturnValue>

</NextListItem>

	<Keyword>
		groupId
	</Keyword>
	<Description>
		Returns group name.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/groupId
	</WikiPage>
	<Syntax>
		groupId Group
	</Syntax>
	<RawSyntax>
		groupId group
	</RawSyntax>
	<Example>
		$Code$_name = groupId ( group player );$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		addWeaponItem
	</Keyword>
	<Description>
		Adds a weapon item to the specified weapon. The item can be weapon magazine, in which case the amount of ammo and target muzzle could also be specified.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/addWeaponItem
	</WikiPage>
	<Syntax>
		Object addWeaponItem Array
	</Syntax>
	<RawSyntax>
		unit addWeaponItem [weaponName, itemName]
	</NextRawSyntax>
		unit addWeaponItem [weaponName, [itemName, ammoCount, muzzleName]]
	</RawSyntax>
	<Example>
		$Code$player addWeaponItem ["arifle_MX_GL_ACO_F", "1Rnd_HE_Grenade_shell"];$/Code$
	</NextExample>
		$Code$player addWeaponItem ["arifle_MX_GL_ACO_F", ["1Rnd_HE_Grenade_shell", 1, "GL_3GL_F"]];$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setEditorMode
	</Keyword>
	<Description>
		Sets map mode to MAP,3D or PREVIEW.
	i
	Some Old Editor Command
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setEditorMode
	</WikiPage>
	<Syntax>
		Control setEditorMode String
	</Syntax>
	<RawSyntax>
		map setEditorMode mode
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		disableTIEquipment
	</Keyword>
	<Description>
		Disables TI (Thermal Imaging) equipment for given vehicle. In older versions of Arma this command would also disable NV (Night Vision), but since Arma 3 v1.52.132676 this command disables only TI. Use disableNVGEquipment to disable NV.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/disableTIEquipment
	</WikiPage>
	<Syntax>
		Object disableTIEquipment Boolean
	</Syntax>
	<RawSyntax>
		vehicle disableTIEquipment state
	</RawSyntax>
	<Example>
		$Code$vehicle player disableTIEquipment true ;$/Code$
	</NextExample>
		$Code$_tank disableTIEquipment true ;$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		removeItems
	</Keyword>
	<Description>
		Removes all items with given template from the inventory.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/removeItems
	</WikiPage>
	<Syntax>
		Object removeItems String
	</Syntax>
	<RawSyntax>
		unit removeItems item
	</RawSyntax>
	<Example>
		$Code$player removeItems "FirstAidKit";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		addMenuItem
	</Keyword>
	<Description>
		Creates a new menu item. Menu can be "file" or "view",index is index,as returned from addMenu command. priority is optional and determines,where in the menu the item will reside (higher priority items first).
	i
	Some Old Editor Command
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/addMenuItem
	</WikiPage>
	<Syntax>
		Control addMenuItem Array
	</Syntax>
	<RawSyntax>
		map addMenuItem [menu or index,text,command,priority]
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		ppEffectForceInNVG
	</Keyword>
	<Description>
		Forces use of Post process effects in NVG.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ppEffectForceInNVG
	</WikiPage>
	<Syntax>
		Number ppEffectForceInNVG Boolean
	</Syntax>
	<RawSyntax>
		number ppEffectForceInNVG bool
	</RawSyntax>
	<Example>
		$Code$_ppGrain ppEffectForceInNVG true ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setUnconscious
	</Keyword>
	<Description>
		Since Arma 3 v1.63.136889, this command sets unit into incapacitated state and lifeState command returns "INCAPACITATED". Animation played while incapacitated depends on the injuries received.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setUnconscious
	</WikiPage>
	<Syntax>
		Object setUnconscious Boolean
	</Syntax>
	<RawSyntax>
		unit setUnconscious set
	</RawSyntax>
	<Example>
		$Code$_unit setUnconscious true;$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		getPos
	</Keyword>
	<Description>
		Returns the object position in format PositionAGLS. Z value is height over the surface underneath.
	Since Arma 3 v1.55.133361, an alternative syntax is added that allows to get position given distance and heading away from original object or position, the equivalent of BIS_fnc_relPos
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getPos
	</WikiPage>
	<Syntax>
		getPos Object/Location
	</NextSyntax>
		Object/Position2D/Position3D getPos Array
	</Syntax>
	<RawSyntax>
		getPos object
	</NextRawSyntax>
		origin getPos [distance, heading]
	</RawSyntax>
	<Example>
		$Code$hintSilent str getPos player ;$/Code$
	</NextExample>
		$Code$// getPos vs. other methods (over sea)
	diag_log getPos ship; // [2412.01, 6036.33, -0.839965]
	diag_log getPosATL ship; // [2412.01, 6036.33, 19.4266]
	diag_log getPosASL ship; // [2412.01, 6036.33, -0.920066]
	diag_log getPosASLW ship; // [2412.01, 6036.33, -0.865981]
	diag_log visiblePosition ship; // [2412.02, 6036.33, -0.837952]
	diag_log visiblePositionASL ship; // [2412.02, 6036.33, -0.91798]
	diag_log position ship; // [2412.01, 6036.33, -0.839965]$/Code$
	</NextExample>
		$Code$// getPos vs. other methods (over land)
	diag_log getPos car; // [2508.64, 5681.47, 0.0609589]
	diag_log getPosATL car; // [2508.64, 5681.47, 0.0356369]
	diag_log getPosASL car; // [2508.64, 5681.47, 71.718]
	diag_log getPosASLW car; // [2508.64, 5681.47, 71.718]
	diag_log visiblePosition car; // [2508.64, 5681.47, 0.0609512]
	diag_log visiblePositionASL car; // [2508.64, 5681.47, 71.718]
	diag_log position car; // [2508.64, 5681.47, 0.0609589]$/Code$
	</NextExample>
		$Code$// Find position 100 metres and 45 degrees from player position:
	player getPos [100,45];$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(16 Feb, 2007)
	getPos obj select 2
	might return the vertical position above ground level, but for a stacked object, it returns the vertical position above the object beneath it. The same problem exists for getPosASL. There was a discussion thread in the BIS forums which suggested the use of the command modelToWorld instead to get around this issue where an absolute vertical position is required. ArmA Ver 1.02.
	</NextNote>
		(6 Feb, 2011)
	The z height returned changes dynamically with the height of waves beneath the object, if the object is located over sea. The z height returned by getPosATL and getPosASL does not change like this. This was tested by continuously retrieving the position of a static object, like the cross in the empty/corpses category, placed over sea or land.
	getPos behaves similar to
	_obj modelToWorld [0.0, 0.0, 0.0]
	but it does not give the same result, therefore
	(_obj modelToWorld [0.0, 0.0, 0.0]) is not the same as (getPos _obj).
	</NextNote>
		(23 Nov, 2011)
	You can use getPos and setPos on triggers.
	</Note>
	<ReturnValue>
		Array - Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		addMagazine
	</Keyword>
	<Description>
		Add a magazine to a person. Infantry units can only carry a specific number of magazines, once the magazine slots are filled (or uniform/vest/bagpack are full in Arma3), any further addMagazine commands are ignored.
	NOTE: use addMagazine before addWeapon for the weapon to be loaded.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/addMagazine
	</WikiPage>
	<Syntax>
		Object addMagazine String
	</NextSyntax>
		Object addMagazine Array
	</Syntax>
	<RawSyntax>
		unitName addMagazine magazineName
	</NextRawSyntax>
		unitName addMagazine [magazineName, ammoCount]
	</RawSyntax>
	<Example>
		$Code$player addMagazine "30Rnd_556x45_STANAG";$/Code$
	</NextExample>
		$Code$player addMagazine ["30Rnd_556x45_STANAG", 15]; // since Arma 2 OA 1.62$/Code$
	</NextExample>
		$Code$nonLocalUnit addMagazine ["30Rnd_556x45_STANAG", 15]; // global argument since Arma 3$/Code$
	</NextExample>
		$Code$player addMagazine ["30Rnd_556x45_STANAG", 9999]; // will give a 30 rounds magazine anyway$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		(August 2, 2006)
	If the unit has magazines already, you may need to use the commands removeMagazine or removeMagazines to make space for the mags you want to add.
	</NextNote>
		(February 21, 2010)
	In turreted vehicles the magazine is added to the first turret with primaryGunner = 1; set in the Vehicles turret config part (and the magazine is ONLY added to the very first turret if more than one is configged with primaryGunner = 1; ).
	</NextNote>
		(May 12, 2010)
	When wanting to add many magazines to an object's init-line it can be easier to use loops than to just repeat the addMagazine command.
	If you want to add N magazines to an object either of the two below ways are handy, the first for fewer magazines, and the latter when you want to add many since it then is the easiest of the two to read.
	$Code${this addMagazine "magazineClassName"} forEach [1,2,3,...,N];
	for "_i" from 0 to (N - 1) do {this addMagazine "magazineClassName"};$/Code$
	</NextNote>
		(November 28, 2017)
	If adding a magazine to an empty artillery support with this command in ArmA 3, use reload. If you do not reload, Artillery calls will not fire rounds, because the AI won't reload automatically (tested with 82mm mortar)
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		hint
	</Keyword>
	<Description>
		Outputs a multi-line hint message in the left upper corner of the screen (in the right upper corner in Arma). This version of hint is supposed to play a sound when hint is shown, but this varies between games and versions. Use hintSilent for soundless hint.
	The effect of this command is local, i.e. the hint will only show on the computer command was executed.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/hint
	</WikiPage>
	<Syntax>
		hint String/Structured_Text
	</Syntax>
	<RawSyntax>
		hint text
	</RawSyntax>
	<Example>
		$Code$hint "Press W to move forward. \nPress S to move backwards."
	outputs the following message:
	Press W to move forward.
	Press S to move backwards.
	Known Problems: Avoid hint messages that exceed the screen, as this may lead to crashes.$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
		Hint can be used with formatting like this:
	$Code$ hint format ["Hello %1", player ]$/Code$
	</NextNote>
		To remove the hint box from the screen, pass a null string ( "" ) to the command.
	$Code$ hint ""$/Code$
	</NextNote>
		hint happily accepts structured text :
	$Code$_starL = " img image='\ca\ui\data\debr_star.paa' align='left'/ ";
	_starL = _starL + _starL + _starL;
	_starR = " img image='\ca\ui\data\debr_star.paa' align='right'/ ";
	_starR = _starR + _starR + _starR;
	_title = " t color='#ff0000' size='1.2' shadow='1' shadowColor='#000000' align='center' TITLE /t ";
	_text = "Bla bla bla bla bla...";
	hint parseText (_starL + _starR + _title + _text);
	$/Code$
	(Tested with 1.14, 1.15 beta and 1.16 beta)
	</NextNote>
		(October 20, 2014)
	Be careful when using hints to visualize the effects of commands using the Debug Console. Hint can accept an undefined variable and neither the error nor the hint is shown, the command simply fails. Also notice how the hint command should be "hint str _o;"
	$Code$for "_i" from 0 to 50 do
	{
	hint _o;
	};$/Code$
	tested in A3 1.32.127785 In a script, an "undefined variable" error will be shown as expected.
	</NextNote>
		(October 21, 2014)
	Contrary to what's written under "Examples", Arma 3 will happily display hints that far exceed screen space. However, as hints get longer, FPS suffers tremendously.
	(tested in Debug Console, A3 1.32.127785, using:
	$Code$hint str (( nearestObjects [player, ["BUILDING"], 100]) - [player]); [] spawn { sleep 5; systemChat str diag_fps;};
	hint str (( nearestObjects [player, ["BUILDING"], 1000]) - [player]); [] spawn { sleep 5; systemChat str diag_fps;};$/Code$
	Results were: 59.7015 and 5.17297, respectively. Drawing a hint even longer than this, such as nearestObjects with a radius of 10,000 or 100,000 reduces your FPS so much Arma 3 appears to crash, though it doesn't.
	Unrelated: Hints will stay on screen for 30 seconds, then fade away over the course of 5 seconds. Tested with: (A3 1.32.127785)
	$Code$hint "a";[] spawn{_counter = 0;while {true} do{sleep 1;_counter = _counter + 1;systemChat str _counter;};};$/Code$
	</NextNote>
		(February 17, 2015)
	An open dialog will pause the 30-second hint fade timer.
	(A3 1.38.128937)
	</NextNote>
		(March 25, 2017)
	The hint sound is audible only when you have the music volume turned up above 0 in the audio settings. Otherwise, it seems to act the same as hintSilent.
	This is important because if you are running a hint that fires at 30 fps or more, the hint will slow down machines that have the music volume turned up but won't slow down machines that have the music volume turned off.
	Best practice is to use hint for an alert to the player and use hintSilent for a makeshift display of data to the player that is updated fairly often.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setGroupId
	</Keyword>
	<Description>
		Sets a group's identity, how it will be displayed in chat, for example. While groups on the different sides can have identical ids, the groups on the same side cannot. When given id exists already, the group which currently has it will simply swap it with the current id of the group for which this id is intended. For example:
	$Code$group1 = createGroup west ;
	group2 = createGroup west ;
	group1 setGroupId ["Active Group"];
	group2 setGroupId ["Inactive Group"];
	systemChat groupId group1; //"Active Group";
	systemChat groupId group2; //"Inactive Group";
	group2 setGroupId ["Active Group"];
	systemChat groupId group1; //"Inactive Group";
	systemChat groupId group2; //"Active Group";$/Code$
	The identity setup could also consist of format keywords (marked with %) and param keywords taken from CfgWorlds config. Basically it is like format command but with some special group keywords. For Arma 3 possible values are:
	%GroupSquad
	"Squad1" - 1
	"Squad2" - 2
	"Squad3" - 3
	"Squad4" - 4
	%GroupPlatoon
	"Platoon1" - 1
	"Platoon2" - 2
	"Platoon3" - 3
	"Platoon4" - 4
	%GroupCompany
	"CompanyAlpha" - Alpha
	"CompanyBravo" - Bravo
	"CompanyCharlie" - Charlie
	"CompanyDelta" - Delta
	"CompanyEcho" - Echo
	"CompanyFoxtrot" - Foxtrot
	"CompanyGolf" - Golf
	"CompanyHotel" - Hotel
	"CompanyIndia" - India
	"CompanyKilo" - Kilo
	"CompanyLima" - Lima
	"CompanyMike" - Mike
	"CompanyNovember" - November
	"CompanyOscar" - Oscar
	"CompanyPapa" - Papa
	"CompanyQuebec" - Quebec
	"CompanyRomeo" - Romeo
	"CompanySierra" - Sierra
	"CompanyTango" - Tango
	"CompanyUniform" - Uniform
	"CompanyVictor" - Victor
	"CompanyWhiskey" - Whiskey
	"CompanyXray" - X-Ray
	"CompanyYankee" - Yankee
	"CompanyZulu" - Zulu
	%GroupNames
	"Alpha" - Alpha
	"Bravo" - Bravo
	"Charlie" - Charlie
	"Delta" - Delta
	"Echo" - Echo
	"Foxtrot" - Foxtrot
	"Golf" - Golf
	"Hotel" - Hotel
	"November" - November
	"Kilo" - Kilo
	"Yankee" - Yankee
	"Zulu" - Zulu
	"Two" - Two
	"Three" - Three
	"Buffalo" - Buffalo
	"Guardian" - Guardian
	"Convoy" - Convoy
	"Fox" - Fox
	%GroupColors
	"GroupColor1" - Black
	"GroupColor2" - Red
	"GroupColor3" - Green
	"GroupColor4" - Blue
	"GroupColor5" - Yellow
	"GroupColor6" - Orange
	"GroupColor7" - Pink
	"GroupColor0" -
	"Six" - Six
	For global variant of this command use setGroupIdGlobal.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setGroupId
	</WikiPage>
	<Syntax>
		Object/Group setGroupId Array
	</Syntax>
	<RawSyntax>
		group setGroupId [nameFormat, nameParam1,, nameParamN]
	</RawSyntax>
	<Example>
		$Code$// Arma 3 :
	group player setGroupId ["Some name for the group"];
	hint groupId group player ; //"Some name for the group"
	player sideChat "lalala"; //Some name for the group (KK): "lalala"$/Code$
	</NextExample>
		$Code$// Arma 3 :
	group player setGroupId ["%GroupNames :=: %GroupColors","Alpha","GroupColor2"];
	hint groupId group player ; //"Alpha :=: Red"
	player sideChat "lalala"; //Alpha :=: Red (KK): "lalala"$/Code$
	</NextExample>
		$Code$// OFP :
	_group1 setGroupId ["Delta","GroupColor4"]$/Code$
	</NextExample>
		$Code$// ArmA / ArmA 2 :
	_group1 setGroupId ["Assault Squad"]$/Code$
	</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
		Letter is one of:
	"Alpha"
	"Bravo"
	"Charlie"
	"Delta"
	"Echo"
	"Foxtrot"
	"Golf"
	"Hotel"
	"Kilo"
	"Yankee"
	"Zulu"
	"Buffalo"
	"Convoy"
	"Guardian"
	"November"
	"Two"
	"Three"
	"Fox"
	Colour may be one of the following:
	"GroupColor0" - (Nothing)
	"GroupColor1" - Black
	"GroupColor2" - Red
	"GroupColor3" - Green
	"GroupColor4" - Blue
	"GroupColor5" - Yellow
	"GroupColor6" - Orange
	"GroupColor7" - Pink
	"Six" - Six
	</NextNote>
		(August 4, 2006)
	Notes from before the conversion:
	Note that this command does not name the group. To call a group "grp1", for example, write this in the init field of the group leader :
	grp1 = group this
	</NextNote>
		(December 9, 2006)
	Selfdefined Callsigns:
	In Armed Assault you're able to define the callsignletter by yourself. This can be for example "Fireteam", or "Specialforces".
	this setgroupId ["Attackteam"]
	</NextNote>
		In OFP v1.96, the radio callsign strings for a mission can be redefined by creating a stringtable.csv in the mission folder. All string names except FOX can be found within the main stringtable.csv. Note "SIX" has a string suggesting it is a groupname, although the engine uses it as a colour. Some examples of the string names : STR_CFG_GRPNAMES_ALPHA, STR_CFG_GRPNAMES_FOX, STR_CFG_GRPCOL_BLACK, STR_CFG_GRPNAMES_SIX, STR_CFG_FIREFLYBASE, STR_CFG_PAPABEAR, STR_CFG_HQ_BASE, STR_CFG_HQ_BASE.
	</NextNote>
		(April 21, 2015)
	List of available keywords from config: $Code$"if ((configName _x) select [0, 5] == 'group') then {
	diag_log ('%' + configName _x);
	for '_i' from 0 to count _x - 1 do {
	diag_log ('* ""' + configName (_x select _i) + '"" - ' + getText ((_x select _i) 'name'));
	};
	}; false" configClasses (configFile "CfgWorlds");$/Code$
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		shownWatch
	</Keyword>
	<Description>
		Checks if client has Watch enabled in description.ext ( showWatch param) or force enabled with showWatch command.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/shownWatch
	</WikiPage>
	<Syntax>
		shownWatch
	</Syntax>
	<RawSyntax>
		shownWatch
	</RawSyntax>
	<Example>
		$Code$if ( shownWatch ) then { hint "You have Watch enabled"};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		drop
	</Keyword>
	<Description>
		Creates a particle effect.
	This command is used to create smoke, fire and similar effects.
	The particles are single polygons with single textures that always face the player.
	They can be set to dynamically change their position, size, direction, can be set to different weights and more or less dependant on the wind.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/drop
	</WikiPage>
	<Syntax>
		drop Array
	</Syntax>
	<RawSyntax>
		drop array
	</RawSyntax>
	<Example>
		$Code$drop ["cl_basic", "", "Billboard", 1, 1, [-3.5*( sin ( direction xural)),
	-3.5*( cos ( direction xural)),0], [ random 0.1, random 0.1, random 0.5], 1, 0.005, 0.0042,
	0.7, [0.3,3], [[0.5,0.5,0.5,0],[0.7,0.7,0.7,0.5],[0.9,0.9,0.9,0]], [0,1,0,1,0,1],
	0.2, 0.2, "", "", xural]$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		groupOwner
	</Keyword>
	<Description>
		Returns ID of client to which the group is local. Can be run only from server. When called from client, it always returns 0
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/groupOwner
	</WikiPage>
	<Syntax>
		groupOwner Group
	</Syntax>
	<RawSyntax>
		groupOwner group
	</RawSyntax>
	<Example>
		$Code$_clientID = groupOwner _someGroup;$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		This scripting command must be executed on the server to work properly in multiplayer
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		attackEnabled
	</Keyword>
	<Description>
		Return whether a group's leader can issue attack commands to soldiers under his command.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/attackEnabled
	</WikiPage>
	<Syntax>
		attackEnabled Object/Group
	</Syntax>
	<RawSyntax>
		attackEnabled name
	</RawSyntax>
	<Example>
		$Code$if (not attackEnabled _soldier) then {_soldier setCombatMode "Careless"}$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		setMarkerAlphaLocal
	</Keyword>
	<Description>
		Sets the marker alpha. The marker is only modified on the computer where the command is called.
	When alpha equals 1, the marker is visible, but if alpha equals 0, then the marker is invisible.
	Alpha can be numbers and fractions.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setMarkerAlphaLocal
	</WikiPage>
	<Syntax>
		String setMarkerAlphaLocal Number
	</Syntax>
	<RawSyntax>
		marker setMarkerAlphaLocal alpha
	</RawSyntax>
	<Example>
		$Code$"my_marker" setMarkerAlphaLocal 0.5;$/Code$
	</NextExample>
		$Code$"enemy_convoy_marker" setMarkerAlphaLocal 0;$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
		(January 7, 2010)
	</NextNote>
		The range for 'alpha' is 0... 1
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		removeOwnedMine
	</Keyword>
	<Description>
		Removes ownership over a remotely detonatable mine from the unit.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/removeOwnedMine
	</WikiPage>
	<Syntax>
		Object removeOwnedMine Object
	</Syntax>
	<RawSyntax>
		unit removeOwnedMine mine
	</RawSyntax>
	<Example>
		$Code$player removeOwnedMine SuperMine;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		vehicles
	</Keyword>
	<Description>
		Returns an array of all vehicles available to current client. This command returns both empty and crewed vehicles but not soldiers. It will also return "WeaponHolderSimulated" of dead bodies (weapon on the ground). Vehicles created with createVehicleLocal will only be returned on the client that created them.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/vehicles
	</WikiPage>
	<Syntax>
		vehicles
	</Syntax>
	<RawSyntax>
		vehicles
	</RawSyntax>
	<Example>
		$Code$_vehicles = vehicles ;$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		canFire
	</Keyword>
	<Description>
		Returns true if the given vehicle is still able to fire. For the command to return true, vehicle must be alive, have weapon operator and the weapon cannot be damaged = 0.9 but can be empty due to running out of ammo. If mission starts with vehicle having no ammo or setVehicleAmmo 0 command is executed on the vehicle, then canFire will always report false for it.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/canFire
	</WikiPage>
	<Syntax>
		canFire Object
	</Syntax>
	<RawSyntax>
		canFire unitName
	</RawSyntax>
	<Example>
		$Code$// SQS:
	?!( canFire _tank) : player sideChat "Tank disabled!"$/Code$
	</NextExample>
		$Code$// SQF:
	if ( ! ( canFire _tank)) then {
	player sideChat "Tank disabled!";
	};$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(07:16, 20 January 2007 (CEST))
	true even if unit is out of ammo. Only false if gun is damaged.
	</NextNote>
		(05:20, 24 August 2008 (CEST))
	False if there is no gunner in the vehicle, regardless of damage level.
	</NextNote>
		(07:20, 23 April 2018 (UTC))
	This command seems to have evolved. Returns "true" (on Hunter, Ifrit) even if Gun's damage is set to 1 and turret also, as far there is a gunner. The only way to obtain a canFire "false" is to make the crew disembark (2 burned tires for example). Then no matter the gun state, if the gunner disembarks without order, the vehicle can't fire. In this case: can't move can't fire.
	NB: if you jump into a hunter HMG after having setHitPointDamage(d) "hitTurret" and "hitGun" to 1, the turret can't rotate any more, the gun is pitched down but you can fire (trigger) to the ground. Difficult to check the behavior for each vehicles.
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		vestItems
	</Keyword>
	<Description>
		Get array with all items (of any kind, even weapons) from vest.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/vestItems
	</WikiPage>
	<Syntax>
		vestItems Object
	</Syntax>
	<RawSyntax>
		vestItems unit
	</RawSyntax>
	<Example>
		$Code$vestItems player ;[
	"30Rnd_65x39_caseless_mag",
	"30Rnd_65x39_caseless_mag",
	"16Rnd_9x21_Mag",
	"16Rnd_9x21_Mag",
	"HandGrenade",
	"HandGrenade",
	"SmokeShell",
	"SmokeShellGreen",
	"Chemlight_green",
	"Chemlight_green"
	]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlSetEventHandler
	</Keyword>
	<Description>
		Sets given event handler of given control.
	The provided function should return true/false indicating that the event has handled this event fully or not and whether the engine should execute it's default code or not afterwards.
	See User Interface Event Handlers for the full list of handler names.
	If applicable, see DIK_KeyCodes for a list of key code constants, which are relevant to key related user interface events like: KeyDown & KeyUp.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlSetEventHandler
	</WikiPage>
	<Syntax>
		Control ctrlSetEventHandler Array
	</Syntax>
	<RawSyntax>
		controlName ctrlSetEventHandler [handlerName, function]
	</RawSyntax>
	<Example>
		$Code$_control ctrlSetEventHandler ["KeyDown", ""]$/Code$
	</NextExample>
		$Code$(_display displayCtrl 108) ctrlSetEventHandler ["LBSelChanged","['ListChange',_this] call FireEvents"];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		The article User Interface Event Handlers contains a list of event handler names.
	Be aware though, that the preceding "on" in the listed names must be eliminated when used with the ctrlSetEventHandler command.
	e.g. instead of $Code$ _control ctrlSetEventHandler [" OnLBSelChanged ", ""]; // WRONG $/Code$
	use
	$Code$ _control ctrlSetEventHandler [" LBSelChanged ", ""]; // RIGHT $/Code$
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		modelToWorldVisualWorld
	</Keyword>
	<Description>
		Converts position from object model space to world space in render time.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/modelToWorldVisualWorld
	</WikiPage>
	<Syntax>
		Object modelToWorldVisualWorld Array
	</Syntax>
	<RawSyntax>
		obj modelToWorldVisualWorld modelPos
	</RawSyntax>
	<Example>
		$Code$player modelToWorldVisualWorld [0,1,0]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(May 28, 2017)
	This command produces identical result to modelToWorldVisual command used in conjunction with AGLToASL
	$Code$obj modelToWorldVisualWorld [1,2,3] isEqualTo AGLToASL (obj modelToWorldVisual [1,2,3]); // true$/Code$
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		param
	</Keyword>
	<Description>
		Extracts a single value with given index from input argument, similar to BIS_fnc_param. When used without argument, as shown in main syntax, internal variable _this, which is usually available inside functions and event handlers, is used as argument. If input argument is not an array, it will be converted to 1 element array.
	If extracted item of input with given index is undefined, of the wrong type or of the wrong length (if the item is an array), default value is used instead. Since Arma 3 v1.53.132691, onscreen errors are displayed for when the input is of the wrong type or size.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/param
	</WikiPage>
	<Syntax>
		param Array
	</NextSyntax>
		Anything param Array
	</Syntax>
	<RawSyntax>
		param [index, defaultValue, expectedDataTypes, expectedArrayCount]
	</NextRawSyntax>
		argument param [index, defaultValue, expectedDataTypes, expectedArrayCount]
	</RawSyntax>
	<Example>
		$Code$[1, 2, 3] call
	{
	private _one = param [0, 1];
	private _two = param [1, 2];
	private _three = param [2, 3];
	//.....
	};$/Code$
	</NextExample>
		$Code$[123] call
	{
	private _val = param [0];
	};
	// Below would produce the same result as above
	123 call
	{
	private _val = param [0];
	};$/Code$
	</NextExample>
		$Code$_z = position player param [2, 0];
	if (_z 10) then
	{
	hint "YOU ARE FLYING!";
	};$/Code$
	</NextExample>
		$Code$fnc =
	{
	private _pos = param [0, [0,0,0], [ objNull, []], [2,3]];
	private _rad = param [1, 0, [0]];
	_pos nearObjects _rad;
	};
	[ position player, 25] call fnc; //ok
	[ player, 25] call fnc; //ok
	[25, player ] call fnc; //default values are used$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(November 8, 2016)
	You can also use param in a complex with another commands. For example call, compile and format :
	$Code$["var = 2"] call {
	call compile format ["%1", param [0,"",[""]]]; // compiled param string value
	hint str (var); // 2
	};
	$/Code$
	</Note>
	<ReturnValue>
		Anything - Anything
	</ReturnValue>

</NextListItem>

	<Keyword>
		getRemoteSensorsDisabled
	</Keyword>
	<Description>
		Get status of disabled raycasts for remote entities. See disableRemoteSensors for detailed description.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getRemoteSensorsDisabled
	</WikiPage>
	<Syntax>
		getRemoteSensorsDisabled
	</Syntax>
	<RawSyntax>
		getRemoteSensorsDisabled
	</RawSyntax>
	<Example>
		$Code$_status = getRemoteSensorsDisabled ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		enableMimics
	</Keyword>
	<Description>
		Enables/disables mimics on a given unit.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/enableMimics
	</WikiPage>
	<Syntax>
		Object enableMimics Boolean
	</Syntax>
	<RawSyntax>
		unit enableMimics enabled
	</RawSyntax>
	<Example>
		$Code$cursorTarget enableMimics false ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		rotorsForcesRTD
	</Keyword>
	<Description>
		Returns force produced by rotors.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/rotorsForcesRTD
	</WikiPage>
	<Syntax>
		rotorsForcesRTD Object
	</Syntax>
	<RawSyntax>
		rotorsForcesRTD RTD_helicopter
	</RawSyntax>
	<Example>
		$Code$_rotorForces = rotorsForcesRTD _taru// Returns [[-465.981,351.941,45960.5],[-469.079,397.451,46933.3]]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(November 4, 2014)
	There is no official information I can find on what these values mean. According to my testing on the Mi-290 Taru, here is what I have come up with:
	$Code$[[ rotor 1 roll +right/-left, rotor 1 pitch +down/-up, rotor 1 collective +up/-down ],
	[ rotor 2 roll +right/-left, rotor 2 pitch +down/-up, rotor 2 collective +up/-down ]]$/Code$
	When yawing left and right, rotor 1 and 2 collective differ from each other. This is normal behaviour with coaxial rotors. Yawing right increase rotor 1 collective and decreases rotor 2 collective. Yawing left does the opposite. Rotor 1 in this example seems to be the bottom rotor.
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		mapAnimCommit
	</Keyword>
	<Description>
		Play map animation.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/mapAnimCommit
	</WikiPage>
	<Syntax>
		mapAnimCommit
	</Syntax>
	<RawSyntax>
		mapAnimCommit
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
		In OFP v1.96, the mapAnim series of commands, together with forceMap can only be used in the intro and mission, as it is not possible to access the map from the outro. (not checked, sourced from an old copy of the OFPEC comref)
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		pushBack
	</Keyword>
	<Description>
		Insert an element to the back of the given array. This command modifies the original array. (see also: pushBackUnique )
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/pushBack
	</WikiPage>
	<Syntax>
		Array pushBack Anything
	</Syntax>
	<RawSyntax>
		array pushBack element
	</RawSyntax>
	<Example>
		$Code$_arr = [1,2,3];
	_arr pushBack 4;
	hint str _arr; //[1,2,3,4]$/Code$
	</NextExample>
		$Code$_arr = [1,[2,4],3];
	(_arr select 1) pushBack [5,6];
	hint str _arr //[1,[2,4,[5,6]],3]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(Aug 1, 2014)
	(A3 1.26) It is recommended to use pushBack instead of BIS_fnc_arrayPush.
	$Code$_array = [1,2,3];
	_array pushBack 4; //same as [_array, 4] call BIS_fnc_arrayPush ;
	$/Code$
	</NextNote>
		(August 23, 2014)
	It's highly recommended to use the new pushBack command, up to 43% faster than set and up to 11843% faster a plus b !
	</NextNote>
		(November 26, 2014)
	pushBack does not support nil while set and a plus b do. For example:
	$Code$_array = [];
	for "_i" from 0 to 3 do
	{
	_array pushBack nil ;
	};
	hint str _array; // hint is []$/Code$
	</NextNote>
		(May 21, 2015)
	Array "push" implementation using pushBack, alternative to BIS_fnc_arrayPush
	$Code$KK_fnc_push = {
	_this select 0 pushBack (_this select 1);
	_this select 0
	};
	// Example
	arr = [1,2,3];
	[arr, 4] call KK_fnc_push; //both arr and return of function are now [1,2,3,4]$/Code$
	</NextNote>
		(October 5, 2016)
	Note that pushBack does not create a new object.
	Therefore, if you edit an object that was pushed back to an array, it also affects the object in the array.
	e.g.
	$Code$_first_squence = [1,2,3];
	_second_squence = [5,4];
	_first_squence pushBack _second_squence;
	systemChat str _first_squence // prints [1,2,3,[5,4]]]
	reverse _second_squence;
	systemChat str _first_squence // prints [1,2,3,[4,5]]]
	$/Code$
	If you pushBack an array for instance, you can just copy it to generate a new object.
	e.g.
	$Code$_first_squence pushBack +_second_squence;
	$/Code$
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlMapAnimAdd
	</Keyword>
	<Description>
		Adds the next frame to the map animation.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlMapAnimAdd
	</WikiPage>
	<Syntax>
		Control ctrlMapAnimAdd Array
	</Syntax>
	<RawSyntax>
		map ctrlMapAnimAdd [time, zoom, position]
	</RawSyntax>
	<Example>
		$Code$_map ctrlMapAnimAdd [1, 0.1, getMarkerPos "anim1"];
	ctrlMapAnimCommit _map;$/Code$
	</NextExample>
		$Code$// Center map on player:
	_ctrl ctrlMapAnimAdd [0, 0.05, player ];
	ctrlMapAnimCommit _ctrl;$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
		(17:11, 9 March 2010)
	Besides Position2D, both Objects and Position3D work.
	</NextNote>
		(03:48, 27 August 2017)
	Map control created with ctrlCreate have a weird behaviour. Control doesn't respect the aspects of Controls Group or Display itself. Results of ctrlMapAnimAdd applied to this control are also shifted for some reason.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		assignTeam
	</Keyword>
	<Description>
		Assigns the unit (in case of a vehicle, its commander) to the given team. Team is an option in group control (unit management) menu that allows to split player group in teams and then give bulk order to separate teams. In order to operate properly, the command requires specific conditions:
	The command requires player to be fully initialised
	The unit getting assigned must be either player himself or a unit in player's group
	Units in player's group as well as player himself can all have different teams assigned
	The colour of the assigned team for a unit is seen on the group management UI as well as squad radar
	The possible team values (colours) are:
	"MAIN" - (white)
	"RED" - (red)
	"GREEN" - (green)
	"BLUE" - (blue)
	"YELLOW" - (yellow)
	NOTE : In older version of the game the effect of this command is local
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/assignTeam
	</WikiPage>
	<Syntax>
		Object assignTeam String
	</Syntax>
	<RawSyntax>
		unit assignTeam team
	</RawSyntax>
	<Example>
		$Code$_soldier2 assignTeam "RED";$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
		(July 12, 2016)
	Since Arma 3 v1.62 this command has global effects and is persistent even on machines that join in progress.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		ammo
	</Keyword>
	<Description>
		Check how many rounds are left in the currently loaded magazine in the given muzzle. Since Arma v1.55.133505 the command also returns ammo for units in vehicles.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ammo
	</WikiPage>
	<Syntax>
		Object ammo String
	</Syntax>
	<RawSyntax>
		unit ammo muzzle
	</RawSyntax>
	<Example>
		$Code$_count = player ammo "M16"; //returns 30 in case of a full magazine$/Code$
	</NextExample>
		$Code$_count = player ammo "M203Muzzle";$/Code$
	</NextExample>
		$Code$_count = player ammo primaryWeapon player ;$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(February 17, 2012)
	OA 1.60 : The command works (now?) also for units in vehicles. However only for the vehicle's gunners' weapons - aka those returned by "weapons vehicle".
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		setShotParents
	</Keyword>
	<Description>
		Sets vehicle and instigator pair for the given projectile.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setShotParents
	</WikiPage>
	<Syntax>
		Object setShotParents Array
	</Syntax>
	<RawSyntax>
		projectile setShotParents [vehicle, instigator]
	</RawSyntax>
	<Example>
		$Code$myProjectile setShotParents [ vehicle bob, bob];$/Code$
	</NextExample>
		$Code$tank addEventHandler ["Fired", {_this select 6 setShotParents [tank, commander tank]];$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
		This scripting command must be executed on the server to work properly in multiplayer
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setSide
	</Keyword>
	<Description>
		Sets a location's side. The default side is Unknown.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setSide
	</WikiPage>
	<Syntax>
		Location setSide Side
	</Syntax>
	<RawSyntax>
		location setSide side
	</RawSyntax>
	<Example>
		$Code$myLocation setSide resistance$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(16:00, 3 December 2013 (CEST))
	For units, vehicles you can use: " array joinSilent createGroup Side ", e.g. in init: "[this] joinSilent createGroup EAST;" described in the note below
	</NextNote>
		(19:05, 6 August 2009 (CEST))
	This is a frequent question on OFPEC, but produced here because it was difficult to find an answer to. setSide does not work for men, vehicles, etc.: it is intended for locations ( i.e., territory). If you want to switch a unit's ( e.g., the player's) side in the middle of a battle, make the unit joinSilent a group on the given side instead. If you want the unit to become the group leader after joining, use selectLeader. I haven't tested the idea of spawning a temporary unit of that side, assigning the player to that unit, setting the player as the leader, then deleting the original unit, but I don't see why it wouldn't work. (It begs the question why we don't have a setSide object function, though.)
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setDir
	</Keyword>
	<Description>
		Sets object heading. Angles are measured in degrees clockwise from north, and regular range goes from 0 to 360 (0° = N, 90° = E, 180° = S, 270° = W). Negative angles represent a counter-clockwise angle.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setDir
	</WikiPage>
	<Syntax>
		Object setDir Number
	</Syntax>
	<RawSyntax>
		object setDir heading
	</RawSyntax>
	<Example>
		$Code$unit1 setDir 45; // will set unit1 to face North-East$/Code$
	</NextExample>
		$Code$unit1 setDir -675; // will also set unit1 to face North-East (= 45-360-360)$/Code$
	</NextExample>
		$Code$unit1 setDir 30;
	unit1 setFormDir 30; // needed for AI to keep the given direction$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		(May 9, 2007)
	Though effects of this command remain local, you can do a setPos afterwards to synchronize the direction on all machines in MP.
	$Code$myObj setDir 90;
	myObj setPos getPos myObj;$/Code$
	</NextNote>
		(January 9, 2009)
	In ArmA, the effect of setDir is synchronized across the network.
	</NextNote>
		(April 5th, 2011)
	In OA 1.59 the comment of Manny still holds true for createVehicle 'd empty vehicles by the server.
	For the player object a local setDir alone is enough.
	</NextNote>
		(November 25, 2013)
	In Arma 3, setDir affects vectorUp, vectorDir and velocity of the object it applied to. While this is not noticeable with stationary objects, a moving objects will have its orientation and velocity reset. So if you are planning on using setDir on a moving object, make sure you read the velocity value before and restore it after if you want the object to continue to move.
	$Code$_vel = velocity _object;
	_object setDir 45;
	_object setVelocity _vel;$/Code$
	With orientation it is a bit more complicated. setDir resets vectorUp to [0,0,1] and changes vectorDir accordingly to accommodate set direction. If your object's vectorUp is not [0,0,1] and you want to keep it this way, then you have to use setVectorDirAndUp to change object's direction not setDir. This is also the reason why it is better to use setVectorDirAndUp instead of setDir on attached objects for a better control of object's orientation.
	</NextNote>
		(November 27, 2013)
	Make sure you setDir BEFORE you set position. Setting direction after set position could lead to unpredictable behaviour. For example main part of the hospital building in Arma 3 can lose collision detection near both side entrances. AI will also get confused and will stop detecting obstacles if setDir is called after setPos.
	</NextNote>
		(February 9, 2018)
	setDir is not propagated across the network when used on mines. Clients will see mines facing zero. This is especially noticeable on tripwire mines.
	Use remoteExec to run the setDir command on the mine for all clients.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		createMarker
	</Keyword>
	<Description>
		Creates a new marker at the given position. The marker name has to be unique.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/createMarker
	</WikiPage>
	<Syntax>
		createMarker Array
	</Syntax>
	<RawSyntax>
		createMarker [name, position]
	</RawSyntax>
	<Example>
		$Code$_marker1 = createMarker ["Marker1", position player ];$/Code$
	</NextExample>
		$Code$_marker2 = createMarker ["Marker2", player ];$/Code$
	</Example>
	<Locality>
		undefined / global
	</Locality>
	<Note>
		$Code$_markerstr = createMarker ["markername",[_Xpos,_Ypos]];
	_markerstr setMarkerShape "ICON";
	_markerstr setMarkerType "hd_dot";$/Code$
	</NextNote>
		(September 19, 2015)
	createMarker accepts an object as position parameter as well (A3 - 1.50.131969). You could try this with the following code (both SP/MP)
	$Code$_markerstr = createMarker ["markername", player];
	_markerstr setMarkerShape "RECTANGLE";
	_markerstr setMarkerSize [100,100];$/Code$
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		isTouchingGround
	</Keyword>
	<Description>
		Returns true if object is touching the ground.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isTouchingGround
	</WikiPage>
	<Syntax>
		isTouchingGround Object
	</Syntax>
	<RawSyntax>
		isTouchingGround object
	</RawSyntax>
	<Example>
		$Code$if ( isTouchingGround player ) then { hint "Terraferma!";};$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(June 1, 2014)
	If you are using this command as a validation method, it should not be the sole thing you are checking for, as the result is often inaccurate. For example, it returns false for some helicopters when landed on the roof of certain buildings, and it always returns false for boats, even if they are beached.
	</NextNote>
		(September 29, 2016)
	In addition to previous statement: That behaviour is true, simply because isTouchingGround applied to a player unit (or any unit) is frozen to a last state when unit enters vehicle.
	To get proper return from this command you should go for units vehicle :
	$Code$_var = isTouchingGround player // Unreliable
	_var = isTouchingGround (vehicle player) // Pretty reliable
	$/Code$
	</NextNote>
		(November 10, 2016)
	This command returns always true if the falling object is attached to some other object with the command attachTo, like for vehicle air drop with parachute.
	</NextNote>
		(April 26, 2017)
	Be aware: it's not reliable on remote objects.
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		particlesQuality
	</Keyword>
	<Description>
		Returns current settings for particles quality (configure- video- general- particles). 0-low, 1-normal, 2-high
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/particlesQuality
	</WikiPage>
	<Syntax>
		particlesQuality
	</Syntax>
	<RawSyntax>
		particlesQuality
	</RawSyntax>
	<Example>
		$Code$_currentQuality = particlesQuality ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		markerText
	</Keyword>
	<Description>
		Get marker text.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/markerText
	</WikiPage>
	<Syntax>
		markerText String
	</Syntax>
	<RawSyntax>
		markerText markerName
	</RawSyntax>
	<Example>
		$Code$hint format ["Marker Text: %1", markerText "Marker1"];$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		requiredVersion
	</Keyword>
	<Description>
		Check if version of application is available. If the current version is older than the required one, a warning message is shown and false is returned.
	Version of format Major.Minor, e.g. 1.30
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/requiredVersion
	</WikiPage>
	<Syntax>
		requiredVersion String
	</Syntax>
	<RawSyntax>
		requiredVersion version
	</RawSyntax>
	<Example>
		$Code$if !( requiredVersion "1.09") exitWith {};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(March 12, 2008)
	If the script contains a command that was introduced after the required version, it will still generate a syntax error, even if this test is done at the top of the script (as the whole script is parsed before execution).
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		nearestTerrainObjects
	</Keyword>
	<Description>
		Returns a list of nearest terrain objects of the given types to the given position or object, within the specified distance. If more than one object is found they will be ordered according to 3D distance to the object (i.e. the closest one will be first in the array).
	In contrast to nearestObjects this command returns terrain placed objects like trees, rocks and buildings which don't necessarily need an associated config class.
	position can use the format:
	[[x,y,z], ["Type",...], radius]
	or
	[object, ["Type",...], radius]
	To use it without any type filter:
	[object or position, [], radius]
	Possible type names: "TREE", "SMALL TREE", "BUSH", "BUILDING", "HOUSE", "FOREST BORDER", "FOREST TRIANGLE", "FOREST SQUARE", "CHURCH", "CHAPEL", "CROSS", "BUNKER", "FORTRESS", "FOUNTAIN", "VIEW-TOWER", "LIGHTHOUSE", "QUAY", "FUELSTATION", "HOSPITAL", "FENCE", "WALL", "HIDE", "BUSSTOP", "ROAD", "FOREST", "TRANSMITTER", "STACK", "RUIN", "TOURISM", "WATERTOWER", "TRACK", "MAIN ROAD", "ROCK", "ROCKS", "POWER LINES", "RAILWAY", "POWERSOLAR", "POWERWAVE", "POWERWIND", "SHIPWRECK", "TRAIL"
	Since Arma 3 v1.61.136035 it is possible to switch the sorting algorithm off by providing optional param, which significantly increases the performance of this command, especially if the search is performed with large radius.
	Since Arma 3 v1.65.138818 it is possible to switch search and sorting mode between 2D and 3D
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/nearestTerrainObjects
	</WikiPage>
	<Syntax>
		nearestTerrainObjects Array
	</Syntax>
	<RawSyntax>
		nearestTerrainObjects [position, types, radius, sort, 2Dmode]
	</RawSyntax>
	<Example>
		$Code$nearestTerrainObjects [ player, ["Tree","Bush"], 200];$/Code$
	</NextExample>
		$Code$nearestTerrainObjects [ player, ["House"], 200];$/Code$
	</NextExample>
		$Code$nearestTerrainObjects [[2716,2949,0], ["Chapel","Fuelstation"], 100];$/Code$
	</NextExample>
		$Code$// Return every terrain object in 50 metres radius around player sorted, closest first:
	nearestTerrainObjects [ player, [], 50]$/Code$
	</NextExample>
		$Code$// Return every terrain object in 50 metres radius around player unsorted:
	nearestTerrainObjects [ player, [], 50, false ]$/Code$
	</NextExample>
		$Code$// Hide all terrain objects command could find:
	if ( isServer ) then
	{
	{
	_x hideObjectGlobal true ;
	}
	forEach nearestTerrainObjects
	[
	[ worldSize /2, worldSize /2],
	[],
	worldSize,
	false
	];
	};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(October 31, 2016)
	Since Arma 3 v1.65.138818 the default sorting is done according to 3D distance not distance2D as before. This is an attempt to correct some very old bug in implementation.
	</NextNote>
		(December 28, 2016)
	Be aware that some terrain objects types might be tricky to be found, such as terrain rocks and boulders which are not considered to be "ROCKS" or "ROCK", but "HIDE". Example:
	$Code$nearestTerrainObjects [player, ["HIDE"], 20]; // [939688: bluntstone_01.p3d,939691: garbagebags_f.p3d,939671: wreck_car_f.p3d,939692: junkpile_f.p3d]$/Code$
	</NextNote>
		(October 31, 2017)
	Here is a readout for Altis (as of 1.76), showing you the actual usefulness of the different object-types (some of them are apparently not used/defined at all).
	Especially the road type names sadly return nothing.
	TREE: 263630
	SMALL TREE: 0
	BUSH: 747193
	BUILDING: 0
	HOUSE: 17472
	FOREST BORDER: 0
	FOREST TRIANGLE: 0
	FOREST SQUARE: 0
	CHURCH: 54
	CHAPEL: 165
	CROSS: 0
	BUNKER: 0
	FORTRESS: 0
	FOUNTAIN: 0
	VIEW-TOWER: 0
	LIGHTHOUSE: 7
	QUAY: 0
	FUELSTATION: 32
	HOSPITAL: 1
	FENCE: 47940
	WALL: 38943
	HIDE: 655066
	BUSSTOP: 0
	ROAD: 0
	FOREST: 0
	TRANSMITTER: 23
	STACK: 48
	RUIN: 3
	TOURISM: 1
	WATERTOWER: 10
	TRACK: 0
	MAIN ROAD: 0
	ROCK: 5483
	ROCKS: 0
	POWER LINES: 2224
	RAILWAY: 0
	POWERSOLAR: 10
	POWERWAVE: 51
	POWERWIND: 128
	SHIPWRECK: 43
	TRAIL: 0
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		kbWasSaid
	</Keyword>
	<Description>
		Check if given item was said by person to someone. See Conversations for more details.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/kbWasSaid
	</WikiPage>
	<Syntax>
		Object kbWasSaid Array
	</Syntax>
	<RawSyntax>
		person kbWasSaid [receiver, topic, sentenceID, maxAge]
	</RawSyntax>
	<Example>
		$Code$player kbWasSaid [otherUnit, "myTopic", "mySentenceID", 3];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		setAttributes
	</Keyword>
	<Description>
		Returns a structured text created by the given structured or plain text by setting attributes to the given values.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setAttributes
	</WikiPage>
	<Syntax>
		String/Structured_Text setAttributes Array
	</Syntax>
	<RawSyntax>
		text setAttributes [name1, value1, name2, value2,]
	</RawSyntax>
	<Example>
		$Code$txt = img setAttributes ["image", "data\iSoldier.paa"]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(November 9, 2014)
	This command doesn't seem to work in Arma 3.
	</Note>
	<ReturnValue>
		Structured_Text
	</ReturnValue>

</NextListItem>

	<Keyword>
		allGroups
	</Keyword>
	<Description>
		Return a list of all groups created on the following sides east, west, resistance / independent and civilian only. Does not contain groups of sideLogic.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/allGroups
	</WikiPage>
	<Syntax>
		allGroups
	</Syntax>
	<RawSyntax>
		allGroups
	</RawSyntax>
	<Example>
		$Code${( leader _x) sideChat "Go ! Go ! Go !"} forEach allGroups ;$/Code$
	</NextExample>
		$Code$// All groups with players:
	private _allGroupsWithPlayers = [];
	{_allGroupsWithPlayers pushBackUnique group _x} forEach allPlayers ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		setVehicleVarName
	</Keyword>
	<Description>
		Sets string representation of an object to a custom string. For example it is possible to return "MyFerrari" instead of default "ce06b00# 164274: offroad_01_unarmed_f.p3d" when querying object as string:
	$Code$ hint str _offroad; //MyFerrari$/Code$
	When a vehicle is created and named in the editor, the name becomes both the variable containing the vehicle object and the string representation of the vehicle object. vehicleVarName on the other hand is only string representation of the object. So if you want to refer to the actual object by its vehicleVarName, an extra step needed to assign the object to a variable of the same name. For example to see and refer to offroad as myFerrari:
	$Code$_offroad setVehicleVarName "MyFerrari"; MyFerrari = _offroad;$/Code$
	In multiplayer environment setVehicleVarName has to be executed on every PC if you want the custom name to be known everywhere. If vehicle is created and named in the editor, the vehicle name will be known globally automatically.
	To reset vehicleVarName and str representation of the object to original form set vehicleVarName to an empty string:
	$Code$_offroad setVehicleVarName "";$/Code$
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setVehicleVarName
	</WikiPage>
	<Syntax>
		Object setVehicleVarName String
	</Syntax>
	<RawSyntax>
		object setVehicleVarName name
	</RawSyntax>
	<Example>
		$Code$player setVehicleVarName "aP";$/Code$
	</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		openCuratorInterface
	</Keyword>
	<Description>
		Force opens curator interface.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/openCuratorInterface
	</WikiPage>
	<Syntax>
		openCuratorInterface
	</Syntax>
	<RawSyntax>
		openCuratorInterface
	</RawSyntax>
	<Example>
		$Code$// Open interface:
	openCuratorInterface ;$/Code$
	</NextExample>
		$Code$// Close interface:
	findDisplay 312 closeDisplay 2;$/Code$
	</NextExample>
		$Code$// Detect if user used "Zeus" key to open curator interface in the absence of event handler for it:
	findDisplay 46 displayAddEventHandler ["KeyDown", {
	if ( inputAction "CuratorInterface" 0) then {
	hint "Curator interface is open";
	};
	false
	}];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		unitBackpack
	</Keyword>
	<Description>
		Returns unit's backpack
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/unitBackpack
	</WikiPage>
	<Syntax>
		unitBackpack Object
	</Syntax>
	<RawSyntax>
		unitBackpack unit
	</RawSyntax>
	<Example>
		$Code$myBackpack = unitBackpack player$/Code$
	</NextExample>
		$Code$clearMagazineCargo unitBackpack player$/Code$
	</NextExample>
		$Code$player action ["gear", unitBackpack player]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(Apr 29, 2014)
	In ArmA3 ver 1.16, we can use either backpackContainer or unitBackpack at present since both of them enjoy same operand type and return value.
	</Note>
	<ReturnValue>
		Object
	</ReturnValue>

</NextListItem>

	<Keyword>
		lbSetValue
	</Keyword>
	<Description>
		Sets the additional integer value in the item with the given index of the listbox or combobox with id idc of the topmost user dialog to the given value.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lbSetValue
	</WikiPage>
	<Syntax>
		lbSetValue Array
	</NextSyntax>
		Control lbSetValue Array
	</Syntax>
	<RawSyntax>
		lbSetValue [idc, index, value]
	</NextRawSyntax>
		control lbSetValue [index, value]
	</RawSyntax>
	<Example>
		$Code$lbSetValue [101, 0, 1];$/Code$
	</NextExample>
		$Code$_control lbSetValue [0, 1];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		More information on the LB command family can be found here
	</NextNote>
		(September 21, 2014)
	lbSetValue only accepts integer, no decimal number.
	Example:
	CONTROL lbSetValue [index,10]; // value will be 10
	CONTROL lbSetValue [index,3.1]; // value will be 3
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setObjectTextureGlobal
	</Keyword>
	<Description>
		Set the texture of the given selection on all computers in a network session. NOTES :
	Do not put global commands such this one into init field in editor and expect it to work in Multiplayer. See Talk:setObjectTextureGlobal for the explanation.
	Not all objects could be textured this way. To find out, run getObjectTextures command on an object. Empty array [] usually indicates it cannot be textured.
	All textures must have resolution 2^x / 2^y (e.g. 16 / 16, 16 / 32, 64 / 256, 512 / 512, etc). The largest texture size commonly supported by graphics cards and RV engine is 4096x4096
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setObjectTextureGlobal
	</WikiPage>
	<Syntax>
		Object setObjectTextureGlobal Array
	</Syntax>
	<RawSyntax>
		obj setObjectTextureGlobal [selection, texture]
	</RawSyntax>
	<Example>
		$Code$player setObjectTextureGlobal [0, "\MyAddon\blue.paa"];$/Code$
	</NextExample>
		$Code$//set up persistent texture keeper
	player addEventHandler ["Take", {
	( getObjectTextures player + [ uniformContainer player getVariable "texture"])
	params ["_texUniform", "_texInsignia", "_texCustom"];
	if ( isNil "_texCustom") exitWith {};
	if (_texUniform == _texCustom) exitWith {};
	player setObjectTextureGlobal [0, _texCustom];
	false
	}];
	//Example: make current uniform persistently blue
	_texture = "#(rgb,8,8,3)color(0,0,1,1)"; //blue texture
	player setObjectTextureGlobal [0, _texture]; //set it on player
	uniformContainer player setVariable ["texture", _texture, true ]; //store it on uniform$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
		(March 8, 2015)
	The effect is persistent and will be synchronized for players who join in progress. (Tested with Arma 3 v1.40)
	</NextNote>
		(December 29, 2015)
	In some cases the ".paa" files do not work. Instead you can try ".jpg" files.
	</NextNote>
		(October 24, 2016)
	Sometimes it could be necessary to set default material on an object for the texture to take effect:
	$Code$_block = createVehicle ["Land_VR_Block_02_F", player getPos [20, getDir player ], [], 0, "CAN_COLLIDE"];
	_block setObjectMaterialGlobal [0, "\a3\data_f\default.rvmat"];
	_block setObjectTextureGlobal [0, "#(rgb,8,8,3)color(1,0,0,1)"];$/Code$
	Courtesy of Larrow
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		type
	</Keyword>
	<Description>
		Returns a string of a location's class name.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/type
	</WikiPage>
	<Syntax>
		type Location
	</Syntax>
	<RawSyntax>
		type location
	</RawSyntax>
	<Example>
		$Code$_locationType = type myLocation$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		allDisplays
	</Keyword>
	<Description>
		Returns a list of all opened GUI displays. Other displays, such as IGUI displays could be accessed via uiNamespace variable, which is updated every time display is opened or closed. For example, to access IGUI displays:
	$Code$ uiNamespace getVariable ["IGUI_displays", []];$/Code$. Other display variables:
	3DENDisplays_displays
	3DENDisplaysTemp_displays
	GUI_displays
	IGUI_displays
	Loading_displays
	CuratorDisplays_displays
	BootcampDisplays_displays
	CuratorTitles_displays
	BootcampTitles_displays
	KartDisplays_displays
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/allDisplays
	</WikiPage>
	<Syntax>
		allDisplays
	</Syntax>
	<RawSyntax>
		allDisplays
	</RawSyntax>
	<Example>
		$Code$_allDisps = allDisplays ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		actionIDs
	</Keyword>
	<Description>
		Returns Array of Numbers, where numbers are IDs of all user actions added to given entity with addAction command.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/actionIDs
	</WikiPage>
	<Syntax>
		actionIDs Object
	</Syntax>
	<RawSyntax>
		actionIDs entity
	</RawSyntax>
	<Example>
		$Code$_actions = actionIDs player ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		setSystemOfUnits
	</Keyword>
	<Description>
		Set system of units.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setSystemOfUnits
	</WikiPage>
	<Syntax>
		setSystemOfUnits Number
	</Syntax>
	<RawSyntax>
		setSystemOfUnits value
	</RawSyntax>
	<Example>
		$Code$myNum = 5;
	myNumNew = setSystemOfUnits myNum;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		all3DENEntities
	</Keyword>
	<Description>
		Returns an array of all currently placed Eden Editor entities, including groups, waypoints, and markers in following format:
	[objects, groups, triggers, systems, waypoints, markers, layers, comments]
	objects: Array of Objects
	groups: Array of Groups
	triggers: Array of Objects
	systems: Array of Objects
	waypoints: Array of Arrays in Waypoint format
	markers: Array of Strings
	layers: Array of Numbers
	comments: Array of Numbers
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/all3DENEntities
	</WikiPage>
	<Syntax>
		all3DENEntities
	</Syntax>
	<RawSyntax>
		all3DENEntities
	</RawSyntax>
	<Example>
		$Code$systemChat str all3DENEntities ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		onTeamSwitch
	</Keyword>
	<Description>
		Defines an action performed when the team switch is finished. Commandset receives the following special variables: _from object previous unit, _to object current unit. Consecutive use of onTeamSwitch command will overwrite previously set commandset.
	i
	Since Arma 3 v1.57 a stackable version of this EH is available: TeamSwitch
	NOTE: When player switches and leaves behind AI unit, you need to enable "TeamSwitch" AI on it onTeamSwitch {_from enableAI "TeamSwitch"}; so that the unit continues with waypoints
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/onTeamSwitch
	</WikiPage>
	<Syntax>
		onTeamSwitch String/Code
	</Syntax>
	<RawSyntax>
		onTeamSwitch commandset
	</RawSyntax>
	<Example>
		$Code$onTeamSwitch {[_from, _to] execVM "myTeamSwitchScript.sqf";};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		playScriptedMission
	</Keyword>
	<Description>
		Load the given world, launch an empty mission and execute the given, expression. Config (optional) can reference to the config entry, replacing description.ext for this mission.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/playScriptedMission
	</WikiPage>
	<Syntax>
		playScriptedMission Array
	</Syntax>
	<RawSyntax>
		playScriptedMission [world,expression,config,ignoreChildWindow]
	</RawSyntax>
	<Example>
		$Code$playScriptedMission
	[
	"desert_e",
	{
	private["_handle"];
	_handle = execVM "\ca\missions_e\data\scenes\credits1\init.sqf";
	},
	configFile/"CfgMissions"/"Cutscenes"/"Credits"
	];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(December 31, 2015)
	For this command to work, you will need to
	call command with ignoreChildWindow param set to true (in VBS docs its called fromMission)
	close any opened display (not sure about this part, but closing every display (but #0) seems to work):
	If mission is run from 2D editor, you can just close RscDisplayArcadeMap display (idd 26) (because this was done from 2D editor, so RscDisplayArcadeMap is still active in background -- benargee )
	If mission is run from single mission browser, you can just close RscDisplaySingleMission (idd 2)
	end mission
	Debriefing will show and player will be moved to new mission after clicking on Continue.
	Command is a bit bugged:
	Third (config) param doesn't seem to work
	If you run this command in mission loaded from pbo, said pbo won't be writable until you close the game (you can't update it)
	Following code will change change island to Stratis and spawns player as basic soldier at [0,0,0] coordinates.
	$Code$disableSerialization;
	playScriptedMission ['Stratis',{
	createCenter west;
	_grp = createGroup west;
	_player = _grp createUnit ["B_Soldier_F",[0,0,0],[],0,"NONE"];
	selectPlayer _player;
	},missionConfigFile, true];
	//Close all displays that could be the background display... this is essentialy forceEnd command
	//Closing #0 will cause game to fail
	_zero = findDisplay(0);
	{
	if (_x != _zero) then {
	_x closeDisplay 1;
	};
	} foreach allDisplays;
	failMission "END1";$/Code$
	(tested in Arma 3 1.54.133741)
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setTriggerType
	</Keyword>
	<Description>
		Sets the type of action processed by the trigger after activation (no action, a waypoints switch or an end of mission):
	"NONE"
	"EAST G" - Guarded by OPFOR - use createGuardedPoint instead!
	"WEST G" - Guarded by BLUFOR - use createGuardedPoint instead!
	"GUER G" - Guarded by Independent - use createGuardedPoint instead!
	"SWITCH" - Switch waypoints/break loop (see Triggers )
	"END1" - End #1
	"END2" - End #2
	"END3" - End #3
	"END4" - End #4
	"END5" - End #5
	"END6" - End #6
	"LOOSE" - Lose //it is not a typo on the wiki, it is indeed misspelt in the game engine.
	"WIN" - (not found in ArmA)
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setTriggerType
	</WikiPage>
	<Syntax>
		Object setTriggerType String
	</Syntax>
	<RawSyntax>
		trigger setTriggerType action
	</RawSyntax>
	<Example>
		$Code$_trigger setTriggerType "END1"$/Code$
	</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		resetCamShake
	</Keyword>
	<Description>
		Stops any ongoing camera shake effects. Does not prevent new effects from being created. To disallow new effects altogether, enableCamShake should be used.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/resetCamShake
	</WikiPage>
	<Syntax>
		resetCamShake
	</Syntax>
	<RawSyntax>
		resetCamShake
	</RawSyntax>
	<Example>
		$Code$resetCamShake ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		menuText
	</Keyword>
	<Description>
		Returns current text set in menu entry on given path.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/menuText
	</WikiPage>
	<Syntax>
		menuText Array
	</Syntax>
	<RawSyntax>
		menuText [idc, path]
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		respawnVehicle
	</Keyword>
	<Description>
		Sets vehicle as respawnable in MP game. The vehicle will be spawned at the locality and coordinates it was prior to destruction. If respawn type is set to base respawn (type 3) and vehicle respawn marker is provided (respawn_vehicle_XXXSIDEXXX), vehicle will spawn on the marker.
	NOTE : Command has to be executed where vehicle is local
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/respawnVehicle
	</WikiPage>
	<Syntax>
		Object respawnVehicle Array
	</Syntax>
	<RawSyntax>
		vehicle respawnVehicle [delay, count]
	</RawSyntax>
	<Example>
		$Code$car respawnVehicle [5, 3];
	// 'car' will respawn at the predefined marker for the side after 5 seconds. The unit will respawn 3 times.$/Code$
	</NextExample>
		$Code$car respawnVehicle [30];
	// 'car' will respawn at the predefined marker for the side after 30 seconds. The unit will respawn an unlimited number of times.$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		(May 28, 2007)
	For this command to work (in MP) you need the appropriate markers in the mission.
	The markers are...
	respawn_vehicle_west
	respawn_vehicle_east
	respawn_vehicle_guerilla
	respawn_vehicle_civilian
	Also, by default it will use respawnDelay from the description.ext as mentioned unless you specify
	respawnVehicleDelay = x;
	Where x is delay in seconds.
	In Multiplayer the respawned vehicle remains local to the client who was the last driver of the vehicle or the client who was the leader of the last AI driver of the vehicle.
	If the vehicle has yet to be driven or the AI driver is local to the Server then the respawned vehicle will be local to the Server.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		kbRemoveTopic
	</Keyword>
	<Description>
		Unregister conversation topic from given person. See Conversations for more details.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/kbRemoveTopic
	</WikiPage>
	<Syntax>
		Object kbRemoveTopic String
	</Syntax>
	<RawSyntax>
		person kbRemoveTopic topicName
	</RawSyntax>
	<Example>
		$Code$_unit1 kbRemoveTopic "howsTheWeather";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		magazinesAmmo
	</Keyword>
	<Description>
		Returns array of arrays of all vehicle's magazines and their ammo count (also works on supply boxes). When applied to a unit (soldier), the command behaves differently and will omit magazines already loaded into unit's weapons. Use magazinesAmmoFull to return all magazines.
	Output format :
	[[magazine1],[magazine2],[magazine3]...[magazineN]]
	Magazine format :
	0: Magazine class name
	1: Magazine current ammo count
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/magazinesAmmo
	</WikiPage>
	<Syntax>
		magazinesAmmo Object
	</Syntax>
	<RawSyntax>
		magazinesAmmo vehicle
	</RawSyntax>
	<Example>
		$Code$_magazinesAmmo = magazinesAmmo player ;
	/*
	[
	["30Rnd_65x39_caseless_mag",30],
	["30Rnd_65x39_caseless_mag",30],
	["16Rnd_9x21_Mag",16],
	["SmokeShellGreen",1],
	["Chemlight_green",1],
	["HandGrenade",1]
	]
	*/$/Code$
	</NextExample>
		$Code$_magazinesAmmo = magazinesAmmo Mi_48;
	/*
	[
	["250Rnd_30mm_APDS_shells",250],
	["250Rnd_30mm_HE_shells",250],
	["8Rnd_LG_scalpel",8],
	["38Rnd_80mm_rockets",38]
	]
	*/$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(December 20, 2014)
	When used on vehicles this will only return all magazines associated with a single turretPath (which one depends on the actual armament of the vehicle, usually the first armed turretPath or alternatively turretPath [-1]).
	If you want to get all turrets' magazines, use allTurrets and magazinesTurret.
	-- Actium ( talk ) 15:41, 20 December 2014 (CET)
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		setSlingLoad
	</Keyword>
	<Description>
		Creates sling loading from first object to second object if possible. To unload cargo, pass objNull as second param.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setSlingLoad
	</WikiPage>
	<Syntax>
		Object setSlingLoad Object
	</Syntax>
	<RawSyntax>
		vehicle setSlingLoad cargo
	</RawSyntax>
	<Example>
		$Code$_success = heli1 setSlingLoad veh1;$/Code$
	</NextExample>
		$Code$// To unload cargo:
	_success = heli setSlingLoad objNull ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(November 8, 2014)
	"... if possible "
	FYI, that only means that 'vehicle' has to be able to lift 'cargo'. The position/distance does not matter, 'cargo' is automatically moved to a position that is close enough but doesn't doesn't collide with 'vehicle'. (can also be used if 'vehicle' is not flying, in which case 'cargo' will be placed and attached on the ground next to it).
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		allUnitsUAV
	</Keyword>
	<Description>
		Return a list of all UAV vehicles.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/allUnitsUAV
	</WikiPage>
	<Syntax>
		allUnitsUAV
	</Syntax>
	<RawSyntax>
		allUnitsUAV
	</RawSyntax>
	<Example>
		$Code$hint format ["No. of UAV(s) on the map: %1", count allUnitsUAV ];$/Code$
	</NextExample>
		$Code${_x setDamage 1} forEach allUnitsUAV ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(October 10, 2014)
	This command returns a list of all unmanned vehicles, not the UAV AI units inside them, as the name might otherwise suggest.
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		backpackCargo
	</Keyword>
	<Description>
		Get array with backpacks from ammo box (or any general weapon holder container).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/backpackCargo
	</WikiPage>
	<Syntax>
		backpackCargo Object
	</Syntax>
	<RawSyntax>
		backpackCargo box
	</RawSyntax>
	<Example>
		$Code$hint str backpackCargo vehicle player ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		setStamina
	</Keyword>
	<Description>
		Set units' stamina (seconds until depletion)
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setStamina
	</WikiPage>
	<Syntax>
		Object setStamina Number
	</Syntax>
	<RawSyntax>
		unit setStamina stamina
	</RawSyntax>
	<Example>
		$Code$player setStamina 42;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(December 30, 2015)
	"setStamina" has the same effect as "setFatigue".
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		skipTime
	</Keyword>
	<Description>
		Jumps the specified number of hours forward or backward. The time of day and tides are adjusted, but no changes are made to any units. If present, the lower level of clouds instantly jump to the position they would be in if time had passed normally.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/skipTime
	</WikiPage>
	<Syntax>
		skipTime Number
	</Syntax>
	<RawSyntax>
		skipTime duration
	</RawSyntax>
	<Example>
		$Code$skipTime 5;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		This scripting command must be executed on the server to work properly in multiplayer
	</NextNote>
		To simulate a smooth time-lapse effect (e.g. in cut-scenes), you can use the following code:
	$Code$while {true} do {skiptime 0.00333; sleep 0.1};$/Code$
	</NextNote>
		To skip forward to a specific time, irrespective of the current mission time, use
	$Code$skipTime (_timeToSkipTo - daytime + 24 ) % 24;$/Code$
	</NextNote>
		In ArmA & OFP, skipTime does not actually estimate weather changes beyond moving the clouds across the sky. Weather counters continue as if no time has passed. The setDate command can be used instead of skiptime to change the time without the visual give-away of the lower clouds jumping.
	</NextNote>
		I cannot confirm this for OA 1.60 beta (85889):
	MP: Even though the immediate effect of skipTime is only local,
	the new time will propagate through the network after 30 seconds or so.
	Instead the date, which includes time, is synced automatically for new JIP clients - NOT for present instances.
	So one has to apply skipTime on all instances in MP (server + all present clients).
	</NextNote>
		This command is blocking and in some cases it may take up to 1.5 seconds (probably depends on CPU) for it to calculate the changes to the environment, during which the game will microfreeze. It largely depends on weather changes, which are quite random. However one thing remains consistent, skipTime 24 hours is always almost instant. This is quite helpful when used in conjunction with commands such as setOvercast for instant and seamless effect. To try it yourself use this script:
	$Code$[] spawn {
	for "_i" from 1 to 24 do {
	_time = diag_tickTime ;
	skipTime _i;
	diag_log [_i, diag_tickTime - _time];
	sleep 3;
	};
	};$/Code$
	One of the results (results will vary depending on weather conditions):
	$Code$[1,1.44507]
	[2,1.46118]
	[3,1.33105]
	[4,1.396]
	[5,0.0310059]
	[6,1.37891]
	[7,1.4502]
	[8,1.37817]
	[9,1.37695]
	[10,1.37012]
	[11,1.448]
	[12,1.32593]
	[13,1.45508]
	[14,1.448]
	[15,0.0349121]
	[16,0.0368652]
	[17,1.25903]
	[18,1.38599]
	[19,1.4519]
	[20,0.052002]
	[21,0.0400391]
	[22,0.0490723]
	[23,1.35205]
	[24,0.0151367] //this is always the lowest$/Code$
	</NextNote>
		In Arma 3 (around v1.14) skipTime executed on the server will get synced in 5 seconds or so with all the clients. It will also be JIP compatible. skipTime executed on a client will change time on client for about 5 seconds after which it will sync back to server time.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		getStamina
	</Keyword>
	<Description>
		Get current stamina (~ seconds until depletion)
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getStamina
	</WikiPage>
	<Syntax>
		getStamina Object
	</Syntax>
	<RawSyntax>
		getStamina unit
	</RawSyntax>
	<Example>
		$Code$getStamina player;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		teams
	</Keyword>
	<Description>
		Return a list of teams in the current mission.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/teams
	</WikiPage>
	<Syntax>
		teams
	</Syntax>
	<RawSyntax>
		teams
	</RawSyntax>
	<Example>
		$Code$_teams = teams ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		ropeDetach
	</Keyword>
	<Description>
		Detach a rope from an object.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ropeDetach
	</WikiPage>
	<Syntax>
		Object ropeDetach Object
	</Syntax>
	<RawSyntax>
		vehicle ropeDetach rope
	</RawSyntax>
	<Example>
		$Code$vehicle player ropeDetach myRope;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		addSecondaryWeaponItem
	</Keyword>
	<Description>
		Adds weapon item to the weapon cargo space. This is used for infantry weapons.
	As of Arma 3 DEV 1.37, this command also supports weapon magazines.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/addSecondaryWeaponItem
	</WikiPage>
	<Syntax>
		Object addSecondaryWeaponItem String
	</Syntax>
	<RawSyntax>
		unit addSecondaryWeaponItem item
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		isPipEnabled
	</Keyword>
	<Description>
		Returns true if Picture in Picture (Render to Texture) is enabled.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isPipEnabled
	</WikiPage>
	<Syntax>
		isPipEnabled
	</Syntax>
	<RawSyntax>
		isPipEnabled
	</RawSyntax>
	<Example>
		$Code$PIPon = isPipEnabled;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		curatorEditableObjects
	</Keyword>
	<Description>
		Returns all editable objects which belong to a curator.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/curatorEditableObjects
	</WikiPage>
	<Syntax>
		curatorEditableObjects Object
	</Syntax>
	<RawSyntax>
		curatorEditableObjects curatorObj
	</RawSyntax>
	<Example>
		$Code$_objects = curatorEditableObjects myCurator;$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		createDiaryLink
	</Keyword>
	<Description>
		Create a link to the section of diary given by subject. Record is selected based on given object (diary record,task or unit).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/createDiaryLink
	</WikiPage>
	<Syntax>
		createDiaryLink Array
	</Syntax>
	<RawSyntax>
		createDiaryLink [subject,object,text]
	</RawSyntax>
	<Example>
		$Code$_link = createDiarySubject ["Group", player,"Player"]$/Code$
	</NextExample>
		$Code$diaryRec1 = player createDiaryRecord ["diary", ["Record 1", "We can't refer to next record (("]];
	diaryRec2 = player createDiaryRecord ["diary", ["Record 2", "Got to " + ( createDiaryLink ["Diary", diaryRec1, "record 1"])]];
	diaryRec3 = player createDiaryRecord ["diary", ["Record 3", "Got to " + ( createDiaryLink ["Diary", diaryRec2, "record 2"])]];$/Code$
	</NextExample>
		$Code$funcProcessDiaryLink = {
	processDiaryLink createDiaryLink ["diary", _this, ""];
	};
	diaryRec1 = player createDiaryRecord ["diary", ["Record 1",
	"In this example, we can go to any next record: go to execute expression='diaryRec2 call funcProcessDiaryLink' Record 2 /execute "
	]];
	diaryRec2 = player createDiaryRecord ["diary", ["Record 2",
	"Go to execute expression='diaryRec3 call funcProcessDiaryLink' Record 3 /execute "
	]];
	diaryRec3 = player createDiaryRecord ["diary", ["Record 3",
	"Go to execute expression='diaryRec1 call funcProcessDiaryLink' Record 1 /execute "
	]];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		removeAllContainers
	</Keyword>
	<Description>
		Removes all containers from the unit.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/removeAllContainers
	</WikiPage>
	<Syntax>
		removeAllContainers Object
	</Syntax>
	<RawSyntax>
		removeAllContainers unit
	</RawSyntax>
	<Example>
		$Code$removeAllContainers player;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(2013)
	This will remove the Uniform, Vest and Backpack from a unit leaving them unable to hold or pickup inventory items.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		showUAVFeed
	</Keyword>
	<Description>
		Shows/hides video feed transmitted from UAV. When enabled, the video is streamed to following texture
	"#(argb,512,512,1)r2t(uavpipsingleview,1.25)"
	in the feed window. The feed window IGUI display idd is 315. The actual feed control idc is 102.
	$Code$_UAVFeedDisplay = uiNamespace getVariable "RscAvCamera";$/Code$
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/showUAVFeed
	</WikiPage>
	<Syntax>
		showUAVFeed Boolean
	</Syntax>
	<RawSyntax>
		showUAVFeed show
	</RawSyntax>
	<Example>
		$Code$showUAVFeed true ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		selectionNames
	</Keyword>
	<Description>
		Returns the list of model selections
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/selectionNames
	</WikiPage>
	<Syntax>
		selectionNames Object
	</Syntax>
	<RawSyntax>
		selectionNames object
	</RawSyntax>
	<Example>
		$Code$_house= "Land_i_House_Small_02_V3_F" createVehicle _pos;
	selectionNames _house;
	//[
	//"door_1","door_2","damt_1","door_handle_1","door_handle_2","glass_1_hide",
	//"glass_2_hide","glass_3_hide","glass_1_unhide","glass_2_unhide","glass_3_unhide",
	//"glass_4_hide","glass_4_unhide"
	//]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(June 5, 2016)
	selectionNames returns an array of named selections from only the resolution LODs.
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		lbSetPictureRightColorSelected
	</Keyword>
	<Description>
		Sets the selected color of the second (right aligned) picture of the item with the given index of the listbox with id idc of the topmost user dialog to the given color. Color is in format Color. Color which consists from only zeros means disable this override.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lbSetPictureRightColorSelected
	</WikiPage>
	<Syntax>
		lbSetPictureRightColorSelected Array
	</NextSyntax>
		Control lbSetPictureRightColorSelected Array
	</Syntax>
	<RawSyntax>
		lbSetPictureRightColorSelected [idc, index, color]
	</NextRawSyntax>
		control lbSetPictureRightColorSelected [index, color]
	</RawSyntax>
	<Example>
		$Code$lbSetPictureRightColorSelected [101, 0, [0, 1, 0, 0.5]];$/Code$
	</NextExample>
		$Code$_ctrl lbSetPictureRightColorSelected [0, [1, 1, 1, 1]];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		More information on the LB command family can be found here
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		loadIdentity
	</Keyword>
	<Description>
		Loads person's identity from Objects.sav file in campaign directory (from entry name).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/loadIdentity
	</WikiPage>
	<Syntax>
		Object loadIdentity String
	</Syntax>
	<RawSyntax>
		person loadIdentity name
	</RawSyntax>
	<Example>
		$Code$_ok = player loadIdentity "playerIdentity"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		backpackItems
	</Keyword>
	<Description>
		Get array with all items (of any kind, even weapons) in backpack of the given unit.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/backpackItems
	</WikiPage>
	<Syntax>
		backpackItems Object
	</Syntax>
	<RawSyntax>
		backpackItems unit
	</RawSyntax>
	<Example>
		$Code$backpackItems player ;[
	"hgun_P07_F",
	"Titan_AT"
	]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		targetsQuery
	</Keyword>
	<Description>
		Returns sorted array of targets, known to the enquirer (including own troops), where the accuracy coefficient reflects how close the result matches the query. This command could be CPU intensive.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/targetsQuery
	</WikiPage>
	<Syntax>
		Object targetsQuery Array
	</Syntax>
	<RawSyntax>
		enquirer targetsQuery [targetIgnore, targetSide, targetType, targetPosition, targetMaxAge]
	</RawSyntax>
	<Example>
		$Code$// Return all known targets for player:
	_targets = player targetsQuery [ objNull, sideUnknown, "", [], 0];$/Code$
	</NextExample>
		$Code$// Prioritise all known OPFOR targets and return targets less than 10 seconds old:
	_targets = player targetsQuery [ objNull, east, "", [], 10];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		drawRectangle
	</Keyword>
	<Description>
		Draws a rectangle on the map.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/drawRectangle
	</WikiPage>
	<Syntax>
		Control drawRectangle Array
	</Syntax>
	<RawSyntax>
		map drawRectangle [c, a, b, angle, color, fill]
	</RawSyntax>
	<Example>
		$Code$_ctrl drawRectangle [
	getPos player,
	20,
	20,
	getDir player,
	[0,0,1,1],
	""
	];$/Code$
	</NextExample>
		$Code$_ctrl drawRectangle [
	player,
	10,
	20,
	getDir player,
	[1,1,1,1],
	"#(rgb,8,8,3)color(1,0,0,1)"
	];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(March 22, 2014)
	Map example: $Code$( findDisplay 12 displayCtrl 51) ctrlAddEventHandler ["Draw",{
	(_this select 0) drawRectangle [
	getPos player,
	20,
	20,
	getDir player,
	[0,0,1,1],
	""
	];
	}];$/Code$
	Be careful when using this command. Unlike map markers, the draw commands can decrease your framerate.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		actionKeys
	</Keyword>
	<Description>
		Returns Array containing dikCodes of keys, buttons and combos assigned to the given user action. Action names could be found in config class ControllerSchemes or user action names or user profile, for example:
	keyWatch [] = { 24 };
	To retrieve the value, use the property name without 'key':
	$Code$ actionKeys "Watch"; // 24$/Code$
	In addition, some of the actions are also listed in here: inputAction/actions
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/actionKeys
	</WikiPage>
	<Syntax>
		actionKeys String
	</Syntax>
	<RawSyntax>
		actionKeys userAction
	</RawSyntax>
	<Example>
		$Code$_array = actionKeys "ReloadMagazine"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(May 11, 2016)
	If an action key is configured with a modifier (e.g. "Right Ctrl + M" for "MiniMapToggle"), the DIK code returned by this command has a weird value, equivalent to the following:
	Left Ctrl + Key = 486539264 + DIK
	Left Shift + Key = 704643072 + DIK
	Left Alt + Key = 939524096 + DIK
	Right Ctrl + Key = -1660944384 + DIK
	Right Shift + Key = 905969664 + DIK
	Right Alt + Key = -1207959552 + DIK
	For example, to detect if actionKeys "NetworkPlayers" contain a match for "Right Ctrl + P", one must do the following:
	$Code$ if (-1660944359 in actionKeys "NetworkPlayers") then$/Code$
	with -1660944359 being equal to -1660944384 + 25, and 25 being the DIK code for the "P" key.
	This increases the difficulty of accurately comparing key codes to actionKeys in UI event handlers. Those strange numbers are probably due to bit flags being added to the DIK value by the game engine for easier storage in the ArmaProfile.
	In case of mouse buttons, actionKeys will also return values that are different from those in "MouseButton" UI events:
	LMB: MouseButton 0 = actionKeys 65536
	RMB: MouseButton 1 = actionKeys 65665 (65536 + 1 + 128)
	MMB: MouseButton 2 = actionKeys 65538 (65536 + 2)
	4MB: MouseButton 3 = actionKeys 65539 (65536 + 3)
	5MB: MouseButton 4 = actionKeys 65540 (65536 + 4)
	The values above are valid for a right-handed mouse configuration, and may or may not differ for a left-handed config.
	</NextNote>
		(August 6, 2016)
	The method described by @AgentRev does not work.
	All numbers in SQF are floats and those are only precise up to 6...7 digits.
	$Code$486539264 + 19 == 486539264 + 20
	- true
	$/Code$
	The DIK codes for 'LCtrl + R' and 'LCtrl + T' are indistinguishable.
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		setUnitRank
	</Keyword>
	<Description>
		Sets rank of given unit.
	Possible rank values, and the associated rating that is automatically given:
	PRIVATE: 0
	CORPORAL: 500
	SERGEANT: 1500
	LIEUTENANT: 2500
	CAPTAIN: 3500
	MAJOR: 5000
	COLONEL: 7500
	Since Arma 3 v1.67 this command is
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setUnitRank
	</WikiPage>
	<Syntax>
		Object setUnitRank String
	</Syntax>
	<RawSyntax>
		unitName setUnitRank rank
	</RawSyntax>
	<Example>
		$Code$player setUnitRank "COLONEL"$/Code$
	</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
		(Mar 26, 2009)
	Changing a unit's rank using either setUnitRank or setRank will also REPLACE their current rating dependent on their new rank (colonels have a rating of 7500 etc). That is to say REPLACE, not add to: the unit's old rating will disappear with the rank change.
	</NextNote>
		(December 24, 2015)
	In Arma 3, if the rank is not spelled correctly or the string is empty, it will default to Private. This command is not case sensitive. For Arma 3 the rating set by this command is as follows.
	(PRIVATE: 0)
	(CORPORAL: 50)
	(SERGEANT: 150)
	(LIEUTENANT: 250)
	(CAPTAIN: 350)
	(MAJOR: 500)
	(COLONEL: 750) The rating listed here will be present on base type respawn.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		isVehicleRadarOn
	</Keyword>
	<Description>
		Returns true if vehicle has active sensors on
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isVehicleRadarOn
	</WikiPage>
	<Syntax>
		isVehicleRadarOn Object
	</Syntax>
	<RawSyntax>
		isVehicleRadarOn vehicle
	</RawSyntax>
	<Example>
		$Code$isVehicleRadarOn vehicle player ; // returns true if radar is turned on$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		localize
	</Keyword>
	<Description>
		Used to internationalise text messages. A string is returned from Stringtable.csv (or Stringtable.xml ) which corresponds to the stringName.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/localize
	</WikiPage>
	<Syntax>
		localize String
	</Syntax>
	<RawSyntax>
		localize stringName
	</RawSyntax>
	<Example>
		$Code$hint localize "STR_WEST"; // - "BLUFOR" (in Arma2)$/Code$
	</NextExample>
		$Code$hint format ["Go %1", localize "STR_Q_NORTH"]; // - "Go North"$/Code$
	</NextExample>
		$Code$hint format [ localize "STR_ACTION_DROP_WEAPON", localize "STR_SN_RIFLE"]; // - "Drop Rifle"
	// STR_ACTION_DROP_WEAPON contains "Drop %1", STR_SN_RIFLE contains "Rifle"$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
		(September 12, 2014)
	The command localize will strip all HTML tags from your stringtable.xml entries, however there is a way to trick it by substituting tags with HTML code instead:
	?xml version="1.0" encoding="utf-8"?
	Key ID= "STR_TEST_KK"
	Original ![CDATA[ t color='#ff0000' This doesn't work /t ]] /Original
	/Key
	Key ID= "STR_TEST_KK2"
	Original t color='#ff0000' This works /t /Original
	/Key
	$Code$ hint parseText localize "str_test_kk"; //no change of colour$/Code$
	$Code$ hint parseText localize "str_test_kk2"; //hint content is in red$/Code$
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		tvSetCurSel
	</Keyword>
	<Description>
		Sets cursor to given item on given path. IDC means id of parent Tree View. To deselect all items use [-1] for the path param ( available since Arma 3 v1.55.133898 )
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/tvSetCurSel
	</WikiPage>
	<Syntax>
		tvSetCurSel Array
	</NextSyntax>
		Control tvSetCurSel Array
	</Syntax>
	<RawSyntax>
		tvSetCurSel [idc, path]
	</NextRawSyntax>
		control tvSetCurSel path
	</RawSyntax>
	<Example>
		$Code$tvSetCurSel [101, [0]];$/Code$
	</NextExample>
		$Code$_ctrl tvSetCurSel [0,0,0];$/Code$
	</NextExample>
		$Code$[] spawn
	{
	disableSerialization ;
	_CT_TREE = findDisplay 46 ctrlCreate ["RscTree", -1];
	_CT_TREE ctrlSetPosition [0,0,0.3,1];
	_CT_TREE ctrlCommit 0;
	_CT_TREE tvAdd [[],"Parent_A"];
	_CT_TREE tvAdd [[0],"Child_A"];
	_CT_TREE tvAdd [[0,0],"Grandchild_A"];
	_CT_TREE tvAdd [[],"Parent_B"];
	_CT_TREE tvAdd [[1],"Child_B"];
	sleep 1;
	hint "SELECT [0,0,0]";
	_CT_TREE tvSetCurSel [0,0,0];
	sleep 2;
	hint "DESELECT ALL";
	_CT_TREE tvSetCurSel [-1];
	};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(Sep 11 2014)
	(A3 1.28)tv command family overview
	$Code$
	//tv command family available for CT_TREE (type 12)
	private ["_count","_current","_data","_text","_value","_pic"];
	_CT_TREE tvAdd [[],"Parent_A"];
	_CT_TREE tvAdd [[0],"Child_A"];
	_CT_TREE tvAdd [[0,0],"Grandchild_A"];
	_CT_TREE tvAdd [[],"Parent_B"];
	_CT_TREE tvAdd [[1],"Child_B"];
	_count = _CT_TREE tvCount []; //return 2
	_CT_TREE tvSetCurSel [0,0,0]; //select grandchild_A
	_current = tvCurSel _CT_TREE; //return [0,0,0]
	_CT_TREE tvSetData [_current,"I'm grandchild_A"];
	_data = _CT_TREE tvData _current; // "I'm grandchild_A"
	_text = _CT_TREE tvText _current; //"Grandchild_A"
	_CT_TREE tvSetValue [_current,14];
	_value = _CT_TREE tvValue _current; // 14
	_CT_TREE tvSetPicture [_current, getText ( configFile "CfgWeapons" "optic_NVS" "picture")];
	_pic = _CT_TREE tvPicture _current;
	_CT_TREE tvExpand [1];
	_CT_TREE tvSort [[], false ];
	_CT_TREE tvSortByValue [[], false ];
	_CT_TREE tvDelete [0,0]; //remove child_b
	tvClear 12;
	_CT_TREE tvCollapse [];
	$/Code$
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		flag
	</Keyword>
	<Description>
		Returns the original flag pole of the flag the unit is carrying.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/flag
	</WikiPage>
	<Syntax>
		flag Object
	</Syntax>
	<RawSyntax>
		flag unit
	</RawSyntax>
	<Example>
		$Code$_flag = flag _soldier;$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Object
	</ReturnValue>

</NextListItem>

	<Keyword>
		lnbSetCurSelRow
	</Keyword>
	<Description>
		Selects the row with the given index of the 2D listbox.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lnbSetCurSelRow
	</WikiPage>
	<Syntax>
		lnbSetCurSelRow Array
	</NextSyntax>
		Control lnbSetCurSelRow Number
	</Syntax>
	<RawSyntax>
		lnbSetCurSelRow [idc, index]
	</NextRawSyntax>
		ctrl lnbSetCurSelRow index
	</RawSyntax>
	<Example>
		$Code$disableSerialization ;
	_ctrl = ( findDisplay 300) displayCtrl 304;
	_ctrl lnbSetCurSelRow 1;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(Sep 9 2014)
	(A3 1.28)As for invisible data processing, lnbAddArray, lnbAddColumn, lnbData, lnbGetColumnsPosition, lnbSetColumnsPos, lnbSetData, lnbSetText, lnbSetValue, lnbText and lnbValue store data types into exact position of the listNbox with different spaces. Accessing data with coordinate command at nearly the same syntax:
	$Code$
	//Set same value to one position of a Control
	_ctrl lnbSetData [ [0,0],"#1"];
	lnbSetColumnsPos [102, [0,1], 1];
	_ctrl lnbSetText [ [0,1], "#1"];
	_ctrl lnbSetValue [ [0,0],1];
	//Accessing the value disregard affecting one another.
	_ctrl lnbData [0,0]; //"#1"
	lnbGetColumnsPosition _ctrl //[1];
	_ctrl lnbText [0,0];//"#1"
	_ctrl lnbValue [0,0];//1
	$/Code$
	For a direct visible control over CT_LISTNBOX:
	$Code$
	0 = [_CT_LISTNBOX] spawn {
	private ["_CT_LISTNBOX","_color","_current","_pic"];
	disableSerialization ;
	_CT_LISTNBOX = _this select 0;
	{
	_CT_LISTNBOX lnbAddRow [ getText (_x "displayNameShort"), getText (_x "displayName")];
	_CT_LISTNBOX lnbSetPicture [ [_foreachIndex,0], getText (_x "texture")];
	} forEach (" isClass _x" configClasses ( configFile "CfgRanks"));
	_CT_LISTNBOX lnbSetCurSelRow 0;
	_current = lnbCurSelRow _CT_LISTNBOX;
	_color = _CT_LISTNBOX lnbColor [_current,0];
	_CT_LISTNBOX lnbSetColor [ [_current,1], [(_color select 0)/2,0,0,1] ];
	_CT_LISTNBOX lnbDeleteColumn 0;
	_CT_LISTNBOX lnbDeleteRow 1;
	sleep 1;
	lnbClear _CT_LISTNBOX;//Clear all items but control still remains just invisible.
	};
	$/Code$
	A combined use of both invisible and visible data processing commands alive the Control.
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setWaypointBehaviour
	</Keyword>
	<Description>
		Switches the unit behaviour when the waypoint becomes active.
	Possible values are:
	"UNCHANGED"
	"CARELESS"
	"SAFE"
	"AWARE"
	"COMBAT"
	"STEALTH"
	See the AIBehaviour page for details of the effect of this command on AI units.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setWaypointBehaviour
	</WikiPage>
	<Syntax>
		Array setWaypointBehaviour String
	</Syntax>
	<RawSyntax>
		waypoint setWaypointBehaviour mode
	</RawSyntax>
	<Example>
		$Code$[_grp, 2] setWaypointBehaviour "AWARE";$/Code$
	</Example>
	<Locality>
		undefined / global
	</Locality>
	<Note>
		This scripting command must be executed on the server to work properly in multiplayer
	</NextNote>
		(August 26, 2008)
	Modes are case sensitive - "safe" won't work, while "SAFE" is ok.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		difficultyEnabled
	</Keyword>
	<Description>
		This command is deprecated since Arma 3 1.58. Since this version it always returns false. Use difficultyOption instead. See Arma 3 Difficulty Overhaul for further details.
	Former functionality:
	Checks specific difficulty settings of the current user. Difficulty flag names can be found in the ArmA profile file under class Difficulties/xxx/Flags (xxx being regular or veteran).
	Note: stress damage for some reason is a separate difficulty so difficultyEnabled "stressDamageEnabled" might not return correct set value. There are however 2 dedicated commands for it:
	enableStressDamage
	isStressDamageEnabled
	Note: auto trim is also for some reason a separate difficulty so difficultyEnabled "autoTrimEnabled" might not return correct set value. There are also 2 dedicated commands for it:
	enableAutoTrimRTD
	isAutoTrimOnRTD
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/difficultyEnabled
	</WikiPage>
	<Syntax>
		difficultyEnabled String
	</Syntax>
	<RawSyntax>
		difficultyEnabled flagName
	</RawSyntax>
	<Example>
		$Code$hint str ( difficultyEnabled "armor");$/Code$
	</NextExample>
		$Code$// List current difficulty settings:
	call {
	private ["_diff", "_cfg", "_flags", "_res"];
	_diff = [];
	_cfg = configFile "CfgDifficulties";
	{
	_flags = _cfg configName _x "Flags";
	for "_i" from 0 to count _flags - 1 do {
	_diff pushBack configName (_flags select _i);
	};
	} forEach ("true" configClasses _cfg);
	_diff = _diff arrayIntersect _diff;
	_diff sort true ;
	_res = text "";
	{
	_res = composeText [_res, parseText format [
	" t align='left' %1 - %2 /t ",
	_x,
	[0, 1] select difficultyEnabled _x
	], lineBreak ];
	} forEach _diff;
	hint _res;
	};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(June 29, 2015)
	Arma 3 Flags:
	3rdPersonView
	armor
	autoAim
	autoGuideAT
	autoSpot
	autoTrimEnabled
	cameraShake
	clockIndicator
	deathMessages
	enemyTag
	extendetInfoType
	friendlyTag
	hud
	hudGroupInfo
	hudPerm
	hudWp
	hudWpPerm
	map
	mineTag
	netStats
	roughLanding
	stanceIndicator
	stressDamageEnabled
	unlimitedSaves
	vonID
	weaponCursor
	windEnabled
	</NextNote>
		Possible Values for Arma 2:
	3rdPersonView
	armor
	autoSpot
	autoGuideAT
	autoAim
	allowSeagull
	clockIndicator
	deathMessages
	enemyTag
	friendlyTag
	hud
	hudPerm
	hudWp
	hudWpPerm
	map
	netStats
	suppressPlayer
	tracers
	realisticFatigue
	ultraAI
	unlimitedSaves
	weaponCursor
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		onBriefingTeamSwitch
	</Keyword>
	<Description>
		Select a sound declared in the Description.ext of the mission to be played the first time the TeamSwitch tab is selected in the briefing.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/onBriefingTeamSwitch
	</WikiPage>
	<Syntax>
		onBriefingTeamSwitch String
	</Syntax>
	<RawSyntax>
		onBriefingTeamSwitch soundName
	</RawSyntax>
	<Example>
		$Code$onBriefingTeamSwitch "TeamSwitchVoiceOver"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		parsingNamespace
	</Keyword>
	<Description>
		Returns the global namespace attached to config parser.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/parsingNamespace
	</WikiPage>
	<Syntax>
		parsingNamespace
	</Syntax>
	<RawSyntax>
		parsingNamespace
	</RawSyntax>
	<Example>
		$Code$parsingNamespace setVariable ["var1",101.23124];
	_profVar1 = parsingNamespace getVariable "var1";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(January 27, 2015)
	Any global variable defined in a config using __EXEC() will be stored in this namespace.
	For example in the description.ext:
	$Code$__EXEC(testVar = 1);$/Code$
	The variable "testVar" can be accessed during mission run time using getVariable
	$Code$ hint str ( parsingNamespace getVariable ["testVar", 0]);$/Code$
	The above example would print 1.
	This example however:
	$Code$__EXEC(_testVar = 1);$/Code$
	Would print 0, because adding an underscore will make the variable local to the config in the same way that it would make it local to a script.
	See PreProcessor Commands for more details on __EXEC()
	</Note>
	<ReturnValue>
		Namespace
	</ReturnValue>

</NextListItem>

	<Keyword>
		hcLeader
	</Keyword>
	<Description>
		Returns group's high command commander.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/hcLeader
	</WikiPage>
	<Syntax>
		hcLeader Group
	</Syntax>
	<RawSyntax>
		hcLeader group
	</RawSyntax>
	<Example>
		$Code$_leader = hcLeader groupName;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(September 2, 2009)
	hcLeader returns 'NULL_OBJECT' if you use it on your HC commander's group in a HC setup with subordinates. It seems to work as expected if you don't use subordinates.
	</Note>
	<ReturnValue>
		Object
	</ReturnValue>

</NextListItem>

	<Keyword>
		onMapSingleClick
	</Keyword>
	<Description>
		Define action performed when user clicks in map by executing command string.
	the string receives 5 (localised in scope) variables:
	_this: Anything - Params passed to onMapSingleClick
	_pos: Array - Clicked position
	_units: Array - Units which were selected (via function keys) before opening the map ( may be non-functional in Arma )
	_shift: Boolean - Whether Shift was pressed when clicking on the map
	_alt: Boolean - Whether Alt was pressed when clicking on the map
	In Arma 3 the code should return true only if you wish to override default engine handling of the mouse click on map (see example #4) For older games, when click is processed, code should ultimately return true back to the engine. If false is returned, default processing by the game engine is done. Return value of any other type (including Nothing ) is an error. In such case default processing by the game engine is done, and error message may be displayed.
	The code is executed on every click, until the Command is
	removed via onMapSingleClick "", or
	replaced by onMapSingleClick "SomeOtherCommand(s)"
	i
	Since Arma 3 v1.57 a stackable version of this EH is available: MapSingleClick
	In order to keep compatibility between official and community content the functions BIS_fnc_addStackedEventHandler and BIS_fnc_removeStackedEventHandler should be used instead.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/onMapSingleClick
	</WikiPage>
	<Syntax>
		onMapSingleClick String/Code
	</NextSyntax>
		Anything onMapSingleClick String/Code
	</Syntax>
	<RawSyntax>
		onMapSingleClick command
	</NextRawSyntax>
		params onMapSingleClick command
	</RawSyntax>
	<Example>
		$Code$onMapSingleClick "'SoldierWB' createUnit [_pos, group player ]; true";
	// ArmA: Creates a soldier unit at the position clicked.$/Code$
	</NextExample>
		$Code$onMapSingleClick "grp1 move _pos; onMapSingleClick ''; true ";
	// ArmA: Orders "grp1" to move to position clicked. Disables further map-click actions.$/Code$
	</NextExample>
		$Code$onMapSingleClick "'SoldierWB' createUnit [_pos, group player ]; true ";
	// OFP: In OFP single quotes cannot be used for string definition, so two double-quotes have to be used instead.$/Code$
	</NextExample>
		$Code$//The following code will disable Shift+click waypoint marker creation
	onMapSingleClick {_shift};$/Code$
	</NextExample>
		$Code$//Pass params to onMapSingleClick code
	player onMapSingleClick { hint ("Hello " + name _this)}; //Hello KK$/Code$
	</NextExample>
		$Code$//Pass params to onMapSingleClick code and disable Shift+click waypoint marker creation
	player onMapSingleClick " hint (""Hello "" + name _this ); _shift"; //Hello KK$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(8 July, 2009)
	See my Multiple OnMapSingleClick script to allow you to add multiple events to the onMapSingleClick event. Some minor editing of the scripts would be required to use them in Arma.
	</NextNote>
		(April 1, 2016)
	_units param is supposed to return what groupSelectedUnits returns. Player must be leader and some units in the group must be selected on the group bar. However selected units are connected with group orders menu, which interferes with map click. In other words, when you click on the main map, the map gets focus and group orders menu closes, deselecting any selected unit, so _units is [] pretty much all the time.
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		inPolygon
	</Keyword>
	<Description>
		Checks whether position is inside given polygon
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/inPolygon
	</WikiPage>
	<Syntax>
		Array inPolygon Array
	</Syntax>
	<RawSyntax>
		position inPolygon polygon
	</RawSyntax>
	<Example>
		$Code$_isInside = [100,100,0] inPolygon [[0,0,0],[1000,1000,0],[1000,0,0]];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		assert
	</Keyword>
	<Description>
		Tests a condition and if the condition is false, displays error on screen (if -showscripterrors enabled) and logs error into.rpt file. It does not interrupt the script execution.
	If script was pre-processed with preprocessFileLineNumbers, it will also show/log the error line number and the file name.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/assert
	</WikiPage>
	<Syntax>
		assert Boolean
	</Syntax>
	<RawSyntax>
		assert condition
	</RawSyntax>
	<Example>
		$Code$assert (1 2);$/Code$
	</NextExample>
		$Code$// Check function params (Faster alternative to BIS_fnc_param )
	some_func = {
	_0 = _this select 0;
	_1 = _this select 1;
	_2 = _this select 2;
	if (! assert (
	typeName _0 == "ARRAY" &&
	typeName _1 == "STRING" &&
	typeName _2 == "SCALAR"
	)) exitWith {/*optional error logging*/};
	hint "Alright!";
	};
	[1,2,3] call some_func; //assert error
	[[1],"2",3] call some_func; //Alright!$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(May 15, 2010)
	Returns false, if condition is false, and returns true, if condition is true.
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		rectangular
	</Keyword>
	<Description>
		Checks if a location is rectangular (returns true) or elliptical (returns false).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/rectangular
	</WikiPage>
	<Syntax>
		rectangular Location
	</Syntax>
	<RawSyntax>
		rectangular location
	</RawSyntax>
	<Example>
		$Code$_isRect = rectangular myLocation;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		isGroupDeletedWhenEmpty
	</Keyword>
	<Description>
		Checks if the given group marked for auto-deletion when empty. See deleteGroupWhenEmpty.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isGroupDeletedWhenEmpty
	</WikiPage>
	<Syntax>
		isGroupDeletedWhenEmpty Group
	</Syntax>
	<RawSyntax>
		isGroupDeletedWhenEmpty group
	</RawSyntax>
	<Example>
		$Code$_isMarked = isGroupDeletedWhenEmpty _group;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		getPosASL
	</Keyword>
	<Description>
		Returns the object position height above sea level.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getPosASL
	</WikiPage>
	<Syntax>
		getPosASL Object
	</Syntax>
	<RawSyntax>
		getPosASL object
	</RawSyntax>
	<Example>
		$Code$_AslPos = getPosASL player ;$/Code$
	</NextExample>
		$Code$hint format ["position above sea level: %1", ( getPosASL player ) select 2];$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(23 Feb, 2007)
	$Code$ getPosASL _obj select 2;$/Code$
	might sometimes return the vertical position above sea level, but over land for stacked objects, it returns the vertical position above the object beneath it or at least affected by this offset. The same problem exists for getPos. There was a discussion thread in the BIS forums which suggested the use of the command modelToWorld instead to get around this issue where an absolute vertical position is required. ArmA Ver 1.02.
	</NextNote>
		(27 Mar, 2014)
	According to Code Optimisation, this function is the fastest (2x) and should be used instead of getPos, getPosATL and position.
	Conversion keep this speed ratio and is structured like: $Code$ ASLtoATL getPosASL Object ;$/Code$
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		setMusicEffect
	</Keyword>
	<Description>
		Defines the music track played on activation.
	Track is a subclass name of CfgMusic. In addition, "$STOP$" (stops the current music track).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setMusicEffect
	</WikiPage>
	<Syntax>
		Object setMusicEffect String
	</NextSyntax>
		Array setMusicEffect String
	</Syntax>
	<RawSyntax>
		trigger setMusicEffect track
	</NextRawSyntax>
		waypoint setMusicEffect track
	</RawSyntax>
	<Example>
		$Code$_trigger setMusicEffect "Track1"$/Code$
	</NextExample>
		$Code$[_group1,1] setMusicEffect "$STOP$"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		sendAUMessage
	</Keyword>
	<Description>
		Send the command to the list of clients.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/sendAUMessage
	</WikiPage>
	<Syntax>
		sendAUMessage Array
	</Syntax>
	<RawSyntax>
		sendAUMessage [clientList, command]
	</RawSyntax>
	<Example>
		$Code$sendAUMessage [[dpnid1, dpnid2], "ConnectTo: 192.168.1.66"]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		switchAction
	</Keyword>
	<Description>
		When used on a person, the given action is started immediately (there is no transition). Use switchmove "" to switch back to the default movement if there is no transition back, otherwise the person may be stuck.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/switchAction
	</WikiPage>
	<Syntax>
		Object switchAction String
	</Syntax>
	<RawSyntax>
		soldier switchAction action
	</RawSyntax>
	<Example>
		$Code$soldierOne switchAction "SitDown"$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		currentChannel
	</Keyword>
	<Description>
		Returns currently selected user chat channel on the UI (selected with and in MP). Correspondence between channel and number:
	0 = Global
	1 = Side
	2 = Command
	3 = Group
	4 = Vehicle
	5 = Direct
	6-15 = Custom Radio (see radioChannelCreate )
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/currentChannel
	</WikiPage>
	<Syntax>
		currentChannel
	</Syntax>
	<RawSyntax>
		currentChannel
	</RawSyntax>
	<Example>
		$Code$_selected = currentChannel ; // 3 - for example for the Group$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		set3DENAttribute
	</Keyword>
	<Description>
		Set one of entity attributes.
	!
	Attributes are available only within the Eden Editor workspace. You cannot access them in scenario preview or exported scenario!
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/set3DENAttribute
	</WikiPage>
	<Syntax>
		EdenEntity set3DENAttribute Array
	</Syntax>
	<RawSyntax>
		entity set3DENAttribute [class, value]
	</RawSyntax>
	<Example>
		$Code$player set3DENAttribute ["allowDamage", false ];
	// Mark player as invincible$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		triggerStatements
	</Keyword>
	<Description>
		Returns trigger statements in the form [cond, activ, desactiv].
	Note: The trigger could be local or remote but the result returned by this command will be for the trigger condition set up locally on the client that executed the command. See createTrigger for more info.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/triggerStatements
	</WikiPage>
	<Syntax>
		triggerStatements Object
	</Syntax>
	<RawSyntax>
		triggerStatements trigger
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		progressLoadingScreen
	</Keyword>
	<Description>
		If loading screen is shown, sets progress bar to the given value (interval is from 0 to 1])
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/progressLoadingScreen
	</WikiPage>
	<Syntax>
		progressLoadingScreen Number
	</Syntax>
	<RawSyntax>
		progressLoadingScreen progress
	</RawSyntax>
	<Example>
		$Code$startLoadingScreen ["Loading My Mission"];
	//Batch of code
	//Batch of code
	//Batch of code
	progressLoadingScreen 0.5;
	//Batch of code
	//Batch of code
	//Batch of code
	endLoadingScreen ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		addItemToBackpack
	</Keyword>
	<Description>
		Create new item and store it to soldier's backpack. The item can also be a weapon or a magazine.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/addItemToBackpack
	</WikiPage>
	<Syntax>
		Object addItemToBackpack String
	</Syntax>
	<RawSyntax>
		unit addItemToBackpack item
	</RawSyntax>
	<Example>
		$Code$player addItemToBackpack "arifle_MXM_Hamr_pointer_F";$/Code$
	</NextExample>
		$Code$player addItemToBackpack "itemGPS";$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		menuSort
	</Keyword>
	<Description>
		Sorts subentries of item on given path by their text.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/menuSort
	</WikiPage>
	<Syntax>
		menuSort Array
	</Syntax>
	<RawSyntax>
		menuSort [idc, path, reversed]
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		nearestBuilding
	</Keyword>
	<Description>
		Finds the nearest building to a given object or position. A "building" is defined as an object that is of class "House" and contains a path LOD.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/nearestBuilding
	</WikiPage>
	<Syntax>
		nearestBuilding Object/Array
	</Syntax>
	<RawSyntax>
		nearestBuilding position
	</RawSyntax>
	<Example>
		$Code$_nBuilding = nearestBuilding player ;$/Code$
	</NextExample>
		$Code$_nBuilding = nearestBuilding position player ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(February 18, 2016)
	This command doesn't return any house or building placed in editor (with createVehicle ). Use nearestObjects instead:
	$Code$ nearestObjects [ player, ["House", "Building"], 50] select 0$/Code$
	</Note>
	<ReturnValue>
		Object
	</ReturnValue>

</NextListItem>

	<Keyword>
		stopEngineRTD
	</Keyword>
	<Description>
		Instant engines stop.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/stopEngineRTD
	</WikiPage>
	<Syntax>
		stopEngineRTD Object
	</Syntax>
	<RawSyntax>
		stopEngineRTD heli
	</RawSyntax>
	<Example>
		$Code$stopEngineRTD myHeli$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		netObjNull
	</Keyword>
	<Description>
		A non existing network object. Not used in scripting anywhere in game.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/netObjNull
	</WikiPage>
	<Syntax>
		netObjNull
	</Syntax>
	<RawSyntax>
		netObjNull
	</RawSyntax>
	<Example>
		$Code$netObjNull == netObjNull // Returns false$/Code$
	</NextExample>
		$Code$netObjNull isEqualTo netObjNull // Returns true$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		NetObject
	</ReturnValue>

</NextListItem>

	<Keyword>
		playSound
	</Keyword>
	<Description>
		Selects sound from Description.ext#CfgSounds or config.cpp.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/playSound
	</WikiPage>
	<Syntax>
		playSound String
	</NextSyntax>
		playSound Array
	</Syntax>
	<RawSyntax>
		playSound soundName
	</NextRawSyntax>
		playSound [soundName, isSpeech]
	</RawSyntax>
	<Example>
		$Code$playSound "soundname"$/Code$
	</NextExample>
		$Code$// Start a sound and then stop it after 1.2 second:
	playSound "AlarmCar";
	[] spawn
	{
	_sound = ASLToAGL [0,0,0] nearestObject "#soundonvehicle";
	sleep 1.2;
	deleteVehicle _sound;
	};$/Code$
	</NextExample>
		$Code$// Start a sound and wait until it is finished:
	playSound "Alarm";
	hint "Started!";
	[] spawn
	{
	_sound = ASLToAGL [0,0,0] nearestObject "#soundonvehicle";
	waitUntil { isNull _sound};
	hint "Finished!";
	};$/Code$
	</Example>
	<Locality>
		undefined / local
	</Locality>
	<Note>
		(August 4, 2006)
	Notes from before the conversion:
	For dialogue involving living units it is better to use say, playSound will play a sound at the location of the player, say will play a sound at the location of the unit that is speaking, and it will only play that sound if the unit is alive.
	</NextNote>
		(December 28, 2014)
	As you may have noticed, the parameter for playsound/say3d that deals with the "volume" of the sound played has little to do with the effective loudness heard in game. What it is alters is the drop off for fading the sound at a distance. A higher decibel or integer value will increase the distance before any sort of fading will take place. The actual volume of the sound file played will factor in to this, as it does throughout the playing action.
	Amplifying the Sound
	Modifying the effective volume of sounds played by the engine is possible by "spamming" the sounds. By quickly playing the sounds overtop of one another, you can effectively amplify the volume
	This example,
	$Code$
	playSound "soundname";
	playSound "soundname";
	$/Code$
	Will effectively amplify the sound by a sensed 2x. The volume of the sound file itself will still affect the sound volume as it appears as though the arma engine has no normalization for sound files added to it.
	This technique may cause issues in sound quality in large multiplayer servers. I observed multiple instances when a triggered sound amplified with this method was out of sync with each other. Timing of the individual commands sent over the network is probably the issue. Recommend you compile your amplification code into a single finished function for better syncing for clients not activating the action/far away from the activation position.
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		hcRemoveAllGroups
	</Keyword>
	<Description>
		Remove all groups from unit's high command bar.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/hcRemoveAllGroups
	</WikiPage>
	<Syntax>
		hcRemoveAllGroups Object
	</Syntax>
	<RawSyntax>
		hcRemoveAllGroups unit
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		behaviour
	</Keyword>
	<Description>
		Return the behaviour of a unit. For Arma 3 behaviour explanation see Arma_3_AI_Behavior
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/behaviour
	</WikiPage>
	<Syntax>
		behaviour Object
	</Syntax>
	<RawSyntax>
		behaviour unitName
	</RawSyntax>
	<Example>
		$Code$_soldier setBehaviour "CARELESS";
	_b = behaviour _soldier; //returns "CARELESS"$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(14 Feb 2010)
	Although behaviour is called on an individual unit, what you are really getting back is the behaviour of that unit's group. Behaviour is a group setting.
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		ctrlSetModel
	</Keyword>
	<Description>
		Sets model for 3D Dialog Control.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ctrlSetModel
	</WikiPage>
	<Syntax>
		Control ctrlSetModel String
	</Syntax>
	<RawSyntax>
		control ctrlSetModel model
	</RawSyntax>
	<Example>
		$Code$_control3D ctrlSetModel "\a3\Ui_f\objects\Compass.p3d";$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setFromEditor
	</Keyword>
	<Description>
		Set if given team member was inserted directly from editor.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setFromEditor
	</WikiPage>
	<Syntax>
		Team_Member setFromEditor Boolean
	</Syntax>
	<RawSyntax>
		teamMember setFromEditor fromEditor
	</RawSyntax>
	<Example>
		$Code$_teamMember setFromEditor true$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		startLoadingScreen
	</Keyword>
	<Description>
		Shows loading screen with the given text, using the given resource. While loading screen is shown, simulation and scene drawing is disabled, user control is disabled, mouse cursor is hidden, scripts run at full speed. The loading screen does not end by itself and needs endLoadingScreen command, so make sure there is one at the end of loading operation.
	NOTE: The game simulation is disabled during Loading Screen operation (at least in SP), therefore any use of sleep command will pause the game indefinitely. If you have to "sleep", use uiSleep
	By default (if custom resource is not provided) startLoadingScreen will use "RscDisplayNotFreeze" resource. If you are using custom resource (could be also defined in description.ext ), the following resource's controls are supported by the engine:
	idc = 101; - text (type = 0;) or picture (type = 48;). The text will be set to the text provided by the command param.
	idc = 103; - progress (type = 8;) or animated texture (type = 45;). This control indicates global hardcoded mission loading progress and is useless after mission is loaded.
	idc = 104; - progress (type = 8;). This control's progress is initially set to 0 and can be manipulated with progressLoadingScreen command.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/startLoadingScreen
	</WikiPage>
	<Syntax>
		startLoadingScreen Array
	</Syntax>
	<RawSyntax>
		startLoadingScreen [text, resource]
	</RawSyntax>
	<Example>
		$Code$startLoadingScreen ["Loading My Mission, please wait..."];$/Code$
	</NextExample>
		$Code$startLoadingScreen ["Can't skip loading time...", "MyLoadingRsc"];$/Code$
	</NextExample>
		$Code$startLoadingScreen ["Loading My Mission"];
	//Batch of code
	//Batch of code
	//Batch of code
	progressLoadingScreen 0.5;
	//Batch of code
	//Batch of code
	//Batch of code
	endLoadingScreen ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(July 15, 2009)
	As it stops simulation as well as scene drawing, be sure not to put any sleep (or waitUntil if you are checking for in-game changes ; waitUntil for var initialization or script loading is ok) command between startLoadingScreen and endLoadingScreen.
	</NextNote>
		(January 18, 2010)
	edit 10:15 : Whatever transparence you define in your own resource, there will be a black screen to cache loading.
	It's up to you to choose a nice blue background :-)
	Resource has to be defined in description.ext ; it must NOT be defined as RscTitles ! Here is an example :
	Show text
	$Code$
	// basic defines
	//
	class RscText
	{
	type = 0;
	idc = -1;
	x = 0;
	y = 0;
	h = 0.037;
	w = 0.3;
	style = 0x100;
	font = Zeppelin32;
	SizeEx = 0.03921;
	colorText[] = {1,1,1,1};
	colorBackground[] = {0, 0, 0, 0};
	linespacing = 1;
	};
	class RscPicture
	{
	access=0;
	type=0;
	idc=-1;
	style=48;
	colorBackground[]={0,0,0,0};
	colorText[]={1,1,1,1};
	font="TahomaB";
	sizeEx=0;
	lineSpacing=0;
	text="";
	};
	class RscLoadingText : RscText
	{
	style = 2;
	x = 0.323532;
	y = 0.666672;
	w = 0.352944;
	h = 0.039216;
	sizeEx = 0.03921;
	colorText[] = {0.543,0.5742,0.4102,1.0};
	};
	class RscProgress
	{
	x = 0.344;
	y = 0.619;
	w = 0.313726;
	h = 0.0261438;
	texture = "\ca\ui\data\loadscreen_progressbar_ca.paa";
	colorFrame[] = {0,0,0,0};
	colorBar[] = {1,1,1,1};
	};
	class RscProgressNotFreeze
	{
	idc = -1;
	type = 45;
	style = 0;
	x = 0.022059;
	y = 0.911772;
	w = 0.029412;
	h = 0.039216;
	texture = "#(argb,8,8,3)color(0,0,0,0)";
	};
	//
	// the loading screen itself
	//
	class Harrier_loadingScreen
	{
	idd = -1;
	duration = 10e10;
	fadein = 0;
	fadeout = 0;
	name = "loading screen";
	class controlsBackground
	{
	class blackBG : RscText
	{
	x = safezoneX;
	y = safezoneY;
	w = safezoneW;
	h = safezoneH;
	text = "";
	colorText[] = {0,0,0,0};
	colorBackground[] = {0,0,0,1};
	};
	class nicePic : RscPicture
	{
	style = 48 + 0x800; // ST_PICTURE + ST_KEEP_ASPECT_RATIO
	x = safezoneX + safezoneW/2 - 0.25;
	y = safezoneY + safezoneH/2 - 0.2;
	w = 0.5;
	h = 0.4;
	text = "img\nicePic.paa";
	};
	};
	class controls
	{
	class Title1 : RscLoadingText
	{
	text = "$STR_LOADING"; // "Loading" text in the middle of the screen
	};
	class CA_Progress : RscProgress // progress bar, has to have idc 104
	{
	idc = 104;
	type = 8; // CT_PROGRESS
	style = 0; // ST_SINGLE
	texture = "\ca\ui\data\loadscreen_progressbar_ca.paa";
	};
	class CA_Progress2 : RscProgressNotFreeze // progress bar that will go reverse
	{
	idc = 103;
	};
	class Name2: RscText // the text on the top-left
	{
	idc = 101;
	x = 0.05;
	y = 0.029412;
	w = 0.9;
	h = 0.04902;
	text = "";
	sizeEx = 0.05;
	colorText[] = {0.543,0.5742,0.4102,1.0};
	};
	};
	};
	$/Code$
	</NextNote>
		(February 19, 2015)
	Based on what Lou Montana has previously said, the simulation does become disabled upon using this command. If you wish to use a delay 'sleep' will not work. The work around would be to use 'uiSleep'
	</NextNote>
		(November 21, 2015)
	In Arma 3 default loading screen has no control do display text. The description of the command now contains information what is needed to create custom loading screen resource.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		visiblePositionASL
	</Keyword>
	<Description>
		Returns an object's rendered 3D position ASL (z value above sea level) in render time scope.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/visiblePositionASL
	</WikiPage>
	<Syntax>
		visiblePositionASL Object
	</Syntax>
	<RawSyntax>
		visiblePositionASL object
	</RawSyntax>
	<Example>
		$Code$playerRenderedPosASL = visiblePositionASL player;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		getEditorCamera
	</Keyword>
	<Description>
		Fetches a reference to the mission editor camera.
	i
	Some Old Editor Command
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getEditorCamera
	</WikiPage>
	<Syntax>
		getEditorCamera Control
	</Syntax>
	<RawSyntax>
		getEditorCamera map
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Object
	</ReturnValue>

</NextListItem>

	<Keyword>
		||
	</Keyword>
	<Description>
		Returns true only if one or both conditions are true. In case of the alternative syntax(code as right argument), lazy evaluation is used (if left operand is true, evaluation of the right side is skipped completely). Identical to: a or b
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/a_or_b
	</WikiPage>
	<Syntax>
		Boolean || Boolean/Code
	</Syntax>
	<RawSyntax>
		</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		date
	</Keyword>
	<Description>
		Return the actual mission date and time as an array [ year, month, day, hour, minute ]$/Code$. Month is a full number between 1 and 12, day is between 1 and 31, hour is between 0 and 23 and minute is between 0 and 59.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/date
	</WikiPage>
	<Syntax>
		date
	</Syntax>
	<RawSyntax>
		date
	</RawSyntax>
	<Example>
		$Code$_now = date ; // _now = [2014,10,30,2,30] (Oct. 30th, 2:30am)
	_hour = _now select 3;
	_min = _now select 4;$/Code$
	</NextExample>
		$Code$if ( date select 3 = 19) then { // 7pm
	hintSilent "ah, Arma sunset"; //...cue bad guys
	};$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(January 23, 2018)
	a useful command here:
	$Code$_curDate = date;
	_ddMMyyyy = format ["%3/%2/%1",
	_curDate select 0,
	(if (_curDate select 1 10) then { "0" } else { "" }) + str (_curDate select 1),
	(if (_curDate select 2 10) then { "0" } else { "" }) + str (_curDate select 2)];$/Code$
	it can be shortened to: (no variable but more request to date )
	$Code$_ddMMyyyy = format ["%3/%2/%1",
	date select 0,
	(if (date select 1 10) then { "0" } else { "" }) + str (date select 1),
	(if (date select 2 10) then { "0" } else { "" }) + str (date select 2)];$/Code$
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		forceRespawn
	</Keyword>
	<Description>
		Forces unit to respawn. The effect as if the player pressed RESPAWN button in the game pause menu, the unit is killed only there is no "so and so was killed" message and no score adjustment.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/forceRespawn
	</WikiPage>
	<Syntax>
		forceRespawn Object
	</Syntax>
	<RawSyntax>
		forceRespawn unit
	</RawSyntax>
	<Example>
		$Code$forceRespawn player ;$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		forceFlagTexture
	</Keyword>
	<Description>
		Forces a flag texture onto a flag carrier (unit, vehicle or flag pole). No flag holder is required. If "" is used as texture, the texture is removed. This will override regularly owned flags. This type of flag texture cannot be retrieved using flagTexture.
	Note : Forced flag texture is an additional flag texture, which visually overrides original flag texture and therefore is very expensive to simulate, so please use the functionality sparingly.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/forceFlagTexture
	</WikiPage>
	<Syntax>
		Object forceFlagTexture String
	</Syntax>
	<RawSyntax>
		object forceFlagTexture texture
	</RawSyntax>
	<Example>
		$Code$player forceFlagTexture "\A3\Data_F\Flags\Flag_red_CO.paa";$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		getHitPointDamage
	</Keyword>
	<Description>
		Return current level of damage for a specific Hit Point (specified by its config class). If you need to get damage of a selection instead of hit point, use getHit.
	0: no damage
	1: full damage
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getHitPointDamage
	</WikiPage>
	<Syntax>
		Object getHitPointDamage String
	</Syntax>
	<RawSyntax>
		vehicle getHitPointDamage hitPointName
	</RawSyntax>
	<Example>
		$Code$(vehicle player) getHitPointDamage "hitEngine";$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		Common ObjectRTD TKOH Hit Points:
	HitEngine (engine #1)
	HitEngine2 (engine #2)
	HitEngine3 (engine #3)
	HitHRotor (main rotor)
	HitVRotor (tail rotor)
	HitBatteries (electrical systems)
	HitLight (landing light)
	HitHydraulics (entire hydraulics system)
	HitTransmission (engine transmission)
	HitGear (landing gear)
	HitFuel (all fuel tanks)
	HitHStabilizerL1 (first left horizontal stabilizer)
	HitHStabilizerR1 (first right horizontal stabilizer)
	HitVStabilizer1 (first vertical stabilizer)
	HitTail (tail boom)
	HitPitotTube (all pitot tubes)
	HitStaticPort (all static ports)
	HitStarter1 (starter for engine #1)
	HitStarter2 (starter for engine #2)
	HitStarter3 (starter for engine #3)
	HitAvionics
	HitHull
	HitMissiles
	HitRGlass
	HitLGlass
	HitGlass1
	HitGlass2
	HitGlass3
	HitGlass4
	HitGlass5
	HitGlass6
	</NextNote>
		(March 4, 2017)
	Note that vehicles with multiple turrets have multiple HitTurret and HitGun classes that can't be distinguished based on the Hitpoint class name. They can only be distinguished by their selection names. The selection names do not necessarily correspond to a common nomenclature, especially for mod vehicles. There can also be multiple empty Hitpoint Class names on a vehicle or infantry unit. They can be hitpoints for vehicle headlights or be the result of a bad config/model, as hitpoints that have an undefined named selection in their config class or are missing their named selection in the model will result in an empty HitPoint class name.
	</Note>
	<ReturnValue>
		Number/Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		reveal
	</Keyword>
	<Description>
		Reveals a target to a group. If toWhom is a unit, unit's group is considered. If toWhom is a vehicle, vehicle commander's group is considered.
	The knowledge value will be set to the highest level any unit of the revealing side has about the revealed target. If the revealing side has no knowledge about the revealed target, the value will be set to 1.
	Since ARMA 2 OA 1.60 the alternative syntax is available. Values greater than or equal 1.5 reveal the side of the target, too.
	The knowledge level can only be increased, not decreased by this command.
	In MP targetKnowledge and knowsAbout infos get updated only on the PC where command was executed.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/reveal
	</WikiPage>
	<Syntax>
		Object/Group reveal Object
	</NextSyntax>
		Object/Group reveal Array
	</Syntax>
	<RawSyntax>
		toWhom reveal target
	</NextRawSyntax>
		toWhom reveal [target, accuracy]
	</RawSyntax>
	<Example>
		$Code$_soldierOne reveal _soldierTwo; //soldierOne knowsAbout information about soldierTwo is updated$/Code$
	</NextExample>
		$Code$player reveal cursorObject ; //player knowsAbout information about object under cursor is updated$/Code$
	</NextExample>
		$Code$_soldierOne reveal [_soldierTwo, 1.5];$/Code$
	</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
		(January 15, 2007)
	In OFP v1.96, When a target is revealed to a unit, it's knowsAbout rating is set to 1, unless it was already more than 1 in which case reveal does nothing. See knowsAbout for more details about knowsAbout ratings and limitations.
	</NextNote>
		(January 24, 2008)
	Use reveal to allow client to see a created vehicle faster - the associated menu interaction will become available therefore, like the player has option to get in sooner.
	_tank = "M1A1" createVehicle (position player);
	player reveal _tank;
	//get in user actions become available instantly
	</NextNote>
		(January 15, 2012)
	The same idea from Doolittle's note applies to beaming of units. If you setPos an unit or a player, reveal (all) nearby objects and vehicles to make the interaction possible a lot quicker.
	</NextNote>
		(January 15, 2012)
	Revealing a targetUnit will also add it to nearTargets database of the given sourceUnit. The quality/detail level of the info depends on the knowsAbout value used with reveal. More detail in the nearTargets page.
	</NextNote>
		(October 21, 2014)
	Units that have been previously subjected to enableSimulation false; or enableSimulationGlobal false; may stay unrecognised for a long time even after simulation was re-enabled, returning objNull as cursorTarget. Force revealing units with reveal command usually solves the problem. For example: $Code${ player reveal _x} forEach allUnits ;$/Code$
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		tvSort
	</Keyword>
	<Description>
		Sorts childrens of given item by item name ( tvText ). IDC means id of parent Tree View.
	Param reversed is optional.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/tvSort
	</WikiPage>
	<Syntax>
		Control tvSort Array
	</NextSyntax>
		tvSort Array
	</Syntax>
	<RawSyntax>
		control tvSort [path, reversed]
	</NextRawSyntax>
		tvSort [idc, path, reversed]
	</RawSyntax>
	<Example>
		$Code$control tvSort [[0], true ];$/Code$
	</NextExample>
		$Code$tvSort [102, [0], true ];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		putWeaponPool
	</Keyword>
	<Description>
		Transfer weapons and magazines from weapon pool into cargo of object obj. Used in campaign to transfer weapons into next mission.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/putWeaponPool
	</WikiPage>
	<Syntax>
		putWeaponPool Object
	</Syntax>
	<RawSyntax>
		putWeaponPool object
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		triggerType
	</Keyword>
	<Description>
		Returns trigger type (see setTriggerType ).
	Note: The trigger could be local or remote but the result returned by this command will be for the trigger condition set up locally on the client that executed the command. See createTrigger for more info.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/triggerType
	</WikiPage>
	<Syntax>
		triggerType Object
	</Syntax>
	<RawSyntax>
		triggerType trigger
	</RawSyntax>
	<Example>
		$Code$_type = triggerType tr1;$/Code$
	</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		lbSize
	</Keyword>
	<Description>
		Return number of items of listbox or combobox with id idc of topmost user dialog.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lbSize
	</WikiPage>
	<Syntax>
		lbSize Number
	</NextSyntax>
		lbSize Control
	</Syntax>
	<RawSyntax>
		lbSize idc
	</NextRawSyntax>
		lbSize control
	</RawSyntax>
	<Example>
		$Code$_size = lbSize 101;$/Code$
	</NextExample>
		$Code$_size = lbSize _control;$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
		More information on the LB command family can be found here
	</Note>
	<ReturnValue>
		Number - Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		setGroupOwner
	</Keyword>
	<Description>
		Changes the ownership of a group (and all its units) to a given client. Group leader can't be a player. Only works when called from a server. Returns true if locality was changed. For agents use setOwner command.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setGroupOwner
	</WikiPage>
	<Syntax>
		Group setGroupOwner Number
	</Syntax>
	<RawSyntax>
		group setGroupOwner clientID
	</RawSyntax>
	<Example>
		$Code$_localityChanged = _someGroup setGroupOwner ( owner _playerObject);$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		This scripting command must be executed on the server to work properly in multiplayer
	</NextNote>
		(July 30, 2015)
	In ArmA3 1.48, setGroupOwner does NOT work if group has no units
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		removeAllOwnedMines
	</Keyword>
	<Description>
		Removes ownership of all owned mines/explosive devices of the given unit
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/removeAllOwnedMines
	</WikiPage>
	<Syntax>
		removeAllOwnedMines Object
	</Syntax>
	<RawSyntax>
		removeAllOwnedMines unit
	</RawSyntax>
	<Example>
		$Code$removeAllOwnedMines player ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		clearWeaponCargoGlobal
	</Keyword>
	<Description>
		Removes all weapons from the vehicle cargo space. MP synchronized.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/clearWeaponCargoGlobal
	</WikiPage>
	<Syntax>
		clearWeaponCargoGlobal Object
	</Syntax>
	<RawSyntax>
		clearWeaponCargoGlobal unit
	</RawSyntax>
	<Example>
		$Code$clearWeaponCargoGlobal jeepOne;$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		isEqualType
	</Keyword>
	<Description>
		Compares 2 values by their type. A much faster alternative to typeName a == typeName b.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isEqualType
	</WikiPage>
	<Syntax>
		Anything isEqualType Anything
	</Syntax>
	<RawSyntax>
		val1 isEqualType val2
	</RawSyntax>
	<Example>
		$Code$_var = [1,2,3];
	_var isEqualType 0; //false
	_var isEqualType []; //true$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		hideSelection
	</Keyword>
	<Description>
		Hides or enables the given selection for the object
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/hideSelection
	</WikiPage>
	<Syntax>
		object hideSelection Array
	</Syntax>
	<RawSyntax>
		object hideSelection [selection, hidden]
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		(April 28, 2016)
	Only seems to work for objects created with createSimpleObject, and will only work for certain selections.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		canStand
	</Keyword>
	<Description>
		Returns if the given soldier is able to stand up.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/canStand
	</WikiPage>
	<Syntax>
		canStand Object
	</Syntax>
	<RawSyntax>
		canStand unitName
	</RawSyntax>
	<Example>
		$Code$// SQS :
	?!( canStand player ) : player groupChat "My legs! They hit my legs!"$/Code$
	</NextExample>
		$Code$if (! canStand player ) then
	{
	player groupChat "My legs! They hit my legs!";
	};$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		The command may return true for dead units.
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		setUnitPosWeak
	</Keyword>
	<Description>
		Set unit position rules. Mode may be one of:
	"DOWN" - person goes prone and stays prone.
	"UP" - person stands and stays standing.
	"Middle" - Kneel Position. ArmA version 1.04
	"AUTO" - person chooses mode according to circumstances.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setUnitPosWeak
	</WikiPage>
	<Syntax>
		Object setUnitPosWeak String
	</Syntax>
	<RawSyntax>
		unit setUnitPosWeak mode
	</RawSyntax>
	<Example>
		$Code$_soldier disableAI "FSM";
	_soldier setUnitPosWeak "DOWN";$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		This command is the lowest level of priority for setting unit position and to be used in scripted
	FSM's.
	The current priorities are:
	1. Unit pos commanded (from the commanding menu, higher priority).
	2. Unit pos scripted (from setUnitPos scripting command, medium priority).
	3. Unit pos FSM / setUnitPosWeak (used in the formation FSM, lowest priority).
	Command most likely only works if run before join into group after createUnit array.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		attachTo
	</Keyword>
	<Description>
		Attaches an object to another object. The offset is applied to the object center unless a memory point is provided. If no offset is specified, the offset used will be the current relative positioning of objects against each other.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/attachTo
	</WikiPage>
	<Syntax>
		Object attachTo Array
	</Syntax>
	<RawSyntax>
		object1 attachTo [object2, offset, memPoint]
	</RawSyntax>
	<Example>
		$Code$player attachTo [car, [0, 0, 1] ];$/Code$
	</NextExample>
		$Code$player attachTo [tank, [0, -1, 0], "Usti hlavne"];$/Code$
	</NextExample>
		$Code$// Automatic offset:
	ammoCrate attachTo [ player ];$/Code$
	</NextExample>
		$Code$To set orientation of attached object use setVectorDirAndUp command:
	_expl1 = "DemoCharge_Remote_Ammo" createVehicle position player ;
	_expl1 attachTo [ player, [-0.1, 0.1, 0.15], "Pelvis"];
	_expl1 setVectorDirAndUp [ [0.5, 0.5, 0], [-0.5, 0.5, 0] ];
	_expl2 = "DemoCharge_Remote_Ammo" createVehicle position player ;
	_expl2 attachTo [ player, [0, 0.15, 0.15], "Pelvis"];
	_expl2 setVectorDirAndUp [ [1, 0, 0], [0, 1, 0] ];
	_expl3 = "DemoCharge_Remote_Ammo" createVehicle position player ;
	_expl3 attachTo [ player, [0.1, 0.1, 0.15], "Pelvis"];
	_expl3 setVectorDirAndUp [ [0.5, -0.5, 0], [0.5, 0.5, 0] ];$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
		(June 6, 2009)
	You can use setDir to change the direction of the attached object. The direction is relative to the object you attach it to, so setDir 180 won't point to the south but to the rear of the object you attach it to.
	Use setPos to synchronize the direction of the object in a network game.
	Example code:
	$Code$
	_obj setDir 180;
	_obj setPos getPos _obj;$/Code$
	</NextNote>
		(September 17, 2011)
	Some objects you cannot attach anything to. To be more precise, you can attach objects to them, but the behaviour is unexpected. For instance: $Code$
	SuitcaseObject attachTo [FoldingTableObject, [0,0,0]];$/Code$
	You would expect the suitcase to jump to the pivot point of the table, and stick to it.
	Instead, the suitcase will freeze in it's original position. Even if the table is moved, the suitcase will be unaffected: it will not follow the table, it will not even respond to actions it reacted to prior to being attached: pushing, being shot at, etc.. It's just an object frozen in space. In MP it's even weirder, the suitcase would turn invisible.
	Dodgy objects when it comes to attaching things to them: most in Objects(small), Objects(signs), all of Objects(helpers) categories, etc..
	</NextNote>
		(March 28, 2014)
	If you attach an explosive charge to an object (e.g. ammobox), the charge will not detonate when you simply set the damage to 1. You must detach it before.
	$Code$ private ["_target"];
	_target = your_ammobox ;
	// create and attach charge
	private ["_charge"];
	_charge = "DemoCharge_Remote_Ammo_Scripted" createVehicle position player ;
	_charge attachTo [_target, [0,0,0.2]];
	_charge setVectorDirAndUp [[0.5,0.5,0],[-0.5,0.5,0]];
	// now detonate charge
	detach _charge; //Important!
	_charge setDamage 1;
	$/Code$
	</NextNote>
		(1 Jun, 2014)
	(ArmA3 ver 1.20) attachTo overwrites setVectorDirAndUp if attached obj was changed to attach another one.
	$Code$
	_obj attachTo [_logic,[0,0,0]];
	_obj setVectorDirAndUp [[0,1,0],[0,0,-1]];
	_obj attachTo [_logic,[0,0,2]]; //vector no changes
	_obj attachTo [_anotherOne,[0,0,0]]; //vector changes to default
	$/Code$
	</NextNote>
		(September 25, 2014)
	Attaching an object does not update the accessibility of a place for the AI. The command shouldn't be used for positioning large static objects - the AI will simply walk thru such objects.
	</NextNote>
		(September 1, 2016)
	Using attachTo with an objects that have ragdoll physics (such as ammo boxes, containers, etc.) may cause unexpected behaviour. When you do so, if the attached object intersect origin object, origin object may gain some
	enormous collision properties even if the collision model for the attached object is not present localy to origin object, until detached. Vehicles may start flipping with no mass calculation (ie tank might fly), player object might gain inifinite
	Z-vector velocity on any interaction with terrain relief and other objects.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		getConnectedUAV
	</Keyword>
	<Description>
		Returns UAV if unit has connection to some UAV.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getConnectedUAV
	</WikiPage>
	<Syntax>
		getConnectedUAV Object
	</Syntax>
	<RawSyntax>
		getConnectedUAV unit
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Object
	</ReturnValue>

</NextListItem>

	<Keyword>
		lbTextRight
	</Keyword>
	<Description>
		Returns the shown right text in the item with the given index of the listbox or combobox with id idc of the topmost user dialog.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lbTextRight
	</WikiPage>
	<Syntax>
		lbTextRight Array
	</NextSyntax>
		Control lbTextRight Number
	</Syntax>
	<RawSyntax>
		lbTextRight [idc, index]
	</NextRawSyntax>
		control lbTextRight index
	</RawSyntax>
	<Example>
		$Code$_text = lbTextRight [101, 0];$/Code$
	</NextExample>
		$Code$_text = _control lbTextRight 0;$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String - String
	</ReturnValue>

</NextListItem>

	<Keyword>
		ropeLength
	</Keyword>
	<Description>
		Return rope length in meters (set by ropeCreate, ropeCut, ropeUnwind )
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/ropeLength
	</WikiPage>
	<Syntax>
		ropeLength Object
	</Syntax>
	<RawSyntax>
		ropeLength rope
	</RawSyntax>
	<Example>
		$Code$_length = ropeLength ( ropes heli1 select 0);$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(March 19, 2016)
	When a rope gets stretched ropeLength will still return the same length as before.
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		tan
	</Keyword>
	<Description>
		Tangent of x, argument in Degrees.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/tan
	</WikiPage>
	<Syntax>
		tan Number
	</Syntax>
	<RawSyntax>
		tan x
	</RawSyntax>
	<Example>
		$Code$_tangent = tan 45 
	// Result is 1$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		get3DENSelected
	</Keyword>
	<Description>
		Returns an array of all selected Eden Editor Entities, including groups, waypoints, and markers. In case a wrong type is used the command will return [[],[],[],[],[],[]] and an error message is displayed.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/get3DENSelected
	</WikiPage>
	<Syntax>
		get3DENSelected String
	</Syntax>
	<RawSyntax>
		get3DENSelected type
	</RawSyntax>
	<Example>
		$Code$systemChat str ( get3DENSelected "");
	/* outputs: [
	[B Alpha 2-1:1],//objects
	[B Alpha 2-1],//groups
	[164494: no shape ],//triggers
	[ No center Charlie 1-2:4],//logic
	[ [B Alpha 2-1,0] ],//waypoints
	["Hotel_Whiskey"]//markers
	]*/$/Code$
	</NextExample>
		$Code$systemChat str ( get3DENSelected "object");
	// outputs: [B Alpha 2-1:1]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		do3DENAction
	</Keyword>
	<Description>
		Performs given Eden Editor action.
	See the list of all actions.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/do3DENAction
	</WikiPage>
	<Syntax>
		do3DENAction String
	</Syntax>
	<RawSyntax>
		do3DENAction action
	</RawSyntax>
	<Example>
		$Code$do3DENAction "MissionSave";// saves the scenario$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		getSoundControllerResult
	</Keyword>
	<Description>
		Returns the calculated value of simple expression in config.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getSoundControllerResult
	</WikiPage>
	<Syntax>
		Object getSoundControllerResult Config
	</Syntax>
	<RawSyntax>
		obj getSoundControllerResult configEntry
	</RawSyntax>
	<Example>
		$Code$_result = ( vehicle player ) getSoundControllerResult ( configFile "cfgVehicles" typeOf ( vehicle player ) "sounds" "idle_ext" "volume");$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		addEditorObject
	</Keyword>
	<Description>
		Add an object to the editor and assign arguments. Create script is,called with _new equal to true. Returns the ID of the new EditorObject.,Subtype class is optional.
	i
	Some Old Editor Command
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/addEditorObject
	</WikiPage>
	<Syntax>
		Control addEditorObject Array
	</Syntax>
	<RawSyntax>
		map addEditorObject [type,[name1,value1,],subtype class]
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		camSetDir
	</Keyword>
	<Description>
		Sets the orientation of the given camera in the direction of the given vector. Needs camCommit.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/camSetDir
	</WikiPage>
	<Syntax>
		Object camSetDir Array
	</Syntax>
	<RawSyntax>
		camera camSetDir direction
	</RawSyntax>
	<Example>
		$Code$pos1 = player modelToWorld [0,5,5];
	cam = "camera" camCreate pos1;
	cam cameraEffect ["INTERNAL", "BACK"];
	pos2 = player modelToWorld [0,50,50];
	cam camSetPos pos2;
	cam camSetDir (pos2 vectorFromTo pos1);
	cam camCommit 5;
	0 = [] spawn
	{
	waitUntil { camCommitted cam};
	cam camSetPos pos1;
	cam camCommit 5;
	};$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
		(May 9, 2016)
	cameraEffect "INTERNAL" works better than "EXTERNAL" with this command.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		camPrepareFocus
	</Keyword>
	<Description>
		focusRange is in format [distance,blur]. Prepares the camera focus blur.
	[-1,1] will reset default values (auto focusing), [-1,-1] will disable postprocessing (all is focused).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/camPrepareFocus
	</WikiPage>
	<Syntax>
		Object camPrepareFocus Array
	</Syntax>
	<RawSyntax>
		camera camPrepareFocus focusRange
	</RawSyntax>
	<Example>
		$Code$_camera camPrepareFocus [50, 1]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		enableIRLasers
	</Keyword>
	<Description>
		Allows the AI to use IR lasers
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/enableIRLasers
	</WikiPage>
	<Syntax>
		Object/Group enableIRLasers Boolean
	</Syntax>
	<RawSyntax>
		thing enableIRLasers value
	</RawSyntax>
	<Example>
		$Code$(units group player) enableIRLasers true$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		tvSetPictureRight
	</Keyword>
	<Description>
		Sets right picture on the tree view item defined by path
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/tvSetPictureRight
	</WikiPage>
	<Syntax>
		tvSetPictureRight Array
	</NextSyntax>
		Control tvSetPictureRight Array
	</Syntax>
	<RawSyntax>
		tvSetPictureRight [idc, path, name]
	</NextRawSyntax>
		control tvSetPictureRight [path, name]
	</RawSyntax>
	<Example>
		$Code$tvSetPictureRight [101, [0], "picture"];$/Code$
	</NextExample>
		$Code$_ctrl tvSetPictureRight [[0], "picture"];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing - Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		removeAllCuratorCameraAreas
	</Keyword>
	<Description>
		Delete all curator camera areas.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/removeAllCuratorCameraAreas
	</WikiPage>
	<Syntax>
		removeAllCuratorCameraAreas Object
	</Syntax>
	<RawSyntax>
		removeAllCuratorCameraAreas curatorObj
	</RawSyntax>
	<Example>
		$Code$removeAllCuratorCameraAreas myCurator;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		removeMusicEventHandler
	</Keyword>
	<Description>
		Removes specified music track event handler.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/removeMusicEventHandler
	</WikiPage>
	<Syntax>
		removeMusicEventHandler Array
	</Syntax>
	<RawSyntax>
		removeMusicEventHandler [type, id]
	</RawSyntax>
	<Example>
		$Code$removeMusicEventHandler ["MusicStart", 12];$/Code$
	</NextExample>
		$Code$removeMusicEventHandler ["MusicStop", 12];$/Code$
	</NextExample>
		$Code$hnd_stop = addMusicEventHandler ["MusicStop",{}];
	removeMusicEventHandler ["MusicStop",hnd_stop];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setSimpleTaskCustomData
	</Keyword>
	<Description>
		Set custom data for the task. Tooltip will be drawn in task list on the right side. Description will be drawn in task description panel on the bottom.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setSimpleTaskCustomData
	</WikiPage>
	<Syntax>
		Task setSimpleTaskCustomData Array
	</Syntax>
	<RawSyntax>
		task setSimpleTaskCustomData [IconPath, tooltip, description]
	</RawSyntax>
	<Example>
		</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		setHitPointDamage
	</Keyword>
	<Description>
		Set the current level of damage for a specific Hit Point (specified by its config class).
	0: no damage
	1: full damage
	See also BIS_fnc_setHitPointDamage for setting hit with dependency
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setHitPointDamage
	</WikiPage>
	<Syntax>
		Object setHitPointDamage Array
	</Syntax>
	<RawSyntax>
		vehicle setHitPointDamage [hitPointName, damage, useEffects]
	</RawSyntax>
	<Example>
		$Code$vehicle player setHitPointDamage ["hitEngine2", 1.0];$/Code$
	</NextExample>
		$Code$player setHitPointDamage ["hitHead", 0.5];
	player setHitPointDamage ["hitBody", 0.5];
	player setHitPointDamage ["hitHands", 0.5];
	player setHitPointDamage ["hitLegs", 0.5];$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
		(August 30, 2012)
	This command is using the Hit Points (defined in the HitPoints class in the config) while setHit is using Named Selections (defined in the model itself).
	</NextNote>
		(November 10, 2016)
	This command has no affect when allowDamage is false.
	</NextNote>
		(November 14, 2016)
	Mention that setHitPointDamage only can be executed localy, while the getHitPointDamage is global.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		getPosATL
	</Keyword>
	<Description>
		Returns the position of an object relative to the terrain.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/getPosATL
	</WikiPage>
	<Syntax>
		getPosATL Object
	</Syntax>
	<RawSyntax>
		getPosATL object
	</RawSyntax>
	<Example>
		$Code$_objPosition = getPosATL player$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
		(December 18, 2015)
	If one desires to retrieve an object from an array of object, be sure to wrap your array information in parenthesis. e.g. getPosATL ( myArray select 0 ) ;
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		moveOut
	</Keyword>
	<Description>
		Moves the soldier out of vehicle, immediately, without animation.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/moveOut
	</WikiPage>
	<Syntax>
		moveOut Object
	</Syntax>
	<RawSyntax>
		moveOut soldier
	</RawSyntax>
	<Example>
		$Code${ if ( lifeState _x == "UNCONSCIOUS") then { moveOut _x}} forEach crew cursorTarget ;$/Code$
	</NextExample>
		$Code$// Move out player just before he dies:
	player addEventHandler [
	"HandleDamage",
	format [
	' if ( switch (_this select 1) do {
	case "": {_this select 2 = 1};
	case "head": {_this select 2 = %1};
	case "body": {_this select 2 = %2};
	default { false };
	}) then { moveOut player }',
	getNumber ( configFile "CfgFirstAid" "CriticalHeadHit"),
	getNumber ( configFile "CfgFirstAid" "CriticalBodyHit")
	]
	];$/Code$
	</Example>
	<Locality>
		global / global
	</Locality>
	<Note>
		(September 12, 2010)
	Seems to work only for unconscious - NOT for dead bodies. setPos /ATL/ASL seems to the only working for dead bodies.
	</NextNote>
		(December 30, 2017)
	moveOut currently doesn't work for units with setUnconscious true. Use _unit setPos (_unit modelToWorldVisual [0,0,0]) instead.
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		hcSelected
	</Keyword>
	<Description>
		Returns selected groups in high command.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/hcSelected
	</WikiPage>
	<Syntax>
		hcSelected Object
	</Syntax>
	<RawSyntax>
		hcSelected unit
	</RawSyntax>
	<Example>
		$Code$array = hcSelected unit;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		isVehicleSensorEnabled
	</Keyword>
	<Description>
		Returns class name (to identify list based on component name) and info if given sensor is enabled
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isVehicleSensorEnabled
	</WikiPage>
	<Syntax>
		Object isVehicleSensorEnabled String
	</Syntax>
	<RawSyntax>
		vehicle isVehicleSensorEnabled componentName
	</RawSyntax>
	<Example>
		$Code$vehicle player isVehicleSensorEnabled "PassiveRadarSensorComponent"; // [ ["PassiveRadarSensorComponent",true] ]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		weaponCargo
	</Keyword>
	<Description>
		Get array with weapons from ammo box (or any general weapon holder container).
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/weaponCargo
	</WikiPage>
	<Syntax>
		weaponCargo Object
	</Syntax>
	<RawSyntax>
		weaponCargo box
	</RawSyntax>
	<Example>
		$Code$hint str weaponCargo backpackContainer player ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		vectorDotProduct
	</Keyword>
	<Description>
		Dot product of two 3D vectors.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/vectorDotProduct
	</WikiPage>
	<Syntax>
		Array vectorDotProduct Array
	</Syntax>
	<RawSyntax>
		vector1 vectorDotProduct vector2
	</RawSyntax>
	<Example>
		$Code$_dot = [1,0,1] vectorDotProduct [0,0,2];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(28 Jun, 2014)
	(ArmA3 1.22)Algorithm:
	$Code$
	Vector1 = [x1,y1,z1]; Vector2 = [x2,y2,z2];
	Result = (x1 * x2) + (y1 * y2) + (z1 * z2)
	$/Code$
	It is recommended to use vectorDotProduct instead of BIS_fnc_dotProduct.
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		playersNumber
	</Keyword>
	<Description>
		Returns count of occupied role selection slots for given side. Players who claimed a slot in the lobby but didn't start the mission are counted as well. If disabledAI = 0; in description.ext or Enable AI option is checked in 3DEN, AI bots will be treated as valid players and will be counted too. Multiplayer only, in singleplayer always returns 0.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/playersNumber
	</WikiPage>
	<Syntax>
		playersNumber Side
	</Syntax>
	<RawSyntax>
		playersNumber side
	</RawSyntax>
	<Example>
		$Code$_west = playersNumber west ;
	_east = playersNumber east ;
	_civ = playersNumber civilian ;
	hint format ["West:%1 East:%2, Civ:%3", _west, _east, _civ];$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(April 13, 2015)
	playersNumber returns playable AI as well as human players. It does not include non playable AI. [NOTE: This was observed in ArmA 1.05]
	To get the amount of players that are on the same side as the person executing the script:
	$Code$playersNumber playerSide;$/Code$
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		numberToDate
	</Keyword>
	<Description>
		Convert float number to a date.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/numberToDate
	</WikiPage>
	<Syntax>
		numberToDate Array
	</Syntax>
	<RawSyntax>
		numberToDate [year,time]
	</RawSyntax>
	<Example>
		$Code$_date = numberToDate [2008,0.5324]; //[2008,7,13,7,49]$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		player
	</Keyword>
	<Description>
		Person controlled by player.
	In MP this value is different on each computer and on dedicated server this value is null.
	In Intros and Outros this isn't set by default and must be assigned.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/player
	</WikiPage>
	<Syntax>
		player
	</Syntax>
	<RawSyntax>
		player
	</RawSyntax>
	<Example>
		$Code$player addRating 500;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
		(20 Jul, 2010)
	Before you use the player object (usually to avoid JIP issues) all you need is to run:
	waitUntil {!isNull player};
	Anything else you see in other scripts is equivalent and/or redundant. Of course JIP players may need more than just the player to point at the actual JIP player unit, but that's script/mission-specific.
	</NextNote>
		(27 Jan, 2008)
	( isNull player ) is true for JIP players on their client during initialization.
	After initialization, it will be set, making it valid again.
	To cater for this, some people use code similar to the following in their spawned scripts:
	if (!isServer && (player != player)) then
	{
	waitUntil {player == player};
	waitUntil {time 10};
	};
	// 'player' will now be valid
	_action = player addAction ["heal", "heal.sqf", [], -1, false, false, ""];
	See JIP/player topic for additional helpful information.
	</NextNote>
		(June 26, 2014)
	player can actually be REMOTE object on player's PC: http://www.youtube.com/watch?v=m6IILtfa3cQ
	</Note>
	<ReturnValue>
		Object
	</ReturnValue>

</NextListItem>

	<Keyword>
		fromEditor
	</Keyword>
	<Description>
		Return if given team was inserted directly from mission editor.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/fromEditor
	</WikiPage>
	<Syntax>
		fromEditor Team_Member
	</Syntax>
	<RawSyntax>
		fromEditor teamMember
	</RawSyntax>
	<Example>
		$Code$_fromEditor = fromEditor _member$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		removeHandgunItem
	</Keyword>
	<Description>
		Removes given weapon item from the handgun weapon cargo space.
	As of Arma 3 DEV 1.37, this command also supports weapon magazines.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/removeHandgunItem
	</WikiPage>
	<Syntax>
		Object removeHandgunItem String
	</Syntax>
	<RawSyntax>
		unit removeHandgunItem item
	</RawSyntax>
	<Example>
		$Code$player removeHandgunItem "muzzle_snds_L";$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		worldName
	</Keyword>
	<Description>
		Return the name of the currently loaded world.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/worldName
	</WikiPage>
	<Syntax>
		worldName
	</Syntax>
	<RawSyntax>
		worldName
	</RawSyntax>
	<Example>
		$Code$_name = worldName ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		String
	</ReturnValue>

</NextListItem>

	<Keyword>
		unitAimPositionVisual
	</Keyword>
	<Description>
		Returns the position on the unit other units can aim at in render scope. See also aimPos, unitAimPosition.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/unitAimPositionVisual
	</WikiPage>
	<Syntax>
		unitAimPositionVisual Object
	</Syntax>
	<RawSyntax>
		unitAimPositionVisual unit
	</RawSyntax>
	<Example>
		$Code$unitAimPositionVisual player ;$/Code$
	</Example>
	<Locality>
		global / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Array
	</ReturnValue>

</NextListItem>

	<Keyword>
		setPilotLight
	</Keyword>
	<Description>
		Switches headlights of a vehicle on/off. Note that the vehicle has to be local, for global variant use Arma 3 Actions " LightOn "/" LightOff "
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/setPilotLight
	</WikiPage>
	<Syntax>
		Object setPilotLight Boolean
	</Syntax>
	<RawSyntax>
		vehicle setPilotLight set
	</RawSyntax>
	<Example>
		$Code$car setPilotLight true ;$/Code$
	</Example>
	<Locality>
		local / global
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		missionVersion
	</Keyword>
	<Description>
		Returns the version of the current mission.
	Mission from the 2D Editor : 12
	Mission from the Eden Editor : 15 and higher (for example current version for Eden Editor mission in Arma 3 v1.57 is 51)
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/missionVersion
	</WikiPage>
	<Syntax>
		missionVersion
	</Syntax>
	<RawSyntax>
		missionVersion
	</RawSyntax>
	<Example>
		$Code$_version = missionVersion ;$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Number
	</ReturnValue>

</NextListItem>

	<Keyword>
		customChat
	</Keyword>
	<Description>
		Sends the chat message to the custom radio channel. The radio channel needs to be created on the server before hand, with radioChannelCreate command.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/customChat
	</WikiPage>
	<Syntax>
		Object customChat Array
	</Syntax>
	<RawSyntax>
		unit customChat [channel, message]
	</RawSyntax>
	<Example>
		$Code$_unit customChat [1, "Hi, I am a custom chat message"];$/Code$
	</NextExample>
		$Code$driver vehicle player sideChat "sideChat";
	driver vehicle player globalChat "globalChat";
	driver vehicle player groupChat "groupChat";
	vehicle player vehicleChat "vehicleChat";
	driver vehicle player commandChat "commandChat";
	driver vehicle player customChat [1, "customChat"];
	systemChat "systemChat";$/Code$
	</Example>
	<Locality>
		global / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		removeTeamMember
	</Keyword>
	<Description>
		Remove given member from given team. Effect is local, unless both member and team are local to PC on which command is executed, then effect is global.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/removeTeamMember
	</WikiPage>
	<Syntax>
		Team_Member removeTeamMember Team_Member
	</Syntax>
	<RawSyntax>
		team removeTeamMember member
	</RawSyntax>
	<Example>
		$Code$_team removeTeamMember _teamMember;$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		collapseObjectTree
	</Keyword>
	<Description>
		Collapse the object tree.
	i
	Some Old Editor Command
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/collapseObjectTree
	</WikiPage>
	<Syntax>
		collapseObjectTree Control
	</Syntax>
	<RawSyntax>
		collapseObjectTree map
	</RawSyntax>
	<Example>
		$Code$collapseObjectTree _map,$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Nothing
	</ReturnValue>

</NextListItem>

	<Keyword>
		isMultiplayer
	</Keyword>
	<Description>
		Return true if multiPlayer.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/isMultiplayer
	</WikiPage>
	<Syntax>
		isMultiplayer
	</Syntax>
	<RawSyntax>
		isMultiplayer
	</RawSyntax>
	<Example>
		$Code$if (isMultiplayer) then {
	//...block
	}$/Code$
	</Example>
	<Locality>
		undefined / undefined
	</Locality>
	<Note>
	</Note>
	<ReturnValue>
		Boolean
	</ReturnValue>

</NextListItem>

	<Keyword>
		lbData
	</Keyword>
	<Description>
		Returns the additional text (invisible) in an item with the given index of the listbox or combobox with id idc of the topmost user dialog.
	</Description>
	<WikiPage>
		https://community.bistudio.com/wiki/lbData
	</WikiPage>
	<Syntax>
		lbData Array
	</NextSyntax>
		Control lbData Number
	</Syntax>
	<RawSyntax>
		lbData [idc, index]
	</NextRawSyntax>
		control lbData index
	</RawSyntax>
	<Example>
		$Code$_data = lbData [101, 0];$/Code$
	</NextExample>
		$Code$_data = _control lbData 0;$/Code$
	</Example>
	<Locality>
		local / local
	</Locality>
	<Note>
		More information on the LB command family can be found here
	</Note>
	<ReturnValue>
		String - String
	</ReturnValue>



</KeywordList>