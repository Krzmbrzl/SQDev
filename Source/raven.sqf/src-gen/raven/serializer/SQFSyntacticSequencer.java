/*
 * generated by Xtext
 */
package raven.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import raven.services.SQFGrammarAccess;

@SuppressWarnings("all")
public class SQFSyntacticSequencer extends AbstractSyntacticSequencer {

	protected SQFGrammarAccess grammarAccess;
	protected AbstractElementAlias match_SwitchType___DefaultKeyword_7_0_LeftCurlyBracketKeyword_7_1_RightCurlyBracketKeyword_7_3_SemicolonKeyword_7_4__q;
	protected AbstractElementAlias match_VarContent_PlusSignKeyword_3_0_q;
	protected AbstractElementAlias match_ifType___ElseKeyword_4_0_1_0_3_0_LeftCurlyBracketKeyword_4_0_1_0_3_1_RightCurlyBracketKeyword_4_0_1_0_3_3__q;
	protected AbstractElementAlias match_ifType___ExitWithKeyword_4_1_0_LeftCurlyBracketKeyword_4_1_1_RightCurlyBracketKeyword_4_1_3___or___ThenKeyword_4_0_0_____LeftCurlyBracketKeyword_4_0_1_0_0_RightCurlyBracketKeyword_4_0_1_0_2___ElseKeyword_4_0_1_0_3_0_LeftCurlyBracketKeyword_4_0_1_0_3_1_RightCurlyBracketKeyword_4_0_1_0_3_3__q___or___LeftSquareBracketKeyword_4_0_1_1_0_LeftCurlyBracketKeyword_4_0_1_1_1_RightCurlyBracketKeyword_4_0_1_1_3_CommaKeyword_4_0_1_1_4_LeftCurlyBracketKeyword_4_0_1_1_5_RightCurlyBracketKeyword_4_0_1_1_7_RightSquareBracketKeyword_4_0_1_1_8______;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (SQFGrammarAccess) access;
		match_SwitchType___DefaultKeyword_7_0_LeftCurlyBracketKeyword_7_1_RightCurlyBracketKeyword_7_3_SemicolonKeyword_7_4__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getSwitchTypeAccess().getDefaultKeyword_7_0()), new TokenAlias(false, false, grammarAccess.getSwitchTypeAccess().getLeftCurlyBracketKeyword_7_1()), new TokenAlias(false, false, grammarAccess.getSwitchTypeAccess().getRightCurlyBracketKeyword_7_3()), new TokenAlias(false, false, grammarAccess.getSwitchTypeAccess().getSemicolonKeyword_7_4()));
		match_VarContent_PlusSignKeyword_3_0_q = new TokenAlias(false, true, grammarAccess.getVarContentAccess().getPlusSignKeyword_3_0());
		match_ifType___ElseKeyword_4_0_1_0_3_0_LeftCurlyBracketKeyword_4_0_1_0_3_1_RightCurlyBracketKeyword_4_0_1_0_3_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getIfTypeAccess().getElseKeyword_4_0_1_0_3_0()), new TokenAlias(false, false, grammarAccess.getIfTypeAccess().getLeftCurlyBracketKeyword_4_0_1_0_3_1()), new TokenAlias(false, false, grammarAccess.getIfTypeAccess().getRightCurlyBracketKeyword_4_0_1_0_3_3()));
		match_ifType___ExitWithKeyword_4_1_0_LeftCurlyBracketKeyword_4_1_1_RightCurlyBracketKeyword_4_1_3___or___ThenKeyword_4_0_0_____LeftCurlyBracketKeyword_4_0_1_0_0_RightCurlyBracketKeyword_4_0_1_0_2___ElseKeyword_4_0_1_0_3_0_LeftCurlyBracketKeyword_4_0_1_0_3_1_RightCurlyBracketKeyword_4_0_1_0_3_3__q___or___LeftSquareBracketKeyword_4_0_1_1_0_LeftCurlyBracketKeyword_4_0_1_1_1_RightCurlyBracketKeyword_4_0_1_1_3_CommaKeyword_4_0_1_1_4_LeftCurlyBracketKeyword_4_0_1_1_5_RightCurlyBracketKeyword_4_0_1_1_7_RightSquareBracketKeyword_4_0_1_1_8______ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getIfTypeAccess().getExitWithKeyword_4_1_0()), new TokenAlias(false, false, grammarAccess.getIfTypeAccess().getLeftCurlyBracketKeyword_4_1_1()), new TokenAlias(false, false, grammarAccess.getIfTypeAccess().getRightCurlyBracketKeyword_4_1_3())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getIfTypeAccess().getThenKeyword_4_0_0()), new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getIfTypeAccess().getLeftCurlyBracketKeyword_4_0_1_0_0()), new TokenAlias(false, false, grammarAccess.getIfTypeAccess().getRightCurlyBracketKeyword_4_0_1_0_2()), new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getIfTypeAccess().getElseKeyword_4_0_1_0_3_0()), new TokenAlias(false, false, grammarAccess.getIfTypeAccess().getLeftCurlyBracketKeyword_4_0_1_0_3_1()), new TokenAlias(false, false, grammarAccess.getIfTypeAccess().getRightCurlyBracketKeyword_4_0_1_0_3_3()))), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getIfTypeAccess().getLeftSquareBracketKeyword_4_0_1_1_0()), new TokenAlias(false, false, grammarAccess.getIfTypeAccess().getLeftCurlyBracketKeyword_4_0_1_1_1()), new TokenAlias(false, false, grammarAccess.getIfTypeAccess().getRightCurlyBracketKeyword_4_0_1_1_3()), new TokenAlias(false, false, grammarAccess.getIfTypeAccess().getCommaKeyword_4_0_1_1_4()), new TokenAlias(false, false, grammarAccess.getIfTypeAccess().getLeftCurlyBracketKeyword_4_0_1_1_5()), new TokenAlias(false, false, grammarAccess.getIfTypeAccess().getRightCurlyBracketKeyword_4_0_1_1_7()), new TokenAlias(false, false, grammarAccess.getIfTypeAccess().getRightSquareBracketKeyword_4_0_1_1_8())))));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if(match_SwitchType___DefaultKeyword_7_0_LeftCurlyBracketKeyword_7_1_RightCurlyBracketKeyword_7_3_SemicolonKeyword_7_4__q.equals(syntax))
				emit_SwitchType___DefaultKeyword_7_0_LeftCurlyBracketKeyword_7_1_RightCurlyBracketKeyword_7_3_SemicolonKeyword_7_4__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_VarContent_PlusSignKeyword_3_0_q.equals(syntax))
				emit_VarContent_PlusSignKeyword_3_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_ifType___ElseKeyword_4_0_1_0_3_0_LeftCurlyBracketKeyword_4_0_1_0_3_1_RightCurlyBracketKeyword_4_0_1_0_3_3__q.equals(syntax))
				emit_ifType___ElseKeyword_4_0_1_0_3_0_LeftCurlyBracketKeyword_4_0_1_0_3_1_RightCurlyBracketKeyword_4_0_1_0_3_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_ifType___ExitWithKeyword_4_1_0_LeftCurlyBracketKeyword_4_1_1_RightCurlyBracketKeyword_4_1_3___or___ThenKeyword_4_0_0_____LeftCurlyBracketKeyword_4_0_1_0_0_RightCurlyBracketKeyword_4_0_1_0_2___ElseKeyword_4_0_1_0_3_0_LeftCurlyBracketKeyword_4_0_1_0_3_1_RightCurlyBracketKeyword_4_0_1_0_3_3__q___or___LeftSquareBracketKeyword_4_0_1_1_0_LeftCurlyBracketKeyword_4_0_1_1_1_RightCurlyBracketKeyword_4_0_1_1_3_CommaKeyword_4_0_1_1_4_LeftCurlyBracketKeyword_4_0_1_1_5_RightCurlyBracketKeyword_4_0_1_1_7_RightSquareBracketKeyword_4_0_1_1_8______.equals(syntax))
				emit_ifType___ExitWithKeyword_4_1_0_LeftCurlyBracketKeyword_4_1_1_RightCurlyBracketKeyword_4_1_3___or___ThenKeyword_4_0_0_____LeftCurlyBracketKeyword_4_0_1_0_0_RightCurlyBracketKeyword_4_0_1_0_2___ElseKeyword_4_0_1_0_3_0_LeftCurlyBracketKeyword_4_0_1_0_3_1_RightCurlyBracketKeyword_4_0_1_0_3_3__q___or___LeftSquareBracketKeyword_4_0_1_1_0_LeftCurlyBracketKeyword_4_0_1_1_1_RightCurlyBracketKeyword_4_0_1_1_3_CommaKeyword_4_0_1_1_4_LeftCurlyBracketKeyword_4_0_1_1_5_RightCurlyBracketKeyword_4_0_1_1_7_RightSquareBracketKeyword_4_0_1_1_8______(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ('default' '{' '}' ';')?
	 *
	 * This ambiguous syntax occurs at:
	 *     caseCode+=Code '}' ';' (ambiguity) '}' (rule end)
	 *     value+=ANYTHING ':' '{' '}' ';' (ambiguity) '}' (rule end)
	 *     var=[Declaration|ID] ')' 'do' '{' (ambiguity) '}' (rule end)
	 */
	protected void emit_SwitchType___DefaultKeyword_7_0_LeftCurlyBracketKeyword_7_1_RightCurlyBracketKeyword_7_3_SemicolonKeyword_7_4__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '+'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) arrayContent=ArrayLiteral
	 */
	protected void emit_VarContent_PlusSignKeyword_3_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('else' '{' '}')?
	 *
	 * This ambiguous syntax occurs at:
	 *     thenCode+=Code '}' (ambiguity) (rule end)
	 */
	protected void emit_ifType___ElseKeyword_4_0_1_0_3_0_LeftCurlyBracketKeyword_4_0_1_0_3_1_RightCurlyBracketKeyword_4_0_1_0_3_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (
	  *         (
	  *             'then' 
	  *             (
	  *                 ('{' '}' ('else' '{' '}')?) | 
	  *                 (
	  *                     '[' 
	  *                     '{' 
	  *                     '}' 
	  *                     ',' 
	  *                     '{' 
	  *                     '}' 
	  *                     ']'
	  *                 )
	  *             )
	  *         ) | 
	  *         ('exitWith' '{' '}')
	  *     )
	 *
	 * This ambiguous syntax occurs at:
	 *     condition=BooleanContent ')' (ambiguity) (rule end)
	 */
	protected void emit_ifType___ExitWithKeyword_4_1_0_LeftCurlyBracketKeyword_4_1_1_RightCurlyBracketKeyword_4_1_3___or___ThenKeyword_4_0_0_____LeftCurlyBracketKeyword_4_0_1_0_0_RightCurlyBracketKeyword_4_0_1_0_2___ElseKeyword_4_0_1_0_3_0_LeftCurlyBracketKeyword_4_0_1_0_3_1_RightCurlyBracketKeyword_4_0_1_0_3_3__q___or___LeftSquareBracketKeyword_4_0_1_1_0_LeftCurlyBracketKeyword_4_0_1_1_1_RightCurlyBracketKeyword_4_0_1_1_3_CommaKeyword_4_0_1_1_4_LeftCurlyBracketKeyword_4_0_1_1_5_RightCurlyBracketKeyword_4_0_1_1_7_RightSquareBracketKeyword_4_0_1_1_8______(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
