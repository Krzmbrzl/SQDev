/*
 * generated by Xtext
 */
grammar InternalSQF;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package raven.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package raven.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import raven.services.SQFGrammarAccess;

}

@parser::members {

 	private SQFGrammarAccess grammarAccess;
 	
    public InternalSQFParser(TokenStream input, SQFGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected SQFGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getElementsCodeParserRuleCall_0()); 
	    }
		lv_elements_0_0=ruleCode		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_0_0, 
        		"Code");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleCode
entryRuleCode returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCodeRule()); }
	 iv_ruleCode=ruleCode 
	 { $current=$iv_ruleCode.current; } 
	 EOF 
;

// Rule Code
ruleCode returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getCodeAccess().getDecDeclarationParserRuleCall_0_0_0()); 
	    }
		lv_dec_0_0=ruleDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCodeRule());
	        }
       		set(
       			$current, 
       			"dec",
        		lv_dec_0_0, 
        		"Declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCodeAccess().getSemicolonKeyword_0_1());
    }
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getCodeAccess().getControlControlStructureParserRuleCall_1_0_0()); 
	    }
		lv_control_2_0=ruleControlStructure		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCodeRule());
	        }
       		set(
       			$current, 
       			"control",
        		lv_control_2_0, 
        		"ControlStructure");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCodeAccess().getSemicolonKeyword_1_1());
    }
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getCodeAccess().getMethodMethodParserRuleCall_2_0_0()); 
	    }
		lv_method_4_0=ruleMethod		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCodeRule());
	        }
       		set(
       			$current, 
       			"method",
        		lv_method_4_0, 
        		"Method");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getCodeAccess().getSemicolonKeyword_2_1());
    }
))
;





// Entry rule entryRuleDeclaration
entryRuleDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclarationRule()); }
	 iv_ruleDeclaration=ruleDeclaration 
	 { $current=$iv_ruleDeclaration.current; } 
	 EOF 
;

// Rule Declaration
ruleDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getDeclarationAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDeclarationAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclarationAccess().getBrConBracketContentParserRuleCall_2_0()); 
	    }
		lv_brCon_2_0=ruleBracketContent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclarationRule());
	        }
       		set(
       			$current, 
       			"brCon",
        		lv_brCon_2_0, 
        		"BracketContent");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleBracketContent
entryRuleBracketContent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBracketContentRule()); }
	 iv_ruleBracketContent=ruleBracketContent 
	 { $current=$iv_ruleBracketContent.current; } 
	 EOF 
;

// Rule BracketContent
ruleBracketContent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getBracketContentAccess().getDecConDecContentParserRuleCall_0_0()); 
	    }
		lv_decCon_0_0=ruleDecContent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBracketContentRule());
	        }
       		set(
       			$current, 
       			"decCon",
        		lv_decCon_0_0, 
        		"DecContent");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		lv_comp_1_0=RULE_COMPARATOR
		{
			newLeafNode(lv_comp_1_0, grammarAccess.getBracketContentAccess().getCompCOMPARATORTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBracketContentRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"comp",
        		lv_comp_1_0, 
        		"COMPARATOR");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBracketContentAccess().getContentDecContentParserRuleCall_1_1_0()); 
	    }
		lv_content_2_0=ruleDecContent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBracketContentRule());
	        }
       		add(
       			$current, 
       			"content",
        		lv_content_2_0, 
        		"DecContent");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleDecContent
entryRuleDecContent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDecContentRule()); }
	 iv_ruleDecContent=ruleDecContent 
	 { $current=$iv_ruleDecContent.current; } 
	 EOF 
;

// Rule DecContent
ruleDecContent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
(
		lv_neg_0_1=	'!' 
    {
        newLeafNode(lv_neg_0_1, grammarAccess.getDecContentAccess().getNegExclamationMarkKeyword_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDecContentRule());
	        }
       		setWithLastConsumed($current, "neg", lv_neg_0_1, null);
	    }

    |		lv_neg_0_2=	'not' 
    {
        newLeafNode(lv_neg_0_2, grammarAccess.getDecContentAccess().getNegNotKeyword_0_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDecContentRule());
	        }
       		setWithLastConsumed($current, "neg", lv_neg_0_2, null);
	    }

)

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getDecContentAccess().getSingleContentVarContentParserRuleCall_1_0()); 
	    }
		lv_singleContent_1_0=ruleVarContent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDecContentRule());
	        }
       		set(
       			$current, 
       			"singleContent",
        		lv_singleContent_1_0, 
        		"VarContent");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getDecContentAccess().getOpOPERATORParserRuleCall_2_0_0()); 
	    }
		lv_op_2_0=ruleOPERATOR		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDecContentRule());
	        }
       		add(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"OPERATOR");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDecContentAccess().getNextConVarContentParserRuleCall_2_1_0()); 
	    }
		lv_nextCon_3_0=ruleVarContent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDecContentRule());
	        }
       		add(
       			$current, 
       			"nextCon",
        		lv_nextCon_3_0, 
        		"VarContent");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleVarContent
entryRuleVarContent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVarContentRule()); }
	 iv_ruleVarContent=ruleVarContent 
	 { $current=$iv_ruleVarContent.current; } 
	 EOF 
;

// Rule VarContent
ruleVarContent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
(
		lv_unOP_0_1=	'+' 
    {
        newLeafNode(lv_unOP_0_1, grammarAccess.getVarContentAccess().getUnOPPlusSignKeyword_0_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVarContentRule());
	        }
       		setWithLastConsumed($current, "unOP", lv_unOP_0_1, null);
	    }

    |		lv_unOP_0_2=	'-' 
    {
        newLeafNode(lv_unOP_0_2, grammarAccess.getVarContentAccess().getUnOPHyphenMinusKeyword_0_0_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVarContentRule());
	        }
       		setWithLastConsumed($current, "unOP", lv_unOP_0_2, null);
	    }

)

)
)?(
(
		lv_num_1_0=RULE_NUMBER
		{
			newLeafNode(lv_num_1_0, grammarAccess.getVarContentAccess().getNumNUMBERTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVarContentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"num",
        		lv_num_1_0, 
        		"NUMBER");
	    }

)
))
    |(
(
		lv_string_2_0=RULE_STRING
		{
			newLeafNode(lv_string_2_0, grammarAccess.getVarContentAccess().getStringSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVarContentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"string",
        		lv_string_2_0, 
        		"STRING");
	    }

)
)
    |((
(
(
		lv_unOP_3_1=	'+' 
    {
        newLeafNode(lv_unOP_3_1, grammarAccess.getVarContentAccess().getUnOPPlusSignKeyword_2_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVarContentRule());
	        }
       		setWithLastConsumed($current, "unOP", lv_unOP_3_1, null);
	    }

    |		lv_unOP_3_2=	'-' 
    {
        newLeafNode(lv_unOP_3_2, grammarAccess.getVarContentAccess().getUnOPHyphenMinusKeyword_2_0_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVarContentRule());
	        }
       		setWithLastConsumed($current, "unOP", lv_unOP_3_2, null);
	    }

)

)
)?((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getVarContentRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getVarContentAccess().getReferenceDeclarationCrossReference_2_1_0_0()); 
	}

)
)
    |(
(
		lv_forEachVar_5_0=	'_x' 
    {
        newLeafNode(lv_forEachVar_5_0, grammarAccess.getVarContentAccess().getForEachVar_xKeyword_2_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVarContentRule());
	        }
       		setWithLastConsumed($current, "forEachVar", lv_forEachVar_5_0, "_x");
	    }

)
))((
(
		lv_sel_6_0=	'select' 
    {
        newLeafNode(lv_sel_6_0, grammarAccess.getVarContentAccess().getSelSelectKeyword_2_2_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVarContentRule());
	        }
       		setWithLastConsumed($current, "sel", lv_sel_6_0, "select");
	    }

)
)(
(
		lv_index_7_0=RULE_NUMBER
		{
			newLeafNode(lv_index_7_0, grammarAccess.getVarContentAccess().getIndexNUMBERTerminalRuleCall_2_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVarContentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"index",
        		lv_index_7_0, 
        		"NUMBER");
	    }

)
))?)
    |((	otherlv_8='+' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getVarContentAccess().getPlusSignKeyword_3_0());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getVarContentAccess().getArrayContentArrayLiteralParserRuleCall_3_1_0()); 
	    }
		lv_arrayContent_9_0=ruleArrayLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarContentRule());
	        }
       		set(
       			$current, 
       			"arrayContent",
        		lv_arrayContent_9_0, 
        		"ArrayLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		lv_execute_10_0=	'call' 
    {
        newLeafNode(lv_execute_10_0, grammarAccess.getVarContentAccess().getExecuteCallKeyword_3_2_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVarContentRule());
	        }
       		setWithLastConsumed($current, "execute", lv_execute_10_0, "call");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getVarContentAccess().getMethodNameMethodNameParserRuleCall_3_2_1_0()); 
	    }
		lv_methodName_11_0=ruleMethodName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarContentRule());
	        }
       		set(
       			$current, 
       			"methodName",
        		lv_methodName_11_0, 
        		"MethodName");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
    |((
(
(
		lv_unOP_12_1=	'+' 
    {
        newLeafNode(lv_unOP_12_1, grammarAccess.getVarContentAccess().getUnOPPlusSignKeyword_4_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVarContentRule());
	        }
       		setWithLastConsumed($current, "unOP", lv_unOP_12_1, null);
	    }

    |		lv_unOP_12_2=	'-' 
    {
        newLeafNode(lv_unOP_12_2, grammarAccess.getVarContentAccess().getUnOPHyphenMinusKeyword_4_0_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVarContentRule());
	        }
       		setWithLastConsumed($current, "unOP", lv_unOP_12_2, null);
	    }

)

)
)?(
(
		lv_embraced_13_0=	'(' 
    {
        newLeafNode(lv_embraced_13_0, grammarAccess.getVarContentAccess().getEmbracedLeftParenthesisKeyword_4_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVarContentRule());
	        }
       		setWithLastConsumed($current, "embraced", lv_embraced_13_0, "(");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getVarContentAccess().getEmbrConBracketContentParserRuleCall_4_2_0()); 
	    }
		lv_embrCon_14_0=ruleBracketContent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarContentRule());
	        }
       		set(
       			$current, 
       			"embrCon",
        		lv_embrCon_14_0, 
        		"BracketContent");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_15=')' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getVarContentAccess().getRightParenthesisKeyword_4_3());
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getVarContentAccess().getBoolBooleanParserRuleCall_5_0()); 
	    }
		lv_bool_16_0=ruleBoolean		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarContentRule());
	        }
       		set(
       			$current, 
       			"bool",
        		lv_bool_16_0, 
        		"Boolean");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
(
		lv_param_17_0=	'_this' 
    {
        newLeafNode(lv_param_17_0, grammarAccess.getVarContentAccess().getParam_thisKeyword_6_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVarContentRule());
	        }
       		setWithLastConsumed($current, "param", lv_param_17_0, "_this");
	    }

)
)(	otherlv_18='select' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getVarContentAccess().getSelectKeyword_6_1_0());
    }
(
(
		lv_index_19_0=RULE_NUMBER
		{
			newLeafNode(lv_index_19_0, grammarAccess.getVarContentAccess().getIndexNUMBERTerminalRuleCall_6_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVarContentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"index",
        		lv_index_19_0, 
        		"NUMBER");
	    }

)
))?))
;





// Entry rule entryRuleArrayLiteral
entryRuleArrayLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrayLiteralRule()); }
	 iv_ruleArrayLiteral=ruleArrayLiteral 
	 { $current=$iv_ruleArrayLiteral.current; } 
	 EOF 
;

// Rule ArrayLiteral
ruleArrayLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_con_0_0=	'[' 
    {
        newLeafNode(lv_con_0_0, grammarAccess.getArrayLiteralAccess().getConLeftSquareBracketKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArrayLiteralRule());
	        }
       		setWithLastConsumed($current, "con", lv_con_0_0, "[");
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getArrayLiteralAccess().getContentVarContentParserRuleCall_1_0_0()); 
	    }
		lv_content_1_0=ruleVarContent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayLiteralRule());
	        }
       		set(
       			$current, 
       			"content",
        		lv_content_1_0, 
        		"VarContent");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getArrayLiteralAccess().getCommaKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayLiteralAccess().getNextContentVarContentParserRuleCall_1_1_1_0()); 
	    }
		lv_nextContent_3_0=ruleVarContent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayLiteralRule());
	        }
       		add(
       			$current, 
       			"nextContent",
        		lv_nextContent_3_0, 
        		"VarContent");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getArrayLiteralAccess().getRightSquareBracketKeyword_2());
    }
)
;





// Entry rule entryRuleControlStructure
entryRuleControlStructure returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getControlStructureRule()); }
	 iv_ruleControlStructure=ruleControlStructure 
	 { $current=$iv_ruleControlStructure.current; } 
	 EOF 
;

// Rule ControlStructure
ruleControlStructure returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getControlStructureAccess().getIfStatIfTypeParserRuleCall_0_0()); 
	    }
		lv_ifStat_0_0=ruleifType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getControlStructureRule());
	        }
       		set(
       			$current, 
       			"ifStat",
        		lv_ifStat_0_0, 
        		"ifType");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getControlStructureAccess().getWhileStatWhileTypeParserRuleCall_1_0()); 
	    }
		lv_whileStat_1_0=ruleWhileType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getControlStructureRule());
	        }
       		set(
       			$current, 
       			"whileStat",
        		lv_whileStat_1_0, 
        		"WhileType");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getControlStructureAccess().getForStatForTypeParserRuleCall_2_0()); 
	    }
		lv_forStat_2_0=ruleForType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getControlStructureRule());
	        }
       		set(
       			$current, 
       			"forStat",
        		lv_forStat_2_0, 
        		"ForType");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getControlStructureAccess().getForEachStatForeachTypeParserRuleCall_3_0()); 
	    }
		lv_forEachStat_3_0=ruleForeachType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getControlStructureRule());
	        }
       		set(
       			$current, 
       			"forEachStat",
        		lv_forEachStat_3_0, 
        		"ForeachType");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getControlStructureAccess().getSwitchStatSwitchTypeParserRuleCall_4_0()); 
	    }
		lv_switchStat_4_0=ruleSwitchType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getControlStructureRule());
	        }
       		set(
       			$current, 
       			"switchStat",
        		lv_switchStat_4_0, 
        		"SwitchType");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleifType
entryRuleifType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfTypeRule()); }
	 iv_ruleifType=ruleifType 
	 { $current=$iv_ruleifType.current; } 
	 EOF 
;

// Rule ifType
ruleifType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='if' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIfTypeAccess().getIfKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIfTypeAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfTypeAccess().getConditionBooleanContentParserRuleCall_2_0()); 
	    }
		lv_condition_2_0=ruleBooleanContent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfTypeRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_2_0, 
        		"BooleanContent");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getIfTypeAccess().getRightParenthesisKeyword_3());
    }
((	otherlv_4='then' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getIfTypeAccess().getThenKeyword_4_0_0());
    }
((	otherlv_5='{' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getIfTypeAccess().getLeftCurlyBracketKeyword_4_0_1_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfTypeAccess().getThenCodeCodeParserRuleCall_4_0_1_0_1_0()); 
	    }
		lv_thenCode_6_0=ruleCode		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfTypeRule());
	        }
       		add(
       			$current, 
       			"thenCode",
        		lv_thenCode_6_0, 
        		"Code");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getIfTypeAccess().getRightCurlyBracketKeyword_4_0_1_0_2());
    }
(	otherlv_8='else' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getIfTypeAccess().getElseKeyword_4_0_1_0_3_0());
    }
	otherlv_9='{' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getIfTypeAccess().getLeftCurlyBracketKeyword_4_0_1_0_3_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfTypeAccess().getElseCodeCodeParserRuleCall_4_0_1_0_3_2_0()); 
	    }
		lv_elseCode_10_0=ruleCode		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfTypeRule());
	        }
       		add(
       			$current, 
       			"elseCode",
        		lv_elseCode_10_0, 
        		"Code");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_11='}' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getIfTypeAccess().getRightCurlyBracketKeyword_4_0_1_0_3_3());
    }
)?)
    |(	otherlv_12='[' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getIfTypeAccess().getLeftSquareBracketKeyword_4_0_1_1_0());
    }
	otherlv_13='{' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getIfTypeAccess().getLeftCurlyBracketKeyword_4_0_1_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfTypeAccess().getThenCodeCodeParserRuleCall_4_0_1_1_2_0()); 
	    }
		lv_thenCode_14_0=ruleCode		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfTypeRule());
	        }
       		add(
       			$current, 
       			"thenCode",
        		lv_thenCode_14_0, 
        		"Code");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_15='}' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getIfTypeAccess().getRightCurlyBracketKeyword_4_0_1_1_3());
    }
	otherlv_16=',' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getIfTypeAccess().getCommaKeyword_4_0_1_1_4());
    }
	otherlv_17='{' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getIfTypeAccess().getLeftCurlyBracketKeyword_4_0_1_1_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfTypeAccess().getElseCodeCodeParserRuleCall_4_0_1_1_6_0()); 
	    }
		lv_elseCode_18_0=ruleCode		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfTypeRule());
	        }
       		add(
       			$current, 
       			"elseCode",
        		lv_elseCode_18_0, 
        		"Code");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_19='}' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getIfTypeAccess().getRightCurlyBracketKeyword_4_0_1_1_7());
    }
	otherlv_20=']' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getIfTypeAccess().getRightSquareBracketKeyword_4_0_1_1_8());
    }
)))
    |(	otherlv_21='exitWith' 
    {
    	newLeafNode(otherlv_21, grammarAccess.getIfTypeAccess().getExitWithKeyword_4_1_0());
    }
	otherlv_22='{' 
    {
    	newLeafNode(otherlv_22, grammarAccess.getIfTypeAccess().getLeftCurlyBracketKeyword_4_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfTypeAccess().getExitCodeCodeParserRuleCall_4_1_2_0()); 
	    }
		lv_exitCode_23_0=ruleCode		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfTypeRule());
	        }
       		add(
       			$current, 
       			"exitCode",
        		lv_exitCode_23_0, 
        		"Code");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_24='}' 
    {
    	newLeafNode(otherlv_24, grammarAccess.getIfTypeAccess().getRightCurlyBracketKeyword_4_1_3());
    }
)))
;





// Entry rule entryRuleWhileType
entryRuleWhileType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWhileTypeRule()); }
	 iv_ruleWhileType=ruleWhileType 
	 { $current=$iv_ruleWhileType.current; } 
	 EOF 
;

// Rule WhileType
ruleWhileType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='while' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getWhileTypeAccess().getWhileKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getWhileTypeAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhileTypeAccess().getConditionBooleanContentParserRuleCall_2_0()); 
	    }
		lv_condition_2_0=ruleBooleanContent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhileTypeRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_2_0, 
        		"BooleanContent");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getWhileTypeAccess().getRightCurlyBracketKeyword_3());
    }
	otherlv_4='do' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getWhileTypeAccess().getDoKeyword_4());
    }
	otherlv_5='{' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getWhileTypeAccess().getLeftCurlyBracketKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhileTypeAccess().getLoopCodeCodeParserRuleCall_6_0()); 
	    }
		lv_loopCode_6_0=ruleCode		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhileTypeRule());
	        }
       		add(
       			$current, 
       			"loopCode",
        		lv_loopCode_6_0, 
        		"Code");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getWhileTypeAccess().getRightCurlyBracketKeyword_7());
    }
)
;





// Entry rule entryRuleForType
entryRuleForType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForTypeRule()); }
	 iv_ruleForType=ruleForType 
	 { $current=$iv_ruleForType.current; } 
	 EOF 
;

// Rule ForType
ruleForType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='for' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getForTypeAccess().getForKeyword_0());
    }
((	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getForTypeAccess().getLeftSquareBracketKeyword_1_0_0());
    }
	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getForTypeAccess().getLeftCurlyBracketKeyword_1_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForTypeAccess().getBeginDeclarationParserRuleCall_1_0_2_0()); 
	    }
		lv_begin_3_0=ruleDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForTypeRule());
	        }
       		set(
       			$current, 
       			"begin",
        		lv_begin_3_0, 
        		"Declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getForTypeAccess().getRightCurlyBracketKeyword_1_0_3());
    }
	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getForTypeAccess().getCommaKeyword_1_0_4());
    }
	otherlv_6='{' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getForTypeAccess().getLeftCurlyBracketKeyword_1_0_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForTypeAccess().getConditionBooleanContentParserRuleCall_1_0_6_0()); 
	    }
		lv_condition_7_0=ruleBooleanContent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForTypeRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_7_0, 
        		"BooleanContent");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getForTypeAccess().getRightCurlyBracketKeyword_1_0_7());
    }
	otherlv_9=',' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getForTypeAccess().getCommaKeyword_1_0_8());
    }
	otherlv_10='{' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getForTypeAccess().getLeftCurlyBracketKeyword_1_0_9());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForTypeAccess().getEndDeclarationParserRuleCall_1_0_10_0()); 
	    }
		lv_end_11_0=ruleDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForTypeRule());
	        }
       		set(
       			$current, 
       			"end",
        		lv_end_11_0, 
        		"Declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_12='}' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getForTypeAccess().getRightCurlyBracketKeyword_1_0_11());
    }
	otherlv_13=']' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getForTypeAccess().getRightSquareBracketKeyword_1_0_12());
    }
)
    |(
    { 
        newCompositeNode(grammarAccess.getForTypeAccess().getForVarDeclarationParserRuleCall_1_1_0()); 
    }
    this_forVarDeclaration_14=ruleforVarDeclaration
    { 
        $current = $this_forVarDeclaration_14.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_15='from' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getForTypeAccess().getFromKeyword_1_1_1());
    }
(
(
		lv_from_16_0=RULE_NUMBER
		{
			newLeafNode(lv_from_16_0, grammarAccess.getForTypeAccess().getFromNUMBERTerminalRuleCall_1_1_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getForTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"from",
        		lv_from_16_0, 
        		"NUMBER");
	    }

)
)	otherlv_17='to' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getForTypeAccess().getToKeyword_1_1_3());
    }
(
(
		lv_to_18_0=RULE_NUMBER
		{
			newLeafNode(lv_to_18_0, grammarAccess.getForTypeAccess().getToNUMBERTerminalRuleCall_1_1_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getForTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"to",
        		lv_to_18_0, 
        		"NUMBER");
	    }

)
)(	otherlv_19='step' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getForTypeAccess().getStepKeyword_1_1_5_0());
    }
(
(
		lv_step_20_0=RULE_NUMBER
		{
			newLeafNode(lv_step_20_0, grammarAccess.getForTypeAccess().getStepNUMBERTerminalRuleCall_1_1_5_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getForTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"step",
        		lv_step_20_0, 
        		"NUMBER");
	    }

)
))?))	otherlv_21='do' 
    {
    	newLeafNode(otherlv_21, grammarAccess.getForTypeAccess().getDoKeyword_2());
    }
	otherlv_22='{' 
    {
    	newLeafNode(otherlv_22, grammarAccess.getForTypeAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForTypeAccess().getLoopCodeCodeParserRuleCall_4_0()); 
	    }
		lv_loopCode_23_0=ruleCode		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForTypeRule());
	        }
       		add(
       			$current, 
       			"loopCode",
        		lv_loopCode_23_0, 
        		"Code");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_24='}' 
    {
    	newLeafNode(otherlv_24, grammarAccess.getForTypeAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleforVarDeclaration
entryRuleforVarDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForVarDeclarationRule()); }
	 iv_ruleforVarDeclaration=ruleforVarDeclaration 
	 { $current=$iv_ruleforVarDeclaration.current; } 
	 EOF 
;

// Rule forVarDeclaration
ruleforVarDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_STRING
		{
			newLeafNode(lv_name_0_0, grammarAccess.getForVarDeclarationAccess().getNameSTRINGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getForVarDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"STRING");
	    }

)
)
;





// Entry rule entryRuleForeachType
entryRuleForeachType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForeachTypeRule()); }
	 iv_ruleForeachType=ruleForeachType 
	 { $current=$iv_ruleForeachType.current; } 
	 EOF 
;

// Rule ForeachType
ruleForeachType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getForeachTypeAccess().getLeftCurlyBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForeachTypeAccess().getCodeCodeParserRuleCall_1_0()); 
	    }
		lv_code_1_0=ruleCode		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForeachTypeRule());
	        }
       		add(
       			$current, 
       			"code",
        		lv_code_1_0, 
        		"Code");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_2='}' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getForeachTypeAccess().getRightCurlyBracketKeyword_2());
    }
	otherlv_3='forEach' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getForeachTypeAccess().getForEachKeyword_3());
    }
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getForeachTypeRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getForeachTypeAccess().getArrayDeclarationCrossReference_4_0_0()); 
	}

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getForeachTypeAccess().getArrayLiteralArrayLiteralParserRuleCall_4_1_0()); 
	    }
		lv_arrayLiteral_5_0=ruleArrayLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForeachTypeRule());
	        }
       		set(
       			$current, 
       			"arrayLiteral",
        		lv_arrayLiteral_5_0, 
        		"ArrayLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleSwitchType
entryRuleSwitchType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSwitchTypeRule()); }
	 iv_ruleSwitchType=ruleSwitchType 
	 { $current=$iv_ruleSwitchType.current; } 
	 EOF 
;

// Rule SwitchType
ruleSwitchType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='switch' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSwitchTypeAccess().getSwitchKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSwitchTypeAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSwitchTypeRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getSwitchTypeAccess().getVarDeclarationCrossReference_2_0()); 
	}

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSwitchTypeAccess().getRightParenthesisKeyword_3());
    }
	otherlv_4='do' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSwitchTypeAccess().getDoKeyword_4());
    }
	otherlv_5='{' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSwitchTypeAccess().getLeftCurlyBracketKeyword_5());
    }
(	otherlv_6='case' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSwitchTypeAccess().getCaseKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchTypeAccess().getValueANYTHINGParserRuleCall_6_1_0()); 
	    }
		lv_value_7_0=ruleANYTHING		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchTypeRule());
	        }
       		add(
       			$current, 
       			"value",
        		lv_value_7_0, 
        		"ANYTHING");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_8=':' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getSwitchTypeAccess().getColonKeyword_6_2());
    }
	otherlv_9='{' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getSwitchTypeAccess().getLeftCurlyBracketKeyword_6_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchTypeAccess().getCaseCodeCodeParserRuleCall_6_4_0()); 
	    }
		lv_caseCode_10_0=ruleCode		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchTypeRule());
	        }
       		add(
       			$current, 
       			"caseCode",
        		lv_caseCode_10_0, 
        		"Code");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_11='}' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getSwitchTypeAccess().getRightCurlyBracketKeyword_6_5());
    }
	otherlv_12=';' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getSwitchTypeAccess().getSemicolonKeyword_6_6());
    }
)*(	otherlv_13='default' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getSwitchTypeAccess().getDefaultKeyword_7_0());
    }
	otherlv_14='{' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getSwitchTypeAccess().getLeftCurlyBracketKeyword_7_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchTypeAccess().getDefaultCodeCodeParserRuleCall_7_2_0()); 
	    }
		lv_defaultCode_15_0=ruleCode		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchTypeRule());
	        }
       		add(
       			$current, 
       			"defaultCode",
        		lv_defaultCode_15_0, 
        		"Code");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_16='}' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getSwitchTypeAccess().getRightCurlyBracketKeyword_7_3());
    }
	otherlv_17=';' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getSwitchTypeAccess().getSemicolonKeyword_7_4());
    }
)?	otherlv_18='}' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getSwitchTypeAccess().getRightCurlyBracketKeyword_8());
    }
)
;





// Entry rule entryRuleMethod
entryRuleMethod returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMethodRule()); }
	 iv_ruleMethod=ruleMethod 
	 { $current=$iv_ruleMethod.current; } 
	 EOF 
;

// Rule Method
ruleMethod returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMethodAccess().getParamsArrayLiteralParserRuleCall_0_0()); 
	    }
		lv_params_0_0=ruleArrayLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodRule());
	        }
       		set(
       			$current, 
       			"params",
        		lv_params_0_0, 
        		"ArrayLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_execute_1_0=	'spawn' 
    {
        newLeafNode(lv_execute_1_0, grammarAccess.getMethodAccess().getExecuteSpawnKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMethodRule());
	        }
       		setWithLastConsumed($current, "execute", lv_execute_1_0, "spawn");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodAccess().getMethodNameMethodNameParserRuleCall_2_0()); 
	    }
		lv_methodName_2_0=ruleMethodName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodRule());
	        }
       		set(
       			$current, 
       			"methodName",
        		lv_methodName_2_0, 
        		"MethodName");
	        afterParserOrEnumRuleCall();
	    }

)
))
;







// Entry rule entryRuleOPERATOR
entryRuleOPERATOR returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOPERATORRule()); } 
	 iv_ruleOPERATOR=ruleOPERATOR 
	 { $current=$iv_ruleOPERATOR.current.getText(); }  
	 EOF 
;

// Rule OPERATOR
ruleOPERATOR returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOPERATORAccess().getPlusSignKeyword_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOPERATORAccess().getHyphenMinusKeyword_1()); 
    }

    |
	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOPERATORAccess().getAsteriskKeyword_2()); 
    }

    |
	kw='/' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOPERATORAccess().getSolidusKeyword_3()); 
    }

    |
	kw='mod' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOPERATORAccess().getModKeyword_4()); 
    }

    |
	kw='^' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOPERATORAccess().getCircumflexAccentKeyword_5()); 
    }
)
    ;







// Entry rule entryRuleANYTHING
entryRuleANYTHING returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getANYTHINGRule()); }
	 iv_ruleANYTHING=ruleANYTHING 
	 { $current=$iv_ruleANYTHING.current; } 
	 EOF 
;

// Rule ANYTHING
ruleANYTHING returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getANYTHINGAccess().getBoolBooleanParserRuleCall_0_0()); 
	    }
		lv_bool_0_0=ruleBoolean		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getANYTHINGRule());
	        }
       		set(
       			$current, 
       			"bool",
        		lv_bool_0_0, 
        		"Boolean");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		lv_num_1_0=RULE_NUMBER
		{
			newLeafNode(lv_num_1_0, grammarAccess.getANYTHINGAccess().getNumNUMBERTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getANYTHINGRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"num",
        		lv_num_1_0, 
        		"NUMBER");
	    }

)
)
    |(
(
		lv_string_2_0=RULE_STRING
		{
			newLeafNode(lv_string_2_0, grammarAccess.getANYTHINGAccess().getStringSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getANYTHINGRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"string",
        		lv_string_2_0, 
        		"STRING");
	    }

)
)
    |(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getANYTHINGRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getANYTHINGAccess().getReferenceDeclarationCrossReference_3_0()); 
	}

)
))
;





// Entry rule entryRuleBoolean
entryRuleBoolean returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanRule()); }
	 iv_ruleBoolean=ruleBoolean 
	 { $current=$iv_ruleBoolean.current; } 
	 EOF 
;

// Rule Boolean
ruleBoolean returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
(
		lv_bool_0_1=	'true' 
    {
        newLeafNode(lv_bool_0_1, grammarAccess.getBooleanAccess().getBoolTrueKeyword_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanRule());
	        }
       		setWithLastConsumed($current, "bool", lv_bool_0_1, null);
	    }

    |		lv_bool_0_2=	'false' 
    {
        newLeafNode(lv_bool_0_2, grammarAccess.getBooleanAccess().getBoolFalseKeyword_0_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanRule());
	        }
       		setWithLastConsumed($current, "bool", lv_bool_0_2, null);
	    }

)

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getBooleanAccess().getCommandBoolCommandParserRuleCall_1_0()); 
	    }
		lv_command_1_0=ruleBoolCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBooleanRule());
	        }
       		set(
       			$current, 
       			"command",
        		lv_command_1_0, 
        		"BoolCommand");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleBooleanContent
entryRuleBooleanContent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanContentRule()); }
	 iv_ruleBooleanContent=ruleBooleanContent 
	 { $current=$iv_ruleBooleanContent.current; } 
	 EOF 
;

// Rule BooleanContent
ruleBooleanContent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getBooleanContentAccess().getBoolConBracketContentParserRuleCall_0()); 
	    }
		lv_boolCon_0_0=ruleBracketContent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBooleanContentRule());
	        }
       		set(
       			$current, 
       			"boolCon",
        		lv_boolCon_0_0, 
        		"BracketContent");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleMethodName
entryRuleMethodName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMethodNameRule()); }
	 iv_ruleMethodName=ruleMethodName 
	 { $current=$iv_ruleMethodName.current; } 
	 EOF 
;

// Rule MethodName
ruleMethodName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMethodNameRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getMethodNameAccess().getRefDeclarationCrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleBoolCommand
entryRuleBoolCommand returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBoolCommandRule()); } 
	 iv_ruleBoolCommand=ruleBoolCommand 
	 { $current=$iv_ruleBoolCommand.current.getText(); }  
	 EOF 
;

// Rule BoolCommand
ruleBoolCommand returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='isServer' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBoolCommandAccess().getIsServerKeyword_0()); 
    }

    |
	kw='isPlayer' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBoolCommandAccess().getIsPlayerKeyword_1()); 
    }
)
    ;





RULE_COMPARATOR : ('=='|'<'|'>'|'<='|'>='|'!='|'isEqualTo');

RULE_NUMBER : ('0'..'9')+ ('.' ('0'..'9')+)?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;


