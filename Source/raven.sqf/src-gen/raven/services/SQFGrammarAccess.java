/*
 * generated by Xtext
 */
package raven.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class SQFGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsCodeParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Model:
		//	elements+=Code*;
		@Override public ParserRule getRule() { return rule; }

		//elements+=Code*
		public Assignment getElementsAssignment() { return cElementsAssignment; }

		//Code
		public RuleCall getElementsCodeParserRuleCall_0() { return cElementsCodeParserRuleCall_0; }
	}

	public class CodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Code");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cDecAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cDecDeclarationParserRuleCall_0_0_0 = (RuleCall)cDecAssignment_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cControlAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cControlControlStructureParserRuleCall_1_0_0 = (RuleCall)cControlAssignment_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cMethodAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cMethodMethodParserRuleCall_2_0_0 = (RuleCall)cMethodAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//Code:
		//	dec=Declaration ";" | control=ControlStructure ";" | method=Method ";";
		@Override public ParserRule getRule() { return rule; }

		//dec=Declaration ";" | control=ControlStructure ";" | method=Method ";"
		public Alternatives getAlternatives() { return cAlternatives; }

		//dec=Declaration ";"
		public Group getGroup_0() { return cGroup_0; }

		//dec=Declaration
		public Assignment getDecAssignment_0_0() { return cDecAssignment_0_0; }

		//Declaration
		public RuleCall getDecDeclarationParserRuleCall_0_0_0() { return cDecDeclarationParserRuleCall_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_0_1() { return cSemicolonKeyword_0_1; }

		//control=ControlStructure ";"
		public Group getGroup_1() { return cGroup_1; }

		//control=ControlStructure
		public Assignment getControlAssignment_1_0() { return cControlAssignment_1_0; }

		//ControlStructure
		public RuleCall getControlControlStructureParserRuleCall_1_0_0() { return cControlControlStructureParserRuleCall_1_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }

		//method=Method ";"
		public Group getGroup_2() { return cGroup_2; }

		//method=Method
		public Assignment getMethodAssignment_2_0() { return cMethodAssignment_2_0; }

		//Method
		public RuleCall getMethodMethodParserRuleCall_2_0_0() { return cMethodMethodParserRuleCall_2_0_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
	}

	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBrConAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBrConBracketContentParserRuleCall_2_0 = (RuleCall)cBrConAssignment_2.eContents().get(0);
		
		//Declaration:
		//	name=ID "=" brCon=BracketContent;
		@Override public ParserRule getRule() { return rule; }

		//name=ID "=" brCon=BracketContent
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//brCon=BracketContent
		public Assignment getBrConAssignment_2() { return cBrConAssignment_2; }

		//BracketContent
		public RuleCall getBrConBracketContentParserRuleCall_2_0() { return cBrConBracketContentParserRuleCall_2_0; }
	}

	public class BracketContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BracketContent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDecConAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDecConDecContentParserRuleCall_0_0 = (RuleCall)cDecConAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cCompAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cCompCOMPARATORTerminalRuleCall_1_0_0 = (RuleCall)cCompAssignment_1_0.eContents().get(0);
		private final Assignment cContentAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cContentDecContentParserRuleCall_1_1_0 = (RuleCall)cContentAssignment_1_1.eContents().get(0);
		
		//BracketContent:
		//	decCon=DecContent (comp+=COMPARATOR content+=DecContent)*;
		@Override public ParserRule getRule() { return rule; }

		//decCon=DecContent (comp+=COMPARATOR content+=DecContent)*
		public Group getGroup() { return cGroup; }

		//decCon=DecContent
		public Assignment getDecConAssignment_0() { return cDecConAssignment_0; }

		//DecContent
		public RuleCall getDecConDecContentParserRuleCall_0_0() { return cDecConDecContentParserRuleCall_0_0; }

		//(comp+=COMPARATOR content+=DecContent)*
		public Group getGroup_1() { return cGroup_1; }

		//comp+=COMPARATOR
		public Assignment getCompAssignment_1_0() { return cCompAssignment_1_0; }

		//COMPARATOR
		public RuleCall getCompCOMPARATORTerminalRuleCall_1_0_0() { return cCompCOMPARATORTerminalRuleCall_1_0_0; }

		//content+=DecContent
		public Assignment getContentAssignment_1_1() { return cContentAssignment_1_1; }

		//DecContent
		public RuleCall getContentDecContentParserRuleCall_1_1_0() { return cContentDecContentParserRuleCall_1_1_0; }
	}

	public class DecContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DecContent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNegAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cNegAlternatives_0_0 = (Alternatives)cNegAssignment_0.eContents().get(0);
		private final Keyword cNegExclamationMarkKeyword_0_0_0 = (Keyword)cNegAlternatives_0_0.eContents().get(0);
		private final Keyword cNegNotKeyword_0_0_1 = (Keyword)cNegAlternatives_0_0.eContents().get(1);
		private final Assignment cSingleContentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSingleContentVarContentParserRuleCall_1_0 = (RuleCall)cSingleContentAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cOpAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cOpOPERATORParserRuleCall_2_0_0 = (RuleCall)cOpAssignment_2_0.eContents().get(0);
		private final Assignment cNextConAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNextConVarContentParserRuleCall_2_1_0 = (RuleCall)cNextConAssignment_2_1.eContents().get(0);
		
		//DecContent:
		//	neg=("!" | "not")? singleContent=VarContent (op+=OPERATOR nextCon+=VarContent)*;
		@Override public ParserRule getRule() { return rule; }

		//neg=("!" | "not")? singleContent=VarContent (op+=OPERATOR nextCon+=VarContent)*
		public Group getGroup() { return cGroup; }

		//neg=("!" | "not")?
		public Assignment getNegAssignment_0() { return cNegAssignment_0; }

		//"!" | "not"
		public Alternatives getNegAlternatives_0_0() { return cNegAlternatives_0_0; }

		//"!"
		public Keyword getNegExclamationMarkKeyword_0_0_0() { return cNegExclamationMarkKeyword_0_0_0; }

		//"not"
		public Keyword getNegNotKeyword_0_0_1() { return cNegNotKeyword_0_0_1; }

		//singleContent=VarContent
		public Assignment getSingleContentAssignment_1() { return cSingleContentAssignment_1; }

		//VarContent
		public RuleCall getSingleContentVarContentParserRuleCall_1_0() { return cSingleContentVarContentParserRuleCall_1_0; }

		//(op+=OPERATOR nextCon+=VarContent)*
		public Group getGroup_2() { return cGroup_2; }

		//op+=OPERATOR
		public Assignment getOpAssignment_2_0() { return cOpAssignment_2_0; }

		//OPERATOR
		public RuleCall getOpOPERATORParserRuleCall_2_0_0() { return cOpOPERATORParserRuleCall_2_0_0; }

		//nextCon+=VarContent
		public Assignment getNextConAssignment_2_1() { return cNextConAssignment_2_1; }

		//VarContent
		public RuleCall getNextConVarContentParserRuleCall_2_1_0() { return cNextConVarContentParserRuleCall_2_1_0; }
	}

	public class VarContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VarContent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cUnOPAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Alternatives cUnOPAlternatives_0_0_0 = (Alternatives)cUnOPAssignment_0_0.eContents().get(0);
		private final Keyword cUnOPPlusSignKeyword_0_0_0_0 = (Keyword)cUnOPAlternatives_0_0_0.eContents().get(0);
		private final Keyword cUnOPHyphenMinusKeyword_0_0_0_1 = (Keyword)cUnOPAlternatives_0_0_0.eContents().get(1);
		private final Assignment cNumAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNumNUMBERTerminalRuleCall_0_1_0 = (RuleCall)cNumAssignment_0_1.eContents().get(0);
		private final Assignment cStringAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cStringSTRINGTerminalRuleCall_1_0 = (RuleCall)cStringAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cUnOPAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Alternatives cUnOPAlternatives_2_0_0 = (Alternatives)cUnOPAssignment_2_0.eContents().get(0);
		private final Keyword cUnOPPlusSignKeyword_2_0_0_0 = (Keyword)cUnOPAlternatives_2_0_0.eContents().get(0);
		private final Keyword cUnOPHyphenMinusKeyword_2_0_0_1 = (Keyword)cUnOPAlternatives_2_0_0.eContents().get(1);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Assignment cReferenceAssignment_2_1_0 = (Assignment)cAlternatives_2_1.eContents().get(0);
		private final CrossReference cReferenceDeclarationCrossReference_2_1_0_0 = (CrossReference)cReferenceAssignment_2_1_0.eContents().get(0);
		private final RuleCall cReferenceDeclarationIDTerminalRuleCall_2_1_0_0_1 = (RuleCall)cReferenceDeclarationCrossReference_2_1_0_0.eContents().get(1);
		private final Assignment cForEachVarAssignment_2_1_1 = (Assignment)cAlternatives_2_1.eContents().get(1);
		private final Keyword cForEachVar_xKeyword_2_1_1_0 = (Keyword)cForEachVarAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Assignment cSelAssignment_2_2_0 = (Assignment)cGroup_2_2.eContents().get(0);
		private final Keyword cSelSelectKeyword_2_2_0_0 = (Keyword)cSelAssignment_2_2_0.eContents().get(0);
		private final Assignment cIndexAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cIndexNUMBERTerminalRuleCall_2_2_1_0 = (RuleCall)cIndexAssignment_2_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cPlusSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cArrayContentAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cArrayContentArrayLiteralParserRuleCall_3_1_0 = (RuleCall)cArrayContentAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Assignment cExecuteAssignment_3_2_0 = (Assignment)cGroup_3_2.eContents().get(0);
		private final Keyword cExecuteCallKeyword_3_2_0_0 = (Keyword)cExecuteAssignment_3_2_0.eContents().get(0);
		private final Assignment cMethodNameAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cMethodNameMethodNameParserRuleCall_3_2_1_0 = (RuleCall)cMethodNameAssignment_3_2_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cUnOPAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Alternatives cUnOPAlternatives_4_0_0 = (Alternatives)cUnOPAssignment_4_0.eContents().get(0);
		private final Keyword cUnOPPlusSignKeyword_4_0_0_0 = (Keyword)cUnOPAlternatives_4_0_0.eContents().get(0);
		private final Keyword cUnOPHyphenMinusKeyword_4_0_0_1 = (Keyword)cUnOPAlternatives_4_0_0.eContents().get(1);
		private final Assignment cEmbracedAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final Keyword cEmbracedLeftParenthesisKeyword_4_1_0 = (Keyword)cEmbracedAssignment_4_1.eContents().get(0);
		private final Assignment cEmbrConAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cEmbrConBracketContentParserRuleCall_4_2_0 = (RuleCall)cEmbrConAssignment_4_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Assignment cBoolAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cBoolBooleanParserRuleCall_5_0 = (RuleCall)cBoolAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Assignment cParamAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final Keyword cParam_thisKeyword_6_0_0 = (Keyword)cParamAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cSelectKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cIndexAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cIndexNUMBERTerminalRuleCall_6_1_1_0 = (RuleCall)cIndexAssignment_6_1_1.eContents().get(0);
		
		////TODO	| method = Method
		//VarContent:
		//	unOP=("+" | "-")? num=NUMBER | string=STRING | unOP=("+" | "-")? (reference=[Declaration] | forEachVar="_x")
		//	(sel="select" index=NUMBER)? //TODO: Implement objects
		//	| "+"? arrayContent=ArrayLiteral (execute="call" methodName=MethodName)? | unOP=("+" | "-")? embraced="("
		//	embrCon=BracketContent ")" | bool=Boolean | param="_this" ("select" index=NUMBER)?;
		@Override public ParserRule getRule() { return rule; }

		//unOP=("+" | "-")? num=NUMBER | string=STRING | unOP=("+" | "-")? (reference=[Declaration] | forEachVar="_x")
		//(sel="select" index=NUMBER)? //TODO: Implement objects
		//| "+"? arrayContent=ArrayLiteral (execute="call" methodName=MethodName)? | unOP=("+" | "-")? embraced="("
		//embrCon=BracketContent ")" | bool=Boolean | param="_this" ("select" index=NUMBER)?
		public Alternatives getAlternatives() { return cAlternatives; }

		//unOP=("+" | "-")? num=NUMBER
		public Group getGroup_0() { return cGroup_0; }

		//unOP=("+" | "-")?
		public Assignment getUnOPAssignment_0_0() { return cUnOPAssignment_0_0; }

		//"+" | "-"
		public Alternatives getUnOPAlternatives_0_0_0() { return cUnOPAlternatives_0_0_0; }

		//"+"
		public Keyword getUnOPPlusSignKeyword_0_0_0_0() { return cUnOPPlusSignKeyword_0_0_0_0; }

		//"-"
		public Keyword getUnOPHyphenMinusKeyword_0_0_0_1() { return cUnOPHyphenMinusKeyword_0_0_0_1; }

		//num=NUMBER
		public Assignment getNumAssignment_0_1() { return cNumAssignment_0_1; }

		//NUMBER
		public RuleCall getNumNUMBERTerminalRuleCall_0_1_0() { return cNumNUMBERTerminalRuleCall_0_1_0; }

		//string=STRING
		public Assignment getStringAssignment_1() { return cStringAssignment_1; }

		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_1_0() { return cStringSTRINGTerminalRuleCall_1_0; }

		//unOP=("+" | "-")? (reference=[Declaration] | forEachVar="_x") (sel="select" index=NUMBER)? //TODO: Implement objects
		public Group getGroup_2() { return cGroup_2; }

		//unOP=("+" | "-")?
		public Assignment getUnOPAssignment_2_0() { return cUnOPAssignment_2_0; }

		//"+" | "-"
		public Alternatives getUnOPAlternatives_2_0_0() { return cUnOPAlternatives_2_0_0; }

		//"+"
		public Keyword getUnOPPlusSignKeyword_2_0_0_0() { return cUnOPPlusSignKeyword_2_0_0_0; }

		//"-"
		public Keyword getUnOPHyphenMinusKeyword_2_0_0_1() { return cUnOPHyphenMinusKeyword_2_0_0_1; }

		//reference=[Declaration] | forEachVar="_x"
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }

		//reference=[Declaration]
		public Assignment getReferenceAssignment_2_1_0() { return cReferenceAssignment_2_1_0; }

		//[Declaration]
		public CrossReference getReferenceDeclarationCrossReference_2_1_0_0() { return cReferenceDeclarationCrossReference_2_1_0_0; }

		//ID
		public RuleCall getReferenceDeclarationIDTerminalRuleCall_2_1_0_0_1() { return cReferenceDeclarationIDTerminalRuleCall_2_1_0_0_1; }

		//forEachVar="_x"
		public Assignment getForEachVarAssignment_2_1_1() { return cForEachVarAssignment_2_1_1; }

		//"_x"
		public Keyword getForEachVar_xKeyword_2_1_1_0() { return cForEachVar_xKeyword_2_1_1_0; }

		//(sel="select" index=NUMBER)?
		public Group getGroup_2_2() { return cGroup_2_2; }

		//sel="select"
		public Assignment getSelAssignment_2_2_0() { return cSelAssignment_2_2_0; }

		//"select"
		public Keyword getSelSelectKeyword_2_2_0_0() { return cSelSelectKeyword_2_2_0_0; }

		//index=NUMBER
		public Assignment getIndexAssignment_2_2_1() { return cIndexAssignment_2_2_1; }

		//NUMBER
		public RuleCall getIndexNUMBERTerminalRuleCall_2_2_1_0() { return cIndexNUMBERTerminalRuleCall_2_2_1_0; }

		//"+"? arrayContent=ArrayLiteral (execute="call" methodName=MethodName)?
		public Group getGroup_3() { return cGroup_3; }

		//"+"?
		public Keyword getPlusSignKeyword_3_0() { return cPlusSignKeyword_3_0; }

		//arrayContent=ArrayLiteral
		public Assignment getArrayContentAssignment_3_1() { return cArrayContentAssignment_3_1; }

		//ArrayLiteral
		public RuleCall getArrayContentArrayLiteralParserRuleCall_3_1_0() { return cArrayContentArrayLiteralParserRuleCall_3_1_0; }

		//(execute="call" methodName=MethodName)?
		public Group getGroup_3_2() { return cGroup_3_2; }

		//execute="call"
		public Assignment getExecuteAssignment_3_2_0() { return cExecuteAssignment_3_2_0; }

		//"call"
		public Keyword getExecuteCallKeyword_3_2_0_0() { return cExecuteCallKeyword_3_2_0_0; }

		//methodName=MethodName
		public Assignment getMethodNameAssignment_3_2_1() { return cMethodNameAssignment_3_2_1; }

		//MethodName
		public RuleCall getMethodNameMethodNameParserRuleCall_3_2_1_0() { return cMethodNameMethodNameParserRuleCall_3_2_1_0; }

		//unOP=("+" | "-")? embraced="(" embrCon=BracketContent ")"
		public Group getGroup_4() { return cGroup_4; }

		//unOP=("+" | "-")?
		public Assignment getUnOPAssignment_4_0() { return cUnOPAssignment_4_0; }

		//"+" | "-"
		public Alternatives getUnOPAlternatives_4_0_0() { return cUnOPAlternatives_4_0_0; }

		//"+"
		public Keyword getUnOPPlusSignKeyword_4_0_0_0() { return cUnOPPlusSignKeyword_4_0_0_0; }

		//"-"
		public Keyword getUnOPHyphenMinusKeyword_4_0_0_1() { return cUnOPHyphenMinusKeyword_4_0_0_1; }

		//embraced="("
		public Assignment getEmbracedAssignment_4_1() { return cEmbracedAssignment_4_1; }

		//"("
		public Keyword getEmbracedLeftParenthesisKeyword_4_1_0() { return cEmbracedLeftParenthesisKeyword_4_1_0; }

		//embrCon=BracketContent
		public Assignment getEmbrConAssignment_4_2() { return cEmbrConAssignment_4_2; }

		//BracketContent
		public RuleCall getEmbrConBracketContentParserRuleCall_4_2_0() { return cEmbrConBracketContentParserRuleCall_4_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_3() { return cRightParenthesisKeyword_4_3; }

		//bool=Boolean
		public Assignment getBoolAssignment_5() { return cBoolAssignment_5; }

		//Boolean
		public RuleCall getBoolBooleanParserRuleCall_5_0() { return cBoolBooleanParserRuleCall_5_0; }

		//param="_this" ("select" index=NUMBER)?
		public Group getGroup_6() { return cGroup_6; }

		//param="_this"
		public Assignment getParamAssignment_6_0() { return cParamAssignment_6_0; }

		//"_this"
		public Keyword getParam_thisKeyword_6_0_0() { return cParam_thisKeyword_6_0_0; }

		//("select" index=NUMBER)?
		public Group getGroup_6_1() { return cGroup_6_1; }

		//"select"
		public Keyword getSelectKeyword_6_1_0() { return cSelectKeyword_6_1_0; }

		//index=NUMBER
		public Assignment getIndexAssignment_6_1_1() { return cIndexAssignment_6_1_1; }

		//NUMBER
		public RuleCall getIndexNUMBERTerminalRuleCall_6_1_1_0() { return cIndexNUMBERTerminalRuleCall_6_1_1_0; }
	}

	public class ArrayLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArrayLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cConLeftSquareBracketKeyword_0_0 = (Keyword)cConAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cContentAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cContentVarContentParserRuleCall_1_0_0 = (RuleCall)cContentAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cNextContentAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cNextContentVarContentParserRuleCall_1_1_1_0 = (RuleCall)cNextContentAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ArrayLiteral:
		//	con="[" (content=VarContent ("," nextContent+=VarContent)*)? "]";
		@Override public ParserRule getRule() { return rule; }

		//con="[" (content=VarContent ("," nextContent+=VarContent)*)? "]"
		public Group getGroup() { return cGroup; }

		//con="["
		public Assignment getConAssignment_0() { return cConAssignment_0; }

		//"["
		public Keyword getConLeftSquareBracketKeyword_0_0() { return cConLeftSquareBracketKeyword_0_0; }

		//(content=VarContent ("," nextContent+=VarContent)*)?
		public Group getGroup_1() { return cGroup_1; }

		//content=VarContent
		public Assignment getContentAssignment_1_0() { return cContentAssignment_1_0; }

		//VarContent
		public RuleCall getContentVarContentParserRuleCall_1_0_0() { return cContentVarContentParserRuleCall_1_0_0; }

		//("," nextContent+=VarContent)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//nextContent+=VarContent
		public Assignment getNextContentAssignment_1_1_1() { return cNextContentAssignment_1_1_1; }

		//VarContent
		public RuleCall getNextContentVarContentParserRuleCall_1_1_1_0() { return cNextContentVarContentParserRuleCall_1_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}

	public class ControlStructureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ControlStructure");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cIfStatAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cIfStatIfTypeParserRuleCall_0_0 = (RuleCall)cIfStatAssignment_0.eContents().get(0);
		private final Assignment cWhileStatAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cWhileStatWhileTypeParserRuleCall_1_0 = (RuleCall)cWhileStatAssignment_1.eContents().get(0);
		private final Assignment cForStatAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cForStatForTypeParserRuleCall_2_0 = (RuleCall)cForStatAssignment_2.eContents().get(0);
		private final Assignment cForEachStatAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cForEachStatForeachTypeParserRuleCall_3_0 = (RuleCall)cForEachStatAssignment_3.eContents().get(0);
		private final Assignment cSwitchStatAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cSwitchStatSwitchTypeParserRuleCall_4_0 = (RuleCall)cSwitchStatAssignment_4.eContents().get(0);
		
		//ControlStructure:
		//	ifStat=ifType | whileStat=WhileType | forStat=ForType | forEachStat=ForeachType | switchStat=SwitchType;
		@Override public ParserRule getRule() { return rule; }

		//ifStat=ifType | whileStat=WhileType | forStat=ForType | forEachStat=ForeachType | switchStat=SwitchType
		public Alternatives getAlternatives() { return cAlternatives; }

		//ifStat=ifType
		public Assignment getIfStatAssignment_0() { return cIfStatAssignment_0; }

		//ifType
		public RuleCall getIfStatIfTypeParserRuleCall_0_0() { return cIfStatIfTypeParserRuleCall_0_0; }

		//whileStat=WhileType
		public Assignment getWhileStatAssignment_1() { return cWhileStatAssignment_1; }

		//WhileType
		public RuleCall getWhileStatWhileTypeParserRuleCall_1_0() { return cWhileStatWhileTypeParserRuleCall_1_0; }

		//forStat=ForType
		public Assignment getForStatAssignment_2() { return cForStatAssignment_2; }

		//ForType
		public RuleCall getForStatForTypeParserRuleCall_2_0() { return cForStatForTypeParserRuleCall_2_0; }

		//forEachStat=ForeachType
		public Assignment getForEachStatAssignment_3() { return cForEachStatAssignment_3; }

		//ForeachType
		public RuleCall getForEachStatForeachTypeParserRuleCall_3_0() { return cForEachStatForeachTypeParserRuleCall_3_0; }

		//switchStat=SwitchType
		public Assignment getSwitchStatAssignment_4() { return cSwitchStatAssignment_4; }

		//SwitchType
		public RuleCall getSwitchStatSwitchTypeParserRuleCall_4_0() { return cSwitchStatSwitchTypeParserRuleCall_4_0; }
	}

	public class IfTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ifType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionBooleanContentParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Keyword cThenKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Alternatives cAlternatives_4_0_1 = (Alternatives)cGroup_4_0.eContents().get(1);
		private final Group cGroup_4_0_1_0 = (Group)cAlternatives_4_0_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_0_1_0_0 = (Keyword)cGroup_4_0_1_0.eContents().get(0);
		private final Assignment cThenCodeAssignment_4_0_1_0_1 = (Assignment)cGroup_4_0_1_0.eContents().get(1);
		private final RuleCall cThenCodeCodeParserRuleCall_4_0_1_0_1_0 = (RuleCall)cThenCodeAssignment_4_0_1_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_0_1_0_2 = (Keyword)cGroup_4_0_1_0.eContents().get(2);
		private final Group cGroup_4_0_1_0_3 = (Group)cGroup_4_0_1_0.eContents().get(3);
		private final Keyword cElseKeyword_4_0_1_0_3_0 = (Keyword)cGroup_4_0_1_0_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_0_1_0_3_1 = (Keyword)cGroup_4_0_1_0_3.eContents().get(1);
		private final Assignment cElseCodeAssignment_4_0_1_0_3_2 = (Assignment)cGroup_4_0_1_0_3.eContents().get(2);
		private final RuleCall cElseCodeCodeParserRuleCall_4_0_1_0_3_2_0 = (RuleCall)cElseCodeAssignment_4_0_1_0_3_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_0_1_0_3_3 = (Keyword)cGroup_4_0_1_0_3.eContents().get(3);
		private final Group cGroup_4_0_1_1 = (Group)cAlternatives_4_0_1.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_4_0_1_1_0 = (Keyword)cGroup_4_0_1_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_0_1_1_1 = (Keyword)cGroup_4_0_1_1.eContents().get(1);
		private final Assignment cThenCodeAssignment_4_0_1_1_2 = (Assignment)cGroup_4_0_1_1.eContents().get(2);
		private final RuleCall cThenCodeCodeParserRuleCall_4_0_1_1_2_0 = (RuleCall)cThenCodeAssignment_4_0_1_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_0_1_1_3 = (Keyword)cGroup_4_0_1_1.eContents().get(3);
		private final Keyword cCommaKeyword_4_0_1_1_4 = (Keyword)cGroup_4_0_1_1.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4_0_1_1_5 = (Keyword)cGroup_4_0_1_1.eContents().get(5);
		private final Assignment cElseCodeAssignment_4_0_1_1_6 = (Assignment)cGroup_4_0_1_1.eContents().get(6);
		private final RuleCall cElseCodeCodeParserRuleCall_4_0_1_1_6_0 = (RuleCall)cElseCodeAssignment_4_0_1_1_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_0_1_1_7 = (Keyword)cGroup_4_0_1_1.eContents().get(7);
		private final Keyword cRightSquareBracketKeyword_4_0_1_1_8 = (Keyword)cGroup_4_0_1_1.eContents().get(8);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Keyword cExitWithKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1_1 = (Keyword)cGroup_4_1.eContents().get(1);
		private final Assignment cExitCodeAssignment_4_1_2 = (Assignment)cGroup_4_1.eContents().get(2);
		private final RuleCall cExitCodeCodeParserRuleCall_4_1_2_0 = (RuleCall)cExitCodeAssignment_4_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_1_3 = (Keyword)cGroup_4_1.eContents().get(3);
		
		//ifType:
		//	"if" "(" condition=BooleanContent ")" ("then" ("{" thenCode+=Code* "}" ("else" "{" elseCode+=Code* "}")? | "[" "{"
		//	thenCode+=Code* "}" "," "{" elseCode+=Code* "}" "]") | "exitWith" "{" exitCode+=Code* "}");
		@Override public ParserRule getRule() { return rule; }

		//"if" "(" condition=BooleanContent ")" ("then" ("{" thenCode+=Code* "}" ("else" "{" elseCode+=Code* "}")? | "[" "{"
		//thenCode+=Code* "}" "," "{" elseCode+=Code* "}" "]") | "exitWith" "{" exitCode+=Code* "}")
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//condition=BooleanContent
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }

		//BooleanContent
		public RuleCall getConditionBooleanContentParserRuleCall_2_0() { return cConditionBooleanContentParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//"then" ("{" thenCode+=Code* "}" ("else" "{" elseCode+=Code* "}")? | "[" "{" thenCode+=Code* "}" "," "{" elseCode+=Code*
		//"}" "]") | "exitWith" "{" exitCode+=Code* "}"
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//"then" ("{" thenCode+=Code* "}" ("else" "{" elseCode+=Code* "}")? | "[" "{" thenCode+=Code* "}" "," "{" elseCode+=Code*
		//"}" "]")
		public Group getGroup_4_0() { return cGroup_4_0; }

		//"then"
		public Keyword getThenKeyword_4_0_0() { return cThenKeyword_4_0_0; }

		//"{" thenCode+=Code* "}" ("else" "{" elseCode+=Code* "}")? | "[" "{" thenCode+=Code* "}" "," "{" elseCode+=Code* "}" "]"
		public Alternatives getAlternatives_4_0_1() { return cAlternatives_4_0_1; }

		//"{" thenCode+=Code* "}" ("else" "{" elseCode+=Code* "}")?
		public Group getGroup_4_0_1_0() { return cGroup_4_0_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_0_1_0_0() { return cLeftCurlyBracketKeyword_4_0_1_0_0; }

		//thenCode+=Code*
		public Assignment getThenCodeAssignment_4_0_1_0_1() { return cThenCodeAssignment_4_0_1_0_1; }

		//Code
		public RuleCall getThenCodeCodeParserRuleCall_4_0_1_0_1_0() { return cThenCodeCodeParserRuleCall_4_0_1_0_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4_0_1_0_2() { return cRightCurlyBracketKeyword_4_0_1_0_2; }

		//("else" "{" elseCode+=Code* "}")?
		public Group getGroup_4_0_1_0_3() { return cGroup_4_0_1_0_3; }

		//"else"
		public Keyword getElseKeyword_4_0_1_0_3_0() { return cElseKeyword_4_0_1_0_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_0_1_0_3_1() { return cLeftCurlyBracketKeyword_4_0_1_0_3_1; }

		//elseCode+=Code*
		public Assignment getElseCodeAssignment_4_0_1_0_3_2() { return cElseCodeAssignment_4_0_1_0_3_2; }

		//Code
		public RuleCall getElseCodeCodeParserRuleCall_4_0_1_0_3_2_0() { return cElseCodeCodeParserRuleCall_4_0_1_0_3_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4_0_1_0_3_3() { return cRightCurlyBracketKeyword_4_0_1_0_3_3; }

		//"[" "{" thenCode+=Code* "}" "," "{" elseCode+=Code* "}" "]"
		public Group getGroup_4_0_1_1() { return cGroup_4_0_1_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_4_0_1_1_0() { return cLeftSquareBracketKeyword_4_0_1_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_0_1_1_1() { return cLeftCurlyBracketKeyword_4_0_1_1_1; }

		//thenCode+=Code*
		public Assignment getThenCodeAssignment_4_0_1_1_2() { return cThenCodeAssignment_4_0_1_1_2; }

		//Code
		public RuleCall getThenCodeCodeParserRuleCall_4_0_1_1_2_0() { return cThenCodeCodeParserRuleCall_4_0_1_1_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4_0_1_1_3() { return cRightCurlyBracketKeyword_4_0_1_1_3; }

		//","
		public Keyword getCommaKeyword_4_0_1_1_4() { return cCommaKeyword_4_0_1_1_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_0_1_1_5() { return cLeftCurlyBracketKeyword_4_0_1_1_5; }

		//elseCode+=Code*
		public Assignment getElseCodeAssignment_4_0_1_1_6() { return cElseCodeAssignment_4_0_1_1_6; }

		//Code
		public RuleCall getElseCodeCodeParserRuleCall_4_0_1_1_6_0() { return cElseCodeCodeParserRuleCall_4_0_1_1_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4_0_1_1_7() { return cRightCurlyBracketKeyword_4_0_1_1_7; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4_0_1_1_8() { return cRightSquareBracketKeyword_4_0_1_1_8; }

		//"exitWith" "{" exitCode+=Code* "}"
		public Group getGroup_4_1() { return cGroup_4_1; }

		//"exitWith"
		public Keyword getExitWithKeyword_4_1_0() { return cExitWithKeyword_4_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_1_1() { return cLeftCurlyBracketKeyword_4_1_1; }

		//exitCode+=Code*
		public Assignment getExitCodeAssignment_4_1_2() { return cExitCodeAssignment_4_1_2; }

		//Code
		public RuleCall getExitCodeCodeParserRuleCall_4_1_2_0() { return cExitCodeCodeParserRuleCall_4_1_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4_1_3() { return cRightCurlyBracketKeyword_4_1_3; }
	}

	public class WhileTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WhileType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionBooleanContentParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cDoKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cLoopCodeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cLoopCodeCodeParserRuleCall_6_0 = (RuleCall)cLoopCodeAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//WhileType:
		//	"while" "{" condition=BooleanContent "}" "do" "{" loopCode+=Code* "}";
		@Override public ParserRule getRule() { return rule; }

		//"while" "{" condition=BooleanContent "}" "do" "{" loopCode+=Code* "}"
		public Group getGroup() { return cGroup; }

		//"while"
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//condition=BooleanContent
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }

		//BooleanContent
		public RuleCall getConditionBooleanContentParserRuleCall_2_0() { return cConditionBooleanContentParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }

		//"do"
		public Keyword getDoKeyword_4() { return cDoKeyword_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//loopCode+=Code*
		public Assignment getLoopCodeAssignment_6() { return cLoopCodeAssignment_6; }

		//Code
		public RuleCall getLoopCodeCodeParserRuleCall_6_0() { return cLoopCodeCodeParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class ForTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cBeginAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cBeginDeclarationParserRuleCall_1_0_2_0 = (RuleCall)cBeginAssignment_1_0_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_0_3 = (Keyword)cGroup_1_0.eContents().get(3);
		private final Keyword cCommaKeyword_1_0_4 = (Keyword)cGroup_1_0.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_1_0_5 = (Keyword)cGroup_1_0.eContents().get(5);
		private final Assignment cConditionAssignment_1_0_6 = (Assignment)cGroup_1_0.eContents().get(6);
		private final RuleCall cConditionBooleanContentParserRuleCall_1_0_6_0 = (RuleCall)cConditionAssignment_1_0_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_0_7 = (Keyword)cGroup_1_0.eContents().get(7);
		private final Keyword cCommaKeyword_1_0_8 = (Keyword)cGroup_1_0.eContents().get(8);
		private final Keyword cLeftCurlyBracketKeyword_1_0_9 = (Keyword)cGroup_1_0.eContents().get(9);
		private final Assignment cEndAssignment_1_0_10 = (Assignment)cGroup_1_0.eContents().get(10);
		private final RuleCall cEndDeclarationParserRuleCall_1_0_10_0 = (RuleCall)cEndAssignment_1_0_10.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_0_11 = (Keyword)cGroup_1_0.eContents().get(11);
		private final Keyword cRightSquareBracketKeyword_1_0_12 = (Keyword)cGroup_1_0.eContents().get(12);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final RuleCall cForVarDeclarationParserRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final Keyword cFromKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cFromAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cFromNUMBERTerminalRuleCall_1_1_2_0 = (RuleCall)cFromAssignment_1_1_2.eContents().get(0);
		private final Keyword cToKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		private final Assignment cToAssignment_1_1_4 = (Assignment)cGroup_1_1.eContents().get(4);
		private final RuleCall cToNUMBERTerminalRuleCall_1_1_4_0 = (RuleCall)cToAssignment_1_1_4.eContents().get(0);
		private final Group cGroup_1_1_5 = (Group)cGroup_1_1.eContents().get(5);
		private final Keyword cStepKeyword_1_1_5_0 = (Keyword)cGroup_1_1_5.eContents().get(0);
		private final Assignment cStepAssignment_1_1_5_1 = (Assignment)cGroup_1_1_5.eContents().get(1);
		private final RuleCall cStepNUMBERTerminalRuleCall_1_1_5_1_0 = (RuleCall)cStepAssignment_1_1_5_1.eContents().get(0);
		private final Keyword cDoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLoopCodeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLoopCodeCodeParserRuleCall_4_0 = (RuleCall)cLoopCodeAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ForType:
		//	"for" ("[" "{" begin=Declaration "}" "," "{" condition=BooleanContent "}" "," "{" end=Declaration "}" "]" |
		//	forVarDeclaration "from" from=NUMBER "to" to=NUMBER ("step" step=NUMBER)?) "do" "{" loopCode+=Code* "}";
		@Override public ParserRule getRule() { return rule; }

		//"for" ("[" "{" begin=Declaration "}" "," "{" condition=BooleanContent "}" "," "{" end=Declaration "}" "]" |
		//forVarDeclaration "from" from=NUMBER "to" to=NUMBER ("step" step=NUMBER)?) "do" "{" loopCode+=Code* "}"
		public Group getGroup() { return cGroup; }

		//"for"
		public Keyword getForKeyword_0() { return cForKeyword_0; }

		//"[" "{" begin=Declaration "}" "," "{" condition=BooleanContent "}" "," "{" end=Declaration "}" "]" | forVarDeclaration
		//"from" from=NUMBER "to" to=NUMBER ("step" step=NUMBER)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"[" "{" begin=Declaration "}" "," "{" condition=BooleanContent "}" "," "{" end=Declaration "}" "]"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0_0() { return cLeftSquareBracketKeyword_1_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_0_1() { return cLeftCurlyBracketKeyword_1_0_1; }

		//begin=Declaration
		public Assignment getBeginAssignment_1_0_2() { return cBeginAssignment_1_0_2; }

		//Declaration
		public RuleCall getBeginDeclarationParserRuleCall_1_0_2_0() { return cBeginDeclarationParserRuleCall_1_0_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_0_3() { return cRightCurlyBracketKeyword_1_0_3; }

		//","
		public Keyword getCommaKeyword_1_0_4() { return cCommaKeyword_1_0_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_0_5() { return cLeftCurlyBracketKeyword_1_0_5; }

		//condition=BooleanContent
		public Assignment getConditionAssignment_1_0_6() { return cConditionAssignment_1_0_6; }

		//BooleanContent
		public RuleCall getConditionBooleanContentParserRuleCall_1_0_6_0() { return cConditionBooleanContentParserRuleCall_1_0_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_0_7() { return cRightCurlyBracketKeyword_1_0_7; }

		//","
		public Keyword getCommaKeyword_1_0_8() { return cCommaKeyword_1_0_8; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_0_9() { return cLeftCurlyBracketKeyword_1_0_9; }

		//end=Declaration
		public Assignment getEndAssignment_1_0_10() { return cEndAssignment_1_0_10; }

		//Declaration
		public RuleCall getEndDeclarationParserRuleCall_1_0_10_0() { return cEndDeclarationParserRuleCall_1_0_10_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_0_11() { return cRightCurlyBracketKeyword_1_0_11; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_0_12() { return cRightSquareBracketKeyword_1_0_12; }

		//forVarDeclaration "from" from=NUMBER "to" to=NUMBER ("step" step=NUMBER)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//forVarDeclaration
		public RuleCall getForVarDeclarationParserRuleCall_1_1_0() { return cForVarDeclarationParserRuleCall_1_1_0; }

		//"from"
		public Keyword getFromKeyword_1_1_1() { return cFromKeyword_1_1_1; }

		//from=NUMBER
		public Assignment getFromAssignment_1_1_2() { return cFromAssignment_1_1_2; }

		//NUMBER
		public RuleCall getFromNUMBERTerminalRuleCall_1_1_2_0() { return cFromNUMBERTerminalRuleCall_1_1_2_0; }

		//"to"
		public Keyword getToKeyword_1_1_3() { return cToKeyword_1_1_3; }

		//to=NUMBER
		public Assignment getToAssignment_1_1_4() { return cToAssignment_1_1_4; }

		//NUMBER
		public RuleCall getToNUMBERTerminalRuleCall_1_1_4_0() { return cToNUMBERTerminalRuleCall_1_1_4_0; }

		//("step" step=NUMBER)?
		public Group getGroup_1_1_5() { return cGroup_1_1_5; }

		//"step"
		public Keyword getStepKeyword_1_1_5_0() { return cStepKeyword_1_1_5_0; }

		//step=NUMBER
		public Assignment getStepAssignment_1_1_5_1() { return cStepAssignment_1_1_5_1; }

		//NUMBER
		public RuleCall getStepNUMBERTerminalRuleCall_1_1_5_1_0() { return cStepNUMBERTerminalRuleCall_1_1_5_1_0; }

		//"do"
		public Keyword getDoKeyword_2() { return cDoKeyword_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//loopCode+=Code*
		public Assignment getLoopCodeAssignment_4() { return cLoopCodeAssignment_4; }

		//Code
		public RuleCall getLoopCodeCodeParserRuleCall_4_0() { return cLoopCodeCodeParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ForVarDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "forVarDeclaration");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//forVarDeclaration:
		//	name=STRING;
		@Override public ParserRule getRule() { return rule; }

		//name=STRING
		public Assignment getNameAssignment() { return cNameAssignment; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0() { return cNameSTRINGTerminalRuleCall_0; }
	}

	public class ForeachTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForeachType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCodeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCodeCodeParserRuleCall_1_0 = (RuleCall)cCodeAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cForEachKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cArrayAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final CrossReference cArrayDeclarationCrossReference_4_0_0 = (CrossReference)cArrayAssignment_4_0.eContents().get(0);
		private final RuleCall cArrayDeclarationIDTerminalRuleCall_4_0_0_1 = (RuleCall)cArrayDeclarationCrossReference_4_0_0.eContents().get(1);
		private final Assignment cArrayLiteralAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cArrayLiteralArrayLiteralParserRuleCall_4_1_0 = (RuleCall)cArrayLiteralAssignment_4_1.eContents().get(0);
		
		//ForeachType:
		//	"{" code+=Code* "}" "forEach" (array=[Declaration] | arrayLiteral=ArrayLiteral);
		@Override public ParserRule getRule() { return rule; }

		//"{" code+=Code* "}" "forEach" (array=[Declaration] | arrayLiteral=ArrayLiteral)
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//code+=Code*
		public Assignment getCodeAssignment_1() { return cCodeAssignment_1; }

		//Code
		public RuleCall getCodeCodeParserRuleCall_1_0() { return cCodeCodeParserRuleCall_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }

		//"forEach"
		public Keyword getForEachKeyword_3() { return cForEachKeyword_3; }

		//array=[Declaration] | arrayLiteral=ArrayLiteral
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//array=[Declaration]
		public Assignment getArrayAssignment_4_0() { return cArrayAssignment_4_0; }

		//[Declaration]
		public CrossReference getArrayDeclarationCrossReference_4_0_0() { return cArrayDeclarationCrossReference_4_0_0; }

		//ID
		public RuleCall getArrayDeclarationIDTerminalRuleCall_4_0_0_1() { return cArrayDeclarationIDTerminalRuleCall_4_0_0_1; }

		//arrayLiteral=ArrayLiteral
		public Assignment getArrayLiteralAssignment_4_1() { return cArrayLiteralAssignment_4_1; }

		//ArrayLiteral
		public RuleCall getArrayLiteralArrayLiteralParserRuleCall_4_1_0() { return cArrayLiteralArrayLiteralParserRuleCall_4_1_0; }
	}

	public class SwitchTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SwitchType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSwitchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVarAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cVarDeclarationCrossReference_2_0 = (CrossReference)cVarAssignment_2.eContents().get(0);
		private final RuleCall cVarDeclarationIDTerminalRuleCall_2_0_1 = (RuleCall)cVarDeclarationCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cDoKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCaseKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cValueAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cValueANYTHINGParserRuleCall_6_1_0 = (RuleCall)cValueAssignment_6_1.eContents().get(0);
		private final Keyword cColonKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Assignment cCaseCodeAssignment_6_4 = (Assignment)cGroup_6.eContents().get(4);
		private final RuleCall cCaseCodeCodeParserRuleCall_6_4_0 = (RuleCall)cCaseCodeAssignment_6_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_5 = (Keyword)cGroup_6.eContents().get(5);
		private final Keyword cSemicolonKeyword_6_6 = (Keyword)cGroup_6.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cDefaultKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cDefaultCodeAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cDefaultCodeCodeParserRuleCall_7_2_0 = (RuleCall)cDefaultCodeAssignment_7_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		private final Keyword cSemicolonKeyword_7_4 = (Keyword)cGroup_7.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//SwitchType:
		//	"switch" "(" var=[Declaration] ")" "do" "{" ("case" value+=ANYTHING ":" "{" caseCode+=Code* "}" ";")* ("default" "{"
		//	defaultCode+=Code* "}" ";")? "}";
		@Override public ParserRule getRule() { return rule; }

		//"switch" "(" var=[Declaration] ")" "do" "{" ("case" value+=ANYTHING ":" "{" caseCode+=Code* "}" ";")* ("default" "{"
		//defaultCode+=Code* "}" ";")? "}"
		public Group getGroup() { return cGroup; }

		//"switch"
		public Keyword getSwitchKeyword_0() { return cSwitchKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//var=[Declaration]
		public Assignment getVarAssignment_2() { return cVarAssignment_2; }

		//[Declaration]
		public CrossReference getVarDeclarationCrossReference_2_0() { return cVarDeclarationCrossReference_2_0; }

		//ID
		public RuleCall getVarDeclarationIDTerminalRuleCall_2_0_1() { return cVarDeclarationIDTerminalRuleCall_2_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//"do"
		public Keyword getDoKeyword_4() { return cDoKeyword_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//("case" value+=ANYTHING ":" "{" caseCode+=Code* "}" ";")*
		public Group getGroup_6() { return cGroup_6; }

		//"case"
		public Keyword getCaseKeyword_6_0() { return cCaseKeyword_6_0; }

		//value+=ANYTHING
		public Assignment getValueAssignment_6_1() { return cValueAssignment_6_1; }

		//ANYTHING
		public RuleCall getValueANYTHINGParserRuleCall_6_1_0() { return cValueANYTHINGParserRuleCall_6_1_0; }

		//":"
		public Keyword getColonKeyword_6_2() { return cColonKeyword_6_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6_3() { return cLeftCurlyBracketKeyword_6_3; }

		//caseCode+=Code*
		public Assignment getCaseCodeAssignment_6_4() { return cCaseCodeAssignment_6_4; }

		//Code
		public RuleCall getCaseCodeCodeParserRuleCall_6_4_0() { return cCaseCodeCodeParserRuleCall_6_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6_5() { return cRightCurlyBracketKeyword_6_5; }

		//";"
		public Keyword getSemicolonKeyword_6_6() { return cSemicolonKeyword_6_6; }

		//("default" "{" defaultCode+=Code* "}" ";")?
		public Group getGroup_7() { return cGroup_7; }

		//"default"
		public Keyword getDefaultKeyword_7_0() { return cDefaultKeyword_7_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7_1() { return cLeftCurlyBracketKeyword_7_1; }

		//defaultCode+=Code*
		public Assignment getDefaultCodeAssignment_7_2() { return cDefaultCodeAssignment_7_2; }

		//Code
		public RuleCall getDefaultCodeCodeParserRuleCall_7_2_0() { return cDefaultCodeCodeParserRuleCall_7_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7_3() { return cRightCurlyBracketKeyword_7_3; }

		//";"
		public Keyword getSemicolonKeyword_7_4() { return cSemicolonKeyword_7_4; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class MethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Method");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParamsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParamsArrayLiteralParserRuleCall_0_0 = (RuleCall)cParamsAssignment_0.eContents().get(0);
		private final Assignment cExecuteAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cExecuteSpawnKeyword_1_0 = (Keyword)cExecuteAssignment_1.eContents().get(0);
		private final Assignment cMethodNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMethodNameMethodNameParserRuleCall_2_0 = (RuleCall)cMethodNameAssignment_2.eContents().get(0);
		
		//Method:
		//	params=ArrayLiteral execute="spawn" methodName=MethodName;
		@Override public ParserRule getRule() { return rule; }

		//params=ArrayLiteral execute="spawn" methodName=MethodName
		public Group getGroup() { return cGroup; }

		//params=ArrayLiteral
		public Assignment getParamsAssignment_0() { return cParamsAssignment_0; }

		//ArrayLiteral
		public RuleCall getParamsArrayLiteralParserRuleCall_0_0() { return cParamsArrayLiteralParserRuleCall_0_0; }

		//execute="spawn"
		public Assignment getExecuteAssignment_1() { return cExecuteAssignment_1; }

		//"spawn"
		public Keyword getExecuteSpawnKeyword_1_0() { return cExecuteSpawnKeyword_1_0; }

		//methodName=MethodName
		public Assignment getMethodNameAssignment_2() { return cMethodNameAssignment_2; }

		//MethodName
		public RuleCall getMethodNameMethodNameParserRuleCall_2_0() { return cMethodNameMethodNameParserRuleCall_2_0; }
	}

	public class AbstractDeclarationReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractDeclarationReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cDeclarationAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cDeclarationDeclarationParserRuleCall_0_0 = (RuleCall)cDeclarationAssignment_0.eContents().get(0);
		private final Assignment cLoopDeclarationAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cLoopDeclarationForVarDeclarationParserRuleCall_1_0 = (RuleCall)cLoopDeclarationAssignment_1.eContents().get(0);
		
		////TODO	| object=Object
		//AbstractDeclarationReference returns Declaration:
		//	declaration=Declaration | loopDeclaration=forVarDeclaration;
		@Override public ParserRule getRule() { return rule; }

		//declaration=Declaration | loopDeclaration=forVarDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//declaration=Declaration
		public Assignment getDeclarationAssignment_0() { return cDeclarationAssignment_0; }

		//Declaration
		public RuleCall getDeclarationDeclarationParserRuleCall_0_0() { return cDeclarationDeclarationParserRuleCall_0_0; }

		//loopDeclaration=forVarDeclaration
		public Assignment getLoopDeclarationAssignment_1() { return cLoopDeclarationAssignment_1; }

		//forVarDeclaration
		public RuleCall getLoopDeclarationForVarDeclarationParserRuleCall_1_0() { return cLoopDeclarationForVarDeclarationParserRuleCall_1_0; }
	}

	public class OPERATORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OPERATOR");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAsteriskKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cSolidusKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cModKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cCircumflexAccentKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		////////////Types/////////////
		//OPERATOR:
		//	"+" | "-" | "*" | "/" | "mod" | "^";
		@Override public ParserRule getRule() { return rule; }

		//"+" | "-" | "*" | "/" | "mod" | "^"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }

		//"*"
		public Keyword getAsteriskKeyword_2() { return cAsteriskKeyword_2; }

		//"/"
		public Keyword getSolidusKeyword_3() { return cSolidusKeyword_3; }

		//"mod"
		public Keyword getModKeyword_4() { return cModKeyword_4; }

		//"^"
		public Keyword getCircumflexAccentKeyword_5() { return cCircumflexAccentKeyword_5; }
	}

	public class ObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Object");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Object:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class ANYTHINGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ANYTHING");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cBoolAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cBoolBooleanParserRuleCall_0_0 = (RuleCall)cBoolAssignment_0.eContents().get(0);
		private final Assignment cNumAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNumNUMBERTerminalRuleCall_1_0 = (RuleCall)cNumAssignment_1.eContents().get(0);
		private final Assignment cStringAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cStringSTRINGTerminalRuleCall_2_0 = (RuleCall)cStringAssignment_2.eContents().get(0);
		private final Assignment cReferenceAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final CrossReference cReferenceDeclarationCrossReference_3_0 = (CrossReference)cReferenceAssignment_3.eContents().get(0);
		private final RuleCall cReferenceDeclarationIDTerminalRuleCall_3_0_1 = (RuleCall)cReferenceDeclarationCrossReference_3_0.eContents().get(1);
		
		//ANYTHING:
		//	bool=Boolean | num=NUMBER | string=STRING | reference=[Declaration];
		@Override public ParserRule getRule() { return rule; }

		//bool=Boolean | num=NUMBER | string=STRING | reference=[Declaration]
		public Alternatives getAlternatives() { return cAlternatives; }

		//bool=Boolean
		public Assignment getBoolAssignment_0() { return cBoolAssignment_0; }

		//Boolean
		public RuleCall getBoolBooleanParserRuleCall_0_0() { return cBoolBooleanParserRuleCall_0_0; }

		//num=NUMBER
		public Assignment getNumAssignment_1() { return cNumAssignment_1; }

		//NUMBER
		public RuleCall getNumNUMBERTerminalRuleCall_1_0() { return cNumNUMBERTerminalRuleCall_1_0; }

		//string=STRING
		public Assignment getStringAssignment_2() { return cStringAssignment_2; }

		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_2_0() { return cStringSTRINGTerminalRuleCall_2_0; }

		//reference=[Declaration]
		public Assignment getReferenceAssignment_3() { return cReferenceAssignment_3; }

		//[Declaration]
		public CrossReference getReferenceDeclarationCrossReference_3_0() { return cReferenceDeclarationCrossReference_3_0; }

		//ID
		public RuleCall getReferenceDeclarationIDTerminalRuleCall_3_0_1() { return cReferenceDeclarationIDTerminalRuleCall_3_0_1; }
	}

	public class BooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Boolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cBoolAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Alternatives cBoolAlternatives_0_0 = (Alternatives)cBoolAssignment_0.eContents().get(0);
		private final Keyword cBoolTrueKeyword_0_0_0 = (Keyword)cBoolAlternatives_0_0.eContents().get(0);
		private final Keyword cBoolFalseKeyword_0_0_1 = (Keyword)cBoolAlternatives_0_0.eContents().get(1);
		private final Assignment cCommandAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cCommandBoolCommandParserRuleCall_1_0 = (RuleCall)cCommandAssignment_1.eContents().get(0);
		
		//Boolean:
		//	bool=("true" | "false") | command=BoolCommand;
		@Override public ParserRule getRule() { return rule; }

		//bool=("true" | "false") | command=BoolCommand
		public Alternatives getAlternatives() { return cAlternatives; }

		//bool=("true" | "false")
		public Assignment getBoolAssignment_0() { return cBoolAssignment_0; }

		//"true" | "false"
		public Alternatives getBoolAlternatives_0_0() { return cBoolAlternatives_0_0; }

		//"true"
		public Keyword getBoolTrueKeyword_0_0_0() { return cBoolTrueKeyword_0_0_0; }

		//"false"
		public Keyword getBoolFalseKeyword_0_0_1() { return cBoolFalseKeyword_0_0_1; }

		//command=BoolCommand
		public Assignment getCommandAssignment_1() { return cCommandAssignment_1; }

		//BoolCommand
		public RuleCall getCommandBoolCommandParserRuleCall_1_0() { return cCommandBoolCommandParserRuleCall_1_0; }
	}

	public class BooleanContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanContent");
		private final Assignment cBoolConAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cBoolConBracketContentParserRuleCall_0 = (RuleCall)cBoolConAssignment.eContents().get(0);
		
		//BooleanContent:
		//	boolCon=BracketContent;
		@Override public ParserRule getRule() { return rule; }

		//boolCon=BracketContent
		public Assignment getBoolConAssignment() { return cBoolConAssignment; }

		//BracketContent
		public RuleCall getBoolConBracketContentParserRuleCall_0() { return cBoolConBracketContentParserRuleCall_0; }
	}

	public class MethodNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MethodName");
		private final Assignment cRefAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cRefDeclarationCrossReference_0 = (CrossReference)cRefAssignment.eContents().get(0);
		private final RuleCall cRefDeclarationIDTerminalRuleCall_0_1 = (RuleCall)cRefDeclarationCrossReference_0.eContents().get(1);
		
		//MethodName:
		//	ref=[Declaration];
		@Override public ParserRule getRule() { return rule; }

		//ref=[Declaration]
		public Assignment getRefAssignment() { return cRefAssignment; }

		//[Declaration]
		public CrossReference getRefDeclarationCrossReference_0() { return cRefDeclarationCrossReference_0; }

		//ID
		public RuleCall getRefDeclarationIDTerminalRuleCall_0_1() { return cRefDeclarationIDTerminalRuleCall_0_1; }
	}

	public class BoolCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BoolCommand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cIsServerKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cIsPlayerKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//////////Commands//////////
		/// *
		// * TODO
		// * Rechenoperationen bei Deklarationen evtl nicht immer passend (Arrays)
		// * / BoolCommand:
		//	"isServer" | "isPlayer";
		@Override public ParserRule getRule() { return rule; }

		//"isServer" | "isPlayer"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"isServer"
		public Keyword getIsServerKeyword_0() { return cIsServerKeyword_0; }

		//"isPlayer"
		public Keyword getIsPlayerKeyword_1() { return cIsPlayerKeyword_1; }
	}
	
	
	private final ModelElements pModel;
	private final CodeElements pCode;
	private final DeclarationElements pDeclaration;
	private final BracketContentElements pBracketContent;
	private final DecContentElements pDecContent;
	private final VarContentElements pVarContent;
	private final ArrayLiteralElements pArrayLiteral;
	private final ControlStructureElements pControlStructure;
	private final IfTypeElements pIfType;
	private final WhileTypeElements pWhileType;
	private final ForTypeElements pForType;
	private final ForVarDeclarationElements pForVarDeclaration;
	private final ForeachTypeElements pForeachType;
	private final SwitchTypeElements pSwitchType;
	private final MethodElements pMethod;
	private final AbstractDeclarationReferenceElements pAbstractDeclarationReference;
	private final OPERATORElements pOPERATOR;
	private final ObjectElements pObject;
	private final ANYTHINGElements pANYTHING;
	private final BooleanElements pBoolean;
	private final BooleanContentElements pBooleanContent;
	private final MethodNameElements pMethodName;
	private final TerminalRule tCOMPARATOR;
	private final TerminalRule tNUMBER;
	private final TerminalRule tID;
	private final TerminalRule tSTRING;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	private final BoolCommandElements pBoolCommand;
	
	private final Grammar grammar;

	@Inject
	public SQFGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pModel = new ModelElements();
		this.pCode = new CodeElements();
		this.pDeclaration = new DeclarationElements();
		this.pBracketContent = new BracketContentElements();
		this.pDecContent = new DecContentElements();
		this.pVarContent = new VarContentElements();
		this.pArrayLiteral = new ArrayLiteralElements();
		this.pControlStructure = new ControlStructureElements();
		this.pIfType = new IfTypeElements();
		this.pWhileType = new WhileTypeElements();
		this.pForType = new ForTypeElements();
		this.pForVarDeclaration = new ForVarDeclarationElements();
		this.pForeachType = new ForeachTypeElements();
		this.pSwitchType = new SwitchTypeElements();
		this.pMethod = new MethodElements();
		this.pAbstractDeclarationReference = new AbstractDeclarationReferenceElements();
		this.pOPERATOR = new OPERATORElements();
		this.pObject = new ObjectElements();
		this.pANYTHING = new ANYTHINGElements();
		this.pBoolean = new BooleanElements();
		this.pBooleanContent = new BooleanContentElements();
		this.pMethodName = new MethodNameElements();
		this.tCOMPARATOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COMPARATOR");
		this.tNUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NUMBER");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS");
		this.pBoolCommand = new BoolCommandElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("raven.SQF".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Model:
	//	elements+=Code*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Code:
	//	dec=Declaration ";" | control=ControlStructure ";" | method=Method ";";
	public CodeElements getCodeAccess() {
		return pCode;
	}
	
	public ParserRule getCodeRule() {
		return getCodeAccess().getRule();
	}

	//Declaration:
	//	name=ID "=" brCon=BracketContent;
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}

	//BracketContent:
	//	decCon=DecContent (comp+=COMPARATOR content+=DecContent)*;
	public BracketContentElements getBracketContentAccess() {
		return pBracketContent;
	}
	
	public ParserRule getBracketContentRule() {
		return getBracketContentAccess().getRule();
	}

	//DecContent:
	//	neg=("!" | "not")? singleContent=VarContent (op+=OPERATOR nextCon+=VarContent)*;
	public DecContentElements getDecContentAccess() {
		return pDecContent;
	}
	
	public ParserRule getDecContentRule() {
		return getDecContentAccess().getRule();
	}

	////TODO	| method = Method
	//VarContent:
	//	unOP=("+" | "-")? num=NUMBER | string=STRING | unOP=("+" | "-")? (reference=[Declaration] | forEachVar="_x")
	//	(sel="select" index=NUMBER)? //TODO: Implement objects
	//	| "+"? arrayContent=ArrayLiteral (execute="call" methodName=MethodName)? | unOP=("+" | "-")? embraced="("
	//	embrCon=BracketContent ")" | bool=Boolean | param="_this" ("select" index=NUMBER)?;
	public VarContentElements getVarContentAccess() {
		return pVarContent;
	}
	
	public ParserRule getVarContentRule() {
		return getVarContentAccess().getRule();
	}

	//ArrayLiteral:
	//	con="[" (content=VarContent ("," nextContent+=VarContent)*)? "]";
	public ArrayLiteralElements getArrayLiteralAccess() {
		return pArrayLiteral;
	}
	
	public ParserRule getArrayLiteralRule() {
		return getArrayLiteralAccess().getRule();
	}

	//ControlStructure:
	//	ifStat=ifType | whileStat=WhileType | forStat=ForType | forEachStat=ForeachType | switchStat=SwitchType;
	public ControlStructureElements getControlStructureAccess() {
		return pControlStructure;
	}
	
	public ParserRule getControlStructureRule() {
		return getControlStructureAccess().getRule();
	}

	//ifType:
	//	"if" "(" condition=BooleanContent ")" ("then" ("{" thenCode+=Code* "}" ("else" "{" elseCode+=Code* "}")? | "[" "{"
	//	thenCode+=Code* "}" "," "{" elseCode+=Code* "}" "]") | "exitWith" "{" exitCode+=Code* "}");
	public IfTypeElements getIfTypeAccess() {
		return pIfType;
	}
	
	public ParserRule getIfTypeRule() {
		return getIfTypeAccess().getRule();
	}

	//WhileType:
	//	"while" "{" condition=BooleanContent "}" "do" "{" loopCode+=Code* "}";
	public WhileTypeElements getWhileTypeAccess() {
		return pWhileType;
	}
	
	public ParserRule getWhileTypeRule() {
		return getWhileTypeAccess().getRule();
	}

	//ForType:
	//	"for" ("[" "{" begin=Declaration "}" "," "{" condition=BooleanContent "}" "," "{" end=Declaration "}" "]" |
	//	forVarDeclaration "from" from=NUMBER "to" to=NUMBER ("step" step=NUMBER)?) "do" "{" loopCode+=Code* "}";
	public ForTypeElements getForTypeAccess() {
		return pForType;
	}
	
	public ParserRule getForTypeRule() {
		return getForTypeAccess().getRule();
	}

	//forVarDeclaration:
	//	name=STRING;
	public ForVarDeclarationElements getForVarDeclarationAccess() {
		return pForVarDeclaration;
	}
	
	public ParserRule getForVarDeclarationRule() {
		return getForVarDeclarationAccess().getRule();
	}

	//ForeachType:
	//	"{" code+=Code* "}" "forEach" (array=[Declaration] | arrayLiteral=ArrayLiteral);
	public ForeachTypeElements getForeachTypeAccess() {
		return pForeachType;
	}
	
	public ParserRule getForeachTypeRule() {
		return getForeachTypeAccess().getRule();
	}

	//SwitchType:
	//	"switch" "(" var=[Declaration] ")" "do" "{" ("case" value+=ANYTHING ":" "{" caseCode+=Code* "}" ";")* ("default" "{"
	//	defaultCode+=Code* "}" ";")? "}";
	public SwitchTypeElements getSwitchTypeAccess() {
		return pSwitchType;
	}
	
	public ParserRule getSwitchTypeRule() {
		return getSwitchTypeAccess().getRule();
	}

	//Method:
	//	params=ArrayLiteral execute="spawn" methodName=MethodName;
	public MethodElements getMethodAccess() {
		return pMethod;
	}
	
	public ParserRule getMethodRule() {
		return getMethodAccess().getRule();
	}

	////TODO	| object=Object
	//AbstractDeclarationReference returns Declaration:
	//	declaration=Declaration | loopDeclaration=forVarDeclaration;
	public AbstractDeclarationReferenceElements getAbstractDeclarationReferenceAccess() {
		return pAbstractDeclarationReference;
	}
	
	public ParserRule getAbstractDeclarationReferenceRule() {
		return getAbstractDeclarationReferenceAccess().getRule();
	}

	////////////Types/////////////
	//OPERATOR:
	//	"+" | "-" | "*" | "/" | "mod" | "^";
	public OPERATORElements getOPERATORAccess() {
		return pOPERATOR;
	}
	
	public ParserRule getOPERATORRule() {
		return getOPERATORAccess().getRule();
	}

	//Object:
	//	name=ID;
	public ObjectElements getObjectAccess() {
		return pObject;
	}
	
	public ParserRule getObjectRule() {
		return getObjectAccess().getRule();
	}

	//ANYTHING:
	//	bool=Boolean | num=NUMBER | string=STRING | reference=[Declaration];
	public ANYTHINGElements getANYTHINGAccess() {
		return pANYTHING;
	}
	
	public ParserRule getANYTHINGRule() {
		return getANYTHINGAccess().getRule();
	}

	//Boolean:
	//	bool=("true" | "false") | command=BoolCommand;
	public BooleanElements getBooleanAccess() {
		return pBoolean;
	}
	
	public ParserRule getBooleanRule() {
		return getBooleanAccess().getRule();
	}

	//BooleanContent:
	//	boolCon=BracketContent;
	public BooleanContentElements getBooleanContentAccess() {
		return pBooleanContent;
	}
	
	public ParserRule getBooleanContentRule() {
		return getBooleanContentAccess().getRule();
	}

	//MethodName:
	//	ref=[Declaration];
	public MethodNameElements getMethodNameAccess() {
		return pMethodName;
	}
	
	public ParserRule getMethodNameRule() {
		return getMethodNameAccess().getRule();
	}

	//terminal COMPARATOR:
	//	"==" | "<" | ">" | "<=" | ">=" | "!=" | "isEqualTo";
	public TerminalRule getCOMPARATORRule() {
		return tCOMPARATOR;
	} 

	//terminal NUMBER:
	//	"0".."9"+ ("." "0".."9"+)?;
	public TerminalRule getNUMBERRule() {
		return tNUMBER;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return tID;
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return tWS;
	} 

	//////////Commands//////////
	/// *
	// * TODO
	// * Rechenoperationen bei Deklarationen evtl nicht immer passend (Arrays)
	// * / BoolCommand:
	//	"isServer" | "isPlayer";
	public BoolCommandElements getBoolCommandAccess() {
		return pBoolCommand;
	}
	
	public ParserRule getBoolCommandRule() {
		return getBoolCommandAccess().getRule();
	}
}
